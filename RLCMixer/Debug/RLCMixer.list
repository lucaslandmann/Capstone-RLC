
RLCMixer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123c8  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0801263c  0801263c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801273c  0801273c  00014034  2**0
                  CONTENTS
  4 .ARM          00000008  0801273c  0801273c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012744  08012744  00014034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012744  08012744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012748  08012748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  0801274c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003ab30  20000034  08012780  00014034  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2003ab64  08012780  00014b64  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003204f  00000000  00000000  0001406a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004db3  00000000  00000000  000460b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad0  00000000  00000000  0004ae70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002196  00000000  00000000  0004d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047332  00000000  00000000  0004fad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035e29  00000000  00000000  00096e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bcb43  00000000  00000000  000ccc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00289774  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be5c  00000000  00000000  002897b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00295614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000034 	.word	0x20000034
 8000290:	00000000 	.word	0x00000000
 8000294:	08012624 	.word	0x08012624

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000038 	.word	0x20000038
 80002b0:	08012624 	.word	0x08012624

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Do_Comb0>:

struct delayInit delayChannel[6] = {0};


float Do_Comb0(float inSample, int channelNum)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005d6:	6038      	str	r0, [r7, #0]
	delayChannel[2].cf_g = 0.8;
 80005d8:	4b46      	ldr	r3, [pc, #280]	@ (80006f4 <Do_Comb0+0x128>)
 80005da:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80005de:	f603 53e8 	addw	r3, r3, #3560	@ 0xde8
 80005e2:	4a45      	ldr	r2, [pc, #276]	@ (80006f8 <Do_Comb0+0x12c>)
 80005e4:	601a      	str	r2, [r3, #0]

	float readback = delayChannel[channelNum].cfbuf[delayChannel[channelNum].cf_p];
 80005e6:	4a43      	ldr	r2, [pc, #268]	@ (80006f4 <Do_Comb0+0x128>)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80005ee:	fb01 f303 	mul.w	r3, r1, r3
 80005f2:	4413      	add	r3, r2
 80005f4:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80005f8:	3320      	adds	r3, #32
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	493d      	ldr	r1, [pc, #244]	@ (80006f4 <Do_Comb0+0x128>)
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 8000604:	fb00 f202 	mul.w	r2, r0, r2
 8000608:	4413      	add	r3, r2
 800060a:	3302      	adds	r3, #2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	60fb      	str	r3, [r7, #12]
	float new = readback*(delayChannel[channelNum].cf_g) + inSample;
 8000614:	4a37      	ldr	r2, [pc, #220]	@ (80006f4 <Do_Comb0+0x128>)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 800061c:	fb01 f303 	mul.w	r3, r1, r3
 8000620:	4413      	add	r3, r2
 8000622:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000626:	3318      	adds	r3, #24
 8000628:	ed93 7a00 	vldr	s14, [r3]
 800062c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000634:	ed97 7a01 	vldr	s14, [r7, #4]
 8000638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800063c:	edc7 7a02 	vstr	s15, [r7, #8]
	delayChannel[channelNum].cfbuf[delayChannel[channelNum].cf_p] = new;
 8000640:	4a2c      	ldr	r2, [pc, #176]	@ (80006f4 <Do_Comb0+0x128>)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000648:	fb01 f303 	mul.w	r3, r1, r3
 800064c:	4413      	add	r3, r2
 800064e:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000652:	3320      	adds	r3, #32
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4927      	ldr	r1, [pc, #156]	@ (80006f4 <Do_Comb0+0x128>)
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 800065e:	fb00 f202 	mul.w	r2, r0, r2
 8000662:	4413      	add	r3, r2
 8000664:	3302      	adds	r3, #2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	601a      	str	r2, [r3, #0]
	delayChannel[channelNum].cf_p++;
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <Do_Comb0+0x128>)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	4413      	add	r3, r2
 800067c:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000680:	3320      	adds	r3, #32
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	491b      	ldr	r1, [pc, #108]	@ (80006f4 <Do_Comb0+0x128>)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 800068e:	fb00 f303 	mul.w	r3, r0, r3
 8000692:	440b      	add	r3, r1
 8000694:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000698:	3320      	adds	r3, #32
 800069a:	601a      	str	r2, [r3, #0]
	if (delayChannel[channelNum].cf_p==delayChannel[channelNum].cf_lim)
 800069c:	4a15      	ldr	r2, [pc, #84]	@ (80006f4 <Do_Comb0+0x128>)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80006a4:	fb01 f303 	mul.w	r3, r1, r3
 80006a8:	4413      	add	r3, r2
 80006aa:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80006ae:	3320      	adds	r3, #32
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4910      	ldr	r1, [pc, #64]	@ (80006f4 <Do_Comb0+0x128>)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 80006ba:	fb00 f303 	mul.w	r3, r0, r3
 80006be:	440b      	add	r3, r1
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d10b      	bne.n	80006de <Do_Comb0+0x112>
	{
		delayChannel[channelNum].cf_p = 0;
 80006c6:	4a0b      	ldr	r2, [pc, #44]	@ (80006f4 <Do_Comb0+0x128>)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80006ce:	fb01 f303 	mul.w	r3, r1, r3
 80006d2:	4413      	add	r3, r2
 80006d4:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80006d8:	3320      	adds	r3, #32
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
	}
	return readback;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	ee07 3a90 	vmov	s15, r3

}
 80006e4:	eeb0 0a67 	vmov.f32	s0, s15
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000d84 	.word	0x20000d84
 80006f8:	3f4ccccd 	.word	0x3f4ccccd

080006fc <Do_Allpass0>:
float Do_Allpass0(float inSample, int channelNum)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	ed87 0a01 	vstr	s0, [r7, #4]
 8000706:	6038      	str	r0, [r7, #0]
	delayChannel[2].ap_g = 0.7;
 8000708:	4b4e      	ldr	r3, [pc, #312]	@ (8000844 <Do_Allpass0+0x148>)
 800070a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800070e:	f603 53ec 	addw	r3, r3, #3564	@ 0xdec
 8000712:	4a4d      	ldr	r2, [pc, #308]	@ (8000848 <Do_Allpass0+0x14c>)
 8000714:	601a      	str	r2, [r3, #0]

	float readback = delayChannel[channelNum].apbuf[delayChannel[channelNum].ap_p];
 8000716:	4a4b      	ldr	r2, [pc, #300]	@ (8000844 <Do_Allpass0+0x148>)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 800071e:	fb01 f303 	mul.w	r3, r1, r3
 8000722:	4413      	add	r3, r2
 8000724:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000728:	3324      	adds	r3, #36	@ 0x24
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4945      	ldr	r1, [pc, #276]	@ (8000844 <Do_Allpass0+0x148>)
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 8000734:	fb00 f202 	mul.w	r2, r0, r2
 8000738:	4413      	add	r3, r2
 800073a:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 800073e:	3306      	adds	r3, #6
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	440b      	add	r3, r1
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	60fb      	str	r3, [r7, #12]
	readback += (-delayChannel[channelNum].ap_g) * inSample;
 8000748:	4a3e      	ldr	r2, [pc, #248]	@ (8000844 <Do_Allpass0+0x148>)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000750:	fb01 f303 	mul.w	r3, r1, r3
 8000754:	4413      	add	r3, r2
 8000756:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800075a:	331c      	adds	r3, #28
 800075c:	edd3 7a00 	vldr	s15, [r3]
 8000760:	eeb1 7a67 	vneg.f32	s14, s15
 8000764:	edd7 7a01 	vldr	s15, [r7, #4]
 8000768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000774:	edc7 7a03 	vstr	s15, [r7, #12]
	float new = readback*delayChannel[0].ap_g + inSample;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <Do_Allpass0+0x148>)
 800077a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800077e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8000782:	ed93 7a00 	vldr	s14, [r3]
 8000786:	edd7 7a03 	vldr	s15, [r7, #12]
 800078a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800078e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000796:	edc7 7a02 	vstr	s15, [r7, #8]
	delayChannel[channelNum].apbuf[delayChannel[channelNum].ap_p] = new;
 800079a:	4a2a      	ldr	r2, [pc, #168]	@ (8000844 <Do_Allpass0+0x148>)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80007a2:	fb01 f303 	mul.w	r3, r1, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007ac:	3324      	adds	r3, #36	@ 0x24
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4924      	ldr	r1, [pc, #144]	@ (8000844 <Do_Allpass0+0x148>)
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 80007b8:	fb00 f202 	mul.w	r2, r0, r2
 80007bc:	4413      	add	r3, r2
 80007be:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 80007c2:	3306      	adds	r3, #6
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	601a      	str	r2, [r3, #0]
	delayChannel[channelNum].ap_p++;
 80007cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000844 <Do_Allpass0+0x148>)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80007d4:	fb01 f303 	mul.w	r3, r1, r3
 80007d8:	4413      	add	r3, r2
 80007da:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007de:	3324      	adds	r3, #36	@ 0x24
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	4917      	ldr	r1, [pc, #92]	@ (8000844 <Do_Allpass0+0x148>)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 80007ec:	fb00 f303 	mul.w	r3, r0, r3
 80007f0:	440b      	add	r3, r1
 80007f2:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007f6:	3324      	adds	r3, #36	@ 0x24
 80007f8:	601a      	str	r2, [r3, #0]
	if (delayChannel[channelNum].ap_p == delayChannel[0].ap_lim)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <Do_Allpass0+0x148>)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000802:	fb01 f303 	mul.w	r3, r1, r3
 8000806:	4413      	add	r3, r2
 8000808:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800080c:	3324      	adds	r3, #36	@ 0x24
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <Do_Allpass0+0x148>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	d10b      	bne.n	8000830 <Do_Allpass0+0x134>
	{
		delayChannel[channelNum].ap_p = 0;
 8000818:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <Do_Allpass0+0x148>)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	4413      	add	r3, r2
 8000826:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800082a:	3324      	adds	r3, #36	@ 0x24
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
	}
	return readback;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	ee07 3a90 	vmov	s15, r3

}
 8000836:	eeb0 0a67 	vmov.f32	s0, s15
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000d84 	.word	0x20000d84
 8000848:	3f333333 	.word	0x3f333333

0800084c <Do_Delay>:
float Do_Delay(float inSample, int channelNum) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	ed87 0a01 	vstr	s0, [r7, #4]
 8000856:	6038      	str	r0, [r7, #0]
	float newsample = (Do_Comb0(inSample, channelNum));
 8000858:	6838      	ldr	r0, [r7, #0]
 800085a:	ed97 0a01 	vldr	s0, [r7, #4]
 800085e:	f7ff feb5 	bl	80005cc <Do_Comb0>
 8000862:	ed87 0a03 	vstr	s0, [r7, #12]
	newsample = Do_Allpass0(newsample, channelNum);
 8000866:	6838      	ldr	r0, [r7, #0]
 8000868:	ed97 0a03 	vldr	s0, [r7, #12]
 800086c:	f7ff ff46 	bl	80006fc <Do_Allpass0>
 8000870:	ed87 0a03 	vstr	s0, [r7, #12]
	return newsample;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	ee07 3a90 	vmov	s15, r3
}
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	ed2d 8b02 	vpush	{d8}
 800088a:	b08c      	sub	sp, #48	@ 0x30
 800088c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

  //code credits start 'yetanotherelectronicschannel'
  delayChannel[0].cf_lim = (int)(time*CB);
 800088e:	4bb5      	ldr	r3, [pc, #724]	@ (8000b64 <main+0x2e0>)
 8000890:	edd3 7a00 	vldr	s15, [r3]
 8000894:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000b68 <main+0x2e4>
 8000898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800089c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008a4:	ee17 2a90 	vmov	r2, s15
 80008a8:	4bb0      	ldr	r3, [pc, #704]	@ (8000b6c <main+0x2e8>)
 80008aa:	601a      	str	r2, [r3, #0]
  delayChannel[0].ap_lim = (int)(time*AP);
 80008ac:	4bad      	ldr	r3, [pc, #692]	@ (8000b64 <main+0x2e0>)
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8000b70 <main+0x2ec>
 80008b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c2:	ee17 2a90 	vmov	r2, s15
 80008c6:	4ba9      	ldr	r3, [pc, #676]	@ (8000b6c <main+0x2e8>)
 80008c8:	605a      	str	r2, [r3, #4]

  delayChannel[1].cf_lim = (int)(time*CB);
 80008ca:	4ba6      	ldr	r3, [pc, #664]	@ (8000b64 <main+0x2e0>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8000b68 <main+0x2e4>
 80008d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e0:	ee17 2a90 	vmov	r2, s15
 80008e4:	4ba1      	ldr	r3, [pc, #644]	@ (8000b6c <main+0x2e8>)
 80008e6:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80008ea:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
  delayChannel[1].ap_lim = (int)(time*AP);
 80008ee:	4b9d      	ldr	r3, [pc, #628]	@ (8000b64 <main+0x2e0>)
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8000b70 <main+0x2ec>
 80008f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000904:	ee17 2a90 	vmov	r2, s15
 8000908:	4b98      	ldr	r3, [pc, #608]	@ (8000b6c <main+0x2e8>)
 800090a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800090e:	f8c3 24ac 	str.w	r2, [r3, #1196]	@ 0x4ac

  delayChannel[2].cf_lim = (int)(time*CB);
 8000912:	4b94      	ldr	r3, [pc, #592]	@ (8000b64 <main+0x2e0>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8000b68 <main+0x2e4>
 800091c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000920:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000928:	ee17 2a90 	vmov	r2, s15
 800092c:	4b8f      	ldr	r3, [pc, #572]	@ (8000b6c <main+0x2e8>)
 800092e:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000932:	f8c3 2950 	str.w	r2, [r3, #2384]	@ 0x950
  delayChannel[2].ap_lim = (int)(time*AP);
 8000936:	4b8b      	ldr	r3, [pc, #556]	@ (8000b64 <main+0x2e0>)
 8000938:	edd3 7a00 	vldr	s15, [r3]
 800093c:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8000b70 <main+0x2ec>
 8000940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000944:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800094c:	ee17 2a90 	vmov	r2, s15
 8000950:	4b86      	ldr	r3, [pc, #536]	@ (8000b6c <main+0x2e8>)
 8000952:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000956:	f8c3 2954 	str.w	r2, [r3, #2388]	@ 0x954

  delayChannel[3].cf_lim = (int)(time*CB);
 800095a:	4b82      	ldr	r3, [pc, #520]	@ (8000b64 <main+0x2e0>)
 800095c:	edd3 7a00 	vldr	s15, [r3]
 8000960:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8000b68 <main+0x2e4>
 8000964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800096c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000970:	ee17 2a90 	vmov	r2, s15
 8000974:	4b7d      	ldr	r3, [pc, #500]	@ (8000b6c <main+0x2e8>)
 8000976:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800097a:	f8c3 2df8 	str.w	r2, [r3, #3576]	@ 0xdf8
  delayChannel[3].ap_lim = (int)(time*AP);
 800097e:	4b79      	ldr	r3, [pc, #484]	@ (8000b64 <main+0x2e0>)
 8000980:	edd3 7a00 	vldr	s15, [r3]
 8000984:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8000b70 <main+0x2ec>
 8000988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000994:	ee17 2a90 	vmov	r2, s15
 8000998:	4b74      	ldr	r3, [pc, #464]	@ (8000b6c <main+0x2e8>)
 800099a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800099e:	f8c3 2dfc 	str.w	r2, [r3, #3580]	@ 0xdfc

  delayChannel[4].cf_lim = (int)(time*CB);
 80009a2:	4b70      	ldr	r3, [pc, #448]	@ (8000b64 <main+0x2e0>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8000b68 <main+0x2e4>
 80009ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b8:	ee17 2a90 	vmov	r2, s15
 80009bc:	4b6b      	ldr	r3, [pc, #428]	@ (8000b6c <main+0x2e8>)
 80009be:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 80009c2:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
  delayChannel[4].ap_lim = (int)(time*AP);
 80009c6:	4b67      	ldr	r3, [pc, #412]	@ (8000b64 <main+0x2e0>)
 80009c8:	edd3 7a00 	vldr	s15, [r3]
 80009cc:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8000b70 <main+0x2ec>
 80009d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009dc:	ee17 2a90 	vmov	r2, s15
 80009e0:	4b62      	ldr	r3, [pc, #392]	@ (8000b6c <main+0x2e8>)
 80009e2:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 80009e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  delayChannel[5].cf_lim = (int)(time*CB);
 80009ea:	4b5e      	ldr	r3, [pc, #376]	@ (8000b64 <main+0x2e0>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000b68 <main+0x2e4>
 80009f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a00:	ee17 2a90 	vmov	r2, s15
 8000a04:	4b59      	ldr	r3, [pc, #356]	@ (8000b6c <main+0x2e8>)
 8000a06:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a0a:	f8c3 2748 	str.w	r2, [r3, #1864]	@ 0x748
  delayChannel[5].ap_lim = (int)(time*AP);
 8000a0e:	4b55      	ldr	r3, [pc, #340]	@ (8000b64 <main+0x2e0>)
 8000a10:	edd3 7a00 	vldr	s15, [r3]
 8000a14:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000b70 <main+0x2ec>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a24:	ee17 2a90 	vmov	r2, s15
 8000a28:	4b50      	ldr	r3, [pc, #320]	@ (8000b6c <main+0x2e8>)
 8000a2a:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a2e:	f8c3 274c 	str.w	r2, [r3, #1868]	@ 0x74c

  delayChannel[0].cf_p = 0;
 8000a32:	4b4e      	ldr	r3, [pc, #312]	@ (8000b6c <main+0x2e8>)
 8000a34:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c2 34a0 	str.w	r3, [r2, #1184]	@ 0x4a0
  delayChannel[1].cf_p = 0;
 8000a40:	4b4a      	ldr	r3, [pc, #296]	@ (8000b6c <main+0x2e8>)
 8000a42:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000a46:	461a      	mov	r2, r3
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c2 3948 	str.w	r3, [r2, #2376]	@ 0x948
  delayChannel[2].cf_p = 0;
 8000a4e:	4b47      	ldr	r3, [pc, #284]	@ (8000b6c <main+0x2e8>)
 8000a50:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8000a54:	461a      	mov	r2, r3
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c2 3df0 	str.w	r3, [r2, #3568]	@ 0xdf0
  delayChannel[3].cf_p = 0;
 8000a5c:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <main+0x2e8>)
 8000a5e:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8000a62:	461a      	mov	r2, r3
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c2 3298 	str.w	r3, [r2, #664]	@ 0x298
  delayChannel[4].cf_p = 0;
 8000a6a:	4b40      	ldr	r3, [pc, #256]	@ (8000b6c <main+0x2e8>)
 8000a6c:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a70:	461a      	mov	r2, r3
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c2 3740 	str.w	r3, [r2, #1856]	@ 0x740
  delayChannel[5].cf_p = 0;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	@ (8000b6c <main+0x2e8>)
 8000a7a:	f503 332c 	add.w	r3, r3, #176128	@ 0x2b000
 8000a7e:	461a      	mov	r2, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c2 3be8 	str.w	r3, [r2, #3048]	@ 0xbe8

  delayChannel[0].ap_p = 0;
 8000a86:	4b39      	ldr	r3, [pc, #228]	@ (8000b6c <main+0x2e8>)
 8000a88:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c2 34a4 	str.w	r3, [r2, #1188]	@ 0x4a4
  delayChannel[1].ap_p = 0;
 8000a94:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <main+0x2e8>)
 8000a96:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c2 394c 	str.w	r3, [r2, #2380]	@ 0x94c
  delayChannel[2].ap_p = 0;
 8000aa2:	4b32      	ldr	r3, [pc, #200]	@ (8000b6c <main+0x2e8>)
 8000aa4:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c2 3df4 	str.w	r3, [r2, #3572]	@ 0xdf4
  delayChannel[3].ap_p = 0;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <main+0x2e8>)
 8000ab2:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c2 329c 	str.w	r3, [r2, #668]	@ 0x29c
  delayChannel[4].ap_p = 0;
 8000abe:	4b2b      	ldr	r3, [pc, #172]	@ (8000b6c <main+0x2e8>)
 8000ac0:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c2 3744 	str.w	r3, [r2, #1860]	@ 0x744
  delayChannel[5].ap_p = 0;
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <main+0x2e8>)
 8000ace:	f503 332c 	add.w	r3, r3, #176128	@ 0x2b000
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c2 3bec 	str.w	r3, [r2, #3052]	@ 0xbec
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f002 fd29 	bl	8003530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 fa27 	bl	8000f30 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae2:	f000 fa91 	bl	8001008 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ae6:	f000 fac6 	bl	8001076 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aea:	f001 f827 	bl	8001b3c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000aee:	f000 fcb5 	bl	800145c <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 8000af2:	f000 fc75 	bl	80013e0 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 8000af6:	f000 fce9 	bl	80014cc <MX_HSPI1_Init>
  MX_I2C2_Init();
 8000afa:	f000 fd65 	bl	80015c8 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8000afe:	f000 fda3 	bl	8001648 <MX_ICACHE_Init>
  MX_LTDC_Init();
 8000b02:	f000 fdb5 	bl	8001670 <MX_LTDC_Init>
  MX_RTC_Init();
 8000b06:	f000 fe33 	bl	8001770 <MX_RTC_Init>
  MX_TIM3_Init();
 8000b0a:	f000 feeb 	bl	80018e4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000b0e:	f000 fac1 	bl	8001094 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b12:	f000 ff99 	bl	8001a48 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000b16:	f000 fe79 	bl	800180c <MX_SAI2_Init>
  MX_ADC4_Init();
 8000b1a:	f000 fbe5 	bl	80012e8 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000b1e:	f000 fd13 	bl	8001548 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000b22:	f000 ffdd 	bl	8001ae0 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 8000b26:	f000 ff3f 	bl	80019a8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //Begins DMA transfer for first ADC
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1));
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	4911      	ldr	r1, [pc, #68]	@ (8000b74 <main+0x2f0>)
 8000b2e:	4812      	ldr	r0, [pc, #72]	@ (8000b78 <main+0x2f4>)
 8000b30:	f003 fc4a 	bl	80043c8 <HAL_ADC_Start_DMA>
  //begins DMA transfer for fourth ADC
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4));
 8000b34:	2202      	movs	r2, #2
 8000b36:	4911      	ldr	r1, [pc, #68]	@ (8000b7c <main+0x2f8>)
 8000b38:	4811      	ldr	r0, [pc, #68]	@ (8000b80 <main+0x2fc>)
 8000b3a:	f003 fc45 	bl	80043c8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000b3e:	4811      	ldr	r0, [pc, #68]	@ (8000b84 <main+0x300>)
 8000b40:	f00e fefa 	bl	800f938 <HAL_TIM_Base_Start>
  //Config ADC/DAC

  HAL_Delay(2000);
 8000b44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b48:	f002 fdb8 	bl	80036bc <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2104      	movs	r1, #4
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <main+0x304>)
 8000b52:	f007 fbd3 	bl	80082fc <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000b56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b5a:	f002 fdaf 	bl	80036bc <HAL_Delay>

  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b62:	e024      	b.n	8000bae <main+0x32a>
 8000b64:	20000004 	.word	0x20000004
 8000b68:	454b2000 	.word	0x454b2000
 8000b6c:	20000d84 	.word	0x20000d84
 8000b70:	43f00000 	.word	0x43f00000
 8000b74:	2002c974 	.word	0x2002c974
 8000b78:	20000050 	.word	0x20000050
 8000b7c:	2002c98c 	.word	0x2002c98c
 8000b80:	200000dc 	.word	0x200000dc
 8000b84:	200007c0 	.word	0x200007c0
 8000b88:	42021000 	.word	0x42021000
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4a9a      	ldr	r2, [pc, #616]	@ (8000dfc <main+0x578>)
 8000b92:	441a      	add	r2, r3
 8000b94:	2364      	movs	r3, #100	@ 0x64
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2302      	movs	r3, #2
 8000b9a:	2190      	movs	r1, #144	@ 0x90
 8000b9c:	4898      	ldr	r0, [pc, #608]	@ (8000e00 <main+0x57c>)
 8000b9e:	f007 fcb7 	bl	8008510 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000ba2:	200a      	movs	r0, #10
 8000ba4:	f002 fd8a 	bl	80036bc <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	3301      	adds	r3, #1
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb0:	2b1d      	cmp	r3, #29
 8000bb2:	d9eb      	bls.n	8000b8c <main+0x308>
  }

  HAL_Delay(100);
 8000bb4:	2064      	movs	r0, #100	@ 0x64
 8000bb6:	f002 fd81 	bl	80036bc <HAL_Delay>
  //Begins DMA transfer for PCM6260
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData));
 8000bba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bbe:	4991      	ldr	r1, [pc, #580]	@ (8000e04 <main+0x580>)
 8000bc0:	4891      	ldr	r0, [pc, #580]	@ (8000e08 <main+0x584>)
 8000bc2:	f00e fb2f 	bl	800f224 <HAL_SAI_Receive_DMA>
  //Begins DMA transfer for CS4334k-QZ
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacDataBuffer, DIM(dacDataBuffer));
 8000bc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bca:	4990      	ldr	r1, [pc, #576]	@ (8000e0c <main+0x588>)
 8000bcc:	4890      	ldr	r0, [pc, #576]	@ (8000e10 <main+0x58c>)
 8000bce:	f00e fa27 	bl	800f020 <HAL_SAI_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t heartBeatTick = HAL_GetTick() + 1000;
 8000bd2:	f002 fd67 	bl	80036a4 <HAL_GetTick>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000bdc:	623b      	str	r3, [r7, #32]
  uint16_t index = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	83fb      	strh	r3, [r7, #30]
  int channelNumber = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	  if(HAL_GetTick() >= heartBeatTick)
 8000be6:	f002 fd5d 	bl	80036a4 <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d809      	bhi.n	8000c06 <main+0x382>
	  {
		 heartBeatTick = HAL_GetTick() + 1000;
 8000bf2:	f002 fd57 	bl	80036a4 <HAL_GetTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000bfc:	623b      	str	r3, [r7, #32]
		 HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4884      	ldr	r0, [pc, #528]	@ (8000e14 <main+0x590>)
 8000c02:	f007 fb93 	bl	800832c <HAL_GPIO_TogglePin>
	  }
	  //Slider/Pot Processing
	  volumeLRPoll(index);
 8000c06:	8bfb      	ldrh	r3, [r7, #30]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f8e3 	bl	8001dd4 <volumeLRPoll>
	  index++;
 8000c0e:	8bfb      	ldrh	r3, [r7, #30]
 8000c10:	3301      	adds	r3, #1
 8000c12:	83fb      	strh	r3, [r7, #30]


	  if(adcReady)
 8000c14:	4b80      	ldr	r3, [pc, #512]	@ (8000e18 <main+0x594>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d068      	beq.n	8000cf0 <main+0x46c>
	  {
		  //Loads sample data into Structs
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	83bb      	strh	r3, [r7, #28]
 8000c22:	e05f      	b.n	8000ce4 <main+0x460>
		  {
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	837b      	strh	r3, [r7, #26]
 8000c28:	e055      	b.n	8000cd6 <main+0x452>
		        {
		            channels[channel].channelData[sample] = signExtend24((uint32_t)(adcData[channelCount*sample + channel]));
 8000c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8000e1c <main+0x598>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	8b7b      	ldrh	r3, [r7, #26]
 8000c30:	00d9      	lsls	r1, r3, #3
 8000c32:	8bbb      	ldrh	r3, [r7, #28]
 8000c34:	440b      	add	r3, r1
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	8bbd      	ldrh	r5, [r7, #28]
 8000c3e:	8b7c      	ldrh	r4, [r7, #26]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 f8b1 	bl	8001da8 <signExtend24>
 8000c46:	4602      	mov	r2, r0
 8000c48:	4975      	ldr	r1, [pc, #468]	@ (8000e20 <main+0x59c>)
 8000c4a:	f240 230e 	movw	r3, #526	@ 0x20e
 8000c4e:	fb05 f303 	mul.w	r3, r5, r3
 8000c52:	4423      	add	r3, r4
 8000c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		            if(channel == 1){
 8000c58:	8bbb      	ldrh	r3, [r7, #28]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d138      	bne.n	8000cd0 <main+0x44c>
		            channels[channel].channelData[sample] = (int32_t)((1.0f-wet)*((float)channels[1].channelData[sample])
 8000c5e:	4b71      	ldr	r3, [pc, #452]	@ (8000e24 <main+0x5a0>)
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c6c:	8b7b      	ldrh	r3, [r7, #26]
 8000c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8000e20 <main+0x59c>)
 8000c70:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c80:	ee27 8a27 	vmul.f32	s16, s14, s15
							    + wet*Do_Delay((float)channels[1].channelData[sample], 1));
 8000c84:	8b7b      	ldrh	r3, [r7, #26]
 8000c86:	4a66      	ldr	r2, [pc, #408]	@ (8000e20 <main+0x59c>)
 8000c88:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c98:	2001      	movs	r0, #1
 8000c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c9e:	f7ff fdd5 	bl	800084c <Do_Delay>
 8000ca2:	eeb0 7a40 	vmov.f32	s14, s0
 8000ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8000e24 <main+0x5a0>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb0:	ee78 7a27 	vadd.f32	s15, s16, s15
		            channels[channel].channelData[sample] = (int32_t)((1.0f-wet)*((float)channels[1].channelData[sample])
 8000cb4:	8bba      	ldrh	r2, [r7, #28]
 8000cb6:	8b7b      	ldrh	r3, [r7, #26]
 8000cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cbc:	ee17 4a90 	vmov	r4, s15
 8000cc0:	4957      	ldr	r1, [pc, #348]	@ (8000e20 <main+0x59c>)
 8000cc2:	f240 200e 	movw	r0, #526	@ 0x20e
 8000cc6:	fb00 f202 	mul.w	r2, r0, r2
 8000cca:	4413      	add	r3, r2
 8000ccc:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000cd0:	8b7b      	ldrh	r3, [r7, #26]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	837b      	strh	r3, [r7, #26]
 8000cd6:	8b7b      	ldrh	r3, [r7, #26]
 8000cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cdc:	d3a5      	bcc.n	8000c2a <main+0x3a6>
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000cde:	8bbb      	ldrh	r3, [r7, #28]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	83bb      	strh	r3, [r7, #28]
 8000ce4:	8bbb      	ldrh	r3, [r7, #28]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d99c      	bls.n	8000c24 <main+0x3a0>
		            }
		        }
		  }
		  //TODO: apply effects
		  //TODO: mix
		  adcReady = false;
 8000cea:	4b4b      	ldr	r3, [pc, #300]	@ (8000e18 <main+0x594>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
	  }
	  if(dacReady)
 8000cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e28 <main+0x5a4>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f43f af75 	beq.w	8000be6 <main+0x362>
	  {
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	833b      	strh	r3, [r7, #24]
 8000d00:	e103      	b.n	8000f0a <main+0x686>
		  {
			  int32_t mixedSignalLeft = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
			  int32_t mixedSignalRight = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	81fb      	strh	r3, [r7, #14]
 8000d0e:	e0d8      	b.n	8000ec2 <main+0x63e>
			  {
				  float digGain = (float)((channels[currChannel].volumeRunner / 8) >>2) / 512.0f;
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	4a43      	ldr	r2, [pc, #268]	@ (8000e20 <main+0x59c>)
 8000d14:	f640 0138 	movw	r1, #2104	@ 0x838
 8000d18:	fb01 f303 	mul.w	r3, r1, r3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	f603 0312 	addw	r3, r3, #2066	@ 0x812
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	ee07 3a90 	vmov	s15, r3
 8000d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d34:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8000e2c <main+0x5a8>
 8000d38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d3c:	edc7 7a01 	vstr	s15, [r7, #4]
				  digGain = digGain * maxGain;
 8000d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d44:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4c:	edc7 7a01 	vstr	s15, [r7, #4]

				  uint16_t pan = channels[0].lr >> 2;
 8000d50:	4b33      	ldr	r3, [pc, #204]	@ (8000e20 <main+0x59c>)
 8000d52:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	@ 0x814
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	807b      	strh	r3, [r7, #2]
				  if(pan >= 512)
 8000d5a:	887b      	ldrh	r3, [r7, #2]
 8000d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d60:	d366      	bcc.n	8000e30 <main+0x5ac>
				  {
					  mixedSignalLeft += (int32_t)((float)channels[currChannel].channelData[sample] * digGain);
 8000d62:	89fa      	ldrh	r2, [r7, #14]
 8000d64:	8b3b      	ldrh	r3, [r7, #24]
 8000d66:	492e      	ldr	r1, [pc, #184]	@ (8000e20 <main+0x59c>)
 8000d68:	f240 200e 	movw	r0, #526	@ 0x20e
 8000d6c:	fb00 f202 	mul.w	r2, r0, r2
 8000d70:	4413      	add	r3, r2
 8000d72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d76:	ee07 3a90 	vmov	s15, r3
 8000d7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8a:	ee17 2a90 	vmov	r2, s15
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	4413      	add	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]
					  mixedSignalRight += (int32_t)((float)channels[currChannel].channelData[sample] * digGain) * (1.0f - ((float)(pan - 512) / 512.0f));
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d9e:	89fa      	ldrh	r2, [r7, #14]
 8000da0:	8b3b      	ldrh	r3, [r7, #24]
 8000da2:	491f      	ldr	r1, [pc, #124]	@ (8000e20 <main+0x59c>)
 8000da4:	f240 200e 	movw	r0, #526	@ 0x20e
 8000da8:	fb00 f202 	mul.w	r2, r0, r2
 8000dac:	4413      	add	r3, r2
 8000dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000dd8:	eddf 5a14 	vldr	s11, [pc, #80]	@ 8000e2c <main+0x5a8>
 8000ddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000de0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8000de4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000df4:	ee17 3a90 	vmov	r3, s15
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	e05f      	b.n	8000ebc <main+0x638>
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	2000035c 	.word	0x2000035c
 8000e04:	2002c990 	.word	0x2002c990
 8000e08:	20000574 	.word	0x20000574
 8000e0c:	20034990 	.word	0x20034990
 8000e10:	200004dc 	.word	0x200004dc
 8000e14:	42020c00 	.word	0x42020c00
 8000e18:	2003ab50 	.word	0x2003ab50
 8000e1c:	2003ab54 	.word	0x2003ab54
 8000e20:	20036990 	.word	0x20036990
 8000e24:	20000000 	.word	0x20000000
 8000e28:	2003ab51 	.word	0x2003ab51
 8000e2c:	44000000 	.word	0x44000000
				  }
				  else
				  {
					  mixedSignalLeft += (int32_t)((float)channels[currChannel].channelData[sample] * digGain) * ((float)pan / 512.0f);
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	ee07 3a90 	vmov	s15, r3
 8000e36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e3a:	89fa      	ldrh	r2, [r7, #14]
 8000e3c:	8b3b      	ldrh	r3, [r7, #24]
 8000e3e:	4937      	ldr	r1, [pc, #220]	@ (8000f1c <main+0x698>)
 8000e40:	f240 200e 	movw	r0, #526	@ 0x20e
 8000e44:	fb00 f202 	mul.w	r2, r0, r2
 8000e48:	4413      	add	r3, r2
 8000e4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8000e70:	eddf 5a2b 	vldr	s11, [pc, #172]	@ 8000f20 <main+0x69c>
 8000e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e84:	ee17 3a90 	vmov	r3, s15
 8000e88:	617b      	str	r3, [r7, #20]
					  mixedSignalRight += (int32_t)((float)channels[currChannel].channelData[sample] * digGain);
 8000e8a:	89fa      	ldrh	r2, [r7, #14]
 8000e8c:	8b3b      	ldrh	r3, [r7, #24]
 8000e8e:	4923      	ldr	r1, [pc, #140]	@ (8000f1c <main+0x698>)
 8000e90:	f240 200e 	movw	r0, #526	@ 0x20e
 8000e94:	fb00 f202 	mul.w	r2, r0, r2
 8000e98:	4413      	add	r3, r2
 8000e9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb2:	ee17 2a90 	vmov	r2, s15
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4413      	add	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	81fb      	strh	r3, [r7, #14]
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	f67f af23 	bls.w	8000d10 <main+0x48c>
				  }
			  }
			  mixedSignalLeft = mixedSignalLeft / 6;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	4a15      	ldr	r2, [pc, #84]	@ (8000f24 <main+0x6a0>)
 8000ece:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed2:	17db      	asrs	r3, r3, #31
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
			  mixedSignalRight = mixedSignalRight / 6;
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <main+0x6a0>)
 8000edc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee0:	17db      	asrs	r3, r3, #31
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	613b      	str	r3, [r7, #16]
			  dacData[(sample * 2)] =  mixedSignalLeft;//channels[2].channelData[sample];
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <main+0x6a4>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	8b3b      	ldrh	r3, [r7, #24]
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4413      	add	r3, r2
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	601a      	str	r2, [r3, #0]
			  dacData[(sample * 2) + 1] = mixedSignalRight;//channels[2].channelData[sample];
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <main+0x6a4>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	8b3b      	ldrh	r3, [r7, #24]
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	3304      	adds	r3, #4
 8000efe:	4413      	add	r3, r2
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	601a      	str	r2, [r3, #0]
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000f04:	8b3b      	ldrh	r3, [r7, #24]
 8000f06:	3301      	adds	r3, #1
 8000f08:	833b      	strh	r3, [r7, #24]
 8000f0a:	8b3b      	ldrh	r3, [r7, #24]
 8000f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f10:	f4ff aef7 	bcc.w	8000d02 <main+0x47e>
		  }
		  dacReady = false;
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <main+0x6a8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() >= heartBeatTick)
 8000f1a:	e664      	b.n	8000be6 <main+0x362>
 8000f1c:	20036990 	.word	0x20036990
 8000f20:	44000000 	.word	0x44000000
 8000f24:	2aaaaaab 	.word	0x2aaaaaab
 8000f28:	2003ab58 	.word	0x2003ab58
 8000f2c:	2003ab51 	.word	0x2003ab51

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b09e      	sub	sp, #120	@ 0x78
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	2260      	movs	r2, #96	@ 0x60
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f011 fb43 	bl	80125ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f54:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000f58:	f009 f91e 	bl	800a198 <HAL_PWREx_ControlVoltageScaling>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000f62:	f001 f913 	bl	800218c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f66:	f009 f907 	bl	800a178 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <SystemClock_Config+0xd4>)
 8000f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f70:	4a24      	ldr	r2, [pc, #144]	@ (8001004 <SystemClock_Config+0xd4>)
 8000f72:	f023 0318 	bic.w	r3, r3, #24
 8000f76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f84:	2381      	movs	r3, #129	@ 0x81
 8000f86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f96:	2303      	movs	r3, #3
 8000f98:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f009 fa14 	bl	800a3ec <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fca:	f001 f8df 	bl	800218c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	231f      	movs	r3, #31
 8000fd0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2103      	movs	r1, #3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00a f8da 	bl	800b1a4 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ff6:	f001 f8c9 	bl	800218c <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3778      	adds	r7, #120	@ 0x78
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	46020c00 	.word	0x46020c00

08001008 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0b8      	sub	sp, #224	@ 0xe0
 800100c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	22e0      	movs	r2, #224	@ 0xe0
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f011 fad8 	bl	80125ca <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 800101a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800101e:	f04f 0301 	mov.w	r3, #1
 8001022:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 800102c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8001034:	2303      	movs	r3, #3
 8001036:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 800103c:	230c      	movs	r3, #12
 800103e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8001044:	2303      	movs	r3, #3
 8001046:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8001048:	2304      	movs	r3, #4
 800104a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 800104c:	230c      	movs	r3, #12
 800104e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8001050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8001056:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4618      	mov	r0, r3
 8001060:	f00a fc70 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 800106a:	f001 f88f 	bl	800218c <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	37e0      	adds	r7, #224	@ 0xe0
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800107a:	f009 f979 	bl	800a370 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800107e:	2002      	movs	r0, #2
 8001080:	f009 f916 	bl	800a2b0 <HAL_PWREx_ConfigSupply>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800108a:	f001 f87f 	bl	800218c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f011 fa92 	bl	80125ca <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010a6:	4b82      	ldr	r3, [pc, #520]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010a8:	4a82      	ldr	r2, [pc, #520]	@ (80012b4 <MX_ADC1_Init+0x220>)
 80010aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010ac:	4b80      	ldr	r3, [pc, #512]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b2:	4b7f      	ldr	r3, [pc, #508]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010b4:	2204      	movs	r2, #4
 80010b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80010b8:	4b7d      	ldr	r3, [pc, #500]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010be:	4b7c      	ldr	r3, [pc, #496]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010c4:	4b7a      	ldr	r3, [pc, #488]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ca:	4b79      	ldr	r3, [pc, #484]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010cc:	2204      	movs	r2, #4
 80010ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80010d0:	4b77      	ldr	r3, [pc, #476]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010d6:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 12;
 80010de:	4b74      	ldr	r3, [pc, #464]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010e0:	220c      	movs	r2, #12
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010e4:	4b72      	ldr	r3, [pc, #456]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80010ec:	4b70      	ldr	r3, [pc, #448]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010ee:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80010f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010f4:	4b6e      	ldr	r3, [pc, #440]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010fc:	4b6c      	ldr	r3, [pc, #432]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001104:	4b6a      	ldr	r3, [pc, #424]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 8001106:	2200      	movs	r2, #0
 8001108:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800110a:	4b69      	ldr	r3, [pc, #420]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 800110c:	2200      	movs	r2, #0
 800110e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001110:	4b67      	ldr	r3, [pc, #412]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 8001112:	2200      	movs	r2, #0
 8001114:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001116:	4b66      	ldr	r3, [pc, #408]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 8001118:	2203      	movs	r2, #3
 800111a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800111c:	4b64      	ldr	r3, [pc, #400]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001124:	4862      	ldr	r0, [pc, #392]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 8001126:	f002 fe67 	bl	8003df8 <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001130:	f001 f82c 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001134:	4b60      	ldr	r3, [pc, #384]	@ (80012b8 <MX_ADC1_Init+0x224>)
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001138:	2306      	movs	r3, #6
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001140:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001144:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001146:	2304      	movs	r3, #4
 8001148:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	4857      	ldr	r0, [pc, #348]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 8001154:	f003 fd7e 	bl	8004c54 <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800115e:	f001 f815 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001162:	4b56      	ldr	r3, [pc, #344]	@ (80012bc <MX_ADC1_Init+0x228>)
 8001164:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001166:	230c      	movs	r3, #12
 8001168:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	4850      	ldr	r0, [pc, #320]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 8001170:	f003 fd70 	bl	8004c54 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800117a:	f001 f807 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800117e:	4b50      	ldr	r3, [pc, #320]	@ (80012c0 <MX_ADC1_Init+0x22c>)
 8001180:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001182:	2312      	movs	r3, #18
 8001184:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4849      	ldr	r0, [pc, #292]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 800118c:	f003 fd62 	bl	8004c54 <HAL_ADC_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001196:	f000 fff9 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800119a:	4b4a      	ldr	r3, [pc, #296]	@ (80012c4 <MX_ADC1_Init+0x230>)
 800119c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800119e:	2318      	movs	r3, #24
 80011a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4619      	mov	r1, r3
 80011a6:	4842      	ldr	r0, [pc, #264]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80011a8:	f003 fd54 	bl	8004c54 <HAL_ADC_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 80011b2:	f000 ffeb 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <MX_ADC1_Init+0x234>)
 80011b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80011ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	483a      	ldr	r0, [pc, #232]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80011c6:	f003 fd45 	bl	8004c54 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 80011d0:	f000 ffdc 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011d4:	4b3d      	ldr	r3, [pc, #244]	@ (80012cc <MX_ADC1_Init+0x238>)
 80011d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80011d8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80011dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	4619      	mov	r1, r3
 80011e2:	4833      	ldr	r0, [pc, #204]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 80011e4:	f003 fd36 	bl	8004c54 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 80011ee:	f000 ffcd 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011f2:	4b37      	ldr	r3, [pc, #220]	@ (80012d0 <MX_ADC1_Init+0x23c>)
 80011f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80011f6:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80011fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	482b      	ldr	r0, [pc, #172]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 8001202:	f003 fd27 	bl	8004c54 <HAL_ADC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 800120c:	f000 ffbe 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001210:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <MX_ADC1_Init+0x240>)
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001214:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001218:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4824      	ldr	r0, [pc, #144]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 8001220:	f003 fd18 	bl	8004c54 <HAL_ADC_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 800122a:	f000 ffaf 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800122e:	4b2a      	ldr	r3, [pc, #168]	@ (80012d8 <MX_ADC1_Init+0x244>)
 8001230:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001232:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	481c      	ldr	r0, [pc, #112]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 800123e:	f003 fd09 	bl	8004c54 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8001248:	f000 ffa0 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800124c:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <MX_ADC1_Init+0x248>)
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001250:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001254:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	4815      	ldr	r0, [pc, #84]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 800125c:	f003 fcfa 	bl	8004c54 <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8001266:	f000 ff91 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800126a:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <MX_ADC1_Init+0x24c>)
 800126c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800126e:	f240 2306 	movw	r3, #518	@ 0x206
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	480d      	ldr	r0, [pc, #52]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 800127a:	f003 fceb 	bl	8004c54 <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8001284:	f000 ff82 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <MX_ADC1_Init+0x250>)
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800128c:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8001290:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4806      	ldr	r0, [pc, #24]	@ (80012b0 <MX_ADC1_Init+0x21c>)
 8001298:	f003 fcdc 	bl	8004c54 <HAL_ADC_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 80012a2:	f000 ff73 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	3720      	adds	r7, #32
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000050 	.word	0x20000050
 80012b4:	42028000 	.word	0x42028000
 80012b8:	04000002 	.word	0x04000002
 80012bc:	08000004 	.word	0x08000004
 80012c0:	0c000008 	.word	0x0c000008
 80012c4:	10000010 	.word	0x10000010
 80012c8:	14000020 	.word	0x14000020
 80012cc:	1c000080 	.word	0x1c000080
 80012d0:	20000100 	.word	0x20000100
 80012d4:	2a000400 	.word	0x2a000400
 80012d8:	2e000800 	.word	0x2e000800
 80012dc:	32001000 	.word	0x32001000
 80012e0:	3e008000 	.word	0x3e008000
 80012e4:	42010000 	.word	0x42010000

080012e8 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ee:	463b      	mov	r3, r7
 80012f0:	2220      	movs	r2, #32
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f011 f968 	bl	80125ca <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80012fa:	4b35      	ldr	r3, [pc, #212]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 80012fc:	4a35      	ldr	r2, [pc, #212]	@ (80013d4 <MX_ADC4_Init+0xec>)
 80012fe:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001300:	4b33      	ldr	r3, [pc, #204]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001306:	4b32      	ldr	r3, [pc, #200]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001308:	2204      	movs	r2, #4
 800130a:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130c:	4b30      	ldr	r3, [pc, #192]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8001312:	4b2f      	ldr	r3, [pc, #188]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001314:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001318:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131a:	4b2d      	ldr	r3, [pc, #180]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 800131c:	2204      	movs	r2, #4
 800131e:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8001320:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001326:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001328:	2200      	movs	r2, #0
 800132a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800132c:	4b28      	ldr	r3, [pc, #160]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8001334:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001336:	2202      	movs	r2, #2
 8001338:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC4_EXTERNALTRIG_T15_TRGO;
 800133a:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 800133c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8001340:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001342:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001344:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001348:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800134a:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8001352:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001354:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001358:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 800135c:	2200      	movs	r2, #0
 800135e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001362:	2200      	movs	r2, #0
 8001364:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001368:	2200      	movs	r2, #0
 800136a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001374:	4816      	ldr	r0, [pc, #88]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 8001376:	f002 fd3f 	bl	8003df8 <HAL_ADC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC4_Init+0x9c>
  {
    Error_Handler();
 8001380:	f000 ff04 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MX_ADC4_Init+0xf0>)
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001390:	2304      	movs	r3, #4
 8001392:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 800139e:	f003 fc59 	bl	8004c54 <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC4_Init+0xc4>
  {
    Error_Handler();
 80013a8:	f000 fef0 	bl	800218c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <MX_ADC4_Init+0xf4>)
 80013ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 80013b0:	2304      	movs	r3, #4
 80013b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_ADC4_Init+0xe8>)
 80013ba:	f003 fc4b 	bl	8004c54 <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC4_Init+0xe0>
  {
    Error_Handler();
 80013c4:	f000 fee2 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000dc 	.word	0x200000dc
 80013d4:	46021000 	.word	0x46021000
 80013d8:	1c000080 	.word	0x1c000080
 80013dc:	20000100 	.word	0x20000100

080013e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_DMA2D_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <MX_DMA2D_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_DMA2D_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_DMA2D_Init+0x74>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_DMA2D_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <MX_DMA2D_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_DMA2D_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001410:	2201      	movs	r2, #1
 8001412:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <MX_DMA2D_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800142c:	4809      	ldr	r0, [pc, #36]	@ (8001454 <MX_DMA2D_Init+0x74>)
 800142e:	f005 fb9b 	bl	8006b68 <HAL_DMA2D_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001438:	f000 fea8 	bl	800218c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800143c:	2101      	movs	r1, #1
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001440:	f005 fbf4 	bl	8006c2c <HAL_DMA2D_ConfigLayer>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 800144a:	f000 fe9f 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000294 	.word	0x20000294
 8001458:	4002b000 	.word	0x4002b000

0800145c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001462:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <MX_GPDMA1_Init+0x6c>)
 8001464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001468:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <MX_GPDMA1_Init+0x6c>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <MX_GPDMA1_Init+0x6c>)
 8001474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	201d      	movs	r0, #29
 8001486:	f004 fc11 	bl	8005cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800148a:	201d      	movs	r0, #29
 800148c:	f004 fc28 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	201e      	movs	r0, #30
 8001496:	f004 fc09 	bl	8005cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 800149a:	201e      	movs	r0, #30
 800149c:	f004 fc20 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	201f      	movs	r0, #31
 80014a6:	f004 fc01 	bl	8005cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 80014aa:	201f      	movs	r0, #31
 80014ac:	f004 fc18 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2020      	movs	r0, #32
 80014b6:	f004 fbf9 	bl	8005cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80014ba:	2020      	movs	r0, #32
 80014bc:	f004 fc10 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	46020c00 	.word	0x46020c00

080014cc <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_HSPI1_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <MX_HSPI1_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_HSPI1_Init+0x74>)
 80014d8:	2204      	movs	r2, #4
 80014da:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <MX_HSPI1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_HSPI1_Init+0x74>)
 80014e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014e8:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_HSPI1_Init+0x74>)
 80014ec:	221a      	movs	r2, #26
 80014ee:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <MX_HSPI1_Init+0x74>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80014f6:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_HSPI1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <MX_HSPI1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_HSPI1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <MX_HSPI1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_HSPI1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <MX_HSPI1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_HSPI1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <MX_HSPI1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_HSPI1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <MX_HSPI1_Init+0x74>)
 800152e:	f010 fbe5 	bl	8011cfc <HAL_XSPI_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8001538:	f000 fe28 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200002fc 	.word	0x200002fc
 8001544:	420d3400 	.word	0x420d3400

08001548 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800154c:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MX_I2C1_Init+0x74>)
 800154e:	4a1c      	ldr	r2, [pc, #112]	@ (80015c0 <MX_I2C1_Init+0x78>)
 8001550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8001552:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001554:	4a1b      	ldr	r2, [pc, #108]	@ (80015c4 <MX_I2C1_Init+0x7c>)
 8001556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001558:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <MX_I2C1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001560:	2201      	movs	r2, #1
 8001562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_I2C1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001570:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001582:	480e      	ldr	r0, [pc, #56]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001584:	f006 ff28 	bl	80083d8 <HAL_I2C_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800158e:	f000 fdfd 	bl	800218c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001592:	2100      	movs	r1, #0
 8001594:	4809      	ldr	r0, [pc, #36]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001596:	f008 f8b3 	bl	8009700 <HAL_I2CEx_ConfigAnalogFilter>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015a0:	f000 fdf4 	bl	800218c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_I2C1_Init+0x74>)
 80015a8:	f008 f8f5 	bl	8009796 <HAL_I2CEx_ConfigDigitalFilter>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f000 fdeb 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000035c 	.word	0x2000035c
 80015c0:	40005400 	.word	0x40005400
 80015c4:	20a0c4df 	.word	0x20a0c4df

080015c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <MX_I2C2_Init+0x74>)
 80015ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001640 <MX_I2C2_Init+0x78>)
 80015d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <MX_I2C2_Init+0x74>)
 80015d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001644 <MX_I2C2_Init+0x7c>)
 80015d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015d8:	4b18      	ldr	r3, [pc, #96]	@ (800163c <MX_I2C2_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015de:	4b17      	ldr	r3, [pc, #92]	@ (800163c <MX_I2C2_Init+0x74>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e4:	4b15      	ldr	r3, [pc, #84]	@ (800163c <MX_I2C2_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <MX_I2C2_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <MX_I2C2_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <MX_I2C2_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <MX_I2C2_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001602:	480e      	ldr	r0, [pc, #56]	@ (800163c <MX_I2C2_Init+0x74>)
 8001604:	f006 fee8 	bl	80083d8 <HAL_I2C_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800160e:	f000 fdbd 	bl	800218c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001612:	2100      	movs	r1, #0
 8001614:	4809      	ldr	r0, [pc, #36]	@ (800163c <MX_I2C2_Init+0x74>)
 8001616:	f008 f873 	bl	8009700 <HAL_I2CEx_ConfigAnalogFilter>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001620:	f000 fdb4 	bl	800218c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001624:	2100      	movs	r1, #0
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_I2C2_Init+0x74>)
 8001628:	f008 f8b5 	bl	8009796 <HAL_I2CEx_ConfigDigitalFilter>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001632:	f000 fdab 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200003b0 	.word	0x200003b0
 8001640:	40005800 	.word	0x40005800
 8001644:	20a0c4df 	.word	0x20a0c4df

08001648 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800164c:	2000      	movs	r0, #0
 800164e:	f008 f8ef 	bl	8009830 <HAL_ICACHE_ConfigAssociativityMode>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001658:	f000 fd98 	bl	800218c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800165c:	f008 f908 	bl	8009870 <HAL_ICACHE_Enable>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001666:	f000 fd91 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	@ 0x38
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2234      	movs	r2, #52	@ 0x34
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f010 ffa4 	bl	80125ca <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001682:	4b39      	ldr	r3, [pc, #228]	@ (8001768 <MX_LTDC_Init+0xf8>)
 8001684:	4a39      	ldr	r2, [pc, #228]	@ (800176c <MX_LTDC_Init+0xfc>)
 8001686:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001688:	4b37      	ldr	r3, [pc, #220]	@ (8001768 <MX_LTDC_Init+0xf8>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800168e:	4b36      	ldr	r3, [pc, #216]	@ (8001768 <MX_LTDC_Init+0xf8>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001694:	4b34      	ldr	r3, [pc, #208]	@ (8001768 <MX_LTDC_Init+0xf8>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800169a:	4b33      	ldr	r3, [pc, #204]	@ (8001768 <MX_LTDC_Init+0xf8>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 80016a0:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016a2:	2203      	movs	r2, #3
 80016a4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80016a6:	4b30      	ldr	r3, [pc, #192]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016a8:	2203      	movs	r2, #3
 80016aa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 80016ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016ae:	220b      	movs	r2, #11
 80016b0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80016b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016b4:	220b      	movs	r2, #11
 80016b6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 80016b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016ba:	f240 322b 	movw	r2, #811	@ 0x32b
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 80016c0:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016c2:	f240 12eb 	movw	r2, #491	@ 0x1eb
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 80016c8:	4b27      	ldr	r3, [pc, #156]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016ca:	f240 3233 	movw	r2, #819	@ 0x333
 80016ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016d2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80016d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80016d8:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80016e0:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80016f0:	481d      	ldr	r0, [pc, #116]	@ (8001768 <MX_LTDC_Init+0xf8>)
 80016f2:	f008 f8cd 	bl	8009890 <HAL_LTDC_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80016fc:	f000 fd46 	bl	800218c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001704:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001708:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800170e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001712:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001718:	23ff      	movs	r3, #255	@ 0xff
 800171a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001720:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001724:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001726:	2307      	movs	r3, #7
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	@ (8001768 <MX_LTDC_Init+0xf8>)
 8001750:	f008 fa30 	bl	8009bb4 <HAL_LTDC_ConfigLayer>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800175a:	f000 fd17 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3738      	adds	r7, #56	@ 0x38
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000404 	.word	0x20000404
 800176c:	40016800 	.word	0x40016800

08001770 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	615a      	str	r2, [r3, #20]
 8001786:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001788:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <MX_RTC_Init+0x94>)
 800178a:	4a1f      	ldr	r2, [pc, #124]	@ (8001808 <MX_RTC_Init+0x98>)
 800178c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800178e:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <MX_RTC_Init+0x94>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <MX_RTC_Init+0x94>)
 8001796:	227f      	movs	r2, #127	@ 0x7f
 8001798:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800179a:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <MX_RTC_Init+0x94>)
 800179c:	22ff      	movs	r2, #255	@ 0xff
 800179e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017a0:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <MX_RTC_Init+0x94>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017a6:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <MX_RTC_Init+0x94>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <MX_RTC_Init+0x94>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017b2:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <MX_RTC_Init+0x94>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017b8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_RTC_Init+0x94>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80017c0:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <MX_RTC_Init+0x94>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017c6:	480f      	ldr	r0, [pc, #60]	@ (8001804 <MX_RTC_Init+0x94>)
 80017c8:	f00d f8b8 	bl	800e93c <HAL_RTC_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80017d2:	f000 fcdb 	bl	800218c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4806      	ldr	r0, [pc, #24]	@ (8001804 <MX_RTC_Init+0x94>)
 80017ec:	f00d f9d4 	bl	800eb98 <HAL_RTCEx_PrivilegeModeSet>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80017f6:	f000 fcc9 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200004ac 	.word	0x200004ac
 8001808:	46007800 	.word	0x46007800

0800180c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001810:	4b30      	ldr	r3, [pc, #192]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 8001812:	4a31      	ldr	r2, [pc, #196]	@ (80018d8 <MX_SAI2_Init+0xcc>)
 8001814:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001816:	4b2f      	ldr	r3, [pc, #188]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800181c:	4b2d      	ldr	r3, [pc, #180]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001822:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001828:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800182e:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001834:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 8001836:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800183a:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 8001844:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001848:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800184a:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 800184c:	2200      	movs	r2, #0
 800184e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001850:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 8001852:	2200      	movs	r2, #0
 8001854:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 8001856:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 8001858:	2210      	movs	r2, #16
 800185a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800185c:	2302      	movs	r3, #2
 800185e:	2202      	movs	r2, #2
 8001860:	2101      	movs	r1, #1
 8001862:	481c      	ldr	r0, [pc, #112]	@ (80018d4 <MX_SAI2_Init+0xc8>)
 8001864:	f00d f9c6 	bl	800ebf4 <HAL_SAI_InitProtocol>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_SAI2_Init+0x66>
  {
    Error_Handler();
 800186e:	f000 fc8d 	bl	800218c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <MX_SAI2_Init+0xd0>)
 8001874:	4a1a      	ldr	r2, [pc, #104]	@ (80018e0 <MX_SAI2_Init+0xd4>)
 8001876:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <MX_SAI2_Init+0xd0>)
 800187a:	2201      	movs	r2, #1
 800187c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_SAI2_Init+0xd0>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <MX_SAI2_Init+0xd0>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <MX_SAI2_Init+0xd0>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <MX_SAI2_Init+0xd0>)
 8001892:	2202      	movs	r2, #2
 8001894:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <MX_SAI2_Init+0xd0>)
 8001898:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800189c:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <MX_SAI2_Init+0xd0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80018a4:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <MX_SAI2_Init+0xd0>)
 80018a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018aa:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <MX_SAI2_Init+0xd0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <MX_SAI2_Init+0xd0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80018b8:	2308      	movs	r3, #8
 80018ba:	2202      	movs	r2, #2
 80018bc:	2100      	movs	r1, #0
 80018be:	4807      	ldr	r0, [pc, #28]	@ (80018dc <MX_SAI2_Init+0xd0>)
 80018c0:	f00d f998 	bl	800ebf4 <HAL_SAI_InitProtocol>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_SAI2_Init+0xc2>
  {
    Error_Handler();
 80018ca:	f000 fc5f 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200004dc 	.word	0x200004dc
 80018d8:	40015804 	.word	0x40015804
 80018dc:	20000574 	.word	0x20000574
 80018e0:	40015824 	.word	0x40015824

080018e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001908:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 800190a:	4a26      	ldr	r2, [pc, #152]	@ (80019a4 <MX_TIM3_Init+0xc0>)
 800190c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 8001910:	22a0      	movs	r2, #160	@ 0xa0
 8001912:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 800191c:	2264      	movs	r2, #100	@ 0x64
 800191e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800192c:	481c      	ldr	r0, [pc, #112]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 800192e:	f00e f89b 	bl	800fa68 <HAL_TIM_PWM_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001938:	f000 fc28 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	4815      	ldr	r0, [pc, #84]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 800194c:	f00f f872 	bl	8010a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001956:	f000 fc19 	bl	800218c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	@ 0x60
 800195c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 800195e:	234b      	movs	r3, #75	@ 0x4b
 8001960:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800196a:	463b      	mov	r3, r7
 800196c:	220c      	movs	r2, #12
 800196e:	4619      	mov	r1, r3
 8001970:	480b      	ldr	r0, [pc, #44]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 8001972:	f00e f8d1 	bl	800fb18 <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800197c:	f000 fc06 	bl	800218c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001980:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69da      	ldr	r2, [r3, #28]
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800198e:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001990:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <MX_TIM3_Init+0xbc>)
 8001992:	f001 f9bd 	bl	8002d10 <HAL_TIM_MspPostInit>

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	@ 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000774 	.word	0x20000774
 80019a4:	40000400 	.word	0x40000400

080019a8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <MX_TIM15_Init+0x98>)
 80019c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a44 <MX_TIM15_Init+0x9c>)
 80019ca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 80019cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <MX_TIM15_Init+0x98>)
 80019ce:	221a      	movs	r2, #26
 80019d0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <MX_TIM15_Init+0x98>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <MX_TIM15_Init+0x98>)
 80019da:	2231      	movs	r2, #49	@ 0x31
 80019dc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <MX_TIM15_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019e4:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <MX_TIM15_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <MX_TIM15_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019f0:	4813      	ldr	r0, [pc, #76]	@ (8001a40 <MX_TIM15_Init+0x98>)
 80019f2:	f00d ff4a 	bl	800f88a <HAL_TIM_Base_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80019fc:	f000 fbc6 	bl	800218c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <MX_TIM15_Init+0x98>)
 8001a0e:	f00e f997 	bl	800fd40 <HAL_TIM_ConfigClockSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001a18:	f000 fbb8 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <MX_TIM15_Init+0x98>)
 8001a2a:	f00f f803 	bl	8010a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001a34:	f000 fbaa 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200007c0 	.word	0x200007c0
 8001a44:	40014000 	.word	0x40014000

08001a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a4e:	4a23      	ldr	r2, [pc, #140]	@ (8001adc <MX_USART1_UART_Init+0x94>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a84:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a90:	4811      	ldr	r0, [pc, #68]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a92:	f00f f891 	bl	8010bb8 <HAL_UART_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a9c:	f000 fb76 	bl	800218c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001aa4:	f010 f85f 	bl	8011b66 <HAL_UARTEx_SetTxFifoThreshold>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001aae:	f000 fb6d 	bl	800218c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4808      	ldr	r0, [pc, #32]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001ab6:	f010 f894 	bl	8011be2 <HAL_UARTEx_SetRxFifoThreshold>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ac0:	f000 fb64 	bl	800218c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001ac6:	f010 f815 	bl	8011af4 <HAL_UARTEx_DisableFifoMode>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ad0:	f000 fb5c 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	2000080c 	.word	0x2000080c
 8001adc:	40013800 	.word	0x40013800

08001ae0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001ae6:	4a14      	ldr	r2, [pc, #80]	@ (8001b38 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001aea:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001aec:	2209      	movs	r2, #9
 8001aee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001af0:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001af8:	2203      	movs	r2, #3
 8001afa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001b14:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001b22:	f008 f9f8 	bl	8009f16 <HAL_PCD_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8001b2c:	f000 fb2e 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200008a0 	.word	0x200008a0
 8001b38:	42040000 	.word	0x42040000

08001b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	@ 0x38
 8001b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b52:	4b8c      	ldr	r3, [pc, #560]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b58:	4a8a      	ldr	r2, [pc, #552]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b62:	4b88      	ldr	r3, [pc, #544]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	623b      	str	r3, [r7, #32]
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b70:	4b84      	ldr	r3, [pc, #528]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b76:	4a83      	ldr	r2, [pc, #524]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b80:	4b80      	ldr	r3, [pc, #512]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b94:	4a7b      	ldr	r2, [pc, #492]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001b96:	f043 0320 	orr.w	r3, r3, #32
 8001b9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b9e:	4b79      	ldr	r3, [pc, #484]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bac:	4b75      	ldr	r3, [pc, #468]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb2:	4a74      	ldr	r2, [pc, #464]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bbc:	4b71      	ldr	r3, [pc, #452]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b6e      	ldr	r3, [pc, #440]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bd0:	4a6c      	ldr	r2, [pc, #432]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bda:	4b6a      	ldr	r3, [pc, #424]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	4b66      	ldr	r3, [pc, #408]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bee:	4a65      	ldr	r2, [pc, #404]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bf8:	4b62      	ldr	r3, [pc, #392]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c06:	4b5f      	ldr	r3, [pc, #380]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c16:	4b5b      	ldr	r3, [pc, #364]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c24:	4b57      	ldr	r3, [pc, #348]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c2a:	4a56      	ldr	r2, [pc, #344]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c34:	4b53      	ldr	r3, [pc, #332]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c42:	4b50      	ldr	r3, [pc, #320]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c48:	4a4e      	ldr	r2, [pc, #312]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c52:	4b4c      	ldr	r3, [pc, #304]	@ (8001d84 <MX_GPIO_Init+0x248>)
 8001c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2104      	movs	r1, #4
 8001c64:	4848      	ldr	r0, [pc, #288]	@ (8001d88 <MX_GPIO_Init+0x24c>)
 8001c66:	f006 fb49 	bl	80082fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	4846      	ldr	r0, [pc, #280]	@ (8001d88 <MX_GPIO_Init+0x24c>)
 8001c70:	f006 fb44 	bl	80082fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2114      	movs	r1, #20
 8001c78:	4844      	ldr	r0, [pc, #272]	@ (8001d8c <MX_GPIO_Init+0x250>)
 8001c7a:	f006 fb3f 	bl	80082fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001c7e:	2314      	movs	r3, #20
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	483c      	ldr	r0, [pc, #240]	@ (8001d88 <MX_GPIO_Init+0x24c>)
 8001c96:	f006 f959 	bl	8007f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d90 <MX_GPIO_Init+0x254>)
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	4836      	ldr	r0, [pc, #216]	@ (8001d88 <MX_GPIO_Init+0x24c>)
 8001cae:	f006 f94d 	bl	8007f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cb6:	4b37      	ldr	r3, [pc, #220]	@ (8001d94 <MX_GPIO_Init+0x258>)
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4834      	ldr	r0, [pc, #208]	@ (8001d98 <MX_GPIO_Init+0x25c>)
 8001cc6:	f006 f941 	bl	8007f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001cca:	2310      	movs	r3, #16
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cce:	4b33      	ldr	r3, [pc, #204]	@ (8001d9c <MX_GPIO_Init+0x260>)
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	482e      	ldr	r0, [pc, #184]	@ (8001d98 <MX_GPIO_Init+0x25c>)
 8001cde:	f006 f935 	bl	8007f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001ce2:	2314      	movs	r3, #20
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4824      	ldr	r0, [pc, #144]	@ (8001d8c <MX_GPIO_Init+0x250>)
 8001cfa:	f006 f927 	bl	8007f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8001cfe:	2380      	movs	r3, #128	@ 0x80
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d0e:	4619      	mov	r1, r3
 8001d10:	481e      	ldr	r0, [pc, #120]	@ (8001d8c <MX_GPIO_Init+0x250>)
 8001d12:	f006 f91b 	bl	8007f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 8001d16:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	481d      	ldr	r0, [pc, #116]	@ (8001da0 <MX_GPIO_Init+0x264>)
 8001d2c:	f006 f90e 	bl	8007f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001d30:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d42:	4619      	mov	r1, r3
 8001d44:	4817      	ldr	r0, [pc, #92]	@ (8001da4 <MX_GPIO_Init+0x268>)
 8001d46:	f006 f901 	bl	8007f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	200c      	movs	r0, #12
 8001d50:	f003 ffac 	bl	8005cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d54:	200c      	movs	r0, #12
 8001d56:	f003 ffc3 	bl	8005ce0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	200f      	movs	r0, #15
 8001d60:	f003 ffa4 	bl	8005cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d64:	200f      	movs	r0, #15
 8001d66:	f003 ffbb 	bl	8005ce0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2010      	movs	r0, #16
 8001d70:	f003 ff9c 	bl	8005cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001d74:	2010      	movs	r0, #16
 8001d76:	f003 ffb3 	bl	8005ce0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3738      	adds	r7, #56	@ 0x38
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	46020c00 	.word	0x46020c00
 8001d88:	42021000 	.word	0x42021000
 8001d8c:	42020c00 	.word	0x42020c00
 8001d90:	10110000 	.word	0x10110000
 8001d94:	10310000 	.word	0x10310000
 8001d98:	42020000 	.word	0x42020000
 8001d9c:	10210000 	.word	0x10210000
 8001da0:	42021800 	.word	0x42021800
 8001da4:	42020400 	.word	0x42020400

08001da8 <signExtend24>:

/* USER CODE BEGIN 4 */

static inline int32_t signExtend24(uint32_t value)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
    return (int32_t)((value & (1 << 23)) ? value | 0xFF000000 : value & 0x007FFFFF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <signExtend24+0x1a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001dc0:	e002      	b.n	8001dc8 <signExtend24+0x20>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <volumeLRPoll>:

static void volumeLRPoll(uint16_t index)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80fb      	strh	r3, [r7, #6]
	  //Channel 1 Volume
	  channels[0].volumeBuffer[index % (sizeof(channels[0].volumeBuffer) / 2)] = adcGroup1[c1Vol];
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4aba      	ldr	r2, [pc, #744]	@ (80020d0 <volumeLRPoll+0x2fc>)
 8001de6:	8811      	ldrh	r1, [r2, #0]
 8001de8:	4aba      	ldr	r2, [pc, #744]	@ (80020d4 <volumeLRPoll+0x300>)
 8001dea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	460a      	mov	r2, r1
 8001df4:	805a      	strh	r2, [r3, #2]
	  channels[0].volumeRunner += channels[0].volumeBuffer[index % (sizeof(channels[0].volumeBuffer) / 2)];
 8001df6:	4bb7      	ldr	r3, [pc, #732]	@ (80020d4 <volumeLRPoll+0x300>)
 8001df8:	f8b3 2812 	ldrh.w	r2, [r3, #2066]	@ 0x812
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	49b4      	ldr	r1, [pc, #720]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	440b      	add	r3, r1
 8001e0c:	885b      	ldrh	r3, [r3, #2]
 8001e0e:	4413      	add	r3, r2
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4bb0      	ldr	r3, [pc, #704]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e14:	f8a3 2812 	strh.w	r2, [r3, #2066]	@ 0x812
	  channels[0].volumeRunner -= channels[0].volumeBuffer[(index + 1) % (sizeof(channels[0].volumeBuffer) / 2)];
 8001e18:	4bae      	ldr	r3, [pc, #696]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e1a:	f8b3 2812 	ldrh.w	r2, [r3, #2066]	@ 0x812
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	49ab      	ldr	r1, [pc, #684]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	440b      	add	r3, r1
 8001e30:	885b      	ldrh	r3, [r3, #2]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4ba7      	ldr	r3, [pc, #668]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e38:	f8a3 2812 	strh.w	r2, [r3, #2066]	@ 0x812

	  //Channel 2 Volume
	  channels[1].volumeBuffer[index % (sizeof(channels[1].volumeBuffer) / 2)] = adcGroup1[c2Vol];
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	4aa3      	ldr	r2, [pc, #652]	@ (80020d0 <volumeLRPoll+0x2fc>)
 8001e44:	8851      	ldrh	r1, [r2, #2]
 8001e46:	4aa3      	ldr	r2, [pc, #652]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e48:	f603 031c 	addw	r3, r3, #2076	@ 0x81c
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	460a      	mov	r2, r1
 8001e52:	805a      	strh	r2, [r3, #2]
	  channels[1].volumeRunner += channels[1].volumeBuffer[index % (sizeof(channels[1].volumeBuffer) / 2)];
 8001e54:	4b9f      	ldr	r3, [pc, #636]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	499b      	ldr	r1, [pc, #620]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e66:	f603 031c 	addw	r3, r3, #2076	@ 0x81c
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	440b      	add	r3, r1
 8001e6e:	885b      	ldrh	r3, [r3, #2]
 8001e70:	4413      	add	r3, r2
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b97      	ldr	r3, [pc, #604]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	  channels[1].volumeRunner -= channels[1].volumeBuffer[(index + 1) % (sizeof(channels[1].volumeBuffer) / 2)];
 8001e7e:	4b95      	ldr	r3, [pc, #596]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e84:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4990      	ldr	r1, [pc, #576]	@ (80020d4 <volumeLRPoll+0x300>)
 8001e92:	f603 031c 	addw	r3, r3, #2076	@ 0x81c
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	440b      	add	r3, r1
 8001e9a:	885b      	ldrh	r3, [r3, #2]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	4b8c      	ldr	r3, [pc, #560]	@ (80020d4 <volumeLRPoll+0x300>)
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

	  //Channel 3 Volume
	  channels[2].volumeBuffer[index % (sizeof(channels[2].volumeBuffer) / 2)] = adcGroup1[c3Vol];
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4a87      	ldr	r2, [pc, #540]	@ (80020d0 <volumeLRPoll+0x2fc>)
 8001eb2:	8891      	ldrh	r1, [r2, #4]
 8001eb4:	4a87      	ldr	r2, [pc, #540]	@ (80020d4 <volumeLRPoll+0x300>)
 8001eb6:	f603 4338 	addw	r3, r3, #3128	@ 0xc38
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	805a      	strh	r2, [r3, #2]
	  channels[2].volumeRunner += channels[2].volumeBuffer[index % (sizeof(channels[2].volumeBuffer) / 2)];
 8001ec2:	4b84      	ldr	r3, [pc, #528]	@ (80020d4 <volumeLRPoll+0x300>)
 8001ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec8:	f8b3 2882 	ldrh.w	r2, [r3, #2178]	@ 0x882
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	4980      	ldr	r1, [pc, #512]	@ (80020d4 <volumeLRPoll+0x300>)
 8001ed4:	f603 4338 	addw	r3, r3, #3128	@ 0xc38
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	440b      	add	r3, r1
 8001edc:	885b      	ldrh	r3, [r3, #2]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	4b7c      	ldr	r3, [pc, #496]	@ (80020d4 <volumeLRPoll+0x300>)
 8001ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee8:	f8a3 2882 	strh.w	r2, [r3, #2178]	@ 0x882
	  channels[2].volumeRunner -= channels[2].volumeBuffer[(index + 1) % (sizeof(channels[2].volumeBuffer) / 2)];
 8001eec:	4b79      	ldr	r3, [pc, #484]	@ (80020d4 <volumeLRPoll+0x300>)
 8001eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef2:	f8b3 2882 	ldrh.w	r2, [r3, #2178]	@ 0x882
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	4975      	ldr	r1, [pc, #468]	@ (80020d4 <volumeLRPoll+0x300>)
 8001f00:	f603 4338 	addw	r3, r3, #3128	@ 0xc38
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	440b      	add	r3, r1
 8001f08:	885b      	ldrh	r3, [r3, #2]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b71      	ldr	r3, [pc, #452]	@ (80020d4 <volumeLRPoll+0x300>)
 8001f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f14:	f8a3 2882 	strh.w	r2, [r3, #2178]	@ 0x882

	  //Channel 4 Volume
	  channels[3].volumeBuffer[index % (sizeof(channels[3].volumeBuffer) / 2)] = adcGroup1[c4Vol];
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	4a6c      	ldr	r2, [pc, #432]	@ (80020d0 <volumeLRPoll+0x2fc>)
 8001f20:	88d1      	ldrh	r1, [r2, #6]
 8001f22:	4a6c      	ldr	r2, [pc, #432]	@ (80020d4 <volumeLRPoll+0x300>)
 8001f24:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001f28:	3314      	adds	r3, #20
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	460a      	mov	r2, r1
 8001f30:	805a      	strh	r2, [r3, #2]
	  channels[3].volumeRunner += channels[3].volumeBuffer[index % (sizeof(channels[3].volumeBuffer) / 2)];
 8001f32:	4b68      	ldr	r3, [pc, #416]	@ (80020d4 <volumeLRPoll+0x300>)
 8001f34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f38:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	4964      	ldr	r1, [pc, #400]	@ (80020d4 <volumeLRPoll+0x300>)
 8001f44:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001f48:	3314      	adds	r3, #20
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	440b      	add	r3, r1
 8001f4e:	885b      	ldrh	r3, [r3, #2]
 8001f50:	4413      	add	r3, r2
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b5f      	ldr	r3, [pc, #380]	@ (80020d4 <volumeLRPoll+0x300>)
 8001f56:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f5a:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
	  channels[3].volumeRunner -= channels[3].volumeBuffer[(index + 1) % (sizeof(channels[3].volumeBuffer) / 2)];
 8001f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80020d4 <volumeLRPoll+0x300>)
 8001f60:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f64:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4958      	ldr	r1, [pc, #352]	@ (80020d4 <volumeLRPoll+0x300>)
 8001f72:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001f76:	3314      	adds	r3, #20
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	440b      	add	r3, r1
 8001f7c:	885b      	ldrh	r3, [r3, #2]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	4b54      	ldr	r3, [pc, #336]	@ (80020d4 <volumeLRPoll+0x300>)
 8001f84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f88:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

	  //Channel 5 Volume
	  channels[4].volumeBuffer[index % (sizeof(channels[4].volumeBuffer) / 2)] = adcGroup1[c5Vol];
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	4a4f      	ldr	r2, [pc, #316]	@ (80020d0 <volumeLRPoll+0x2fc>)
 8001f94:	8911      	ldrh	r1, [r2, #8]
 8001f96:	4a4f      	ldr	r2, [pc, #316]	@ (80020d4 <volumeLRPoll+0x300>)
 8001f98:	f503 53a3 	add.w	r3, r3, #5216	@ 0x1460
 8001f9c:	3310      	adds	r3, #16
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	460a      	mov	r2, r1
 8001fa4:	805a      	strh	r2, [r3, #2]
	  channels[4].volumeRunner += channels[4].volumeBuffer[index % (sizeof(channels[4].volumeBuffer) / 2)];
 8001fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80020d4 <volumeLRPoll+0x300>)
 8001fa8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fac:	f8b3 28f2 	ldrh.w	r2, [r3, #2290]	@ 0x8f2
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	4947      	ldr	r1, [pc, #284]	@ (80020d4 <volumeLRPoll+0x300>)
 8001fb8:	f503 53a3 	add.w	r3, r3, #5216	@ 0x1460
 8001fbc:	3310      	adds	r3, #16
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	440b      	add	r3, r1
 8001fc2:	885b      	ldrh	r3, [r3, #2]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b42      	ldr	r3, [pc, #264]	@ (80020d4 <volumeLRPoll+0x300>)
 8001fca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fce:	f8a3 28f2 	strh.w	r2, [r3, #2290]	@ 0x8f2
	  channels[4].volumeRunner -= channels[4].volumeBuffer[(index + 1) % (sizeof(channels[4].volumeBuffer) / 2)];
 8001fd2:	4b40      	ldr	r3, [pc, #256]	@ (80020d4 <volumeLRPoll+0x300>)
 8001fd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fd8:	f8b3 28f2 	ldrh.w	r2, [r3, #2290]	@ 0x8f2
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	493b      	ldr	r1, [pc, #236]	@ (80020d4 <volumeLRPoll+0x300>)
 8001fe6:	f503 53a3 	add.w	r3, r3, #5216	@ 0x1460
 8001fea:	3310      	adds	r3, #16
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	440b      	add	r3, r1
 8001ff0:	885b      	ldrh	r3, [r3, #2]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	4b37      	ldr	r3, [pc, #220]	@ (80020d4 <volumeLRPoll+0x300>)
 8001ff8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ffc:	f8a3 28f2 	strh.w	r2, [r3, #2290]	@ 0x8f2

	  //Channel 6 Volume
	  channels[5].volumeBuffer[index % (sizeof(channels[5].volumeBuffer) / 2)] = adcGroup1[c6Vol];
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	4a32      	ldr	r2, [pc, #200]	@ (80020d0 <volumeLRPoll+0x2fc>)
 8002008:	8951      	ldrh	r1, [r2, #10]
 800200a:	4a32      	ldr	r2, [pc, #200]	@ (80020d4 <volumeLRPoll+0x300>)
 800200c:	f503 53c4 	add.w	r3, r3, #6272	@ 0x1880
 8002010:	330c      	adds	r3, #12
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	460a      	mov	r2, r1
 8002018:	805a      	strh	r2, [r3, #2]
	  channels[5].volumeRunner += channels[5].volumeBuffer[index % (sizeof(channels[5].volumeBuffer) / 2)];
 800201a:	4b2e      	ldr	r3, [pc, #184]	@ (80020d4 <volumeLRPoll+0x300>)
 800201c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002020:	f8b3 212a 	ldrh.w	r2, [r3, #298]	@ 0x12a
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	492a      	ldr	r1, [pc, #168]	@ (80020d4 <volumeLRPoll+0x300>)
 800202c:	f503 53c4 	add.w	r3, r3, #6272	@ 0x1880
 8002030:	330c      	adds	r3, #12
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	440b      	add	r3, r1
 8002036:	885b      	ldrh	r3, [r3, #2]
 8002038:	4413      	add	r3, r2
 800203a:	b29a      	uxth	r2, r3
 800203c:	4b25      	ldr	r3, [pc, #148]	@ (80020d4 <volumeLRPoll+0x300>)
 800203e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002042:	f8a3 212a 	strh.w	r2, [r3, #298]	@ 0x12a
	  channels[5].volumeRunner -= channels[5].volumeBuffer[(index + 1) % (sizeof(channels[5].volumeBuffer) / 2)];
 8002046:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <volumeLRPoll+0x300>)
 8002048:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800204c:	f8b3 212a 	ldrh.w	r2, [r3, #298]	@ 0x12a
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	3301      	adds	r3, #1
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	491e      	ldr	r1, [pc, #120]	@ (80020d4 <volumeLRPoll+0x300>)
 800205a:	f503 53c4 	add.w	r3, r3, #6272	@ 0x1880
 800205e:	330c      	adds	r3, #12
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	440b      	add	r3, r1
 8002064:	885b      	ldrh	r3, [r3, #2]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	b29a      	uxth	r2, r3
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <volumeLRPoll+0x300>)
 800206c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002070:	f8a3 212a 	strh.w	r2, [r3, #298]	@ 0x12a

	  //Channel 1 LR
	  channels[0].lr = adcGroup1[c1LR];
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <volumeLRPoll+0x2fc>)
 8002076:	8a1a      	ldrh	r2, [r3, #16]
 8002078:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <volumeLRPoll+0x300>)
 800207a:	f8a3 2814 	strh.w	r2, [r3, #2068]	@ 0x814

	  //Channel 2 LR
	  channels[1].lr = adcGroup1[c2LR];
 800207e:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <volumeLRPoll+0x2fc>)
 8002080:	8a5a      	ldrh	r2, [r3, #18]
 8002082:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <volumeLRPoll+0x300>)
 8002084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002088:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

	  //Channel 3 LR
	  channels[2].lr = adcGroup1[c3LR];
 800208c:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <volumeLRPoll+0x2fc>)
 800208e:	8a9a      	ldrh	r2, [r3, #20]
 8002090:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <volumeLRPoll+0x300>)
 8002092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002096:	f8a3 2884 	strh.w	r2, [r3, #2180]	@ 0x884

	  //Channel 4 LR
	  channels[3].lr = adcGroup1[c4LR];
 800209a:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <volumeLRPoll+0x2fc>)
 800209c:	8ada      	ldrh	r2, [r3, #22]
 800209e:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <volumeLRPoll+0x300>)
 80020a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020a4:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc

	  //Channel 5 LR
	  channels[4].lr = adcGroup4[c5LR];
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <volumeLRPoll+0x304>)
 80020aa:	881a      	ldrh	r2, [r3, #0]
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <volumeLRPoll+0x300>)
 80020ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020b2:	f8a3 28f4 	strh.w	r2, [r3, #2292]	@ 0x8f4

	  //Channel 6 LR
	  channels[5].lr = adcGroup4[c6LR];
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <volumeLRPoll+0x304>)
 80020b8:	885a      	ldrh	r2, [r3, #2]
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <volumeLRPoll+0x300>)
 80020bc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80020c0:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	2002c974 	.word	0x2002c974
 80020d4:	20036990 	.word	0x20036990
 80020d8:	2002c98c 	.word	0x2002c98c

080020dc <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	adcReady = true;
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <HAL_SAI_RxHalfCpltCallback+0x20>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[0];
 80020ea:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_SAI_RxHalfCpltCallback+0x24>)
 80020ec:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	2003ab50 	.word	0x2003ab50
 8002100:	2003ab54 	.word	0x2003ab54
 8002104:	2002c990 	.word	0x2002c990

08002108 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	adcReady = true;
 8002110:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <HAL_SAI_RxCpltCallback+0x20>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[sampleSize * (channelCount / 2)];
 8002116:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_SAI_RxCpltCallback+0x24>)
 8002118:	4a05      	ldr	r2, [pc, #20]	@ (8002130 <HAL_SAI_RxCpltCallback+0x28>)
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	2003ab50 	.word	0x2003ab50
 800212c:	2003ab54 	.word	0x2003ab54
 8002130:	20030990 	.word	0x20030990

08002134 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	dacReady = true;
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_SAI_TxHalfCpltCallback+0x20>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[0];
 8002142:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <HAL_SAI_TxHalfCpltCallback+0x24>)
 8002144:	4a05      	ldr	r2, [pc, #20]	@ (800215c <HAL_SAI_TxHalfCpltCallback+0x28>)
 8002146:	601a      	str	r2, [r3, #0]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	2003ab51 	.word	0x2003ab51
 8002158:	2003ab58 	.word	0x2003ab58
 800215c:	20034990 	.word	0x20034990

08002160 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_SAI_TxCpltCallback+0x20>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[sampleSize];
 800216e:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_SAI_TxCpltCallback+0x24>)
 8002170:	4a05      	ldr	r2, [pc, #20]	@ (8002188 <HAL_SAI_TxCpltCallback+0x28>)
 8002172:	601a      	str	r2, [r3, #0]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	2003ab51 	.word	0x2003ab51
 8002184:	2003ab58 	.word	0x2003ab58
 8002188:	20035990 	.word	0x20035990

0800218c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002190:	b672      	cpsid	i
}
 8002192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <Error_Handler+0x8>

08002198 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_MspInit+0x30>)
 80021a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a4:	4a08      	ldr	r2, [pc, #32]	@ (80021c8 <HAL_MspInit+0x30>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_MspInit+0x30>)
 80021b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80021bc:	f008 f8e8 	bl	800a390 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	46020c00 	.word	0x46020c00

080021cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b0e4      	sub	sp, #400	@ 0x190
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80021d6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80021da:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  DMA_TriggerConfTypeDef TriggerConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ec:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80021f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021f4:	4618      	mov	r0, r3
 80021f6:	23e0      	movs	r3, #224	@ 0xe0
 80021f8:	461a      	mov	r2, r3
 80021fa:	2100      	movs	r1, #0
 80021fc:	f010 f9e5 	bl	80125ca <memset>
  if(hadc->Instance==ADC1)
 8002200:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002204:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4aa1      	ldr	r2, [pc, #644]	@ (8002494 <HAL_ADC_MspInit+0x2c8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	f040 8152 	bne.w	80024b8 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002214:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002218:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 800221c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8002228:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800222c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002230:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002234:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002238:	f107 0320 	add.w	r3, r7, #32
 800223c:	4618      	mov	r0, r3
 800223e:	f009 fb81 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8002248:	f7ff ffa0 	bl	800218c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800224c:	4b92      	ldr	r3, [pc, #584]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 800224e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002252:	4a91      	ldr	r2, [pc, #580]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 8002254:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002258:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800225c:	4b8e      	ldr	r3, [pc, #568]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 800225e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002262:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002266:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800226a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002274:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002278:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	4b87      	ldr	r3, [pc, #540]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 800227c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002280:	4a85      	ldr	r2, [pc, #532]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800228a:	4b83      	ldr	r3, [pc, #524]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 800228c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002290:	f003 0204 	and.w	r2, r3, #4
 8002294:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002298:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80022a2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80022a6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 80022aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022ae:	4a7a      	ldr	r2, [pc, #488]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022b8:	4b77      	ldr	r3, [pc, #476]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 80022ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80022c6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80022d0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80022d4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	4b70      	ldr	r3, [pc, #448]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 80022d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002498 <HAL_ADC_MspInit+0x2cc>)
 80022e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022ec:	f003 0202 	and.w	r2, r3, #2
 80022f0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80022f4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80022fe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002302:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8002304:	230f      	movs	r3, #15
 8002306:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230a:	2303      	movs	r3, #3
 800230c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002316:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800231a:	4619      	mov	r1, r3
 800231c:	485f      	ldr	r0, [pc, #380]	@ (800249c <HAL_ADC_MspInit+0x2d0>)
 800231e:	f005 fe15 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8002322:	23ed      	movs	r3, #237	@ 0xed
 8002324:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002328:	2303      	movs	r3, #3
 800232a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002338:	4619      	mov	r1, r3
 800233a:	4859      	ldr	r0, [pc, #356]	@ (80024a0 <HAL_ADC_MspInit+0x2d4>)
 800233c:	f005 fe06 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8002340:	2303      	movs	r3, #3
 8002342:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002346:	2303      	movs	r3, #3
 8002348:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002352:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002356:	4619      	mov	r1, r3
 8002358:	4852      	ldr	r0, [pc, #328]	@ (80024a4 <HAL_ADC_MspInit+0x2d8>)
 800235a:	f005 fdf7 	bl	8007f4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800235e:	2321      	movs	r3, #33	@ 0x21
 8002360:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800237c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002380:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002384:	2301      	movs	r3, #1
 8002386:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800238a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800238e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.SrcBurstLength = 1;
 8002392:	2301      	movs	r3, #1
 8002394:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.DestBurstLength = 1;
 8002398:	2301      	movs	r3, #1
 800239a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800239e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023a2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.Mode = DMA_NORMAL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80023b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023bc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80023c0:	232b      	movs	r3, #43	@ 0x2b
 80023c2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80023d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023d6:	4934      	ldr	r1, [pc, #208]	@ (80024a8 <HAL_ADC_MspInit+0x2dc>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f004 fe95 	bl	8007108 <HAL_DMAEx_List_BuildNode>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 80023e4:	f7ff fed2 	bl	800218c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80023e8:	4a2f      	ldr	r2, [pc, #188]	@ (80024a8 <HAL_ADC_MspInit+0x2dc>)
 80023ea:	2100      	movs	r1, #0
 80023ec:	482f      	ldr	r0, [pc, #188]	@ (80024ac <HAL_ADC_MspInit+0x2e0>)
 80023ee:	f004 feb7 	bl	8007160 <HAL_DMAEx_List_InsertNode>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 80023f8:	f7ff fec8 	bl	800218c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80023fc:	482b      	ldr	r0, [pc, #172]	@ (80024ac <HAL_ADC_MspInit+0x2e0>)
 80023fe:	f004 ff78 	bl	80072f2 <HAL_DMAEx_List_SetCircularMode>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 8002408:	f7ff fec0 	bl	800218c <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800240c:	4b28      	ldr	r3, [pc, #160]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 800240e:	4a29      	ldr	r2, [pc, #164]	@ (80024b4 <HAL_ADC_MspInit+0x2e8>)
 8002410:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002412:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 8002414:	2200      	movs	r2, #0
 8002416:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002418:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 800241a:	2200      	movs	r2, #0
 800241c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800241e:	4b24      	ldr	r3, [pc, #144]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002424:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800242a:	4b21      	ldr	r3, [pc, #132]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 800242c:	2281      	movs	r2, #129	@ 0x81
 800242e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002430:	481f      	ldr	r0, [pc, #124]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 8002432:	f004 fca9 	bl	8006d88 <HAL_DMAEx_List_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 800243c:	f7ff fea6 	bl	800218c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8002440:	491a      	ldr	r1, [pc, #104]	@ (80024ac <HAL_ADC_MspInit+0x2e0>)
 8002442:	481b      	ldr	r0, [pc, #108]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 8002444:	f004 ffb6 	bl	80073b4 <HAL_DMAEx_List_LinkQ>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 800244e:	f7ff fe9d 	bl	800218c <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8002452:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002456:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a14      	ldr	r2, [pc, #80]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 800245e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002460:	4a13      	ldr	r2, [pc, #76]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 8002462:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002466:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800246e:	2110      	movs	r1, #16
 8002470:	480f      	ldr	r0, [pc, #60]	@ (80024b0 <HAL_ADC_MspInit+0x2e4>)
 8002472:	f004 f897 	bl	80065a4 <HAL_DMA_ConfigChannelAttributes>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 800247c:	f7ff fe86 	bl	800218c <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	2025      	movs	r0, #37	@ 0x25
 8002486:	f003 fc11 	bl	8005cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800248a:	2025      	movs	r0, #37	@ 0x25
 800248c:	f003 fc28 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8002490:	e0d5      	b.n	800263e <HAL_ADC_MspInit+0x472>
 8002492:	bf00      	nop
 8002494:	42028000 	.word	0x42028000
 8002498:	46020c00 	.word	0x46020c00
 800249c:	42020800 	.word	0x42020800
 80024a0:	42020000 	.word	0x42020000
 80024a4:	42020400 	.word	0x42020400
 80024a8:	20000168 	.word	0x20000168
 80024ac:	2000018c 	.word	0x2000018c
 80024b0:	200001a4 	.word	0x200001a4
 80024b4:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 80024b8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80024bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a60      	ldr	r2, [pc, #384]	@ (8002648 <HAL_ADC_MspInit+0x47c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	f040 80b9 	bne.w	800263e <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80024cc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80024d0:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 80024d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80024e0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80024e4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f0:	f107 0320 	add.w	r3, r7, #32
 80024f4:	4618      	mov	r0, r3
 80024f6:	f009 fa25 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8002500:	f7ff fe44 	bl	800218c <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8002504:	4b51      	ldr	r3, [pc, #324]	@ (800264c <HAL_ADC_MspInit+0x480>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800250a:	4a50      	ldr	r2, [pc, #320]	@ (800264c <HAL_ADC_MspInit+0x480>)
 800250c:	f043 0320 	orr.w	r3, r3, #32
 8002510:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002514:	4b4d      	ldr	r3, [pc, #308]	@ (800264c <HAL_ADC_MspInit+0x480>)
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800251a:	f003 0220 	and.w	r2, r3, #32
 800251e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002522:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800252c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002530:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002532:	4b46      	ldr	r3, [pc, #280]	@ (800264c <HAL_ADC_MspInit+0x480>)
 8002534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002538:	4a44      	ldr	r2, [pc, #272]	@ (800264c <HAL_ADC_MspInit+0x480>)
 800253a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800253e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002542:	4b42      	ldr	r3, [pc, #264]	@ (800264c <HAL_ADC_MspInit+0x480>)
 8002544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002548:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800254c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002550:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800255a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800255e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8002560:	2303      	movs	r3, #3
 8002562:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002566:	2303      	movs	r3, #3
 8002568:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002572:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002576:	4619      	mov	r1, r3
 8002578:	4835      	ldr	r0, [pc, #212]	@ (8002650 <HAL_ADC_MspInit+0x484>)
 800257a:	f005 fce7 	bl	8007f4c <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 800257e:	4b35      	ldr	r3, [pc, #212]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 8002580:	4a35      	ldr	r2, [pc, #212]	@ (8002658 <HAL_ADC_MspInit+0x48c>)
 8002582:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8002584:	4b33      	ldr	r3, [pc, #204]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 8002586:	2201      	movs	r2, #1
 8002588:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800258a:	4b32      	ldr	r3, [pc, #200]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002590:	4b30      	ldr	r3, [pc, #192]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8002596:	4b2f      	ldr	r3, [pc, #188]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 800259c:	4b2d      	ldr	r3, [pc, #180]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 800259e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025a2:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80025a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80025aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 80025ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025b0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80025b2:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 80025b8:	4b26      	ldr	r3, [pc, #152]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 80025be:	4b25      	ldr	r3, [pc, #148]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80025c4:	4b23      	ldr	r3, [pc, #140]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80025ca:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 80025d0:	4b20      	ldr	r3, [pc, #128]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80025d6:	481f      	ldr	r0, [pc, #124]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 80025d8:	f003 fc44 	bl	8005e64 <HAL_DMA_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 80025e2:	f7ff fdd3 	bl	800218c <Error_Handler>
    TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80025ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80025f4:	232b      	movs	r3, #43	@ 0x2b
 80025f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (HAL_DMAEx_ConfigTrigger(&handle_GPDMA1_Channel2, &TriggerConfig) != HAL_OK)
 80025fa:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80025fe:	4619      	mov	r1, r3
 8002600:	4814      	ldr	r0, [pc, #80]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 8002602:	f004 ff6d 	bl	80074e0 <HAL_DMAEx_ConfigTrigger>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_ADC_MspInit+0x444>
      Error_Handler();
 800260c:	f7ff fdbe 	bl	800218c <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8002610:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002614:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a0e      	ldr	r2, [pc, #56]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 800261c:	671a      	str	r2, [r3, #112]	@ 0x70
 800261e:	4a0d      	ldr	r2, [pc, #52]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 8002620:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002624:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 800262c:	2110      	movs	r1, #16
 800262e:	4809      	ldr	r0, [pc, #36]	@ (8002654 <HAL_ADC_MspInit+0x488>)
 8002630:	f003 ffb8 	bl	80065a4 <HAL_DMA_ConfigChannelAttributes>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_ADC_MspInit+0x472>
      Error_Handler();
 800263a:	f7ff fda7 	bl	800218c <Error_Handler>
}
 800263e:	bf00      	nop
 8002640:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	46021000 	.word	0x46021000
 800264c:	46020c00 	.word	0x46020c00
 8002650:	42021800 	.word	0x42021800
 8002654:	2000021c 	.word	0x2000021c
 8002658:	40020150 	.word	0x40020150

0800265c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0b      	ldr	r2, [pc, #44]	@ (8002698 <HAL_DMA2D_MspInit+0x3c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d10e      	bne.n	800268c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_DMA2D_MspInit+0x40>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002674:	4a09      	ldr	r2, [pc, #36]	@ (800269c <HAL_DMA2D_MspInit+0x40>)
 8002676:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800267a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800267e:	4b07      	ldr	r3, [pc, #28]	@ (800269c <HAL_DMA2D_MspInit+0x40>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	4002b000 	.word	0x4002b000
 800269c:	46020c00 	.word	0x46020c00

080026a0 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	@ 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002768 <HAL_XSPI_MspInit+0xc8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d14d      	bne.n	800275e <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 80026c2:	4b2a      	ldr	r3, [pc, #168]	@ (800276c <HAL_XSPI_MspInit+0xcc>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c8:	4a28      	ldr	r2, [pc, #160]	@ (800276c <HAL_XSPI_MspInit+0xcc>)
 80026ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026d2:	4b26      	ldr	r3, [pc, #152]	@ (800276c <HAL_XSPI_MspInit+0xcc>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026e0:	4b22      	ldr	r3, [pc, #136]	@ (800276c <HAL_XSPI_MspInit+0xcc>)
 80026e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026e6:	4a21      	ldr	r2, [pc, #132]	@ (800276c <HAL_XSPI_MspInit+0xcc>)
 80026e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026f0:	4b1e      	ldr	r3, [pc, #120]	@ (800276c <HAL_XSPI_MspInit+0xcc>)
 80026f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026fe:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <HAL_XSPI_MspInit+0xcc>)
 8002700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002704:	4a19      	ldr	r2, [pc, #100]	@ (800276c <HAL_XSPI_MspInit+0xcc>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800270e:	4b17      	ldr	r3, [pc, #92]	@ (800276c <HAL_XSPI_MspInit+0xcc>)
 8002710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800271c:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8002720:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 800272e:	2308      	movs	r3, #8
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	4619      	mov	r1, r3
 8002738:	480d      	ldr	r0, [pc, #52]	@ (8002770 <HAL_XSPI_MspInit+0xd0>)
 800273a:	f005 fc07 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800273e:	230f      	movs	r3, #15
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 800274e:	2308      	movs	r3, #8
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	4806      	ldr	r0, [pc, #24]	@ (8002774 <HAL_XSPI_MspInit+0xd4>)
 800275a:	f005 fbf7 	bl	8007f4c <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 800275e:	bf00      	nop
 8002760:	3728      	adds	r7, #40	@ 0x28
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	420d3400 	.word	0x420d3400
 800276c:	46020c00 	.word	0x46020c00
 8002770:	42021c00 	.word	0x42021c00
 8002774:	42022000 	.word	0x42022000

08002778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0c4      	sub	sp, #272	@ 0x110
 800277c:	af00      	add	r7, sp, #0
 800277e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002782:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002786:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	22e0      	movs	r2, #224	@ 0xe0
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f00f ff12 	bl	80125ca <memset>
  if(hi2c->Instance==I2C1)
 80027a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80027aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a63      	ldr	r2, [pc, #396]	@ (8002940 <HAL_I2C_MspInit+0x1c8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d14f      	bne.n	8002858 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027b8:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ca:	f107 0318 	add.w	r3, r7, #24
 80027ce:	4618      	mov	r0, r3
 80027d0:	f009 f8b8 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 80027da:	f7ff fcd7 	bl	800218c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027de:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 80027e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027e4:	4a57      	ldr	r2, [pc, #348]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 80027e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027ee:	4b55      	ldr	r3, [pc, #340]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 80027f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80027fc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002800:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002804:	2312      	movs	r3, #18
 8002806:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002816:	2304      	movs	r3, #4
 8002818:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800281c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002820:	4619      	mov	r1, r3
 8002822:	4849      	ldr	r0, [pc, #292]	@ (8002948 <HAL_I2C_MspInit+0x1d0>)
 8002824:	f005 fb92 	bl	8007f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002828:	4b46      	ldr	r3, [pc, #280]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 800282a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800282e:	4a45      	ldr	r2, [pc, #276]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 8002830:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002834:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002838:	4b42      	ldr	r3, [pc, #264]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 800283a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800283e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002842:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002846:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002850:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002854:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002856:	e06e      	b.n	8002936 <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8002858:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800285c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a39      	ldr	r2, [pc, #228]	@ (800294c <HAL_I2C_MspInit+0x1d4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d165      	bne.n	8002936 <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800286a:	f04f 0280 	mov.w	r2, #128	@ 0x80
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800287c:	f107 0318 	add.w	r3, r7, #24
 8002880:	4618      	mov	r0, r3
 8002882:	f009 f85f 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 800288c:	f7ff fc7e 	bl	800218c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002890:	4b2c      	ldr	r3, [pc, #176]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 8002892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002896:	4a2b      	ldr	r2, [pc, #172]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 8002898:	f043 0320 	orr.w	r3, r3, #32
 800289c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028a0:	4b28      	ldr	r3, [pc, #160]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 80028a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028a6:	f003 0220 	and.w	r2, r3, #32
 80028aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028bc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028be:	2303      	movs	r3, #3
 80028c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c4:	2312      	movs	r3, #18
 80028c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028d6:	2304      	movs	r3, #4
 80028d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028dc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80028e0:	4619      	mov	r1, r3
 80028e2:	481b      	ldr	r0, [pc, #108]	@ (8002950 <HAL_I2C_MspInit+0x1d8>)
 80028e4:	f005 fb32 	bl	8007f4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028e8:	4b16      	ldr	r3, [pc, #88]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 80028ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028ee:	4a15      	ldr	r2, [pc, #84]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 80028f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028f4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80028f8:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_I2C_MspInit+0x1cc>)
 80028fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028fe:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002902:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002914:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	2039      	movs	r0, #57	@ 0x39
 800291c:	f003 f9c6 	bl	8005cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002920:	2039      	movs	r0, #57	@ 0x39
 8002922:	f003 f9dd 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	203a      	movs	r0, #58	@ 0x3a
 800292c:	f003 f9be 	bl	8005cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002930:	203a      	movs	r0, #58	@ 0x3a
 8002932:	f003 f9d5 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
}
 8002936:	bf00      	nop
 8002938:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40005400 	.word	0x40005400
 8002944:	46020c00 	.word	0x46020c00
 8002948:	42021800 	.word	0x42021800
 800294c:	40005800 	.word	0x40005800
 8002950:	42021400 	.word	0x42021400

08002954 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b0c6      	sub	sp, #280	@ 0x118
 8002958:	af00      	add	r7, sp, #0
 800295a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800295e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002962:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002974:	f107 0320 	add.w	r3, r7, #32
 8002978:	22e0      	movs	r2, #224	@ 0xe0
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f00f fe24 	bl	80125ca <memset>
  if(hltdc->Instance==LTDC)
 8002982:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002986:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a92      	ldr	r2, [pc, #584]	@ (8002bd8 <HAL_LTDC_MspInit+0x284>)
 8002990:	4293      	cmp	r3, r2
 8002992:	f040 811b 	bne.w	8002bcc <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0302 	mov.w	r3, #2
 800299e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 80029a8:	2303      	movs	r3, #3
 80029aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 80029ac:	2304      	movs	r3, #4
 80029ae:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 80029b0:	2332      	movs	r3, #50	@ 0x32
 80029b2:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 80029b4:	2302      	movs	r3, #2
 80029b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 80029b8:	2302      	movs	r3, #2
 80029ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 80029bc:	2308      	movs	r3, #8
 80029be:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 80029c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80029cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ce:	f107 0320 	add.w	r3, r7, #32
 80029d2:	4618      	mov	r0, r3
 80029d4:	f008 ffb6 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 80029de:	f7ff fbd5 	bl	800218c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80029e2:	4b7e      	ldr	r3, [pc, #504]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 80029e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80029e8:	4a7c      	ldr	r2, [pc, #496]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 80029ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029ee:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80029f2:	4b7a      	ldr	r3, [pc, #488]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 80029f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80029f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a00:	4b76      	ldr	r3, [pc, #472]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a06:	4a75      	ldr	r2, [pc, #468]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a10:	4b72      	ldr	r3, [pc, #456]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a16:	f003 0202 	and.w	r2, r3, #2
 8002a1a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a1e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a28:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a2c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a2e:	4b6b      	ldr	r3, [pc, #428]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a34:	4a69      	ldr	r2, [pc, #420]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a36:	f043 0310 	orr.w	r3, r3, #16
 8002a3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a3e:	4b67      	ldr	r3, [pc, #412]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a44:	f003 0210 	and.w	r2, r3, #16
 8002a48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a5a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a5c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a62:	4a5e      	ldr	r2, [pc, #376]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a72:	f003 0208 	and.w	r2, r3, #8
 8002a76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a88:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	4b54      	ldr	r3, [pc, #336]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a90:	4a52      	ldr	r2, [pc, #328]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a9a:	4b50      	ldr	r3, [pc, #320]	@ (8002bdc <HAL_LTDC_MspInit+0x288>)
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aa0:	f003 0204 	and.w	r2, r3, #4
 8002aa4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002aa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002ab2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ab6:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ab8:	2304      	movs	r3, #4
 8002aba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002ada:	4619      	mov	r1, r3
 8002adc:	4840      	ldr	r0, [pc, #256]	@ (8002be0 <HAL_LTDC_MspInit+0x28c>)
 8002ade:	f005 fa35 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002ae2:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8002ae6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002afc:	2308      	movs	r3, #8
 8002afe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b02:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002b06:	4619      	mov	r1, r3
 8002b08:	4836      	ldr	r0, [pc, #216]	@ (8002be4 <HAL_LTDC_MspInit+0x290>)
 8002b0a:	f005 fa1f 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002b0e:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8002b12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b2e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002b32:	4619      	mov	r1, r3
 8002b34:	482c      	ldr	r0, [pc, #176]	@ (8002be8 <HAL_LTDC_MspInit+0x294>)
 8002b36:	f005 fa09 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b3a:	23c0      	movs	r3, #192	@ 0xc0
 8002b3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002b52:	2307      	movs	r3, #7
 8002b54:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b58:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4823      	ldr	r0, [pc, #140]	@ (8002bec <HAL_LTDC_MspInit+0x298>)
 8002b60:	f005 f9f4 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b64:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002b7e:	2308      	movs	r3, #8
 8002b80:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b84:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4818      	ldr	r0, [pc, #96]	@ (8002bec <HAL_LTDC_MspInit+0x298>)
 8002b8c:	f005 f9de 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002baa:	2307      	movs	r3, #7
 8002bac:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	480a      	ldr	r0, [pc, #40]	@ (8002be0 <HAL_LTDC_MspInit+0x28c>)
 8002bb8:	f005 f9c8 	bl	8007f4c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2087      	movs	r0, #135	@ 0x87
 8002bc2:	f003 f873 	bl	8005cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002bc6:	2087      	movs	r0, #135	@ 0x87
 8002bc8:	f003 f88a 	bl	8005ce0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002bcc:	bf00      	nop
 8002bce:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40016800 	.word	0x40016800
 8002bdc:	46020c00 	.word	0x46020c00
 8002be0:	42020400 	.word	0x42020400
 8002be4:	42021000 	.word	0x42021000
 8002be8:	42020c00 	.word	0x42020c00
 8002bec:	42020800 	.word	0x42020800

08002bf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b0bc      	sub	sp, #240	@ 0xf0
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf8:	f107 0310 	add.w	r3, r7, #16
 8002bfc:	22e0      	movs	r2, #224	@ 0xe0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f00f fce2 	bl	80125ca <memset>
  if(hrtc->Instance==RTC)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002c80 <HAL_RTC_MspInit+0x90>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d132      	bne.n	8002c76 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c10:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f008 fe8b 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002c34:	f7ff faaa 	bl	800218c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_RTC_MspInit+0x94>)
 8002c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c3e:	4a11      	ldr	r2, [pc, #68]	@ (8002c84 <HAL_RTC_MspInit+0x94>)
 8002c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c48:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <HAL_RTC_MspInit+0x94>)
 8002c4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c84 <HAL_RTC_MspInit+0x94>)
 8002c50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c54:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002c58:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <HAL_RTC_MspInit+0x94>)
 8002c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002c66:	4b07      	ldr	r3, [pc, #28]	@ (8002c84 <HAL_RTC_MspInit+0x94>)
 8002c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c6c:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <HAL_RTC_MspInit+0x94>)
 8002c6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002c76:	bf00      	nop
 8002c78:	37f0      	adds	r7, #240	@ 0xf0
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	46007800 	.word	0x46007800
 8002c84:	46020c00 	.word	0x46020c00

08002c88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10e      	bne.n	8002cb8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_TIM_PWM_MspInit+0x40>)
 8002c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ca0:	4a09      	ldr	r2, [pc, #36]	@ (8002cc8 <HAL_TIM_PWM_MspInit+0x40>)
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002caa:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <HAL_TIM_PWM_MspInit+0x40>)
 8002cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	46020c00 	.word	0x46020c00

08002ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d08 <HAL_TIM_Base_MspInit+0x3c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10e      	bne.n	8002cfc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002cde:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_TIM_Base_MspInit+0x40>)
 8002ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ce4:	4a09      	ldr	r2, [pc, #36]	@ (8002d0c <HAL_TIM_Base_MspInit+0x40>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cea:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002cee:	4b07      	ldr	r3, [pc, #28]	@ (8002d0c <HAL_TIM_Base_MspInit+0x40>)
 8002cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	46020c00 	.word	0x46020c00

08002d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 030c 	add.w	r3, r7, #12
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a12      	ldr	r2, [pc, #72]	@ (8002d78 <HAL_TIM_MspPostInit+0x68>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d11e      	bne.n	8002d70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d32:	4b12      	ldr	r3, [pc, #72]	@ (8002d7c <HAL_TIM_MspPostInit+0x6c>)
 8002d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d38:	4a10      	ldr	r2, [pc, #64]	@ (8002d7c <HAL_TIM_MspPostInit+0x6c>)
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <HAL_TIM_MspPostInit+0x6c>)
 8002d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002d50:	2340      	movs	r3, #64	@ 0x40
 8002d52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4805      	ldr	r0, [pc, #20]	@ (8002d80 <HAL_TIM_MspPostInit+0x70>)
 8002d6c:	f005 f8ee 	bl	8007f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d70:	bf00      	nop
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	46020c00 	.word	0x46020c00
 8002d80:	42021000 	.word	0x42021000

08002d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b0c2      	sub	sp, #264	@ 0x108
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d92:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	22e0      	movs	r2, #224	@ 0xe0
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f00f fc0c 	bl	80125ca <memset>
  if(huart->Instance==USART1)
 8002db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8002e7c <HAL_UART_MspInit+0xf8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d155      	bne.n	8002e70 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002dc4:	f04f 0201 	mov.w	r2, #1
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f008 fdb3 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002de4:	f7ff f9d2 	bl	800218c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002de8:	4b25      	ldr	r3, [pc, #148]	@ (8002e80 <HAL_UART_MspInit+0xfc>)
 8002dea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002dee:	4a24      	ldr	r2, [pc, #144]	@ (8002e80 <HAL_UART_MspInit+0xfc>)
 8002df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002df8:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <HAL_UART_MspInit+0xfc>)
 8002dfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	4b1e      	ldr	r3, [pc, #120]	@ (8002e80 <HAL_UART_MspInit+0xfc>)
 8002e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002e80 <HAL_UART_MspInit+0xfc>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e16:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <HAL_UART_MspInit+0xfc>)
 8002e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e1c:	f003 0201 	and.w	r2, r3, #1
 8002e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e32:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002e38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e4e:	2307      	movs	r3, #7
 8002e50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	480a      	ldr	r0, [pc, #40]	@ (8002e84 <HAL_UART_MspInit+0x100>)
 8002e5c:	f005 f876 	bl	8007f4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2100      	movs	r1, #0
 8002e64:	203d      	movs	r0, #61	@ 0x3d
 8002e66:	f002 ff21 	bl	8005cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e6a:	203d      	movs	r0, #61	@ 0x3d
 8002e6c:	f002 ff38 	bl	8005ce0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002e70:	bf00      	nop
 8002e72:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	46020c00 	.word	0x46020c00
 8002e84:	42020000 	.word	0x42020000

08002e88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b0be      	sub	sp, #248	@ 0xf8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e90:	f107 0318 	add.w	r3, r7, #24
 8002e94:	22e0      	movs	r2, #224	@ 0xe0
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f00f fb96 	bl	80125ca <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3a      	ldr	r2, [pc, #232]	@ (8002f8c <HAL_PCD_MspInit+0x104>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d16d      	bne.n	8002f84 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea8:	4b39      	ldr	r3, [pc, #228]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002eaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002eae:	4a38      	ldr	r2, [pc, #224]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002eb8:	4b35      	ldr	r3, [pc, #212]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002eba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0308 	mov.w	r3, #8
 8002ece:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002ed2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ed6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eda:	f107 0318 	add.w	r3, r7, #24
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f008 fd30 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 8002eea:	f7ff f94f 	bl	800218c <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002eee:	200c      	movs	r0, #12
 8002ef0:	f000 fc1c 	bl	800372c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002ef4:	4b26      	ldr	r3, [pc, #152]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002efa:	4a25      	ldr	r2, [pc, #148]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f04:	4b22      	ldr	r3, [pc, #136]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002f12:	4b1f      	ldr	r3, [pc, #124]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f18:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f22:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f30:	4b17      	ldr	r3, [pc, #92]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11b      	bne.n	8002f76 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f44:	4a12      	ldr	r2, [pc, #72]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002f4e:	4b10      	ldr	r3, [pc, #64]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002f5c:	f007 f9f8 	bl	800a350 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002f60:	f007 fa26 	bl	800a3b0 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f6a:	4a09      	ldr	r2, [pc, #36]	@ (8002f90 <HAL_PCD_MspInit+0x108>)
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002f74:	e003      	b.n	8002f7e <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002f76:	f007 f9eb 	bl	800a350 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002f7a:	f007 fa19 	bl	800a3b0 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f000 fbc0 	bl	8003704 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002f84:	bf00      	nop
 8002f86:	37f8      	adds	r7, #248	@ 0xf8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	42040000 	.word	0x42040000
 8002f90:	46020c00 	.word	0x46020c00

08002f94 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b0a4      	sub	sp, #144	@ 0x90
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4abb      	ldr	r2, [pc, #748]	@ (8003290 <HAL_SAI_MspInit+0x2fc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	f040 80ca 	bne.w	800313c <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002fa8:	4bba      	ldr	r3, [pc, #744]	@ (8003294 <HAL_SAI_MspInit+0x300>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10e      	bne.n	8002fce <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002fb0:	4bb9      	ldr	r3, [pc, #740]	@ (8003298 <HAL_SAI_MspInit+0x304>)
 8002fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fb6:	4ab8      	ldr	r2, [pc, #736]	@ (8003298 <HAL_SAI_MspInit+0x304>)
 8002fb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fbc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002fc0:	4bb5      	ldr	r3, [pc, #724]	@ (8003298 <HAL_SAI_MspInit+0x304>)
 8002fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002fce:	4bb1      	ldr	r3, [pc, #708]	@ (8003294 <HAL_SAI_MspInit+0x300>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4aaf      	ldr	r2, [pc, #700]	@ (8003294 <HAL_SAI_MspInit+0x300>)
 8002fd6:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002fd8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002ff0:	230d      	movs	r3, #13
 8002ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	48a7      	ldr	r0, [pc, #668]	@ (800329c <HAL_SAI_MspInit+0x308>)
 8002ffe:	f004 ffa5 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003002:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003006:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	2302      	movs	r3, #2
 800300a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003014:	2303      	movs	r3, #3
 8003016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800301a:	230d      	movs	r3, #13
 800301c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003020:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003024:	4619      	mov	r1, r3
 8003026:	489d      	ldr	r0, [pc, #628]	@ (800329c <HAL_SAI_MspInit+0x308>)
 8003028:	f004 ff90 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800302c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003030:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003044:	230d      	movs	r3, #13
 8003046:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800304a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800304e:	4619      	mov	r1, r3
 8003050:	4893      	ldr	r0, [pc, #588]	@ (80032a0 <HAL_SAI_MspInit+0x30c>)
 8003052:	f004 ff7b 	bl	8007f4c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8003056:	2321      	movs	r3, #33	@ 0x21
 8003058:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 800305a:	2326      	movs	r3, #38	@ 0x26
 800305c:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003066:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8003068:	2308      	movs	r3, #8
 800306a:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8003070:	2302      	movs	r3, #2
 8003072:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8003074:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800307e:	2301      	movs	r3, #1
 8003080:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003082:	2300      	movs	r3, #0
 8003084:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003086:	2300      	movs	r3, #0
 8003088:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800308a:	2300      	movs	r3, #0
 800308c:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800308e:	2300      	movs	r3, #0
 8003090:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8003092:	2300      	movs	r3, #0
 8003094:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8003096:	2300      	movs	r3, #0
 8003098:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 800309a:	f107 0310 	add.w	r3, r7, #16
 800309e:	4981      	ldr	r1, [pc, #516]	@ (80032a4 <HAL_SAI_MspInit+0x310>)
 80030a0:	4618      	mov	r0, r3
 80030a2:	f004 f831 	bl	8007108 <HAL_DMAEx_List_BuildNode>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 80030ac:	f7ff f86e 	bl	800218c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 80030b0:	4a7c      	ldr	r2, [pc, #496]	@ (80032a4 <HAL_SAI_MspInit+0x310>)
 80030b2:	2100      	movs	r1, #0
 80030b4:	487c      	ldr	r0, [pc, #496]	@ (80032a8 <HAL_SAI_MspInit+0x314>)
 80030b6:	f004 f853 	bl	8007160 <HAL_DMAEx_List_InsertNode>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 80030c0:	f7ff f864 	bl	800218c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 80030c4:	4878      	ldr	r0, [pc, #480]	@ (80032a8 <HAL_SAI_MspInit+0x314>)
 80030c6:	f004 f914 	bl	80072f2 <HAL_DMAEx_List_SetCircularMode>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 80030d0:	f7ff f85c 	bl	800218c <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80030d4:	4b75      	ldr	r3, [pc, #468]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 80030d6:	4a76      	ldr	r2, [pc, #472]	@ (80032b0 <HAL_SAI_MspInit+0x31c>)
 80030d8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80030da:	4b74      	ldr	r3, [pc, #464]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 80030dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030e0:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80030e2:	4b72      	ldr	r3, [pc, #456]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80030e8:	4b70      	ldr	r3, [pc, #448]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80030ee:	4b6f      	ldr	r3, [pc, #444]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80030f4:	4b6d      	ldr	r3, [pc, #436]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 80030f6:	2281      	movs	r2, #129	@ 0x81
 80030f8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80030fa:	486c      	ldr	r0, [pc, #432]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 80030fc:	f003 fe44 	bl	8006d88 <HAL_DMAEx_List_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 8003106:	f7ff f841 	bl	800218c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 800310a:	4967      	ldr	r1, [pc, #412]	@ (80032a8 <HAL_SAI_MspInit+0x314>)
 800310c:	4867      	ldr	r0, [pc, #412]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 800310e:	f004 f951 	bl	80073b4 <HAL_DMAEx_List_LinkQ>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 8003118:	f7ff f838 	bl	800218c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a63      	ldr	r2, [pc, #396]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 8003120:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003124:	4a61      	ldr	r2, [pc, #388]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 800312a:	2110      	movs	r1, #16
 800312c:	485f      	ldr	r0, [pc, #380]	@ (80032ac <HAL_SAI_MspInit+0x318>)
 800312e:	f003 fa39 	bl	80065a4 <HAL_DMA_ConfigChannelAttributes>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8003138:	f7ff f828 	bl	800218c <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a5c      	ldr	r2, [pc, #368]	@ (80032b4 <HAL_SAI_MspInit+0x320>)
 8003142:	4293      	cmp	r3, r2
 8003144:	f040 80eb 	bne.w	800331e <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003148:	4b52      	ldr	r3, [pc, #328]	@ (8003294 <HAL_SAI_MspInit+0x300>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10e      	bne.n	800316e <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003150:	4b51      	ldr	r3, [pc, #324]	@ (8003298 <HAL_SAI_MspInit+0x304>)
 8003152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003156:	4a50      	ldr	r2, [pc, #320]	@ (8003298 <HAL_SAI_MspInit+0x304>)
 8003158:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800315c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003160:	4b4d      	ldr	r3, [pc, #308]	@ (8003298 <HAL_SAI_MspInit+0x304>)
 8003162:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800316e:	4b49      	ldr	r3, [pc, #292]	@ (8003294 <HAL_SAI_MspInit+0x300>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3301      	adds	r3, #1
 8003174:	4a47      	ldr	r2, [pc, #284]	@ (8003294 <HAL_SAI_MspInit+0x300>)
 8003176:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003178:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800317c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318a:	2303      	movs	r3, #3
 800318c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003190:	230d      	movs	r3, #13
 8003192:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003196:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800319a:	4619      	mov	r1, r3
 800319c:	4846      	ldr	r0, [pc, #280]	@ (80032b8 <HAL_SAI_MspInit+0x324>)
 800319e:	f004 fed5 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80031ba:	230d      	movs	r3, #13
 80031bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80031c4:	4619      	mov	r1, r3
 80031c6:	483d      	ldr	r0, [pc, #244]	@ (80032bc <HAL_SAI_MspInit+0x328>)
 80031c8:	f004 fec0 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80031cc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80031d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d2:	2302      	movs	r3, #2
 80031d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80031e4:	230d      	movs	r3, #13
 80031e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ea:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80031ee:	4619      	mov	r1, r3
 80031f0:	4832      	ldr	r0, [pc, #200]	@ (80032bc <HAL_SAI_MspInit+0x328>)
 80031f2:	f004 feab 	bl	8007f4c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80031f6:	2321      	movs	r3, #33	@ 0x21
 80031f8:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80031fa:	2327      	movs	r3, #39	@ 0x27
 80031fc:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8003206:	2300      	movs	r3, #0
 8003208:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800320a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8003210:	2302      	movs	r3, #2
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8003214:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800321a:	2301      	movs	r3, #1
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003222:	2300      	movs	r3, #0
 8003224:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003226:	2300      	movs	r3, #0
 8003228:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800322a:	2300      	movs	r3, #0
 800322c:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800322e:	2300      	movs	r3, #0
 8003230:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8003232:	2300      	movs	r3, #0
 8003234:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8003236:	2300      	movs	r3, #0
 8003238:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 800323a:	f107 0310 	add.w	r3, r7, #16
 800323e:	4920      	ldr	r1, [pc, #128]	@ (80032c0 <HAL_SAI_MspInit+0x32c>)
 8003240:	4618      	mov	r0, r3
 8003242:	f003 ff61 	bl	8007108 <HAL_DMAEx_List_BuildNode>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 800324c:	f7fe ff9e 	bl	800218c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8003250:	4a1b      	ldr	r2, [pc, #108]	@ (80032c0 <HAL_SAI_MspInit+0x32c>)
 8003252:	2100      	movs	r1, #0
 8003254:	481b      	ldr	r0, [pc, #108]	@ (80032c4 <HAL_SAI_MspInit+0x330>)
 8003256:	f003 ff83 	bl	8007160 <HAL_DMAEx_List_InsertNode>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8003260:	f7fe ff94 	bl	800218c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8003264:	4817      	ldr	r0, [pc, #92]	@ (80032c4 <HAL_SAI_MspInit+0x330>)
 8003266:	f004 f844 	bl	80072f2 <HAL_DMAEx_List_SetCircularMode>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8003270:	f7fe ff8c 	bl	800218c <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8003274:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <HAL_SAI_MspInit+0x334>)
 8003276:	4a15      	ldr	r2, [pc, #84]	@ (80032cc <HAL_SAI_MspInit+0x338>)
 8003278:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 800327a:	4b13      	ldr	r3, [pc, #76]	@ (80032c8 <HAL_SAI_MspInit+0x334>)
 800327c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003280:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8003282:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <HAL_SAI_MspInit+0x334>)
 8003284:	2200      	movs	r2, #0
 8003286:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8003288:	4b0f      	ldr	r3, [pc, #60]	@ (80032c8 <HAL_SAI_MspInit+0x334>)
 800328a:	2200      	movs	r2, #0
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40
 800328e:	e01f      	b.n	80032d0 <HAL_SAI_MspInit+0x33c>
 8003290:	40015804 	.word	0x40015804
 8003294:	2003ab5c 	.word	0x2003ab5c
 8003298:	46020c00 	.word	0x46020c00
 800329c:	42020400 	.word	0x42020400
 80032a0:	42021800 	.word	0x42021800
 80032a4:	2000060c 	.word	0x2000060c
 80032a8:	20000630 	.word	0x20000630
 80032ac:	20000648 	.word	0x20000648
 80032b0:	400201d0 	.word	0x400201d0
 80032b4:	40015824 	.word	0x40015824
 80032b8:	42020000 	.word	0x42020000
 80032bc:	42020800 	.word	0x42020800
 80032c0:	200006c0 	.word	0x200006c0
 80032c4:	200006e4 	.word	0x200006e4
 80032c8:	200006fc 	.word	0x200006fc
 80032cc:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80032d0:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <HAL_SAI_MspInit+0x394>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80032d6:	4b14      	ldr	r3, [pc, #80]	@ (8003328 <HAL_SAI_MspInit+0x394>)
 80032d8:	2281      	movs	r2, #129	@ 0x81
 80032da:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80032dc:	4812      	ldr	r0, [pc, #72]	@ (8003328 <HAL_SAI_MspInit+0x394>)
 80032de:	f003 fd53 	bl	8006d88 <HAL_DMAEx_List_Init>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 80032e8:	f7fe ff50 	bl	800218c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80032ec:	490f      	ldr	r1, [pc, #60]	@ (800332c <HAL_SAI_MspInit+0x398>)
 80032ee:	480e      	ldr	r0, [pc, #56]	@ (8003328 <HAL_SAI_MspInit+0x394>)
 80032f0:	f004 f860 	bl	80073b4 <HAL_DMAEx_List_LinkQ>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 80032fa:	f7fe ff47 	bl	800218c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a09      	ldr	r2, [pc, #36]	@ (8003328 <HAL_SAI_MspInit+0x394>)
 8003302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003306:	4a08      	ldr	r2, [pc, #32]	@ (8003328 <HAL_SAI_MspInit+0x394>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800330c:	2110      	movs	r1, #16
 800330e:	4806      	ldr	r0, [pc, #24]	@ (8003328 <HAL_SAI_MspInit+0x394>)
 8003310:	f003 f948 	bl	80065a4 <HAL_DMA_ConfigChannelAttributes>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 800331a:	f7fe ff37 	bl	800218c <Error_Handler>
    }

    }
}
 800331e:	bf00      	nop
 8003320:	3790      	adds	r7, #144	@ 0x90
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	200006fc 	.word	0x200006fc
 800332c:	200006e4 	.word	0x200006e4

08003330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <NMI_Handler+0x4>

08003338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <HardFault_Handler+0x4>

08003340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <MemManage_Handler+0x4>

08003348 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <BusFault_Handler+0x4>

08003350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <UsageFault_Handler+0x4>

08003358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003386:	f000 f979 	bl	800367c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}

0800338e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8003392:	2002      	movs	r0, #2
 8003394:	f004 ffe4 	bl	8008360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}

0800339c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 80033a0:	2010      	movs	r0, #16
 80033a2:	f004 ffdd 	bl	8008360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}

080033aa <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80033ae:	2020      	movs	r0, #32
 80033b0:	f004 ffd6 	bl	8008360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80033bc:	4802      	ldr	r0, [pc, #8]	@ (80033c8 <GPDMA1_Channel0_IRQHandler+0x10>)
 80033be:	f002 ff82 	bl	80062c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200001a4 	.word	0x200001a4

080033cc <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80033d0:	4802      	ldr	r0, [pc, #8]	@ (80033dc <GPDMA1_Channel1_IRQHandler+0x10>)
 80033d2:	f002 ff78 	bl	80062c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200006fc 	.word	0x200006fc

080033e0 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80033e4:	4802      	ldr	r0, [pc, #8]	@ (80033f0 <GPDMA1_Channel2_IRQHandler+0x10>)
 80033e6:	f002 ff6e 	bl	80062c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2000021c 	.word	0x2000021c

080033f4 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80033f8:	4802      	ldr	r0, [pc, #8]	@ (8003404 <GPDMA1_Channel3_IRQHandler+0x10>)
 80033fa:	f002 ff64 	bl	80062c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000648 	.word	0x20000648

08003408 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800340c:	4802      	ldr	r0, [pc, #8]	@ (8003418 <ADC1_2_IRQHandler+0x10>)
 800340e:	f001 f925 	bl	800465c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000050 	.word	0x20000050

0800341c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003420:	4802      	ldr	r0, [pc, #8]	@ (800342c <I2C2_EV_IRQHandler+0x10>)
 8003422:	f005 f969 	bl	80086f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200003b0 	.word	0x200003b0

08003430 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003434:	4802      	ldr	r0, [pc, #8]	@ (8003440 <I2C2_ER_IRQHandler+0x10>)
 8003436:	f005 f979 	bl	800872c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200003b0 	.word	0x200003b0

08003444 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003448:	4802      	ldr	r0, [pc, #8]	@ (8003454 <USART1_IRQHandler+0x10>)
 800344a:	f00d fc05 	bl	8010c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	2000080c 	.word	0x2000080c

08003458 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800345c:	4802      	ldr	r0, [pc, #8]	@ (8003468 <LTDC_IRQHandler+0x10>)
 800345e:	f006 fae7 	bl	8009a30 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000404 	.word	0x20000404

0800346c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003470:	4b18      	ldr	r3, [pc, #96]	@ (80034d4 <SystemInit+0x68>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003476:	4a17      	ldr	r2, [pc, #92]	@ (80034d4 <SystemInit+0x68>)
 8003478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800347c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003480:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <SystemInit+0x6c>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003486:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <SystemInit+0x6c>)
 8003488:	2200      	movs	r2, #0
 800348a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800348c:	4b12      	ldr	r3, [pc, #72]	@ (80034d8 <SystemInit+0x6c>)
 800348e:	2200      	movs	r2, #0
 8003490:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003492:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <SystemInit+0x6c>)
 8003494:	2200      	movs	r2, #0
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003498:	4b0f      	ldr	r3, [pc, #60]	@ (80034d8 <SystemInit+0x6c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0e      	ldr	r2, [pc, #56]	@ (80034d8 <SystemInit+0x6c>)
 800349e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80034a2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80034a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80034a8:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <SystemInit+0x6c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80034ae:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <SystemInit+0x6c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a09      	ldr	r2, [pc, #36]	@ (80034d8 <SystemInit+0x6c>)
 80034b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80034ba:	4b07      	ldr	r3, [pc, #28]	@ (80034d8 <SystemInit+0x6c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034c0:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <SystemInit+0x68>)
 80034c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80034c6:	609a      	str	r2, [r3, #8]
  #endif
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00
 80034d8:	46020c00 	.word	0x46020c00

080034dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80034dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003514 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80034e0:	f7ff ffc4 	bl	800346c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80034e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80034e6:	e003      	b.n	80034f0 <LoopCopyDataInit>

080034e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80034ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80034ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80034ee:	3104      	adds	r1, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80034f0:	480a      	ldr	r0, [pc, #40]	@ (800351c <LoopForever+0xa>)
	ldr	r3, =_edata
 80034f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003520 <LoopForever+0xe>)
	adds	r2, r0, r1
 80034f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80034f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80034f8:	d3f6      	bcc.n	80034e8 <CopyDataInit>
	ldr	r2, =_sbss
 80034fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003524 <LoopForever+0x12>)
	b	LoopFillZerobss
 80034fc:	e002      	b.n	8003504 <LoopFillZerobss>

080034fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80034fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003500:	f842 3b04 	str.w	r3, [r2], #4

08003504 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003504:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <LoopForever+0x16>)
	cmp	r2, r3
 8003506:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003508:	d3f9      	bcc.n	80034fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800350a:	f00f f867 	bl	80125dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800350e:	f7fd f9b9 	bl	8000884 <main>

08003512 <LoopForever>:

LoopForever:
    b LoopForever
 8003512:	e7fe      	b.n	8003512 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003514:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8003518:	0801274c 	.word	0x0801274c
	ldr	r0, =_sdata
 800351c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003520:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 8003524:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8003528:	2003ab64 	.word	0x2003ab64

0800352c <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800352c:	e7fe      	b.n	800352c <ADC4_IRQHandler>
	...

08003530 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003534:	4b12      	ldr	r3, [pc, #72]	@ (8003580 <HAL_Init+0x50>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a11      	ldr	r2, [pc, #68]	@ (8003580 <HAL_Init+0x50>)
 800353a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003540:	2003      	movs	r0, #3
 8003542:	f002 fba8 	bl	8005c96 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003546:	f008 f81f 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800354a:	4602      	mov	r2, r0
 800354c:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <HAL_Init+0x54>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	490c      	ldr	r1, [pc, #48]	@ (8003588 <HAL_Init+0x58>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
 800355c:	4a0b      	ldr	r2, [pc, #44]	@ (800358c <HAL_Init+0x5c>)
 800355e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003560:	2004      	movs	r0, #4
 8003562:	f002 fbed 	bl	8005d40 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003566:	200f      	movs	r0, #15
 8003568:	f000 f812 	bl	8003590 <HAL_InitTick>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e002      	b.n	800357c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003576:	f7fe fe0f 	bl	8002198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40022000 	.word	0x40022000
 8003584:	46020c00 	.word	0x46020c00
 8003588:	0801263c 	.word	0x0801263c
 800358c:	20000028 	.word	0x20000028

08003590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800359c:	4b33      	ldr	r3, [pc, #204]	@ (800366c <HAL_InitTick+0xdc>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e05c      	b.n	8003662 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80035a8:	4b31      	ldr	r3, [pc, #196]	@ (8003670 <HAL_InitTick+0xe0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d10c      	bne.n	80035ce <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80035b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003674 <HAL_InitTick+0xe4>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b2c      	ldr	r3, [pc, #176]	@ (800366c <HAL_InitTick+0xdc>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4619      	mov	r1, r3
 80035be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e037      	b.n	800363e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80035ce:	f002 fc0f 	bl	8005df0 <HAL_SYSTICK_GetCLKSourceConfig>
 80035d2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d023      	beq.n	8003622 <HAL_InitTick+0x92>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d82d      	bhi.n	800363c <HAL_InitTick+0xac>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_InitTick+0x5e>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d00d      	beq.n	8003608 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80035ec:	e026      	b.n	800363c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80035ee:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <HAL_InitTick+0xe4>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b1e      	ldr	r3, [pc, #120]	@ (800366c <HAL_InitTick+0xdc>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	4619      	mov	r1, r3
 80035f8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80035fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	60fb      	str	r3, [r7, #12]
        break;
 8003606:	e01a      	b.n	800363e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003608:	4b18      	ldr	r3, [pc, #96]	@ (800366c <HAL_InitTick+0xdc>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003612:	fbb3 f3f2 	udiv	r3, r3, r2
 8003616:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800361a:	fbb2 f3f3 	udiv	r3, r2, r3
 800361e:	60fb      	str	r3, [r7, #12]
        break;
 8003620:	e00d      	b.n	800363e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003622:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_InitTick+0xdc>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800362c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003630:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003634:	fbb2 f3f3 	udiv	r3, r2, r3
 8003638:	60fb      	str	r3, [r7, #12]
        break;
 800363a:	e000      	b.n	800363e <HAL_InitTick+0xae>
        break;
 800363c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f002 fb5c 	bl	8005cfc <HAL_SYSTICK_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e009      	b.n	8003662 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800364e:	2200      	movs	r2, #0
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	f04f 30ff 	mov.w	r0, #4294967295
 8003656:	f002 fb29 	bl	8005cac <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800365a:	4a07      	ldr	r2, [pc, #28]	@ (8003678 <HAL_InitTick+0xe8>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000030 	.word	0x20000030
 8003670:	e000e010 	.word	0xe000e010
 8003674:	20000028 	.word	0x20000028
 8003678:	2000002c 	.word	0x2000002c

0800367c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003680:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_IncTick+0x20>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_IncTick+0x24>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4413      	add	r3, r2
 800368c:	4a04      	ldr	r2, [pc, #16]	@ (80036a0 <HAL_IncTick+0x24>)
 800368e:	6013      	str	r3, [r2, #0]
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000030 	.word	0x20000030
 80036a0:	2003ab60 	.word	0x2003ab60

080036a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return uwTick;
 80036a8:	4b03      	ldr	r3, [pc, #12]	@ (80036b8 <HAL_GetTick+0x14>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	2003ab60 	.word	0x2003ab60

080036bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036c4:	f7ff ffee 	bl	80036a4 <HAL_GetTick>
 80036c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d005      	beq.n	80036e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <HAL_Delay+0x44>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036e2:	bf00      	nop
 80036e4:	f7ff ffde 	bl	80036a4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d8f7      	bhi.n	80036e4 <HAL_Delay+0x28>
  {
  }
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000030 	.word	0x20000030

08003704 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003710:	f023 0201 	bic.w	r2, r3, #1
 8003714:	4904      	ldr	r1, [pc, #16]	@ (8003728 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4313      	orrs	r3, r2
 800371a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	46000400 	.word	0x46000400

0800372c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8003734:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8003736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003738:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 800373c:	4904      	ldr	r1, [pc, #16]	@ (8003750 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4313      	orrs	r3, r2
 8003742:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	46000400 	.word	0x46000400

08003754 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	609a      	str	r2, [r3, #8]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <LL_ADC_SetResolution+0x3c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d104      	bne.n	80037dc <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f023 020c 	bic.w	r2, r3, #12
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	46021000 	.word	0x46021000

080037fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3360      	adds	r3, #96	@ 0x60
 800380e:	461a      	mov	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	430b      	orrs	r3, r1
 800382c:	431a      	orrs	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8003832:	bf00      	nop
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800383e:	b480      	push	{r7}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3360      	adds	r3, #96	@ 0x60
 800384c:	461a      	mov	r2, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800386a:	b480      	push	{r7}
 800386c:	b087      	sub	sp, #28
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3360      	adds	r3, #96	@ 0x60
 800387a:	461a      	mov	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	431a      	orrs	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	601a      	str	r2, [r3, #0]
}
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3360      	adds	r3, #96	@ 0x60
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	601a      	str	r2, [r3, #0]
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3360      	adds	r3, #96	@ 0x60
 80038e6:	461a      	mov	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	601a      	str	r2, [r3, #0]
}
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800391e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	2a00      	cmp	r2, #0
 8003936:	d002      	beq.n	800393e <LL_ADC_SetGainCompensation+0x32>
 8003938:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800393c:	e000      	b.n	8003940 <LL_ADC_SetGainCompensation+0x34>
 800393e:	2200      	movs	r2, #0
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2107      	movs	r1, #7
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	401a      	ands	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	fa01 f303 	lsl.w	r3, r1, r3
 800397e:	431a      	orrs	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b089      	sub	sp, #36	@ 0x24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003a74 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d020      	beq.n	8003a0e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3330      	adds	r3, #48	@ 0x30
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	4413      	add	r3, r2
 80039de:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	211f      	movs	r1, #31
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	f003 011f 	and.w	r1, r3, #31
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	431a      	orrs	r2, r3
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003a0c:	e02b      	b.n	8003a66 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	210f      	movs	r1, #15
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	401a      	ands	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	0e9b      	lsrs	r3, r3, #26
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	e010      	b.n	8003a58 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	613b      	str	r3, [r7, #16]
  return result;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	e003      	b.n	8003a58 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	f001 011f 	and.w	r1, r1, #31
 8003a5e:	408b      	lsls	r3, r1
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a66:	bf00      	nop
 8003a68:	3724      	adds	r7, #36	@ 0x24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	46021000 	.word	0x46021000

08003a78 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	0e9b      	lsrs	r3, r3, #26
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2201      	movs	r2, #1
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	e015      	b.n	8003ac8 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	60fb      	str	r3, [r7, #12]
  return result;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8003ab2:	2320      	movs	r3, #32
 8003ab4:	e003      	b.n	8003abe <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	0e9b      	lsrs	r3, r3, #26
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	401a      	ands	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b36:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b08b      	sub	sp, #44	@ 0x2c
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c14 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d042      	beq.n	8003bea <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <LL_ADC_SetChannelSamplingTime+0x28>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	0e9b      	lsrs	r3, r3, #26
 8003b72:	f003 021f 	and.w	r2, r3, #31
 8003b76:	e011      	b.n	8003b9c <LL_ADC_SetChannelSamplingTime+0x4c>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	617b      	str	r3, [r7, #20]
  return result;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003b8e:	2320      	movs	r3, #32
 8003b90:	e003      	b.n	8003b9a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	0e5b      	lsrs	r3, r3, #25
 8003ba0:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	1ad2      	subs	r2, r2, r3
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3314      	adds	r3, #20
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	0e5b      	lsrs	r3, r3, #25
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2107      	movs	r1, #7
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	401a      	ands	r2, r3
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	431a      	orrs	r2, r3
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003be8:	e00e      	b.n	8003c08 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	401a      	ands	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	0219      	lsls	r1, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	615a      	str	r2, [r3, #20]
}
 8003c08:	bf00      	nop
 8003c0a:	372c      	adds	r7, #44	@ 0x2c
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	46021000 	.word	0x46021000

08003c18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c30:	43db      	mvns	r3, r3
 8003c32:	401a      	ands	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0318 	and.w	r3, r3, #24
 8003c3a:	4908      	ldr	r1, [pc, #32]	@ (8003c5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c3c:	40d9      	lsrs	r1, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	400b      	ands	r3, r1
 8003c42:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c46:	431a      	orrs	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	000fffff 	.word	0x000fffff

08003c60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 031f 	and.w	r3, r3, #31
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003ca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6093      	str	r3, [r2, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cd0:	d101      	bne.n	8003cd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003cf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cf8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d20:	d101      	bne.n	8003d26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d48:	f043 0201 	orr.w	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <LL_ADC_IsEnabled+0x18>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <LL_ADC_IsEnabled+0x1a>
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d96:	f043 0204 	orr.w	r2, r3, #4
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	609a      	str	r2, [r3, #8]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d101      	bne.n	8003dc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d101      	bne.n	8003de8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b08b      	sub	sp, #44	@ 0x2c
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e2ce      	b.n	80043b6 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a95      	ldr	r2, [pc, #596]	@ (800407c <HAL_ADC_Init+0x284>)
 8003e26:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7fe f9cb 	bl	80021cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff37 	bl	8003cbc <LL_ADC_IsDeepPowerDownEnabled>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff1d 	bl	8003c98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ff52 	bl	8003d0c <LL_ADC_IsInternalRegulatorEnabled>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d115      	bne.n	8003e9a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff36 	bl	8003ce4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e78:	4b81      	ldr	r3, [pc, #516]	@ (8004080 <HAL_ADC_Init+0x288>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	4a81      	ldr	r2, [pc, #516]	@ (8004084 <HAL_ADC_Init+0x28c>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e8c:	e002      	b.n	8003e94 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f9      	bne.n	8003e8e <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff ff34 	bl	8003d0c <LL_ADC_IsInternalRegulatorEnabled>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eae:	f043 0210 	orr.w	r2, r3, #16
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eba:	f043 0201 	orr.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ff6c 	bl	8003daa <LL_ADC_REG_IsConversionOngoing>
 8003ed2:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f040 825f 	bne.w	80043a0 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f040 825b 	bne.w	80043a0 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eee:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ef2:	f043 0202 	orr.w	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff ff2c 	bl	8003d5c <LL_ADC_IsEnabled>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d14f      	bne.n	8003faa <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800407c <HAL_ADC_Init+0x284>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d037      	beq.n	8003f84 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a5b      	ldr	r2, [pc, #364]	@ (8004088 <HAL_ADC_Init+0x290>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_ADC_Init+0x130>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a5a      	ldr	r2, [pc, #360]	@ (800408c <HAL_ADC_Init+0x294>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d10e      	bne.n	8003f46 <HAL_ADC_Init+0x14e>
 8003f28:	4857      	ldr	r0, [pc, #348]	@ (8004088 <HAL_ADC_Init+0x290>)
 8003f2a:	f7ff ff17 	bl	8003d5c <LL_ADC_IsEnabled>
 8003f2e:	4604      	mov	r4, r0
 8003f30:	4856      	ldr	r0, [pc, #344]	@ (800408c <HAL_ADC_Init+0x294>)
 8003f32:	f7ff ff13 	bl	8003d5c <LL_ADC_IsEnabled>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4323      	orrs	r3, r4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	bf0c      	ite	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	2300      	movne	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	e008      	b.n	8003f58 <HAL_ADC_Init+0x160>
 8003f46:	484d      	ldr	r0, [pc, #308]	@ (800407c <HAL_ADC_Init+0x284>)
 8003f48:	f7ff ff08 	bl	8003d5c <LL_ADC_IsEnabled>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d026      	beq.n	8003faa <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a49      	ldr	r2, [pc, #292]	@ (8004088 <HAL_ADC_Init+0x290>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d004      	beq.n	8003f70 <HAL_ADC_Init+0x178>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a48      	ldr	r2, [pc, #288]	@ (800408c <HAL_ADC_Init+0x294>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d101      	bne.n	8003f74 <HAL_ADC_Init+0x17c>
 8003f70:	4a47      	ldr	r2, [pc, #284]	@ (8004090 <HAL_ADC_Init+0x298>)
 8003f72:	e000      	b.n	8003f76 <HAL_ADC_Init+0x17e>
 8003f74:	4a47      	ldr	r2, [pc, #284]	@ (8004094 <HAL_ADC_Init+0x29c>)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f7ff fbe9 	bl	8003754 <LL_ADC_SetCommonClock>
 8003f82:	e012      	b.n	8003faa <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f7ff fc14 	bl	80037bc <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003f94:	4b3f      	ldr	r3, [pc, #252]	@ (8004094 <HAL_ADC_Init+0x29c>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003fa4:	493b      	ldr	r1, [pc, #236]	@ (8004094 <HAL_ADC_Init+0x29c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a33      	ldr	r2, [pc, #204]	@ (800407c <HAL_ADC_Init+0x284>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d010      	beq.n	8003fd6 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fba:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003fc0:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003fc6:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003fce:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	623b      	str	r3, [r7, #32]
 8003fd4:	e035      	b.n	8004042 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7f1b      	ldrb	r3, [r3, #28]
 8003fda:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fe2:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fe4:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003fea:	2a00      	cmp	r2, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_ADC_Init+0x1fc>
 8003fee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ff2:	e000      	b.n	8003ff6 <HAL_ADC_Init+0x1fe>
 8003ff4:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ff6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003ffc:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	da04      	bge.n	8004010 <HAL_ADC_Init+0x218>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800400e:	e001      	b.n	8004014 <HAL_ADC_Init+0x21c>
 8004010:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8004014:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	491b      	ldr	r1, [pc, #108]	@ (8004088 <HAL_ADC_Init+0x290>)
 800401c:	428b      	cmp	r3, r1
 800401e:	d004      	beq.n	800402a <HAL_ADC_Init+0x232>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4919      	ldr	r1, [pc, #100]	@ (800408c <HAL_ADC_Init+0x294>)
 8004026:	428b      	cmp	r3, r1
 8004028:	d103      	bne.n	8004032 <HAL_ADC_Init+0x23a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004030:	e003      	b.n	800403a <HAL_ADC_Init+0x242>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004038:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800403a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	4313      	orrs	r3, r2
 8004040:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d131      	bne.n	80040b0 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0a      	ldr	r2, [pc, #40]	@ (800407c <HAL_ADC_Init+0x284>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	3b01      	subs	r3, #1
 800405c:	045b      	lsls	r3, r3, #17
 800405e:	6a3a      	ldr	r2, [r7, #32]
 8004060:	4313      	orrs	r3, r2
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	e024      	b.n	80040b0 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d113      	bne.n	8004098 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	e01a      	b.n	80040b0 <HAL_ADC_Init+0x2b8>
 800407a:	bf00      	nop
 800407c:	46021000 	.word	0x46021000
 8004080:	20000028 	.word	0x20000028
 8004084:	053e2d63 	.word	0x053e2d63
 8004088:	42028000 	.word	0x42028000
 800408c:	42028100 	.word	0x42028100
 8004090:	42028300 	.word	0x42028300
 8004094:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a8:	f043 0201 	orr.w	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a75      	ldr	r2, [pc, #468]	@ (800428c <HAL_ADC_Init+0x494>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d018      	beq.n	80040ec <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	4313      	orrs	r3, r2
 80040d0:	6a3a      	ldr	r2, [r7, #32]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004290 <HAL_ADC_Init+0x498>)
 80040de:	4013      	ands	r3, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	6a39      	ldr	r1, [r7, #32]
 80040e6:	430b      	orrs	r3, r1
 80040e8:	60d3      	str	r3, [r2, #12]
 80040ea:	e031      	b.n	8004150 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d009      	beq.n	8004108 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f8:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	4313      	orrs	r3, r2
 8004102:	6a3a      	ldr	r2, [r7, #32]
 8004104:	4313      	orrs	r3, r2
 8004106:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	4b61      	ldr	r3, [pc, #388]	@ (8004294 <HAL_ADC_Init+0x49c>)
 8004110:	4013      	ands	r3, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	6a39      	ldr	r1, [r7, #32]
 8004118:	430b      	orrs	r3, r1
 800411a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a4d      	ldr	r2, [pc, #308]	@ (800428c <HAL_ADC_Init+0x494>)
 8004156:	4293      	cmp	r3, r2
 8004158:	f000 80a4 	beq.w	80042a4 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fe22 	bl	8003daa <LL_ADC_REG_IsConversionOngoing>
 8004166:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff fe2f 	bl	8003dd0 <LL_ADC_INJ_IsConversionOngoing>
 8004172:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d166      	bne.n	8004248 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d163      	bne.n	8004248 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7f1b      	ldrb	r3, [r3, #28]
 8004184:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4943      	ldr	r1, [pc, #268]	@ (8004298 <HAL_ADC_Init+0x4a0>)
 800418c:	428b      	cmp	r3, r1
 800418e:	d004      	beq.n	800419a <HAL_ADC_Init+0x3a2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4941      	ldr	r1, [pc, #260]	@ (800429c <HAL_ADC_Init+0x4a4>)
 8004196:	428b      	cmp	r3, r1
 8004198:	d102      	bne.n	80041a0 <HAL_ADC_Init+0x3a8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419e:	e002      	b.n	80041a6 <HAL_ADC_Init+0x3ae>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a4:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041a6:	4313      	orrs	r3, r2
 80041a8:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041b4:	f023 0303 	bic.w	r3, r3, #3
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	6a39      	ldr	r1, [r7, #32]
 80041be:	430b      	orrs	r3, r1
 80041c0:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7ff fb99 	bl	800390c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d11e      	bne.n	8004222 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e8:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	4b2b      	ldr	r3, [pc, #172]	@ (80042a0 <HAL_ADC_Init+0x4a8>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80041f8:	0411      	lsls	r1, r2, #16
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80041fe:	4311      	orrs	r1, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800420a:	4311      	orrs	r1, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004210:	0892      	lsrs	r2, r2, #2
 8004212:	430a      	orrs	r2, r1
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	611a      	str	r2, [r3, #16]
 8004220:	e007      	b.n	8004232 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d10c      	bne.n	800426a <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	f023 010f 	bic.w	r1, r3, #15
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	1e5a      	subs	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30
 8004268:	e007      	b.n	800427a <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 020f 	bic.w	r2, r2, #15
 8004278:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800427e:	f023 0303 	bic.w	r3, r3, #3
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800428a:	e092      	b.n	80043b2 <HAL_ADC_Init+0x5ba>
 800428c:	46021000 	.word	0x46021000
 8004290:	fff0c013 	.word	0xfff0c013
 8004294:	ffde800d 	.word	0xffde800d
 8004298:	42028000 	.word	0x42028000
 800429c:	42028100 	.word	0x42028100
 80042a0:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d111      	bne.n	80042d2 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80042b6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80042bc:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80042c2:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	4b39      	ldr	r3, [pc, #228]	@ (80043c0 <HAL_ADC_Init+0x5c8>)
 80042da:	4013      	ands	r3, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	69f9      	ldr	r1, [r7, #28]
 80042e2:	430b      	orrs	r3, r1
 80042e4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ee:	461a      	mov	r2, r3
 80042f0:	2100      	movs	r1, #0
 80042f2:	f7ff fb2e 	bl	8003952 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fe:	461a      	mov	r2, r3
 8004300:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8004304:	f7ff fb25 	bl	8003952 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f062 020f 	orn	r2, r2, #15
 800431e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004320:	e018      	b.n	8004354 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800432a:	d113      	bne.n	8004354 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	f003 031c 	and.w	r3, r3, #28
 800433e:	f06f 020f 	mvn.w	r2, #15
 8004342:	fa02 f103 	lsl.w	r1, r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	4b1a      	ldr	r3, [pc, #104]	@ (80043c4 <HAL_ADC_Init+0x5cc>)
 800435c:	4013      	ands	r3, r2
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	429a      	cmp	r2, r3
 8004362:	d10b      	bne.n	800437c <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800437a:	e01a      	b.n	80043b2 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004380:	f023 0312 	bic.w	r3, r3, #18
 8004384:	f043 0210 	orr.w	r2, r3, #16
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004390:	f043 0201 	orr.w	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800439e:	e008      	b.n	80043b2 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043a4:	f043 0210 	orr.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80043b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	372c      	adds	r7, #44	@ 0x2c
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd90      	pop	{r4, r7, pc}
 80043be:	bf00      	nop
 80043c0:	f7fffc02 	.word	0xf7fffc02
 80043c4:	833ffff3 	.word	0x833ffff3

080043c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b0a2      	sub	sp, #136	@ 0x88
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a98      	ldr	r2, [pc, #608]	@ (800463c <HAL_ADC_Start_DMA+0x274>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_ADC_Start_DMA+0x20>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a97      	ldr	r2, [pc, #604]	@ (8004640 <HAL_ADC_Start_DMA+0x278>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_ADC_Start_DMA+0x24>
 80043e8:	4b96      	ldr	r3, [pc, #600]	@ (8004644 <HAL_ADC_Start_DMA+0x27c>)
 80043ea:	e000      	b.n	80043ee <HAL_ADC_Start_DMA+0x26>
 80043ec:	4b96      	ldr	r3, [pc, #600]	@ (8004648 <HAL_ADC_Start_DMA+0x280>)
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fc36 	bl	8003c60 <LL_ADC_GetMultimode>
 80043f4:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fcd5 	bl	8003daa <LL_ADC_REG_IsConversionOngoing>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	f040 8111 	bne.w	800462a <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_ADC_Start_DMA+0x4e>
 8004412:	2302      	movs	r3, #2
 8004414:	e10e      	b.n	8004634 <HAL_ADC_Start_DMA+0x26c>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800441e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d006      	beq.n	8004432 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004424:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004426:	2b05      	cmp	r3, #5
 8004428:	d003      	beq.n	8004432 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800442a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800442c:	2b09      	cmp	r3, #9
 800442e:	f040 80f4 	bne.w	800461a <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f001 fa2c 	bl	8005890 <ADC_Enable>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800443e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 80e4 	bne.w	8004610 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800444c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a7a      	ldr	r2, [pc, #488]	@ (800464c <HAL_ADC_Start_DMA+0x284>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d026      	beq.n	80044b4 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a75      	ldr	r2, [pc, #468]	@ (8004640 <HAL_ADC_Start_DMA+0x278>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d002      	beq.n	8004476 <HAL_ADC_Start_DMA+0xae>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	e000      	b.n	8004478 <HAL_ADC_Start_DMA+0xb0>
 8004476:	4b71      	ldr	r3, [pc, #452]	@ (800463c <HAL_ADC_Start_DMA+0x274>)
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	4293      	cmp	r3, r2
 800447e:	d002      	beq.n	8004486 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004480:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d105      	bne.n	8004492 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800448a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044a2:	f023 0206 	bic.w	r2, r3, #6
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80044aa:	e006      	b.n	80044ba <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80044b2:	e002      	b.n	80044ba <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044be:	4a64      	ldr	r2, [pc, #400]	@ (8004650 <HAL_ADC_Start_DMA+0x288>)
 80044c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c6:	4a63      	ldr	r2, [pc, #396]	@ (8004654 <HAL_ADC_Start_DMA+0x28c>)
 80044c8:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	4a62      	ldr	r2, [pc, #392]	@ (8004658 <HAL_ADC_Start_DMA+0x290>)
 80044d0:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	221c      	movs	r2, #28
 80044d8:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0210 	orr.w	r2, r2, #16
 80044f0:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a55      	ldr	r2, [pc, #340]	@ (800464c <HAL_ADC_Start_DMA+0x284>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d107      	bne.n	800450c <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004516:	2b00      	cmp	r3, #0
 8004518:	d04f      	beq.n	80045ba <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004520:	2b00      	cmp	r3, #0
 8004522:	d046      	beq.n	80045b2 <HAL_ADC_Start_DMA+0x1ea>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d040      	beq.n	80045b2 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	f107 0310 	add.w	r3, r7, #16
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f002 fdf8 	bl	8007134 <HAL_DMAEx_List_GetNodeConfig>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e072      	b.n	8004634 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800454e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004550:	2b02      	cmp	r3, #2
 8004552:	d104      	bne.n	800455e <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800455c:	e00a      	b.n	8004574 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800455e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004560:	2b01      	cmp	r3, #1
 8004562:	d104      	bne.n	800456e <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800456c:	e002      	b.n	8004574 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004580:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a4:	4618      	mov	r0, r3
 80045a6:	f002 fd1b 	bl	8006fe0 <HAL_DMAEx_List_Start_IT>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80045b0:	e028      	b.n	8004604 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80045b8:	e024      	b.n	8004604 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d104      	bne.n	80045ce <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045cc:	e00c      	b.n	80045e8 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d104      	bne.n	80045e2 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045e0:	e002      	b.n	80045e8 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3340      	adds	r3, #64	@ 0x40
 80045f2:	4619      	mov	r1, r3
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045fa:	f001 fd5f 	bl	80060bc <HAL_DMA_Start_IT>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fbba 	bl	8003d82 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800460e:	e00f      	b.n	8004630 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8004618:	e00a      	b.n	8004630 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8004628:	e002      	b.n	8004630 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800462a:	2302      	movs	r3, #2
 800462c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8004630:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004634:	4618      	mov	r0, r3
 8004636:	3788      	adds	r7, #136	@ 0x88
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	42028000 	.word	0x42028000
 8004640:	42028100 	.word	0x42028100
 8004644:	42028300 	.word	0x42028300
 8004648:	46021300 	.word	0x46021300
 800464c:	46021000 	.word	0x46021000
 8004650:	080059c5 	.word	0x080059c5
 8004654:	08005a9d 	.word	0x08005a9d
 8004658:	08005ab9 	.word	0x08005ab9

0800465c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	@ 0x28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004664:	2300      	movs	r3, #0
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a77      	ldr	r2, [pc, #476]	@ (800485c <HAL_ADC_IRQHandler+0x200>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_ADC_IRQHandler+0x30>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a76      	ldr	r2, [pc, #472]	@ (8004860 <HAL_ADC_IRQHandler+0x204>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d101      	bne.n	8004690 <HAL_ADC_IRQHandler+0x34>
 800468c:	4b75      	ldr	r3, [pc, #468]	@ (8004864 <HAL_ADC_IRQHandler+0x208>)
 800468e:	e000      	b.n	8004692 <HAL_ADC_IRQHandler+0x36>
 8004690:	4b75      	ldr	r3, [pc, #468]	@ (8004868 <HAL_ADC_IRQHandler+0x20c>)
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fae4 	bl	8003c60 <LL_ADC_GetMultimode>
 8004698:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <HAL_ADC_IRQHandler+0x78>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d012      	beq.n	80046d4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046be:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f001 fa2e 	bl	8005b28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2202      	movs	r2, #2
 80046d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <HAL_ADC_IRQHandler+0x8c>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80d1 	beq.w	8004896 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80cb 	beq.w	8004896 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004710:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a53      	ldr	r2, [pc, #332]	@ (800486c <HAL_ADC_IRQHandler+0x210>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d06c      	beq.n	80047fc <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff f932 	bl	8003990 <LL_ADC_REG_IsTriggerSourceSWStart>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80aa 	beq.w	8004888 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a49      	ldr	r2, [pc, #292]	@ (8004860 <HAL_ADC_IRQHandler+0x204>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d002      	beq.n	8004744 <HAL_ADC_IRQHandler+0xe8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	e000      	b.n	8004746 <HAL_ADC_IRQHandler+0xea>
 8004744:	4b45      	ldr	r3, [pc, #276]	@ (800485c <HAL_ADC_IRQHandler+0x200>)
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	4293      	cmp	r3, r2
 800474c:	d008      	beq.n	8004760 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b05      	cmp	r3, #5
 8004758:	d002      	beq.n	8004760 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b09      	cmp	r3, #9
 800475e:	d104      	bne.n	800476a <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	623b      	str	r3, [r7, #32]
 8004768:	e00c      	b.n	8004784 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3c      	ldr	r2, [pc, #240]	@ (8004860 <HAL_ADC_IRQHandler+0x204>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d002      	beq.n	800477a <HAL_ADC_IRQHandler+0x11e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	e000      	b.n	800477c <HAL_ADC_IRQHandler+0x120>
 800477a:	4b38      	ldr	r3, [pc, #224]	@ (800485c <HAL_ADC_IRQHandler+0x200>)
 800477c:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d17c      	bne.n	8004888 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b08      	cmp	r3, #8
 800479a:	d175      	bne.n	8004888 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff fb02 	bl	8003daa <LL_ADC_REG_IsConversionOngoing>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d11a      	bne.n	80047e2 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 020c 	bic.w	r2, r2, #12
 80047ba:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d159      	bne.n	8004888 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	679a      	str	r2, [r3, #120]	@ 0x78
 80047e0:	e052      	b.n	8004888 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e6:	f043 0210 	orr.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f2:	f043 0201 	orr.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80047fa:	e045      	b.n	8004888 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff f8c5 	bl	8003990 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d03d      	beq.n	8004888 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	d138      	bne.n	8004888 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b08      	cmp	r3, #8
 8004822:	d131      	bne.n	8004888 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fabe 	bl	8003daa <LL_ADC_REG_IsConversionOngoing>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11d      	bne.n	8004870 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 020c 	bic.w	r2, r2, #12
 8004842:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	f043 0201 	orr.w	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	679a      	str	r2, [r3, #120]	@ 0x78
 8004858:	e016      	b.n	8004888 <HAL_ADC_IRQHandler+0x22c>
 800485a:	bf00      	nop
 800485c:	42028000 	.word	0x42028000
 8004860:	42028100 	.word	0x42028100
 8004864:	42028300 	.word	0x42028300
 8004868:	46021300 	.word	0x46021300
 800486c:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004880:	f043 0201 	orr.w	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f99d 	bl	8004bc8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	220c      	movs	r2, #12
 8004894:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a8c      	ldr	r2, [pc, #560]	@ (8004acc <HAL_ADC_IRQHandler+0x470>)
 800489c:	4293      	cmp	r3, r2
 800489e:	f000 8095 	beq.w	80049cc <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <HAL_ADC_IRQHandler+0x25a>
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8085 	beq.w	80049cc <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d07f      	beq.n	80049cc <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048dc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff f91e 	bl	8003b2a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80048ee:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff f84b 	bl	8003990 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048fa:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a73      	ldr	r2, [pc, #460]	@ (8004ad0 <HAL_ADC_IRQHandler+0x474>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d002      	beq.n	800490c <HAL_ADC_IRQHandler+0x2b0>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	e000      	b.n	800490e <HAL_ADC_IRQHandler+0x2b2>
 800490c:	4b71      	ldr	r3, [pc, #452]	@ (8004ad4 <HAL_ADC_IRQHandler+0x478>)
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	4293      	cmp	r3, r2
 8004914:	d008      	beq.n	8004928 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d002      	beq.n	8004928 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b07      	cmp	r3, #7
 8004926:	d104      	bne.n	8004932 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	e00c      	b.n	800494c <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a66      	ldr	r2, [pc, #408]	@ (8004ad0 <HAL_ADC_IRQHandler+0x474>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d002      	beq.n	8004942 <HAL_ADC_IRQHandler+0x2e6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	e000      	b.n	8004944 <HAL_ADC_IRQHandler+0x2e8>
 8004942:	4b64      	ldr	r3, [pc, #400]	@ (8004ad4 <HAL_ADC_IRQHandler+0x478>)
 8004944:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d035      	beq.n	80049be <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <HAL_ADC_IRQHandler+0x310>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d02d      	beq.n	80049be <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004968:	2b00      	cmp	r3, #0
 800496a:	d128      	bne.n	80049be <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b40      	cmp	r3, #64	@ 0x40
 8004978:	d121      	bne.n	80049be <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff fa26 	bl	8003dd0 <LL_ADC_INJ_IsConversionOngoing>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d119      	bne.n	80049be <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004998:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800499e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f001 f894 	bl	8005aec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2260      	movs	r2, #96	@ 0x60
 80049ca:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d011      	beq.n	80049fa <HAL_ADC_IRQHandler+0x39e>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f8ff 	bl	8004bf0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2280      	movs	r2, #128	@ 0x80
 80049f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d012      	beq.n	8004a2a <HAL_ADC_IRQHandler+0x3ce>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00d      	beq.n	8004a2a <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a12:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f001 f870 	bl	8005b00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d012      	beq.n	8004a5a <HAL_ADC_IRQHandler+0x3fe>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a42:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f001 f862 	bl	8005b14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d05d      	beq.n	8004b20 <HAL_ADC_IRQHandler+0x4c4>
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d058      	beq.n	8004b20 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8004a76:	2301      	movs	r3, #1
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7a:	e03b      	b.n	8004af4 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a12      	ldr	r2, [pc, #72]	@ (8004acc <HAL_ADC_IRQHandler+0x470>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d02c      	beq.n	8004ae0 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a10      	ldr	r2, [pc, #64]	@ (8004ad4 <HAL_ADC_IRQHandler+0x478>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_ADC_IRQHandler+0x444>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad0 <HAL_ADC_IRQHandler+0x474>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADC_IRQHandler+0x448>
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad8 <HAL_ADC_IRQHandler+0x47c>)
 8004aa2:	e000      	b.n	8004aa6 <HAL_ADC_IRQHandler+0x44a>
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <HAL_ADC_IRQHandler+0x480>)
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff f8e8 	bl	8003c7c <LL_ADC_GetMultiDMATransfer>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d020      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab6:	e01d      	b.n	8004af4 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d016      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aca:	e013      	b.n	8004af4 <HAL_ADC_IRQHandler+0x498>
 8004acc:	46021000 	.word	0x46021000
 8004ad0:	42028100 	.word	0x42028100
 8004ad4:	42028000 	.word	0x42028000
 8004ad8:	42028300 	.word	0x42028300
 8004adc:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff f812 	bl	8003b0e <LL_ADC_REG_GetDMATransfer>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004af0:	2301      	movs	r3, #1
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d10e      	bne.n	8004b18 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004afe:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b0a:	f043 0202 	orr.w	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f876 	bl	8004c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01b      	beq.n	8004b62 <HAL_ADC_IRQHandler+0x506>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d016      	beq.n	8004b62 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d105      	bne.n	8004b4c <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b44:	f043 0201 	orr.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f877 	bl	8004c40 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a17      	ldr	r2, [pc, #92]	@ (8004bc4 <HAL_ADC_IRQHandler+0x568>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d126      	bne.n	8004bba <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00c      	beq.n	8004b90 <HAL_ADC_IRQHandler+0x534>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f849 	bl	8004c18 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b8e:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00f      	beq.n	8004bba <HAL_ADC_IRQHandler+0x55e>
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f841 	bl	8004c2c <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004bb8:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004bba:	bf00      	nop
 8004bbc:	3728      	adds	r7, #40	@ 0x28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	46021000 	.word	0x46021000

08004bc8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004c54:	b590      	push	{r4, r7, lr}
 8004c56:	b0b7      	sub	sp, #220	@ 0xdc
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4aa8      	ldr	r2, [pc, #672]	@ (8004f10 <HAL_ADC_ConfigChannel+0x2bc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d103      	bne.n	8004c7a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d102      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x36>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f000 bdfe 	b.w	8005886 <HAL_ADC_ConfigChannel+0xc32>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff f887 	bl	8003daa <LL_ADC_REG_IsConversionOngoing>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 85c1 	bne.w	8005826 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a99      	ldr	r2, [pc, #612]	@ (8004f10 <HAL_ADC_ConfigChannel+0x2bc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	f000 8409 	beq.w	80054c2 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d108      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x7a>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	0e9b      	lsrs	r3, r3, #26
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	e01d      	b.n	8004d0a <HAL_ADC_ConfigChannel+0xb6>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004cea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	e004      	b.n	8004d00 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8004cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004cfa:	fab3 f383 	clz	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2201      	movs	r2, #1
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	69d1      	ldr	r1, [r2, #28]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	430b      	orrs	r3, r1
 8004d16:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f7fe fe47 	bl	80039b8 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff f83b 	bl	8003daa <LL_ADC_REG_IsConversionOngoing>
 8004d34:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff f847 	bl	8003dd0 <LL_ADC_INJ_IsConversionOngoing>
 8004d42:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f040 81df 	bne.w	800510e <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f040 81da 	bne.w	800510e <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	461a      	mov	r2, r3
 8004d68:	f7fe fef2 	bl	8003b50 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	089b      	lsrs	r3, r3, #2
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d046      	beq.n	8004e1c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6919      	ldr	r1, [r3, #16]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d9e:	f7fe fd2d 	bl	80037fc <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6919      	ldr	r1, [r3, #16]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f7fe fd5b 	bl	800386a <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	7e9b      	ldrb	r3, [r3, #26]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d11e      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x17e>
 8004dcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dd0:	e000      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x180>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f7fe fd7e 	bl	80038d6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d102      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x19c>
 8004dea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004dee:	e000      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x19e>
 8004df0:	2300      	movs	r3, #0
 8004df2:	461a      	mov	r2, r3
 8004df4:	f7fe fd54 	bl	80038a0 <LL_ADC_SetOffsetSignedSaturation>
 8004df8:	e189      	b.n	800510e <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2200      	movs	r2, #0
 8004e04:	4619      	mov	r1, r3
 8004e06:	f7fe fd66 	bl	80038d6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2200      	movs	r2, #0
 8004e14:	4619      	mov	r1, r3
 8004e16:	f7fe fd43 	bl	80038a0 <LL_ADC_SetOffsetSignedSaturation>
 8004e1a:	e178      	b.n	800510e <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fd0b 	bl	800383e <LL_ADC_GetOffsetChannel>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10a      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x1f4>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe fd00 	bl	800383e <LL_ADC_GetOffsetChannel>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	0e9b      	lsrs	r3, r3, #26
 8004e42:	f003 021f 	and.w	r2, r3, #31
 8004e46:	e01e      	b.n	8004e86 <HAL_ADC_ConfigChannel+0x232>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fcf5 	bl	800383e <LL_ADC_GetOffsetChannel>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e5e:	fa93 f3a3 	rbit	r3, r3
 8004e62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004e66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004e6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004e76:	2320      	movs	r3, #32
 8004e78:	e004      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004e7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d105      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x24a>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	0e9b      	lsrs	r3, r3, #26
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	e018      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x27c>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004eb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004eba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	e004      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004eca:	fab3 f383 	clz	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d107      	bne.n	8004ee4 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	2300      	movs	r3, #0
 8004ede:	2100      	movs	r1, #0
 8004ee0:	f7fe fc8c 	bl	80037fc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2101      	movs	r1, #1
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe fca7 	bl	800383e <LL_ADC_GetOffsetChannel>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10c      	bne.n	8004f14 <HAL_ADC_ConfigChannel+0x2c0>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2101      	movs	r1, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe fc9c 	bl	800383e <LL_ADC_GetOffsetChannel>
 8004f06:	4603      	mov	r3, r0
 8004f08:	0e9b      	lsrs	r3, r3, #26
 8004f0a:	f003 021f 	and.w	r2, r3, #31
 8004f0e:	e020      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x2fe>
 8004f10:	46021000 	.word	0x46021000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2101      	movs	r1, #1
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fc8f 	bl	800383e <LL_ADC_GetOffsetChannel>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f2a:	fa93 f3a3 	rbit	r3, r3
 8004f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004f3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8004f42:	2320      	movs	r3, #32
 8004f44:	e004      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004f46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x316>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	0e9b      	lsrs	r3, r3, #26
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	e018      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x348>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f76:	fa93 f3a3 	rbit	r3, r3
 8004f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004f8e:	2320      	movs	r3, #32
 8004f90:	e004      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f96:	fab3 f383 	clz	r3, r3
 8004f9a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d107      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2101      	movs	r1, #1
 8004fac:	f7fe fc26 	bl	80037fc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe fc41 	bl	800383e <LL_ADC_GetOffsetChannel>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x388>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2102      	movs	r1, #2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe fc36 	bl	800383e <LL_ADC_GetOffsetChannel>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	0e9b      	lsrs	r3, r3, #26
 8004fd6:	f003 021f 	and.w	r2, r3, #31
 8004fda:	e01a      	b.n	8005012 <HAL_ADC_ConfigChannel+0x3be>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fc2b 	bl	800383e <LL_ADC_GetOffsetChannel>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fee:	fa93 f3a3 	rbit	r3, r3
 8004ff2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ff6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004ffa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8005002:	2320      	movs	r3, #32
 8005004:	e004      	b.n	8005010 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8005006:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800500a:	fab3 f383 	clz	r3, r3
 800500e:	b2db      	uxtb	r3, r3
 8005010:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d105      	bne.n	800502a <HAL_ADC_ConfigChannel+0x3d6>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	0e9b      	lsrs	r3, r3, #26
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	e011      	b.n	800504e <HAL_ADC_ConfigChannel+0x3fa>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005032:	fa93 f3a3 	rbit	r3, r3
 8005036:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800503a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800503c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8005042:	2320      	movs	r3, #32
 8005044:	e003      	b.n	800504e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8005046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005048:	fab3 f383 	clz	r3, r3
 800504c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800504e:	429a      	cmp	r2, r3
 8005050:	d107      	bne.n	8005062 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	2300      	movs	r3, #0
 800505c:	2102      	movs	r1, #2
 800505e:	f7fe fbcd 	bl	80037fc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2103      	movs	r1, #3
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe fbe8 	bl	800383e <LL_ADC_GetOffsetChannel>
 800506e:	4603      	mov	r3, r0
 8005070:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <HAL_ADC_ConfigChannel+0x43a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2103      	movs	r1, #3
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe fbdd 	bl	800383e <LL_ADC_GetOffsetChannel>
 8005084:	4603      	mov	r3, r0
 8005086:	0e9b      	lsrs	r3, r3, #26
 8005088:	f003 021f 	and.w	r2, r3, #31
 800508c:	e017      	b.n	80050be <HAL_ADC_ConfigChannel+0x46a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2103      	movs	r1, #3
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe fbd2 	bl	800383e <LL_ADC_GetOffsetChannel>
 800509a:	4603      	mov	r3, r0
 800509c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050a0:	fa93 f3a3 	rbit	r3, r3
 80050a4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80050a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80050aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80050b0:	2320      	movs	r3, #32
 80050b2:	e003      	b.n	80050bc <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80050b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050b6:	fab3 f383 	clz	r3, r3
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d105      	bne.n	80050d6 <HAL_ADC_ConfigChannel+0x482>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	0e9b      	lsrs	r3, r3, #26
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	e011      	b.n	80050fa <HAL_ADC_ConfigChannel+0x4a6>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80050e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80050e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80050ee:	2320      	movs	r3, #32
 80050f0:	e003      	b.n	80050fa <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80050f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050f4:	fab3 f383 	clz	r3, r3
 80050f8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d107      	bne.n	800510e <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	2300      	movs	r3, #0
 8005108:	2103      	movs	r1, #3
 800510a:	f7fe fb77 	bl	80037fc <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe fe22 	bl	8003d5c <LL_ADC_IsEnabled>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 83ad 	bne.w	800587a <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6819      	ldr	r1, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	461a      	mov	r2, r3
 800512e:	f7fe fd73 	bl	8003c18 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800513a:	f040 80d6 	bne.w	80052ea <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10b      	bne.n	8005162 <HAL_ADC_ConfigChannel+0x50e>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	0e9b      	lsrs	r3, r3, #26
 8005150:	3301      	adds	r3, #1
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	2b09      	cmp	r3, #9
 8005158:	bf94      	ite	ls
 800515a:	2301      	movls	r3, #1
 800515c:	2300      	movhi	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	e019      	b.n	8005196 <HAL_ADC_ConfigChannel+0x542>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800516a:	fa93 f3a3 	rbit	r3, r3
 800516e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005172:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800517a:	2320      	movs	r3, #32
 800517c:	e003      	b.n	8005186 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800517e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005180:	fab3 f383 	clz	r3, r3
 8005184:	b2db      	uxtb	r3, r3
 8005186:	3301      	adds	r3, #1
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	2b09      	cmp	r3, #9
 800518e:	bf94      	ite	ls
 8005190:	2301      	movls	r3, #1
 8005192:	2300      	movhi	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d04d      	beq.n	8005236 <HAL_ADC_ConfigChannel+0x5e2>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d107      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x562>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	0e9b      	lsrs	r3, r3, #26
 80051ac:	3301      	adds	r3, #1
 80051ae:	069b      	lsls	r3, r3, #26
 80051b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051b4:	e015      	b.n	80051e2 <HAL_ADC_ConfigChannel+0x58e>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051be:	fa93 f3a3 	rbit	r3, r3
 80051c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80051c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80051c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80051ce:	2320      	movs	r3, #32
 80051d0:	e003      	b.n	80051da <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80051d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d4:	fab3 f383 	clz	r3, r3
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	3301      	adds	r3, #1
 80051dc:	069b      	lsls	r3, r3, #26
 80051de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x5ae>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	0e9b      	lsrs	r3, r3, #26
 80051f4:	3301      	adds	r3, #1
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2101      	movs	r1, #1
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	e017      	b.n	8005232 <HAL_ADC_ConfigChannel+0x5de>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520a:	fa93 f3a3 	rbit	r3, r3
 800520e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 800521a:	2320      	movs	r3, #32
 800521c:	e003      	b.n	8005226 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800521e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005220:	fab3 f383 	clz	r3, r3
 8005224:	b2db      	uxtb	r3, r3
 8005226:	3301      	adds	r3, #1
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	2101      	movs	r1, #1
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	4313      	orrs	r3, r2
 8005234:	e04e      	b.n	80052d4 <HAL_ADC_ConfigChannel+0x680>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d107      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x5fe>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	0e9b      	lsrs	r3, r3, #26
 8005248:	3301      	adds	r3, #1
 800524a:	069b      	lsls	r3, r3, #26
 800524c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005250:	e015      	b.n	800527e <HAL_ADC_ConfigChannel+0x62a>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	fa93 f3a3 	rbit	r3, r3
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800526a:	2320      	movs	r3, #32
 800526c:	e003      	b.n	8005276 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800526e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005270:	fab3 f383 	clz	r3, r3
 8005274:	b2db      	uxtb	r3, r3
 8005276:	3301      	adds	r3, #1
 8005278:	069b      	lsls	r3, r3, #26
 800527a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_ADC_ConfigChannel+0x64a>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	0e9b      	lsrs	r3, r3, #26
 8005290:	3301      	adds	r3, #1
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	2101      	movs	r1, #1
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	e017      	b.n	80052ce <HAL_ADC_ConfigChannel+0x67a>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	fa93 f3a3 	rbit	r3, r3
 80052aa:	61bb      	str	r3, [r7, #24]
  return result;
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80052b6:	2320      	movs	r3, #32
 80052b8:	e003      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	fab3 f383 	clz	r3, r3
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	3301      	adds	r3, #1
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2101      	movs	r1, #1
 80052ca:	fa01 f303 	lsl.w	r3, r1, r3
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80052d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	461a      	mov	r2, r3
 80052e2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80052e6:	f7fe fc33 	bl	8003b50 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f280 82c3 	bge.w	800587a <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a92      	ldr	r2, [pc, #584]	@ (8005544 <HAL_ADC_ConfigChannel+0x8f0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_ADC_ConfigChannel+0x6b4>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a91      	ldr	r2, [pc, #580]	@ (8005548 <HAL_ADC_ConfigChannel+0x8f4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d101      	bne.n	800530c <HAL_ADC_ConfigChannel+0x6b8>
 8005308:	4b90      	ldr	r3, [pc, #576]	@ (800554c <HAL_ADC_ConfigChannel+0x8f8>)
 800530a:	e000      	b.n	800530e <HAL_ADC_ConfigChannel+0x6ba>
 800530c:	4b90      	ldr	r3, [pc, #576]	@ (8005550 <HAL_ADC_ConfigChannel+0x8fc>)
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe fa46 	bl	80037a0 <LL_ADC_GetCommonPathInternalCh>
 8005314:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a89      	ldr	r2, [pc, #548]	@ (8005544 <HAL_ADC_ConfigChannel+0x8f0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d004      	beq.n	800532c <HAL_ADC_ConfigChannel+0x6d8>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a88      	ldr	r2, [pc, #544]	@ (8005548 <HAL_ADC_ConfigChannel+0x8f4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d10e      	bne.n	800534a <HAL_ADC_ConfigChannel+0x6f6>
 800532c:	4885      	ldr	r0, [pc, #532]	@ (8005544 <HAL_ADC_ConfigChannel+0x8f0>)
 800532e:	f7fe fd15 	bl	8003d5c <LL_ADC_IsEnabled>
 8005332:	4604      	mov	r4, r0
 8005334:	4884      	ldr	r0, [pc, #528]	@ (8005548 <HAL_ADC_ConfigChannel+0x8f4>)
 8005336:	f7fe fd11 	bl	8003d5c <LL_ADC_IsEnabled>
 800533a:	4603      	mov	r3, r0
 800533c:	4323      	orrs	r3, r4
 800533e:	2b00      	cmp	r3, #0
 8005340:	bf0c      	ite	eq
 8005342:	2301      	moveq	r3, #1
 8005344:	2300      	movne	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	e008      	b.n	800535c <HAL_ADC_ConfigChannel+0x708>
 800534a:	4882      	ldr	r0, [pc, #520]	@ (8005554 <HAL_ADC_ConfigChannel+0x900>)
 800534c:	f7fe fd06 	bl	8003d5c <LL_ADC_IsEnabled>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf0c      	ite	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	2300      	movne	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80a6 	beq.w	80054ae <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a7c      	ldr	r2, [pc, #496]	@ (8005558 <HAL_ADC_ConfigChannel+0x904>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d13c      	bne.n	80053e6 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800536c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005370:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d136      	bne.n	80053e6 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a71      	ldr	r2, [pc, #452]	@ (8005544 <HAL_ADC_ConfigChannel+0x8f0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00a      	beq.n	8005398 <HAL_ADC_ConfigChannel+0x744>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a70      	ldr	r2, [pc, #448]	@ (8005548 <HAL_ADC_ConfigChannel+0x8f4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d005      	beq.n	8005398 <HAL_ADC_ConfigChannel+0x744>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a70      	ldr	r2, [pc, #448]	@ (8005554 <HAL_ADC_ConfigChannel+0x900>)
 8005392:	4293      	cmp	r3, r2
 8005394:	f040 826e 	bne.w	8005874 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a69      	ldr	r2, [pc, #420]	@ (8005544 <HAL_ADC_ConfigChannel+0x8f0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <HAL_ADC_ConfigChannel+0x758>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a68      	ldr	r2, [pc, #416]	@ (8005548 <HAL_ADC_ConfigChannel+0x8f4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d101      	bne.n	80053b0 <HAL_ADC_ConfigChannel+0x75c>
 80053ac:	4a67      	ldr	r2, [pc, #412]	@ (800554c <HAL_ADC_ConfigChannel+0x8f8>)
 80053ae:	e000      	b.n	80053b2 <HAL_ADC_ConfigChannel+0x75e>
 80053b0:	4a67      	ldr	r2, [pc, #412]	@ (8005550 <HAL_ADC_ConfigChannel+0x8fc>)
 80053b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f7fe f9dc 	bl	800377a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053c2:	4b66      	ldr	r3, [pc, #408]	@ (800555c <HAL_ADC_ConfigChannel+0x908>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	099b      	lsrs	r3, r3, #6
 80053c8:	4a65      	ldr	r2, [pc, #404]	@ (8005560 <HAL_ADC_ConfigChannel+0x90c>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	099b      	lsrs	r3, r3, #6
 80053d0:	3301      	adds	r3, #1
 80053d2:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80053d4:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80053d6:	e002      	b.n	80053de <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	3b01      	subs	r3, #1
 80053dc:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f9      	bne.n	80053d8 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053e4:	e246      	b.n	8005874 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005564 <HAL_ADC_ConfigChannel+0x910>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d12b      	bne.n	8005448 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80053f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d125      	bne.n	8005448 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a50      	ldr	r2, [pc, #320]	@ (8005544 <HAL_ADC_ConfigChannel+0x8f0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00a      	beq.n	800541c <HAL_ADC_ConfigChannel+0x7c8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a4f      	ldr	r2, [pc, #316]	@ (8005548 <HAL_ADC_ConfigChannel+0x8f4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d005      	beq.n	800541c <HAL_ADC_ConfigChannel+0x7c8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a4f      	ldr	r2, [pc, #316]	@ (8005554 <HAL_ADC_ConfigChannel+0x900>)
 8005416:	4293      	cmp	r3, r2
 8005418:	f040 822e 	bne.w	8005878 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a48      	ldr	r2, [pc, #288]	@ (8005544 <HAL_ADC_ConfigChannel+0x8f0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_ADC_ConfigChannel+0x7dc>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a47      	ldr	r2, [pc, #284]	@ (8005548 <HAL_ADC_ConfigChannel+0x8f4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d101      	bne.n	8005434 <HAL_ADC_ConfigChannel+0x7e0>
 8005430:	4a46      	ldr	r2, [pc, #280]	@ (800554c <HAL_ADC_ConfigChannel+0x8f8>)
 8005432:	e000      	b.n	8005436 <HAL_ADC_ConfigChannel+0x7e2>
 8005434:	4a46      	ldr	r2, [pc, #280]	@ (8005550 <HAL_ADC_ConfigChannel+0x8fc>)
 8005436:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800543a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f7fe f99a 	bl	800377a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005446:	e217      	b.n	8005878 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a46      	ldr	r2, [pc, #280]	@ (8005568 <HAL_ADC_ConfigChannel+0x914>)
 800544e:	4293      	cmp	r3, r2
 8005450:	f040 8213 	bne.w	800587a <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005454:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800545c:	2b00      	cmp	r3, #0
 800545e:	f040 820c 	bne.w	800587a <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a37      	ldr	r2, [pc, #220]	@ (8005544 <HAL_ADC_ConfigChannel+0x8f0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00a      	beq.n	8005482 <HAL_ADC_ConfigChannel+0x82e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a35      	ldr	r2, [pc, #212]	@ (8005548 <HAL_ADC_ConfigChannel+0x8f4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d005      	beq.n	8005482 <HAL_ADC_ConfigChannel+0x82e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a36      	ldr	r2, [pc, #216]	@ (8005554 <HAL_ADC_ConfigChannel+0x900>)
 800547c:	4293      	cmp	r3, r2
 800547e:	f040 81fc 	bne.w	800587a <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a2f      	ldr	r2, [pc, #188]	@ (8005544 <HAL_ADC_ConfigChannel+0x8f0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_ADC_ConfigChannel+0x842>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a2d      	ldr	r2, [pc, #180]	@ (8005548 <HAL_ADC_ConfigChannel+0x8f4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <HAL_ADC_ConfigChannel+0x846>
 8005496:	4a2d      	ldr	r2, [pc, #180]	@ (800554c <HAL_ADC_ConfigChannel+0x8f8>)
 8005498:	e000      	b.n	800549c <HAL_ADC_ConfigChannel+0x848>
 800549a:	4a2d      	ldr	r2, [pc, #180]	@ (8005550 <HAL_ADC_ConfigChannel+0x8fc>)
 800549c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f7fe f967 	bl	800377a <LL_ADC_SetCommonPathInternalCh>
 80054ac:	e1e5      	b.n	800587a <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80054c0:	e1db      	b.n	800587a <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	f000 811b 	beq.w	800570a <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054dc:	d004      	beq.n	80054e8 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80054e2:	4a22      	ldr	r2, [pc, #136]	@ (800556c <HAL_ADC_ConfigChannel+0x918>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d107      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fe fac1 	bl	8003a78 <LL_ADC_REG_SetSequencerChAdd>
 80054f6:	e059      	b.n	80055ac <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	210f      	movs	r1, #15
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005514:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x8d4>
 800551c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005520:	0e9b      	lsrs	r3, r3, #26
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	e027      	b.n	8005578 <HAL_ADC_ConfigChannel+0x924>
 8005528:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800552c:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	fa93 f3a3 	rbit	r3, r3
 8005534:	60fb      	str	r3, [r7, #12]
  return result;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d117      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8005540:	2320      	movs	r3, #32
 8005542:	e019      	b.n	8005578 <HAL_ADC_ConfigChannel+0x924>
 8005544:	42028000 	.word	0x42028000
 8005548:	42028100 	.word	0x42028100
 800554c:	42028300 	.word	0x42028300
 8005550:	46021300 	.word	0x46021300
 8005554:	46021000 	.word	0x46021000
 8005558:	ce080000 	.word	0xce080000
 800555c:	20000028 	.word	0x20000028
 8005560:	053e2d63 	.word	0x053e2d63
 8005564:	ca040000 	.word	0xca040000
 8005568:	80000001 	.word	0x80000001
 800556c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	fab3 f383 	clz	r3, r3
 8005576:	b2db      	uxtb	r3, r3
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	6849      	ldr	r1, [r1, #4]
 800557c:	f001 011f 	and.w	r1, r1, #31
 8005580:	408b      	lsls	r3, r1
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	089b      	lsrs	r3, r3, #2
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005596:	429a      	cmp	r2, r3
 8005598:	d808      	bhi.n	80055ac <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055a6:	4619      	mov	r1, r3
 80055a8:	f7fe fa06 	bl	80039b8 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80055ba:	f7fe fac9 	bl	8003b50 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f280 8159 	bge.w	800587a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a9b      	ldr	r2, [pc, #620]	@ (800583c <HAL_ADC_ConfigChannel+0xbe8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_ADC_ConfigChannel+0x988>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a9a      	ldr	r2, [pc, #616]	@ (8005840 <HAL_ADC_ConfigChannel+0xbec>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d101      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x98c>
 80055dc:	4b99      	ldr	r3, [pc, #612]	@ (8005844 <HAL_ADC_ConfigChannel+0xbf0>)
 80055de:	e000      	b.n	80055e2 <HAL_ADC_ConfigChannel+0x98e>
 80055e0:	4b99      	ldr	r3, [pc, #612]	@ (8005848 <HAL_ADC_ConfigChannel+0xbf4>)
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe f8dc 	bl	80037a0 <LL_ADC_GetCommonPathInternalCh>
 80055e8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a96      	ldr	r2, [pc, #600]	@ (800584c <HAL_ADC_ConfigChannel+0xbf8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d12b      	bne.n	800564e <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80055f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d125      	bne.n	800564e <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a8d      	ldr	r2, [pc, #564]	@ (800583c <HAL_ADC_ConfigChannel+0xbe8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_ADC_ConfigChannel+0x9c2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a8b      	ldr	r2, [pc, #556]	@ (8005840 <HAL_ADC_ConfigChannel+0xbec>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_ADC_ConfigChannel+0x9c6>
 8005616:	4a8b      	ldr	r2, [pc, #556]	@ (8005844 <HAL_ADC_ConfigChannel+0xbf0>)
 8005618:	e000      	b.n	800561c <HAL_ADC_ConfigChannel+0x9c8>
 800561a:	4a8b      	ldr	r2, [pc, #556]	@ (8005848 <HAL_ADC_ConfigChannel+0xbf4>)
 800561c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005620:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f7fe f8a7 	bl	800377a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800562c:	4b88      	ldr	r3, [pc, #544]	@ (8005850 <HAL_ADC_ConfigChannel+0xbfc>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	099b      	lsrs	r3, r3, #6
 8005632:	4a88      	ldr	r2, [pc, #544]	@ (8005854 <HAL_ADC_ConfigChannel+0xc00>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	099b      	lsrs	r3, r3, #6
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800563e:	e002      	b.n	8005646 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	3b01      	subs	r3, #1
 8005644:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1f9      	bne.n	8005640 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800564c:	e045      	b.n	80056da <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a81      	ldr	r2, [pc, #516]	@ (8005858 <HAL_ADC_ConfigChannel+0xc04>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d11b      	bne.n	8005690 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800565c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8005660:	2b00      	cmp	r3, #0
 8005662:	d115      	bne.n	8005690 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a74      	ldr	r2, [pc, #464]	@ (800583c <HAL_ADC_ConfigChannel+0xbe8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <HAL_ADC_ConfigChannel+0xa24>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a73      	ldr	r2, [pc, #460]	@ (8005840 <HAL_ADC_ConfigChannel+0xbec>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d101      	bne.n	800567c <HAL_ADC_ConfigChannel+0xa28>
 8005678:	4a72      	ldr	r2, [pc, #456]	@ (8005844 <HAL_ADC_ConfigChannel+0xbf0>)
 800567a:	e000      	b.n	800567e <HAL_ADC_ConfigChannel+0xa2a>
 800567c:	4a72      	ldr	r2, [pc, #456]	@ (8005848 <HAL_ADC_ConfigChannel+0xbf4>)
 800567e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f7fe f876 	bl	800377a <LL_ADC_SetCommonPathInternalCh>
 800568e:	e024      	b.n	80056da <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a71      	ldr	r2, [pc, #452]	@ (800585c <HAL_ADC_ConfigChannel+0xc08>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d11f      	bne.n	80056da <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800569a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800569e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d115      	bne.n	80056d2 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a64      	ldr	r2, [pc, #400]	@ (800583c <HAL_ADC_ConfigChannel+0xbe8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_ADC_ConfigChannel+0xa66>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a62      	ldr	r2, [pc, #392]	@ (8005840 <HAL_ADC_ConfigChannel+0xbec>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <HAL_ADC_ConfigChannel+0xa6a>
 80056ba:	4a62      	ldr	r2, [pc, #392]	@ (8005844 <HAL_ADC_ConfigChannel+0xbf0>)
 80056bc:	e000      	b.n	80056c0 <HAL_ADC_ConfigChannel+0xa6c>
 80056be:	4a62      	ldr	r2, [pc, #392]	@ (8005848 <HAL_ADC_ConfigChannel+0xbf4>)
 80056c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f7fe f855 	bl	800377a <LL_ADC_SetCommonPathInternalCh>
 80056d0:	e003      	b.n	80056da <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a62      	ldr	r2, [pc, #392]	@ (8005860 <HAL_ADC_ConfigChannel+0xc0c>)
 80056d8:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a61      	ldr	r2, [pc, #388]	@ (8005864 <HAL_ADC_ConfigChannel+0xc10>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	f040 80ca 	bne.w	800587a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80056e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 80c3 	bne.w	800587a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0201 	orr.w	r2, r2, #1
 8005704:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005708:	e0b7      	b.n	800587a <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005712:	d004      	beq.n	800571e <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005718:	4a53      	ldr	r2, [pc, #332]	@ (8005868 <HAL_ADC_ConfigChannel+0xc14>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d106      	bne.n	800572c <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe f9d9 	bl	8003ade <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f280 80a2 	bge.w	800587a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a40      	ldr	r2, [pc, #256]	@ (800583c <HAL_ADC_ConfigChannel+0xbe8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d004      	beq.n	800574a <HAL_ADC_ConfigChannel+0xaf6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a3e      	ldr	r2, [pc, #248]	@ (8005840 <HAL_ADC_ConfigChannel+0xbec>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d101      	bne.n	800574e <HAL_ADC_ConfigChannel+0xafa>
 800574a:	4b3e      	ldr	r3, [pc, #248]	@ (8005844 <HAL_ADC_ConfigChannel+0xbf0>)
 800574c:	e000      	b.n	8005750 <HAL_ADC_ConfigChannel+0xafc>
 800574e:	4b3e      	ldr	r3, [pc, #248]	@ (8005848 <HAL_ADC_ConfigChannel+0xbf4>)
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe f825 	bl	80037a0 <LL_ADC_GetCommonPathInternalCh>
 8005756:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a43      	ldr	r2, [pc, #268]	@ (800586c <HAL_ADC_ConfigChannel+0xc18>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d115      	bne.n	8005790 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a34      	ldr	r2, [pc, #208]	@ (800583c <HAL_ADC_ConfigChannel+0xbe8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_ADC_ConfigChannel+0xb24>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a33      	ldr	r2, [pc, #204]	@ (8005840 <HAL_ADC_ConfigChannel+0xbec>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d101      	bne.n	800577c <HAL_ADC_ConfigChannel+0xb28>
 8005778:	4a32      	ldr	r2, [pc, #200]	@ (8005844 <HAL_ADC_ConfigChannel+0xbf0>)
 800577a:	e000      	b.n	800577e <HAL_ADC_ConfigChannel+0xb2a>
 800577c:	4a32      	ldr	r2, [pc, #200]	@ (8005848 <HAL_ADC_ConfigChannel+0xbf4>)
 800577e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005782:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005786:	4619      	mov	r1, r3
 8005788:	4610      	mov	r0, r2
 800578a:	f7fd fff6 	bl	800377a <LL_ADC_SetCommonPathInternalCh>
 800578e:	e034      	b.n	80057fa <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a36      	ldr	r2, [pc, #216]	@ (8005870 <HAL_ADC_ConfigChannel+0xc1c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d115      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a27      	ldr	r2, [pc, #156]	@ (800583c <HAL_ADC_ConfigChannel+0xbe8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <HAL_ADC_ConfigChannel+0xb5a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a25      	ldr	r2, [pc, #148]	@ (8005840 <HAL_ADC_ConfigChannel+0xbec>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d101      	bne.n	80057b2 <HAL_ADC_ConfigChannel+0xb5e>
 80057ae:	4a25      	ldr	r2, [pc, #148]	@ (8005844 <HAL_ADC_ConfigChannel+0xbf0>)
 80057b0:	e000      	b.n	80057b4 <HAL_ADC_ConfigChannel+0xb60>
 80057b2:	4a25      	ldr	r2, [pc, #148]	@ (8005848 <HAL_ADC_ConfigChannel+0xbf4>)
 80057b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f7fd ffdb 	bl	800377a <LL_ADC_SetCommonPathInternalCh>
 80057c4:	e019      	b.n	80057fa <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a24      	ldr	r2, [pc, #144]	@ (800585c <HAL_ADC_ConfigChannel+0xc08>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d114      	bne.n	80057fa <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a19      	ldr	r2, [pc, #100]	@ (800583c <HAL_ADC_ConfigChannel+0xbe8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d004      	beq.n	80057e4 <HAL_ADC_ConfigChannel+0xb90>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a18      	ldr	r2, [pc, #96]	@ (8005840 <HAL_ADC_ConfigChannel+0xbec>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d101      	bne.n	80057e8 <HAL_ADC_ConfigChannel+0xb94>
 80057e4:	4a17      	ldr	r2, [pc, #92]	@ (8005844 <HAL_ADC_ConfigChannel+0xbf0>)
 80057e6:	e000      	b.n	80057ea <HAL_ADC_ConfigChannel+0xb96>
 80057e8:	4a17      	ldr	r2, [pc, #92]	@ (8005848 <HAL_ADC_ConfigChannel+0xbf4>)
 80057ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057ee:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80057f2:	4619      	mov	r1, r3
 80057f4:	4610      	mov	r0, r2
 80057f6:	f7fd ffc0 	bl	800377a <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a19      	ldr	r2, [pc, #100]	@ (8005864 <HAL_ADC_ConfigChannel+0xc10>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d13a      	bne.n	800587a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005804:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d134      	bne.n	800587a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0201 	orr.w	r2, r2, #1
 8005820:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005824:	e029      	b.n	800587a <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800582a:	f043 0220 	orr.w	r2, r3, #32
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005838:	e01f      	b.n	800587a <HAL_ADC_ConfigChannel+0xc26>
 800583a:	bf00      	nop
 800583c:	42028000 	.word	0x42028000
 8005840:	42028100 	.word	0x42028100
 8005844:	42028300 	.word	0x42028300
 8005848:	46021300 	.word	0x46021300
 800584c:	b6002000 	.word	0xb6002000
 8005850:	20000028 	.word	0x20000028
 8005854:	053e2d63 	.word	0x053e2d63
 8005858:	ba004000 	.word	0xba004000
 800585c:	80000001 	.word	0x80000001
 8005860:	b2001000 	.word	0xb2001000
 8005864:	d7200000 	.word	0xd7200000
 8005868:	80000010 	.word	0x80000010
 800586c:	ce080000 	.word	0xce080000
 8005870:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005874:	bf00      	nop
 8005876:	e000      	b.n	800587a <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005878:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8005882:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005886:	4618      	mov	r0, r3
 8005888:	37dc      	adds	r7, #220	@ 0xdc
 800588a:	46bd      	mov	sp, r7
 800588c:	bd90      	pop	{r4, r7, pc}
 800588e:	bf00      	nop

08005890 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f7fe fa5d 	bl	8003d5c <LL_ADC_IsEnabled>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d17b      	bne.n	80059a0 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	4b3f      	ldr	r3, [pc, #252]	@ (80059ac <ADC_Enable+0x11c>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00d      	beq.n	80058d2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ba:	f043 0210 	orr.w	r2, r3, #16
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058c6:	f043 0201 	orr.w	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e067      	b.n	80059a2 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fa28 	bl	8003d34 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <ADC_Enable+0x66>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2f      	ldr	r2, [pc, #188]	@ (80059b0 <ADC_Enable+0x120>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d054      	beq.n	80059a0 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80058f6:	f7fd fed5 	bl	80036a4 <HAL_GetTick>
 80058fa:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2c      	ldr	r2, [pc, #176]	@ (80059b4 <ADC_Enable+0x124>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <ADC_Enable+0x80>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2b      	ldr	r2, [pc, #172]	@ (80059b8 <ADC_Enable+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d101      	bne.n	8005914 <ADC_Enable+0x84>
 8005910:	4b2a      	ldr	r3, [pc, #168]	@ (80059bc <ADC_Enable+0x12c>)
 8005912:	e000      	b.n	8005916 <ADC_Enable+0x86>
 8005914:	4b2a      	ldr	r3, [pc, #168]	@ (80059c0 <ADC_Enable+0x130>)
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe f9a2 	bl	8003c60 <LL_ADC_GetMultimode>
 800591c:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a25      	ldr	r2, [pc, #148]	@ (80059b8 <ADC_Enable+0x128>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d002      	beq.n	800592e <ADC_Enable+0x9e>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	e000      	b.n	8005930 <ADC_Enable+0xa0>
 800592e:	4b21      	ldr	r3, [pc, #132]	@ (80059b4 <ADC_Enable+0x124>)
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	4293      	cmp	r3, r2
 8005936:	d02c      	beq.n	8005992 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d130      	bne.n	80059a0 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800593e:	e028      	b.n	8005992 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fa09 	bl	8003d5c <LL_ADC_IsEnabled>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe f9ed 	bl	8003d34 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800595a:	f7fd fea3 	bl	80036a4 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d914      	bls.n	8005992 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b01      	cmp	r3, #1
 8005974:	d00d      	beq.n	8005992 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800597a:	f043 0210 	orr.w	r2, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005986:	f043 0201 	orr.w	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e007      	b.n	80059a2 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d1cf      	bne.n	8005940 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	8000003f 	.word	0x8000003f
 80059b0:	46021000 	.word	0x46021000
 80059b4:	42028000 	.word	0x42028000
 80059b8:	42028100 	.word	0x42028100
 80059bc:	42028300 	.word	0x42028300
 80059c0:	46021300 	.word	0x46021300

080059c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d14b      	bne.n	8005a76 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d021      	beq.n	8005a3c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fd ffc7 	bl	8003990 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d032      	beq.n	8005a6e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d12b      	bne.n	8005a6e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d11f      	bne.n	8005a6e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a32:	f043 0201 	orr.w	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	679a      	str	r2, [r3, #120]	@ 0x78
 8005a3a:	e018      	b.n	8005a6e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d111      	bne.n	8005a6e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a4e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d105      	bne.n	8005a6e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a66:	f043 0201 	orr.w	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff f8aa 	bl	8004bc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005a74:	e00e      	b.n	8005a94 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff f8be 	bl	8004c04 <HAL_ADC_ErrorCallback>
}
 8005a88:	e004      	b.n	8005a94 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4798      	blx	r3
}
 8005a94:	bf00      	nop
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff f896 	bl	8004bdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ad6:	f043 0204 	orr.w	r2, r3, #4
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff f890 	bl	8004c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <__NVIC_SetPriorityGrouping+0x44>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b6e:	4a04      	ldr	r2, [pc, #16]	@ (8005b80 <__NVIC_SetPriorityGrouping+0x44>)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	60d3      	str	r3, [r2, #12]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	e000ed00 	.word	0xe000ed00

08005b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b88:	4b04      	ldr	r3, [pc, #16]	@ (8005b9c <__NVIC_GetPriorityGrouping+0x18>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	f003 0307 	and.w	r3, r3, #7
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	e000ed00 	.word	0xe000ed00

08005ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	db0b      	blt.n	8005bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	f003 021f 	and.w	r2, r3, #31
 8005bb8:	4907      	ldr	r1, [pc, #28]	@ (8005bd8 <__NVIC_EnableIRQ+0x38>)
 8005bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	e000e100 	.word	0xe000e100

08005bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db0a      	blt.n	8005c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	490c      	ldr	r1, [pc, #48]	@ (8005c28 <__NVIC_SetPriority+0x4c>)
 8005bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bfa:	0112      	lsls	r2, r2, #4
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	440b      	add	r3, r1
 8005c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c04:	e00a      	b.n	8005c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	4908      	ldr	r1, [pc, #32]	@ (8005c2c <__NVIC_SetPriority+0x50>)
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	3b04      	subs	r3, #4
 8005c14:	0112      	lsls	r2, r2, #4
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	440b      	add	r3, r1
 8005c1a:	761a      	strb	r2, [r3, #24]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	e000e100 	.word	0xe000e100
 8005c2c:	e000ed00 	.word	0xe000ed00

08005c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b089      	sub	sp, #36	@ 0x24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f1c3 0307 	rsb	r3, r3, #7
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	bf28      	it	cs
 8005c4e:	2304      	movcs	r3, #4
 8005c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3304      	adds	r3, #4
 8005c56:	2b06      	cmp	r3, #6
 8005c58:	d902      	bls.n	8005c60 <NVIC_EncodePriority+0x30>
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3b03      	subs	r3, #3
 8005c5e:	e000      	b.n	8005c62 <NVIC_EncodePriority+0x32>
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43da      	mvns	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	401a      	ands	r2, r3
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c78:	f04f 31ff 	mov.w	r1, #4294967295
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	43d9      	mvns	r1, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c88:	4313      	orrs	r3, r2
         );
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3724      	adds	r7, #36	@ 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ff4c 	bl	8005b3c <__NVIC_SetPriorityGrouping>
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cba:	f7ff ff63 	bl	8005b84 <__NVIC_GetPriorityGrouping>
 8005cbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	6978      	ldr	r0, [r7, #20]
 8005cc6:	f7ff ffb3 	bl	8005c30 <NVIC_EncodePriority>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff ff82 	bl	8005bdc <__NVIC_SetPriority>
}
 8005cd8:	bf00      	nop
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff ff56 	bl	8005ba0 <__NVIC_EnableIRQ>
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d0c:	d301      	bcc.n	8005d12 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e00d      	b.n	8005d2e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005d12:	4a0a      	ldr	r2, [pc, #40]	@ (8005d3c <HAL_SYSTICK_Config+0x40>)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005d1a:	4b08      	ldr	r3, [pc, #32]	@ (8005d3c <HAL_SYSTICK_Config+0x40>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <HAL_SYSTICK_Config+0x40>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a05      	ldr	r2, [pc, #20]	@ (8005d3c <HAL_SYSTICK_Config+0x40>)
 8005d26:	f043 0303 	orr.w	r3, r3, #3
 8005d2a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	e000e010 	.word	0xe000e010

08005d40 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d844      	bhi.n	8005dd8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d77 	.word	0x08005d77
 8005d58:	08005d95 	.word	0x08005d95
 8005d5c:	08005db7 	.word	0x08005db7
 8005d60:	08005dd9 	.word	0x08005dd9
 8005d64:	08005d69 	.word	0x08005d69
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005d68:	4b1f      	ldr	r3, [pc, #124]	@ (8005de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d6e:	f043 0304 	orr.w	r3, r3, #4
 8005d72:	6013      	str	r3, [r2, #0]
      break;
 8005d74:	e031      	b.n	8005dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005d76:	4b1c      	ldr	r3, [pc, #112]	@ (8005de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d7c:	f023 0304 	bic.w	r3, r3, #4
 8005d80:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005d82:	4b1a      	ldr	r3, [pc, #104]	@ (8005dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d88:	4a18      	ldr	r2, [pc, #96]	@ (8005dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005d8a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005d92:	e022      	b.n	8005dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005d94:	4b14      	ldr	r3, [pc, #80]	@ (8005de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a13      	ldr	r2, [pc, #76]	@ (8005de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d9a:	f023 0304 	bic.w	r3, r3, #4
 8005d9e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005da0:	4b12      	ldr	r3, [pc, #72]	@ (8005dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005da6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005daa:	4a10      	ldr	r2, [pc, #64]	@ (8005dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005dac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005db4:	e011      	b.n	8005dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005db6:	4b0c      	ldr	r3, [pc, #48]	@ (8005de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a0b      	ldr	r2, [pc, #44]	@ (8005de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005dbc:	f023 0304 	bic.w	r3, r3, #4
 8005dc0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005dc8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005dcc:	4a07      	ldr	r2, [pc, #28]	@ (8005dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005dce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005dd6:	e000      	b.n	8005dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005dd8:	bf00      	nop
  }
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	e000e010 	.word	0xe000e010
 8005dec:	46020c00 	.word	0x46020c00

08005df0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005df6:	4b19      	ldr	r3, [pc, #100]	@ (8005e5c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005e02:	2304      	movs	r3, #4
 8005e04:	607b      	str	r3, [r7, #4]
 8005e06:	e021      	b.n	8005e4c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005e08:	4b15      	ldr	r3, [pc, #84]	@ (8005e60 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8005e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e0e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005e12:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e1a:	d011      	beq.n	8005e40 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e22:	d810      	bhi.n	8005e46 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e30:	d003      	beq.n	8005e3a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005e32:	e008      	b.n	8005e46 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005e34:	2300      	movs	r3, #0
 8005e36:	607b      	str	r3, [r7, #4]
        break;
 8005e38:	e008      	b.n	8005e4c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	607b      	str	r3, [r7, #4]
        break;
 8005e3e:	e005      	b.n	8005e4c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005e40:	2302      	movs	r3, #2
 8005e42:	607b      	str	r3, [r7, #4]
        break;
 8005e44:	e002      	b.n	8005e4c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005e46:	2300      	movs	r3, #0
 8005e48:	607b      	str	r3, [r7, #4]
        break;
 8005e4a:	bf00      	nop
    }
  }
  return systick_source;
 8005e4c:	687b      	ldr	r3, [r7, #4]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	e000e010 	.word	0xe000e010
 8005e60:	46020c00 	.word	0x46020c00

08005e64 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005e6c:	f7fd fc1a 	bl	80036a4 <HAL_GetTick>
 8005e70:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0db      	b.n	8006034 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a6e      	ldr	r2, [pc, #440]	@ (800603c <HAL_DMA_Init+0x1d8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	f000 809f 	beq.w	8005fc6 <HAL_DMA_Init+0x162>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a6c      	ldr	r2, [pc, #432]	@ (8006040 <HAL_DMA_Init+0x1dc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	f000 8099 	beq.w	8005fc6 <HAL_DMA_Init+0x162>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a6a      	ldr	r2, [pc, #424]	@ (8006044 <HAL_DMA_Init+0x1e0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	f000 8093 	beq.w	8005fc6 <HAL_DMA_Init+0x162>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a68      	ldr	r2, [pc, #416]	@ (8006048 <HAL_DMA_Init+0x1e4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	f000 808d 	beq.w	8005fc6 <HAL_DMA_Init+0x162>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a66      	ldr	r2, [pc, #408]	@ (800604c <HAL_DMA_Init+0x1e8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	f000 8087 	beq.w	8005fc6 <HAL_DMA_Init+0x162>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a64      	ldr	r2, [pc, #400]	@ (8006050 <HAL_DMA_Init+0x1ec>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	f000 8081 	beq.w	8005fc6 <HAL_DMA_Init+0x162>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a62      	ldr	r2, [pc, #392]	@ (8006054 <HAL_DMA_Init+0x1f0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d07b      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a61      	ldr	r2, [pc, #388]	@ (8006058 <HAL_DMA_Init+0x1f4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d076      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a5f      	ldr	r2, [pc, #380]	@ (800605c <HAL_DMA_Init+0x1f8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d071      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8006060 <HAL_DMA_Init+0x1fc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d06c      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a5c      	ldr	r2, [pc, #368]	@ (8006064 <HAL_DMA_Init+0x200>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d067      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a5b      	ldr	r2, [pc, #364]	@ (8006068 <HAL_DMA_Init+0x204>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d062      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a59      	ldr	r2, [pc, #356]	@ (800606c <HAL_DMA_Init+0x208>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d05d      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a58      	ldr	r2, [pc, #352]	@ (8006070 <HAL_DMA_Init+0x20c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d058      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a56      	ldr	r2, [pc, #344]	@ (8006074 <HAL_DMA_Init+0x210>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d053      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a55      	ldr	r2, [pc, #340]	@ (8006078 <HAL_DMA_Init+0x214>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d04e      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a53      	ldr	r2, [pc, #332]	@ (800607c <HAL_DMA_Init+0x218>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d049      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a52      	ldr	r2, [pc, #328]	@ (8006080 <HAL_DMA_Init+0x21c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d044      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a50      	ldr	r2, [pc, #320]	@ (8006084 <HAL_DMA_Init+0x220>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d03f      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a4f      	ldr	r2, [pc, #316]	@ (8006088 <HAL_DMA_Init+0x224>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d03a      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a4d      	ldr	r2, [pc, #308]	@ (800608c <HAL_DMA_Init+0x228>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d035      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a4c      	ldr	r2, [pc, #304]	@ (8006090 <HAL_DMA_Init+0x22c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d030      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a4a      	ldr	r2, [pc, #296]	@ (8006094 <HAL_DMA_Init+0x230>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d02b      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a49      	ldr	r2, [pc, #292]	@ (8006098 <HAL_DMA_Init+0x234>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d026      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a47      	ldr	r2, [pc, #284]	@ (800609c <HAL_DMA_Init+0x238>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d021      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a46      	ldr	r2, [pc, #280]	@ (80060a0 <HAL_DMA_Init+0x23c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d01c      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a44      	ldr	r2, [pc, #272]	@ (80060a4 <HAL_DMA_Init+0x240>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d017      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a43      	ldr	r2, [pc, #268]	@ (80060a8 <HAL_DMA_Init+0x244>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d012      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a41      	ldr	r2, [pc, #260]	@ (80060ac <HAL_DMA_Init+0x248>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00d      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a40      	ldr	r2, [pc, #256]	@ (80060b0 <HAL_DMA_Init+0x24c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d008      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80060b4 <HAL_DMA_Init+0x250>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <HAL_DMA_Init+0x162>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80060b8 <HAL_DMA_Init+0x254>)
 8005fc4:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695a      	ldr	r2, [r3, #20]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0206 	orr.w	r2, r2, #6
 8005fe4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005fe6:	e00f      	b.n	8006008 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005fe8:	f7fd fb5c 	bl	80036a4 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d908      	bls.n	8006008 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2203      	movs	r2, #3
 8006000:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e015      	b.n	8006034 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e8      	bne.n	8005fe8 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fb26 	bl	8006668 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40020050 	.word	0x40020050
 8006040:	50020050 	.word	0x50020050
 8006044:	400200d0 	.word	0x400200d0
 8006048:	500200d0 	.word	0x500200d0
 800604c:	40020150 	.word	0x40020150
 8006050:	50020150 	.word	0x50020150
 8006054:	400201d0 	.word	0x400201d0
 8006058:	500201d0 	.word	0x500201d0
 800605c:	40020250 	.word	0x40020250
 8006060:	50020250 	.word	0x50020250
 8006064:	400202d0 	.word	0x400202d0
 8006068:	500202d0 	.word	0x500202d0
 800606c:	40020350 	.word	0x40020350
 8006070:	50020350 	.word	0x50020350
 8006074:	400203d0 	.word	0x400203d0
 8006078:	500203d0 	.word	0x500203d0
 800607c:	40020450 	.word	0x40020450
 8006080:	50020450 	.word	0x50020450
 8006084:	400204d0 	.word	0x400204d0
 8006088:	500204d0 	.word	0x500204d0
 800608c:	40020550 	.word	0x40020550
 8006090:	50020550 	.word	0x50020550
 8006094:	400205d0 	.word	0x400205d0
 8006098:	500205d0 	.word	0x500205d0
 800609c:	40020650 	.word	0x40020650
 80060a0:	50020650 	.word	0x50020650
 80060a4:	400206d0 	.word	0x400206d0
 80060a8:	500206d0 	.word	0x500206d0
 80060ac:	40020750 	.word	0x40020750
 80060b0:	50020750 	.word	0x50020750
 80060b4:	400207d0 	.word	0x400207d0
 80060b8:	500207d0 	.word	0x500207d0

080060bc <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e04f      	b.n	8006174 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_DMA_Start_IT+0x26>
 80060de:	2302      	movs	r3, #2
 80060e0:	e048      	b.n	8006174 <HAL_DMA_Start_IT+0xb8>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d136      	bne.n	8006164 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 fa86 	bl	800661c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800611e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695a      	ldr	r2, [r3, #20]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006136:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800614e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	e007      	b.n	8006174 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2240      	movs	r2, #64	@ 0x40
 8006168:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8006184:	f7fd fa8e 	bl	80036a4 <HAL_GetTick>
 8006188:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e06b      	b.n	800626c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d008      	beq.n	80061b2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e05c      	b.n	800626c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0204 	orr.w	r2, r2, #4
 80061c0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2205      	movs	r2, #5
 80061c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80061ca:	e020      	b.n	800620e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80061cc:	f7fd fa6a 	bl	80036a4 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b05      	cmp	r3, #5
 80061d8:	d919      	bls.n	800620e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061de:	f043 0210 	orr.w	r2, r3, #16
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2203      	movs	r2, #3
 80061ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fe:	2201      	movs	r2, #1
 8006200:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e02e      	b.n	800626c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0d7      	beq.n	80061cc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695a      	ldr	r2, [r3, #20]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0202 	orr.w	r2, r2, #2
 800622a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2204      	movs	r2, #4
 8006230:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800623c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800624a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006256:	2201      	movs	r2, #1
 8006258:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2200      	movs	r2, #0
 8006260:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e019      	b.n	80062ba <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d004      	beq.n	800629c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e00e      	b.n	80062ba <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2204      	movs	r2, #4
 80062a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80062b2:	f043 0304 	orr.w	r3, r3, #4
 80062b6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80062d6:	f023 030f 	bic.w	r3, r3, #15
 80062da:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e4:	3b50      	subs	r3, #80	@ 0x50
 80062e6:	09db      	lsrs	r3, r3, #7
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2201      	movs	r2, #1
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4013      	ands	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 813b 	beq.w	800657c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006310:	2b00      	cmp	r3, #0
 8006312:	d011      	beq.n	8006338 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800632a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006330:	f043 0201 	orr.w	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006342:	2b00      	cmp	r3, #0
 8006344:	d011      	beq.n	800636a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800635c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006362:	f043 0202 	orr.w	r2, r3, #2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d011      	beq.n	800639c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800638e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006394:	f043 0204 	orr.w	r2, r3, #4
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d011      	beq.n	80063ce <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80063c0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c6:	f043 0208 	orr.w	r2, r3, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d013      	beq.n	8006404 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00c      	beq.n	8006404 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063f2:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d04c      	beq.n	80064ac <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d045      	beq.n	80064ac <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006428:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b04      	cmp	r3, #4
 8006434:	d12e      	bne.n	8006494 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	695a      	ldr	r2, [r3, #20]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006444:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	695a      	ldr	r2, [r3, #20]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0202 	orr.w	r2, r2, #2
 8006454:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800646e:	2201      	movs	r2, #1
 8006470:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d07a      	beq.n	8006580 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
        }

        return;
 8006492:	e075      	b.n	8006580 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2205      	movs	r2, #5
 8006498:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d039      	beq.n	800652e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d032      	beq.n	800652e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d012      	beq.n	80064fa <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d116      	bne.n	800650c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d111      	bne.n	800650c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064f4:	2201      	movs	r2, #1
 80064f6:	731a      	strb	r2, [r3, #12]
 80064f8:	e008      	b.n	800650c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006514:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006532:	2b00      	cmp	r3, #0
 8006534:	d025      	beq.n	8006582 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695a      	ldr	r2, [r3, #20]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0202 	orr.w	r2, r2, #2
 8006544:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800655e:	2201      	movs	r2, #1
 8006560:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
 800657a:	e002      	b.n	8006582 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800657c:	bf00      	nop
 800657e:	e000      	b.n	8006582 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8006580:	bf00      	nop
    }
  }
}
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006596:	b2db      	uxtb	r3, r3
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e02b      	b.n	8006610 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80065c0:	f023 030f 	bic.w	r3, r3, #15
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ce:	3b50      	subs	r3, #80	@ 0x50
 80065d0:	09db      	lsrs	r3, r3, #7
 80065d2:	f003 031f 	and.w	r3, r3, #31
 80065d6:	2201      	movs	r2, #1
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d012      	beq.n	800660e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f003 0311 	and.w	r3, r3, #17
 80065ee:	2b11      	cmp	r3, #17
 80065f0:	d106      	bne.n	8006600 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	431a      	orrs	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	605a      	str	r2, [r3, #4]
 80065fe:	e006      	b.n	800660e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	43db      	mvns	r3, r3
 8006608:	401a      	ands	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	041b      	lsls	r3, r3, #16
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	b291      	uxth	r1, r2
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	6812      	ldr	r2, [r2, #0]
 800663c:	430b      	orrs	r3, r1
 800663e:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8006648:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	430a      	orrs	r2, r1
 8006688:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a53      	ldr	r2, [pc, #332]	@ (80067f4 <DMA_Init+0x18c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	f000 80a0 	beq.w	80067ee <DMA_Init+0x186>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a51      	ldr	r2, [pc, #324]	@ (80067f8 <DMA_Init+0x190>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	f000 809a 	beq.w	80067ee <DMA_Init+0x186>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a4f      	ldr	r2, [pc, #316]	@ (80067fc <DMA_Init+0x194>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	f000 8094 	beq.w	80067ee <DMA_Init+0x186>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a4d      	ldr	r2, [pc, #308]	@ (8006800 <DMA_Init+0x198>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	f000 808e 	beq.w	80067ee <DMA_Init+0x186>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a4b      	ldr	r2, [pc, #300]	@ (8006804 <DMA_Init+0x19c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	f000 8088 	beq.w	80067ee <DMA_Init+0x186>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a49      	ldr	r2, [pc, #292]	@ (8006808 <DMA_Init+0x1a0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	f000 8082 	beq.w	80067ee <DMA_Init+0x186>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a47      	ldr	r2, [pc, #284]	@ (800680c <DMA_Init+0x1a4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d07c      	beq.n	80067ee <DMA_Init+0x186>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a45      	ldr	r2, [pc, #276]	@ (8006810 <DMA_Init+0x1a8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d077      	beq.n	80067ee <DMA_Init+0x186>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a44      	ldr	r2, [pc, #272]	@ (8006814 <DMA_Init+0x1ac>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d072      	beq.n	80067ee <DMA_Init+0x186>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a42      	ldr	r2, [pc, #264]	@ (8006818 <DMA_Init+0x1b0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d06d      	beq.n	80067ee <DMA_Init+0x186>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a41      	ldr	r2, [pc, #260]	@ (800681c <DMA_Init+0x1b4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d068      	beq.n	80067ee <DMA_Init+0x186>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a3f      	ldr	r2, [pc, #252]	@ (8006820 <DMA_Init+0x1b8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d063      	beq.n	80067ee <DMA_Init+0x186>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a3e      	ldr	r2, [pc, #248]	@ (8006824 <DMA_Init+0x1bc>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d05e      	beq.n	80067ee <DMA_Init+0x186>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a3c      	ldr	r2, [pc, #240]	@ (8006828 <DMA_Init+0x1c0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d059      	beq.n	80067ee <DMA_Init+0x186>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a3b      	ldr	r2, [pc, #236]	@ (800682c <DMA_Init+0x1c4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d054      	beq.n	80067ee <DMA_Init+0x186>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a39      	ldr	r2, [pc, #228]	@ (8006830 <DMA_Init+0x1c8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d04f      	beq.n	80067ee <DMA_Init+0x186>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a38      	ldr	r2, [pc, #224]	@ (8006834 <DMA_Init+0x1cc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d04a      	beq.n	80067ee <DMA_Init+0x186>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a36      	ldr	r2, [pc, #216]	@ (8006838 <DMA_Init+0x1d0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d045      	beq.n	80067ee <DMA_Init+0x186>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a35      	ldr	r2, [pc, #212]	@ (800683c <DMA_Init+0x1d4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d040      	beq.n	80067ee <DMA_Init+0x186>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a33      	ldr	r2, [pc, #204]	@ (8006840 <DMA_Init+0x1d8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d03b      	beq.n	80067ee <DMA_Init+0x186>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a32      	ldr	r2, [pc, #200]	@ (8006844 <DMA_Init+0x1dc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d036      	beq.n	80067ee <DMA_Init+0x186>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a30      	ldr	r2, [pc, #192]	@ (8006848 <DMA_Init+0x1e0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d031      	beq.n	80067ee <DMA_Init+0x186>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2f      	ldr	r2, [pc, #188]	@ (800684c <DMA_Init+0x1e4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d02c      	beq.n	80067ee <DMA_Init+0x186>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a2d      	ldr	r2, [pc, #180]	@ (8006850 <DMA_Init+0x1e8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d027      	beq.n	80067ee <DMA_Init+0x186>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006854 <DMA_Init+0x1ec>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d022      	beq.n	80067ee <DMA_Init+0x186>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006858 <DMA_Init+0x1f0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d01d      	beq.n	80067ee <DMA_Init+0x186>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a29      	ldr	r2, [pc, #164]	@ (800685c <DMA_Init+0x1f4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d018      	beq.n	80067ee <DMA_Init+0x186>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a27      	ldr	r2, [pc, #156]	@ (8006860 <DMA_Init+0x1f8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d013      	beq.n	80067ee <DMA_Init+0x186>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a26      	ldr	r2, [pc, #152]	@ (8006864 <DMA_Init+0x1fc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00e      	beq.n	80067ee <DMA_Init+0x186>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a24      	ldr	r2, [pc, #144]	@ (8006868 <DMA_Init+0x200>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d009      	beq.n	80067ee <DMA_Init+0x186>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a23      	ldr	r2, [pc, #140]	@ (800686c <DMA_Init+0x204>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d004      	beq.n	80067ee <DMA_Init+0x186>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a21      	ldr	r2, [pc, #132]	@ (8006870 <DMA_Init+0x208>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d142      	bne.n	8006874 <DMA_Init+0x20c>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e041      	b.n	8006876 <DMA_Init+0x20e>
 80067f2:	bf00      	nop
 80067f4:	40020050 	.word	0x40020050
 80067f8:	50020050 	.word	0x50020050
 80067fc:	400200d0 	.word	0x400200d0
 8006800:	500200d0 	.word	0x500200d0
 8006804:	40020150 	.word	0x40020150
 8006808:	50020150 	.word	0x50020150
 800680c:	400201d0 	.word	0x400201d0
 8006810:	500201d0 	.word	0x500201d0
 8006814:	40020250 	.word	0x40020250
 8006818:	50020250 	.word	0x50020250
 800681c:	400202d0 	.word	0x400202d0
 8006820:	500202d0 	.word	0x500202d0
 8006824:	40020350 	.word	0x40020350
 8006828:	50020350 	.word	0x50020350
 800682c:	400203d0 	.word	0x400203d0
 8006830:	500203d0 	.word	0x500203d0
 8006834:	40020450 	.word	0x40020450
 8006838:	50020450 	.word	0x50020450
 800683c:	400204d0 	.word	0x400204d0
 8006840:	500204d0 	.word	0x500204d0
 8006844:	40020550 	.word	0x40020550
 8006848:	50020550 	.word	0x50020550
 800684c:	400205d0 	.word	0x400205d0
 8006850:	500205d0 	.word	0x500205d0
 8006854:	40020650 	.word	0x40020650
 8006858:	50020650 	.word	0x50020650
 800685c:	400206d0 	.word	0x400206d0
 8006860:	500206d0 	.word	0x500206d0
 8006864:	40020750 	.word	0x40020750
 8006868:	50020750 	.word	0x50020750
 800686c:	400207d0 	.word	0x400207d0
 8006870:	500207d0 	.word	0x500207d0
 8006874:	2300      	movs	r3, #0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d012      	beq.n	80068a0 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006882:	3b01      	subs	r3, #1
 8006884:	051b      	lsls	r3, r3, #20
 8006886:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800688a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006890:	3b01      	subs	r3, #1
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006898:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068d2:	f040 80b0 	bne.w	8006a36 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a82      	ldr	r2, [pc, #520]	@ (8006ae4 <DMA_Init+0x47c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	f000 80a0 	beq.w	8006a22 <DMA_Init+0x3ba>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a80      	ldr	r2, [pc, #512]	@ (8006ae8 <DMA_Init+0x480>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	f000 809a 	beq.w	8006a22 <DMA_Init+0x3ba>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a7e      	ldr	r2, [pc, #504]	@ (8006aec <DMA_Init+0x484>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	f000 8094 	beq.w	8006a22 <DMA_Init+0x3ba>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a7c      	ldr	r2, [pc, #496]	@ (8006af0 <DMA_Init+0x488>)
 8006900:	4293      	cmp	r3, r2
 8006902:	f000 808e 	beq.w	8006a22 <DMA_Init+0x3ba>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a7a      	ldr	r2, [pc, #488]	@ (8006af4 <DMA_Init+0x48c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	f000 8088 	beq.w	8006a22 <DMA_Init+0x3ba>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a78      	ldr	r2, [pc, #480]	@ (8006af8 <DMA_Init+0x490>)
 8006918:	4293      	cmp	r3, r2
 800691a:	f000 8082 	beq.w	8006a22 <DMA_Init+0x3ba>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a76      	ldr	r2, [pc, #472]	@ (8006afc <DMA_Init+0x494>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d07c      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a74      	ldr	r2, [pc, #464]	@ (8006b00 <DMA_Init+0x498>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d077      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a73      	ldr	r2, [pc, #460]	@ (8006b04 <DMA_Init+0x49c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d072      	beq.n	8006a22 <DMA_Init+0x3ba>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a71      	ldr	r2, [pc, #452]	@ (8006b08 <DMA_Init+0x4a0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d06d      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a70      	ldr	r2, [pc, #448]	@ (8006b0c <DMA_Init+0x4a4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d068      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a6e      	ldr	r2, [pc, #440]	@ (8006b10 <DMA_Init+0x4a8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d063      	beq.n	8006a22 <DMA_Init+0x3ba>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a6d      	ldr	r2, [pc, #436]	@ (8006b14 <DMA_Init+0x4ac>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d05e      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a6b      	ldr	r2, [pc, #428]	@ (8006b18 <DMA_Init+0x4b0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d059      	beq.n	8006a22 <DMA_Init+0x3ba>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a6a      	ldr	r2, [pc, #424]	@ (8006b1c <DMA_Init+0x4b4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d054      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a68      	ldr	r2, [pc, #416]	@ (8006b20 <DMA_Init+0x4b8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d04f      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a67      	ldr	r2, [pc, #412]	@ (8006b24 <DMA_Init+0x4bc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d04a      	beq.n	8006a22 <DMA_Init+0x3ba>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a65      	ldr	r2, [pc, #404]	@ (8006b28 <DMA_Init+0x4c0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d045      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a64      	ldr	r2, [pc, #400]	@ (8006b2c <DMA_Init+0x4c4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d040      	beq.n	8006a22 <DMA_Init+0x3ba>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a62      	ldr	r2, [pc, #392]	@ (8006b30 <DMA_Init+0x4c8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d03b      	beq.n	8006a22 <DMA_Init+0x3ba>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a61      	ldr	r2, [pc, #388]	@ (8006b34 <DMA_Init+0x4cc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d036      	beq.n	8006a22 <DMA_Init+0x3ba>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a5f      	ldr	r2, [pc, #380]	@ (8006b38 <DMA_Init+0x4d0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d031      	beq.n	8006a22 <DMA_Init+0x3ba>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a5e      	ldr	r2, [pc, #376]	@ (8006b3c <DMA_Init+0x4d4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d02c      	beq.n	8006a22 <DMA_Init+0x3ba>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a5c      	ldr	r2, [pc, #368]	@ (8006b40 <DMA_Init+0x4d8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d027      	beq.n	8006a22 <DMA_Init+0x3ba>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a5b      	ldr	r2, [pc, #364]	@ (8006b44 <DMA_Init+0x4dc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d022      	beq.n	8006a22 <DMA_Init+0x3ba>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a59      	ldr	r2, [pc, #356]	@ (8006b48 <DMA_Init+0x4e0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01d      	beq.n	8006a22 <DMA_Init+0x3ba>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a58      	ldr	r2, [pc, #352]	@ (8006b4c <DMA_Init+0x4e4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d018      	beq.n	8006a22 <DMA_Init+0x3ba>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a56      	ldr	r2, [pc, #344]	@ (8006b50 <DMA_Init+0x4e8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <DMA_Init+0x3ba>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a55      	ldr	r2, [pc, #340]	@ (8006b54 <DMA_Init+0x4ec>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a53      	ldr	r2, [pc, #332]	@ (8006b58 <DMA_Init+0x4f0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a52      	ldr	r2, [pc, #328]	@ (8006b5c <DMA_Init+0x4f4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <DMA_Init+0x3ba>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a50      	ldr	r2, [pc, #320]	@ (8006b60 <DMA_Init+0x4f8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d101      	bne.n	8006a26 <DMA_Init+0x3be>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <DMA_Init+0x3c0>
 8006a26:	2300      	movs	r3, #0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00d      	beq.n	8006a48 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e008      	b.n	8006a48 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a3e:	d103      	bne.n	8006a48 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a46:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a4e:	4b45      	ldr	r3, [pc, #276]	@ (8006b64 <DMA_Init+0x4fc>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6812      	ldr	r2, [r2, #0]
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2200      	movs	r2, #0
 8006a62:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a36      	ldr	r2, [pc, #216]	@ (8006b44 <DMA_Init+0x4dc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d022      	beq.n	8006ab4 <DMA_Init+0x44c>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a35      	ldr	r2, [pc, #212]	@ (8006b48 <DMA_Init+0x4e0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d01d      	beq.n	8006ab4 <DMA_Init+0x44c>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a33      	ldr	r2, [pc, #204]	@ (8006b4c <DMA_Init+0x4e4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d018      	beq.n	8006ab4 <DMA_Init+0x44c>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a32      	ldr	r2, [pc, #200]	@ (8006b50 <DMA_Init+0x4e8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <DMA_Init+0x44c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a30      	ldr	r2, [pc, #192]	@ (8006b54 <DMA_Init+0x4ec>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00e      	beq.n	8006ab4 <DMA_Init+0x44c>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a2f      	ldr	r2, [pc, #188]	@ (8006b58 <DMA_Init+0x4f0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <DMA_Init+0x44c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8006b5c <DMA_Init+0x4f4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <DMA_Init+0x44c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a2c      	ldr	r2, [pc, #176]	@ (8006b60 <DMA_Init+0x4f8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d101      	bne.n	8006ab8 <DMA_Init+0x450>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <DMA_Init+0x452>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40020050 	.word	0x40020050
 8006ae8:	50020050 	.word	0x50020050
 8006aec:	400200d0 	.word	0x400200d0
 8006af0:	500200d0 	.word	0x500200d0
 8006af4:	40020150 	.word	0x40020150
 8006af8:	50020150 	.word	0x50020150
 8006afc:	400201d0 	.word	0x400201d0
 8006b00:	500201d0 	.word	0x500201d0
 8006b04:	40020250 	.word	0x40020250
 8006b08:	50020250 	.word	0x50020250
 8006b0c:	400202d0 	.word	0x400202d0
 8006b10:	500202d0 	.word	0x500202d0
 8006b14:	40020350 	.word	0x40020350
 8006b18:	50020350 	.word	0x50020350
 8006b1c:	400203d0 	.word	0x400203d0
 8006b20:	500203d0 	.word	0x500203d0
 8006b24:	40020450 	.word	0x40020450
 8006b28:	50020450 	.word	0x50020450
 8006b2c:	400204d0 	.word	0x400204d0
 8006b30:	500204d0 	.word	0x500204d0
 8006b34:	40020550 	.word	0x40020550
 8006b38:	50020550 	.word	0x50020550
 8006b3c:	400205d0 	.word	0x400205d0
 8006b40:	500205d0 	.word	0x500205d0
 8006b44:	40020650 	.word	0x40020650
 8006b48:	50020650 	.word	0x50020650
 8006b4c:	400206d0 	.word	0x400206d0
 8006b50:	500206d0 	.word	0x500206d0
 8006b54:	40020750 	.word	0x40020750
 8006b58:	50020750 	.word	0x50020750
 8006b5c:	400207d0 	.word	0x400207d0
 8006b60:	500207d0 	.word	0x500207d0
 8006b64:	3c803180 	.word	0x3c803180

08006b68 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e053      	b.n	8006c22 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fb fd64 	bl	800265c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006ba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6851      	ldr	r1, [r2, #4]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	69d2      	ldr	r2, [r2, #28]
 8006bb2:	4311      	orrs	r1, r2
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6812      	ldr	r2, [r2, #0]
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc2:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6891      	ldr	r1, [r2, #8]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6992      	ldr	r2, [r2, #24]
 8006bd2:	4311      	orrs	r1, r2
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6812      	ldr	r2, [r2, #0]
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	0c1b      	lsrs	r3, r3, #16
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	68d1      	ldr	r1, [r2, #12]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	051a      	lsls	r2, r3, #20
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	055b      	lsls	r3, r3, #21
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_DMA2D_ConfigLayer+0x24>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e092      	b.n	8006d76 <HAL_DMA2D_ConfigLayer+0x14a>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	4613      	mov	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	3328      	adds	r3, #40	@ 0x28
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4413      	add	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	041b      	lsls	r3, r3, #16
 8006c7c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c84:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006c90:	4b3c      	ldr	r3, [pc, #240]	@ (8006d84 <HAL_DMA2D_ConfigLayer+0x158>)
 8006c92:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2b0a      	cmp	r3, #10
 8006c9a:	d003      	beq.n	8006ca4 <HAL_DMA2D_ConfigLayer+0x78>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b09      	cmp	r3, #9
 8006ca2:	d107      	bne.n	8006cb4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	e005      	b.n	8006cc0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	061b      	lsls	r3, r3, #24
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d120      	bne.n	8006d08 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	43db      	mvns	r3, r3
 8006cd0:	ea02 0103 	and.w	r1, r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	6812      	ldr	r2, [r2, #0]
 8006ce6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b0a      	cmp	r3, #10
 8006cee:	d003      	beq.n	8006cf8 <HAL_DMA2D_ConfigLayer+0xcc>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b09      	cmp	r3, #9
 8006cf6:	d135      	bne.n	8006d64 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006d04:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d06:	e02d      	b.n	8006d64 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2b0b      	cmp	r3, #11
 8006d0e:	d109      	bne.n	8006d24 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	049b      	lsls	r3, r3, #18
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006d22:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	69da      	ldr	r2, [r3, #28]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	ea02 0103 	and.w	r1, r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b0a      	cmp	r3, #10
 8006d4c:	d003      	beq.n	8006d56 <HAL_DMA2D_ConfigLayer+0x12a>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b09      	cmp	r3, #9
 8006d54:	d106      	bne.n	8006d64 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006d62:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	ff33000f 	.word	0xff33000f

08006d88 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006d90:	f7fc fc88 	bl	80036a4 <HAL_GetTick>
 8006d94:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0db      	b.n	8006f58 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a6e      	ldr	r2, [pc, #440]	@ (8006f60 <HAL_DMAEx_List_Init+0x1d8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	f000 809f 	beq.w	8006eea <HAL_DMAEx_List_Init+0x162>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a6c      	ldr	r2, [pc, #432]	@ (8006f64 <HAL_DMAEx_List_Init+0x1dc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f000 8099 	beq.w	8006eea <HAL_DMAEx_List_Init+0x162>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a6a      	ldr	r2, [pc, #424]	@ (8006f68 <HAL_DMAEx_List_Init+0x1e0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	f000 8093 	beq.w	8006eea <HAL_DMAEx_List_Init+0x162>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a68      	ldr	r2, [pc, #416]	@ (8006f6c <HAL_DMAEx_List_Init+0x1e4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f000 808d 	beq.w	8006eea <HAL_DMAEx_List_Init+0x162>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a66      	ldr	r2, [pc, #408]	@ (8006f70 <HAL_DMAEx_List_Init+0x1e8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	f000 8087 	beq.w	8006eea <HAL_DMAEx_List_Init+0x162>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a64      	ldr	r2, [pc, #400]	@ (8006f74 <HAL_DMAEx_List_Init+0x1ec>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	f000 8081 	beq.w	8006eea <HAL_DMAEx_List_Init+0x162>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a62      	ldr	r2, [pc, #392]	@ (8006f78 <HAL_DMAEx_List_Init+0x1f0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d07b      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a61      	ldr	r2, [pc, #388]	@ (8006f7c <HAL_DMAEx_List_Init+0x1f4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d076      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a5f      	ldr	r2, [pc, #380]	@ (8006f80 <HAL_DMAEx_List_Init+0x1f8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d071      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a5e      	ldr	r2, [pc, #376]	@ (8006f84 <HAL_DMAEx_List_Init+0x1fc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d06c      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a5c      	ldr	r2, [pc, #368]	@ (8006f88 <HAL_DMAEx_List_Init+0x200>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d067      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a5b      	ldr	r2, [pc, #364]	@ (8006f8c <HAL_DMAEx_List_Init+0x204>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d062      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a59      	ldr	r2, [pc, #356]	@ (8006f90 <HAL_DMAEx_List_Init+0x208>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d05d      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a58      	ldr	r2, [pc, #352]	@ (8006f94 <HAL_DMAEx_List_Init+0x20c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d058      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a56      	ldr	r2, [pc, #344]	@ (8006f98 <HAL_DMAEx_List_Init+0x210>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d053      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a55      	ldr	r2, [pc, #340]	@ (8006f9c <HAL_DMAEx_List_Init+0x214>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d04e      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a53      	ldr	r2, [pc, #332]	@ (8006fa0 <HAL_DMAEx_List_Init+0x218>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d049      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a52      	ldr	r2, [pc, #328]	@ (8006fa4 <HAL_DMAEx_List_Init+0x21c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d044      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a50      	ldr	r2, [pc, #320]	@ (8006fa8 <HAL_DMAEx_List_Init+0x220>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d03f      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a4f      	ldr	r2, [pc, #316]	@ (8006fac <HAL_DMAEx_List_Init+0x224>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d03a      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a4d      	ldr	r2, [pc, #308]	@ (8006fb0 <HAL_DMAEx_List_Init+0x228>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d035      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a4c      	ldr	r2, [pc, #304]	@ (8006fb4 <HAL_DMAEx_List_Init+0x22c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d030      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8006fb8 <HAL_DMAEx_List_Init+0x230>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d02b      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a49      	ldr	r2, [pc, #292]	@ (8006fbc <HAL_DMAEx_List_Init+0x234>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d026      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a47      	ldr	r2, [pc, #284]	@ (8006fc0 <HAL_DMAEx_List_Init+0x238>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d021      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a46      	ldr	r2, [pc, #280]	@ (8006fc4 <HAL_DMAEx_List_Init+0x23c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d01c      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a44      	ldr	r2, [pc, #272]	@ (8006fc8 <HAL_DMAEx_List_Init+0x240>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d017      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a43      	ldr	r2, [pc, #268]	@ (8006fcc <HAL_DMAEx_List_Init+0x244>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d012      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a41      	ldr	r2, [pc, #260]	@ (8006fd0 <HAL_DMAEx_List_Init+0x248>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d00d      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a40      	ldr	r2, [pc, #256]	@ (8006fd4 <HAL_DMAEx_List_Init+0x24c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d008      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a3e      	ldr	r2, [pc, #248]	@ (8006fd8 <HAL_DMAEx_List_Init+0x250>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <HAL_DMAEx_List_Init+0x162>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a3d      	ldr	r2, [pc, #244]	@ (8006fdc <HAL_DMAEx_List_Init+0x254>)
 8006ee8:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f042 0206 	orr.w	r2, r2, #6
 8006f08:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006f0a:	e00f      	b.n	8006f2c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006f0c:	f7fc fbca 	bl	80036a4 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	d908      	bls.n	8006f2c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2210      	movs	r2, #16
 8006f1e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2203      	movs	r2, #3
 8006f24:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e015      	b.n	8006f58 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e8      	bne.n	8006f0c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fb16 	bl	800756c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40020050 	.word	0x40020050
 8006f64:	50020050 	.word	0x50020050
 8006f68:	400200d0 	.word	0x400200d0
 8006f6c:	500200d0 	.word	0x500200d0
 8006f70:	40020150 	.word	0x40020150
 8006f74:	50020150 	.word	0x50020150
 8006f78:	400201d0 	.word	0x400201d0
 8006f7c:	500201d0 	.word	0x500201d0
 8006f80:	40020250 	.word	0x40020250
 8006f84:	50020250 	.word	0x50020250
 8006f88:	400202d0 	.word	0x400202d0
 8006f8c:	500202d0 	.word	0x500202d0
 8006f90:	40020350 	.word	0x40020350
 8006f94:	50020350 	.word	0x50020350
 8006f98:	400203d0 	.word	0x400203d0
 8006f9c:	500203d0 	.word	0x500203d0
 8006fa0:	40020450 	.word	0x40020450
 8006fa4:	50020450 	.word	0x50020450
 8006fa8:	400204d0 	.word	0x400204d0
 8006fac:	500204d0 	.word	0x500204d0
 8006fb0:	40020550 	.word	0x40020550
 8006fb4:	50020550 	.word	0x50020550
 8006fb8:	400205d0 	.word	0x400205d0
 8006fbc:	500205d0 	.word	0x500205d0
 8006fc0:	40020650 	.word	0x40020650
 8006fc4:	50020650 	.word	0x50020650
 8006fc8:	400206d0 	.word	0x400206d0
 8006fcc:	500206d0 	.word	0x500206d0
 8006fd0:	40020750 	.word	0x40020750
 8006fd4:	50020750 	.word	0x50020750
 8006fd8:	400207d0 	.word	0x400207d0
 8006fdc:	500207d0 	.word	0x500207d0

08006fe0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_DMAEx_List_Start_IT+0x16>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e082      	b.n	8007100 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007000:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800700c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d005      	beq.n	8007020 <HAL_DMAEx_List_Start_IT+0x40>
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d16a      	bne.n	80070f0 <HAL_DMAEx_List_Start_IT+0x110>
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d067      	beq.n	80070f0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	d157      	bne.n	80070dc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_DMAEx_List_Start_IT+0x5a>
 8007036:	2302      	movs	r3, #2
 8007038:	e062      	b.n	8007100 <HAL_DMAEx_List_Start_IT+0x120>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800704e:	2202      	movs	r2, #2
 8007050:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800705c:	2200      	movs	r2, #0
 800705e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695a      	ldr	r2, [r3, #20]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800706e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007074:	2b00      	cmp	r3, #0
 8007076:	d007      	beq.n	8007088 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	695a      	ldr	r2, [r3, #20]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007086:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708c:	2b00      	cmp	r3, #0
 800708e:	d007      	beq.n	80070a0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695a      	ldr	r2, [r3, #20]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800709e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f107 010c 	add.w	r1, r7, #12
 80070aa:	2200      	movs	r2, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fe7d 	bl	8007dac <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4619      	mov	r1, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	0c0b      	lsrs	r3, r1, #16
 80070c0:	041b      	lsls	r3, r3, #16
 80070c2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80070d0:	4013      	ands	r3, r2
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	430b      	orrs	r3, r1
 80070da:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	695a      	ldr	r2, [r3, #20]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0201 	orr.w	r2, r2, #1
 80070ea:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e007      	b.n	8007100 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2240      	movs	r2, #64	@ 0x40
 80070f4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <HAL_DMAEx_List_BuildNode+0x16>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e004      	b.n	800712c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fb79 	bl	800781c <DMA_List_BuildNode>

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_DMAEx_List_GetNodeConfig+0x16>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e004      	b.n	8007158 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fcb5 	bl	8007ac0 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08c      	sub	sp, #48	@ 0x30
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_DMAEx_List_InsertNode+0x18>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e0b6      	b.n	80072ea <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d104      	bne.n	800718e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2204      	movs	r2, #4
 8007188:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e0ad      	b.n	80072ea <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fd9c 	bl	8007cd4 <DMA_List_CheckNodesBaseAddresses>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2205      	movs	r2, #5
 80071a6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e09e      	b.n	80072ea <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fdbd 	bl	8007d34 <DMA_List_CheckNodesTypes>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2204      	movs	r2, #4
 80071c4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e08f      	b.n	80072ea <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2202      	movs	r2, #2
 80071ce:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80071d6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80071da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fde3 	bl	8007dac <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d11a      	bne.n	8007224 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	609a      	str	r2, [r3, #8]
 8007200:	e06c      	b.n	80072dc <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800720e:	4013      	ands	r3, r2
 8007210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007212:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007214:	4319      	orrs	r1, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2202      	movs	r2, #2
 8007220:	609a      	str	r2, [r3, #8]
 8007222:	e05b      	b.n	80072dc <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10f      	bne.n	800724a <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007234:	4013      	ands	r3, r2
 8007236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800723a:	4319      	orrs	r1, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e043      	b.n	80072d2 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 800724e:	f107 0314 	add.w	r3, r7, #20
 8007252:	461a      	mov	r2, r3
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fdd8 	bl	8007e0c <DMA_List_FindNode>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d132      	bne.n	80072c8 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	429a      	cmp	r2, r3
 800726a:	d11a      	bne.n	80072a2 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	461a      	mov	r2, r3
 800727a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800727e:	4013      	ands	r3, r2
 8007280:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007284:	4319      	orrs	r1, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007292:	4013      	ands	r3, r2
 8007294:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007298:	4319      	orrs	r1, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80072a0:	e017      	b.n	80072d2 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80072a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80072b8:	4013      	ands	r3, r2
 80072ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072be:	4319      	orrs	r1, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80072c6:	e004      	b.n	80072d2 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2206      	movs	r2, #6
 80072cc:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e00b      	b.n	80072ea <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3730      	adds	r7, #48	@ 0x30
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b08a      	sub	sp, #40	@ 0x28
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e052      	b.n	80073aa <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e049      	b.n	80073aa <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00c      	beq.n	8007338 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d101      	bne.n	800732e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	e03d      	b.n	80073aa <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2204      	movs	r2, #4
 8007332:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e038      	b.n	80073aa <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d104      	bne.n	800734a <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2204      	movs	r2, #4
 8007344:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e02f      	b.n	80073aa <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f107 0220 	add.w	r2, r7, #32
 800735e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fd22 	bl	8007dac <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800736c:	f107 030c 	add.w	r3, r7, #12
 8007370:	461a      	mov	r2, r3
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fd49 	bl	8007e0c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007384:	4013      	ands	r3, r2
 8007386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	4610      	mov	r0, r2
 800738c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800738e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007390:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3728      	adds	r7, #40	@ 0x28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <HAL_DMAEx_List_LinkQ+0x16>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e072      	b.n	80074b4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80073d4:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d002      	beq.n	80073e8 <HAL_DMAEx_List_LinkQ+0x34>
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	2b05      	cmp	r3, #5
 80073e6:	d108      	bne.n	80073fa <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2240      	movs	r2, #64	@ 0x40
 80073ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e05c      	b.n	80074b4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	7b1b      	ldrb	r3, [r3, #12]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d104      	bne.n	800740e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2201      	movs	r2, #1
 8007408:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e052      	b.n	80074b4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a2b      	ldr	r2, [pc, #172]	@ (80074c0 <HAL_DMAEx_List_LinkQ+0x10c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d022      	beq.n	800745e <HAL_DMAEx_List_LinkQ+0xaa>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a29      	ldr	r2, [pc, #164]	@ (80074c4 <HAL_DMAEx_List_LinkQ+0x110>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d01d      	beq.n	800745e <HAL_DMAEx_List_LinkQ+0xaa>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a28      	ldr	r2, [pc, #160]	@ (80074c8 <HAL_DMAEx_List_LinkQ+0x114>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d018      	beq.n	800745e <HAL_DMAEx_List_LinkQ+0xaa>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a26      	ldr	r2, [pc, #152]	@ (80074cc <HAL_DMAEx_List_LinkQ+0x118>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <HAL_DMAEx_List_LinkQ+0xaa>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a25      	ldr	r2, [pc, #148]	@ (80074d0 <HAL_DMAEx_List_LinkQ+0x11c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00e      	beq.n	800745e <HAL_DMAEx_List_LinkQ+0xaa>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a23      	ldr	r2, [pc, #140]	@ (80074d4 <HAL_DMAEx_List_LinkQ+0x120>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d009      	beq.n	800745e <HAL_DMAEx_List_LinkQ+0xaa>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a22      	ldr	r2, [pc, #136]	@ (80074d8 <HAL_DMAEx_List_LinkQ+0x124>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d004      	beq.n	800745e <HAL_DMAEx_List_LinkQ+0xaa>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a20      	ldr	r2, [pc, #128]	@ (80074dc <HAL_DMAEx_List_LinkQ+0x128>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d101      	bne.n	8007462 <HAL_DMAEx_List_LinkQ+0xae>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <HAL_DMAEx_List_LinkQ+0xb0>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007472:	2b00      	cmp	r3, #0
 8007474:	d004      	beq.n	8007480 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2203      	movs	r2, #3
 800747a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e019      	b.n	80074b4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007484:	2b81      	cmp	r3, #129	@ 0x81
 8007486:	d108      	bne.n	800749a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10d      	bne.n	80074ac <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2204      	movs	r2, #4
 8007494:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e00c      	b.n	80074b4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d004      	beq.n	80074ac <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2204      	movs	r2, #4
 80074a6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e003      	b.n	80074b4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	40020650 	.word	0x40020650
 80074c4:	50020650 	.word	0x50020650
 80074c8:	400206d0 	.word	0x400206d0
 80074cc:	500206d0 	.word	0x500206d0
 80074d0:	40020750 	.word	0x40020750
 80074d4:	50020750 	.word	0x50020750
 80074d8:	400207d0 	.word	0x400207d0
 80074dc:	500207d0 	.word	0x500207d0

080074e0 <HAL_DMAEx_ConfigTrigger>:
  * @param  pConfigTrigger : Pointer to a DMA_TriggerConfTypeDef structure that contains the trigger configuration.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigTrigger(DMA_HandleTypeDef *const hdma,
                                          DMA_TriggerConfTypeDef const *const pConfigTrigger)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  /* Check the DMA peripheral handle and trigger parameters */
  if ((hdma == NULL) || (pConfigTrigger == NULL))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <HAL_DMAEx_ConfigTrigger+0x16>
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_DMAEx_ConfigTrigger+0x1a>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e023      	b.n	8007542 <HAL_DMAEx_ConfigTrigger+0x62>
  assert_param(IS_DMA_TRIGGER_POLARITY(pConfigTrigger->TriggerPolarity));
  assert_param(IS_DMA_TRIGGER_MODE(pConfigTrigger->TriggerMode));
  assert_param(IS_DMA_TRIGGER_SELECTION(pConfigTrigger->TriggerSelection));

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b01      	cmp	r3, #1
 8007504:	d115      	bne.n	8007532 <HAL_DMAEx_ConfigTrigger+0x52>
  {
    MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM),
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800750c:	f023 735f 	bic.w	r3, r3, #58458112	@ 0x37c0000
 8007510:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	6851      	ldr	r1, [r2, #4]
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	6812      	ldr	r2, [r2, #0]
 800751c:	4311      	orrs	r1, r2
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	6892      	ldr	r2, [r2, #8]
 8007522:	0412      	lsls	r2, r2, #16
 8007524:	4311      	orrs	r1, r2
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	430b      	orrs	r3, r1
 800752c:	6453      	str	r3, [r2, #68]	@ 0x44
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	e007      	b.n	8007542 <HAL_DMAEx_ConfigTrigger+0x62>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2240      	movs	r2, #64	@ 0x40
 8007536:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	0c1b      	lsrs	r3, r3, #16
 800755e:	b2db      	uxtb	r3, r3
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a85      	ldr	r2, [pc, #532]	@ (800779c <DMA_List_Init+0x230>)
 8007586:	4293      	cmp	r3, r2
 8007588:	f000 80a0 	beq.w	80076cc <DMA_List_Init+0x160>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a83      	ldr	r2, [pc, #524]	@ (80077a0 <DMA_List_Init+0x234>)
 8007592:	4293      	cmp	r3, r2
 8007594:	f000 809a 	beq.w	80076cc <DMA_List_Init+0x160>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a81      	ldr	r2, [pc, #516]	@ (80077a4 <DMA_List_Init+0x238>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	f000 8094 	beq.w	80076cc <DMA_List_Init+0x160>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a7f      	ldr	r2, [pc, #508]	@ (80077a8 <DMA_List_Init+0x23c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	f000 808e 	beq.w	80076cc <DMA_List_Init+0x160>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a7d      	ldr	r2, [pc, #500]	@ (80077ac <DMA_List_Init+0x240>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	f000 8088 	beq.w	80076cc <DMA_List_Init+0x160>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a7b      	ldr	r2, [pc, #492]	@ (80077b0 <DMA_List_Init+0x244>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	f000 8082 	beq.w	80076cc <DMA_List_Init+0x160>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a79      	ldr	r2, [pc, #484]	@ (80077b4 <DMA_List_Init+0x248>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d07c      	beq.n	80076cc <DMA_List_Init+0x160>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a78      	ldr	r2, [pc, #480]	@ (80077b8 <DMA_List_Init+0x24c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d077      	beq.n	80076cc <DMA_List_Init+0x160>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a76      	ldr	r2, [pc, #472]	@ (80077bc <DMA_List_Init+0x250>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d072      	beq.n	80076cc <DMA_List_Init+0x160>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a75      	ldr	r2, [pc, #468]	@ (80077c0 <DMA_List_Init+0x254>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d06d      	beq.n	80076cc <DMA_List_Init+0x160>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a73      	ldr	r2, [pc, #460]	@ (80077c4 <DMA_List_Init+0x258>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d068      	beq.n	80076cc <DMA_List_Init+0x160>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a72      	ldr	r2, [pc, #456]	@ (80077c8 <DMA_List_Init+0x25c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d063      	beq.n	80076cc <DMA_List_Init+0x160>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a70      	ldr	r2, [pc, #448]	@ (80077cc <DMA_List_Init+0x260>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d05e      	beq.n	80076cc <DMA_List_Init+0x160>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a6f      	ldr	r2, [pc, #444]	@ (80077d0 <DMA_List_Init+0x264>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d059      	beq.n	80076cc <DMA_List_Init+0x160>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a6d      	ldr	r2, [pc, #436]	@ (80077d4 <DMA_List_Init+0x268>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d054      	beq.n	80076cc <DMA_List_Init+0x160>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a6c      	ldr	r2, [pc, #432]	@ (80077d8 <DMA_List_Init+0x26c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d04f      	beq.n	80076cc <DMA_List_Init+0x160>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a6a      	ldr	r2, [pc, #424]	@ (80077dc <DMA_List_Init+0x270>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d04a      	beq.n	80076cc <DMA_List_Init+0x160>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a69      	ldr	r2, [pc, #420]	@ (80077e0 <DMA_List_Init+0x274>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d045      	beq.n	80076cc <DMA_List_Init+0x160>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a67      	ldr	r2, [pc, #412]	@ (80077e4 <DMA_List_Init+0x278>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d040      	beq.n	80076cc <DMA_List_Init+0x160>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a66      	ldr	r2, [pc, #408]	@ (80077e8 <DMA_List_Init+0x27c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d03b      	beq.n	80076cc <DMA_List_Init+0x160>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a64      	ldr	r2, [pc, #400]	@ (80077ec <DMA_List_Init+0x280>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d036      	beq.n	80076cc <DMA_List_Init+0x160>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a63      	ldr	r2, [pc, #396]	@ (80077f0 <DMA_List_Init+0x284>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d031      	beq.n	80076cc <DMA_List_Init+0x160>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a61      	ldr	r2, [pc, #388]	@ (80077f4 <DMA_List_Init+0x288>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d02c      	beq.n	80076cc <DMA_List_Init+0x160>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a60      	ldr	r2, [pc, #384]	@ (80077f8 <DMA_List_Init+0x28c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d027      	beq.n	80076cc <DMA_List_Init+0x160>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a5e      	ldr	r2, [pc, #376]	@ (80077fc <DMA_List_Init+0x290>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d022      	beq.n	80076cc <DMA_List_Init+0x160>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a5d      	ldr	r2, [pc, #372]	@ (8007800 <DMA_List_Init+0x294>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d01d      	beq.n	80076cc <DMA_List_Init+0x160>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a5b      	ldr	r2, [pc, #364]	@ (8007804 <DMA_List_Init+0x298>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d018      	beq.n	80076cc <DMA_List_Init+0x160>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a5a      	ldr	r2, [pc, #360]	@ (8007808 <DMA_List_Init+0x29c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d013      	beq.n	80076cc <DMA_List_Init+0x160>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a58      	ldr	r2, [pc, #352]	@ (800780c <DMA_List_Init+0x2a0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00e      	beq.n	80076cc <DMA_List_Init+0x160>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a57      	ldr	r2, [pc, #348]	@ (8007810 <DMA_List_Init+0x2a4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d009      	beq.n	80076cc <DMA_List_Init+0x160>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a55      	ldr	r2, [pc, #340]	@ (8007814 <DMA_List_Init+0x2a8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <DMA_List_Init+0x160>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a54      	ldr	r2, [pc, #336]	@ (8007818 <DMA_List_Init+0x2ac>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d101      	bne.n	80076d0 <DMA_List_Init+0x164>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <DMA_List_Init+0x166>
 80076d0:	2300      	movs	r3, #0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2200      	movs	r2, #0
 80076fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007704:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2200      	movs	r2, #0
 800770c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2200      	movs	r2, #0
 8007714:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2200      	movs	r2, #0
 800771c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a36      	ldr	r2, [pc, #216]	@ (80077fc <DMA_List_Init+0x290>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d022      	beq.n	800776e <DMA_List_Init+0x202>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a34      	ldr	r2, [pc, #208]	@ (8007800 <DMA_List_Init+0x294>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d01d      	beq.n	800776e <DMA_List_Init+0x202>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a33      	ldr	r2, [pc, #204]	@ (8007804 <DMA_List_Init+0x298>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d018      	beq.n	800776e <DMA_List_Init+0x202>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a31      	ldr	r2, [pc, #196]	@ (8007808 <DMA_List_Init+0x29c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d013      	beq.n	800776e <DMA_List_Init+0x202>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a30      	ldr	r2, [pc, #192]	@ (800780c <DMA_List_Init+0x2a0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00e      	beq.n	800776e <DMA_List_Init+0x202>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a2e      	ldr	r2, [pc, #184]	@ (8007810 <DMA_List_Init+0x2a4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d009      	beq.n	800776e <DMA_List_Init+0x202>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a2d      	ldr	r2, [pc, #180]	@ (8007814 <DMA_List_Init+0x2a8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d004      	beq.n	800776e <DMA_List_Init+0x202>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a2b      	ldr	r2, [pc, #172]	@ (8007818 <DMA_List_Init+0x2ac>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d101      	bne.n	8007772 <DMA_List_Init+0x206>
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <DMA_List_Init+0x208>
 8007772:	2300      	movs	r3, #0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d007      	beq.n	8007788 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2200      	movs	r2, #0
 800777e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2200      	movs	r2, #0
 8007786:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2200      	movs	r2, #0
 800778e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	40020050 	.word	0x40020050
 80077a0:	50020050 	.word	0x50020050
 80077a4:	400200d0 	.word	0x400200d0
 80077a8:	500200d0 	.word	0x500200d0
 80077ac:	40020150 	.word	0x40020150
 80077b0:	50020150 	.word	0x50020150
 80077b4:	400201d0 	.word	0x400201d0
 80077b8:	500201d0 	.word	0x500201d0
 80077bc:	40020250 	.word	0x40020250
 80077c0:	50020250 	.word	0x50020250
 80077c4:	400202d0 	.word	0x400202d0
 80077c8:	500202d0 	.word	0x500202d0
 80077cc:	40020350 	.word	0x40020350
 80077d0:	50020350 	.word	0x50020350
 80077d4:	400203d0 	.word	0x400203d0
 80077d8:	500203d0 	.word	0x500203d0
 80077dc:	40020450 	.word	0x40020450
 80077e0:	50020450 	.word	0x50020450
 80077e4:	400204d0 	.word	0x400204d0
 80077e8:	500204d0 	.word	0x500204d0
 80077ec:	40020550 	.word	0x40020550
 80077f0:	50020550 	.word	0x50020550
 80077f4:	400205d0 	.word	0x400205d0
 80077f8:	500205d0 	.word	0x500205d0
 80077fc:	40020650 	.word	0x40020650
 8007800:	50020650 	.word	0x50020650
 8007804:	400206d0 	.word	0x400206d0
 8007808:	500206d0 	.word	0x500206d0
 800780c:	40020750 	.word	0x40020750
 8007810:	50020750 	.word	0x50020750
 8007814:	400207d0 	.word	0x400207d0
 8007818:	500207d0 	.word	0x500207d0

0800781c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800782e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8007834:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800783a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8007840:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d017      	beq.n	8007882 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007864:	3b01      	subs	r3, #1
 8007866:	051b      	lsls	r3, r3, #20
 8007868:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800786c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007872:	3b01      	subs	r3, #1
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800787a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800787c:	431a      	orrs	r2, r3
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6859      	ldr	r1, [r3, #4]
 800788a:	f240 237f 	movw	r3, #639	@ 0x27f
 800788e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007890:	431a      	orrs	r2, r3
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789e:	d10c      	bne.n	80078ba <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d011      	beq.n	80078d0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	605a      	str	r2, [r3, #4]
 80078b8:	e00a      	b.n	80078d0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078c2:	d105      	bne.n	80078d0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00f      	beq.n	80078f8 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ea:	041b      	lsls	r3, r3, #16
 80078ec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80078f0:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80078f2:	431a      	orrs	r2, r3
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d04e      	beq.n	80079ac <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007916:	3b01      	subs	r3, #1
 8007918:	0419      	lsls	r1, r3, #16
 800791a:	4b67      	ldr	r3, [pc, #412]	@ (8007ab8 <DMA_List_BuildNode+0x29c>)
 800791c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800791e:	431a      	orrs	r2, r3
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007928:	2b00      	cmp	r3, #0
 800792a:	da06      	bge.n	800793a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	609a      	str	r2, [r3, #8]
 8007938:	e005      	b.n	8007946 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794a:	2b00      	cmp	r3, #0
 800794c:	da06      	bge.n	800795c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	609a      	str	r2, [r3, #8]
 800795a:	e005      	b.n	8007968 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796c:	2b00      	cmp	r3, #0
 800796e:	da06      	bge.n	800797e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	609a      	str	r2, [r3, #8]
 800797c:	e005      	b.n	800798a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800798e:	2b00      	cmp	r3, #0
 8007990:	da06      	bge.n	80079a0 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	609a      	str	r2, [r3, #8]
 800799e:	e005      	b.n	80079ac <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d059      	beq.n	8007a7c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	da09      	bge.n	80079e4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d4:	425b      	negs	r3, r3
 80079d6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	615a      	str	r2, [r3, #20]
 80079e2:	e005      	b.n	80079f0 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da0d      	bge.n	8007a14 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fc:	425b      	negs	r3, r3
 80079fe:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	695a      	ldr	r2, [r3, #20]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	0419      	lsls	r1, r3, #16
 8007a08:	4b2c      	ldr	r3, [pc, #176]	@ (8007abc <DMA_List_BuildNode+0x2a0>)
 8007a0a:	400b      	ands	r3, r1
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	615a      	str	r2, [r3, #20]
 8007a12:	e009      	b.n	8007a28 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a1c:	0419      	lsls	r1, r3, #16
 8007a1e:	4b27      	ldr	r3, [pc, #156]	@ (8007abc <DMA_List_BuildNode+0x2a0>)
 8007a20:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007a22:	431a      	orrs	r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	da08      	bge.n	8007a42 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a34:	425b      	negs	r3, r3
 8007a36:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	619a      	str	r2, [r3, #24]
 8007a40:	e004      	b.n	8007a4c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a46:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da0b      	bge.n	8007a6c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a58:	425b      	negs	r3, r3
 8007a5a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007a64:	431a      	orrs	r2, r3
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	619a      	str	r2, [r3, #24]
 8007a6a:	e007      	b.n	8007a7c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a74:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007a76:	431a      	orrs	r2, r3
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d006      	beq.n	8007a9e <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007a9c:	e005      	b.n	8007aaa <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	621a      	str	r2, [r3, #32]
}
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	07ff0000 	.word	0x07ff0000
 8007abc:	1fff0000 	.word	0x1fff0000

08007ac0 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0208 	and.w	r2, r3, #8
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0203 	and.w	r2, r3, #3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8007b08:	091b      	lsrs	r3, r3, #4
 8007b0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b0e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8007b18:	0d1b      	lsrs	r3, r3, #20
 8007b1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b1e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	4b66      	ldr	r3, [pc, #408]	@ (8007cd0 <DMA_List_GetNodeConfig+0x210>)
 8007b36:	4013      	ands	r3, r2
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d008      	beq.n	8007b66 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b5a:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b62:	60da      	str	r2, [r3, #12]
 8007b64:	e013      	b.n	8007b8e <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007b84:	60da      	str	r2, [r3, #12]
 8007b86:	e002      	b.n	8007b8e <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8007bb6:	0c1b      	lsrs	r3, r3, #16
 8007bb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d008      	beq.n	8007bf4 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	0c1b      	lsrs	r3, r3, #16
 8007be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bec:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007bf2:	e002      	b.n	8007bfa <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	691a      	ldr	r2, [r3, #16]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d04a      	beq.n	8007cac <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c20:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8007c22:	89fa      	ldrh	r2, [r7, #14]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	0c1b      	lsrs	r3, r3, #16
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c34:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8007c36:	89fa      	ldrh	r2, [r7, #14]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d004      	beq.n	8007c52 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4c:	425a      	negs	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d004      	beq.n	8007c68 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c62:	425a      	negs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007c6e:	89fa      	ldrh	r2, [r7, #14]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	0c1b      	lsrs	r3, r3, #16
 8007c7a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007c7c:	89fa      	ldrh	r2, [r7, #14]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d004      	beq.n	8007c98 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c92:	425a      	negs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	da11      	bge.n	8007cc4 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca4:	425a      	negs	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8007caa:	e00b      	b.n	8007cc4 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	0c002000 	.word	0x0c002000

08007cd4 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	0c1b      	lsrs	r3, r3, #16
 8007cec:	041b      	lsls	r3, r3, #16
 8007cee:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	617b      	str	r3, [r7, #20]
 8007cfe:	e00a      	b.n	8007d16 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	e004      	b.n	8007d16 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	0c1b      	lsrs	r3, r3, #16
 8007d1a:	041b      	lsls	r3, r3, #16
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d001      	beq.n	8007d26 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	e00e      	b.n	8007d72 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d004      	beq.n	8007d64 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e006      	b.n	8007d72 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d001      	beq.n	8007d88 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007d84:	2302      	movs	r3, #2
 8007d86:	e00b      	b.n	8007da0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d001      	beq.n	8007d9e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e000      	b.n	8007da0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00c      	beq.n	8007dde <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8007e04 <DMA_List_GetCLLRNodeInfo+0x58>)
 8007dce:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00f      	beq.n	8007df6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2207      	movs	r2, #7
 8007dda:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007ddc:	e00b      	b.n	8007df6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4a08      	ldr	r2, [pc, #32]	@ (8007e08 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007de8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2205      	movs	r2, #5
 8007df4:	601a      	str	r2, [r3, #0]
}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	fe010000 	.word	0xfe010000
 8007e08:	f8010000 	.word	0xf8010000

08007e0c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b089      	sub	sp, #36	@ 0x24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d142      	bne.n	8007eb6 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007e30:	e01d      	b.n	8007e6e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d107      	bne.n	8007e48 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007e42:	4013      	ands	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
 8007e46:	e00f      	b.n	8007e68 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	0c1b      	lsrs	r3, r3, #16
 8007e52:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4413      	add	r3, r2
 8007e58:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007e60:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007e64:	4013      	ands	r3, r2
 8007e66:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d3dc      	bcc.n	8007e32 <DMA_List_FindNode+0x26>
 8007e78:	e029      	b.n	8007ece <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d107      	bne.n	8007e90 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	461a      	mov	r2, r3
 8007e86:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	e00f      	b.n	8007eb0 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	0c1b      	lsrs	r3, r3, #16
 8007e9a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007ea8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007eac:	4013      	ands	r3, r2
 8007eae:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	69fa      	ldr	r2, [r7, #28]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d206      	bcs.n	8007ece <DMA_List_FindNode+0xc2>
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d1d5      	bne.n	8007e7a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d008      	beq.n	8007ee6 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007eda:	4013      	ands	r3, r2
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d001      	beq.n	8007ee6 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e02b      	b.n	8007f3e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	0c1b      	lsrs	r3, r3, #16
 8007ef2:	041b      	lsls	r3, r3, #16
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	041b      	lsls	r3, r3, #16
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	461a      	mov	r2, r3
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00f      	beq.n	8007f3c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	461a      	mov	r2, r3
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f28:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007f2c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	0c1b      	lsrs	r3, r3, #16
 8007f34:	041b      	lsls	r3, r3, #16
 8007f36:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3724      	adds	r7, #36	@ 0x24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b089      	sub	sp, #36	@ 0x24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007f5e:	e1ba      	b.n	80082d6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	2101      	movs	r1, #1
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 81aa 	beq.w	80082d0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a55      	ldr	r2, [pc, #340]	@ (80080d4 <HAL_GPIO_Init+0x188>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d15d      	bne.n	8008040 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	43db      	mvns	r3, r3
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	4013      	ands	r3, r2
 8007f98:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f003 0201 	and.w	r2, r3, #1
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa8:	69fa      	ldr	r2, [r7, #28]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007fb4:	4a48      	ldr	r2, [pc, #288]	@ (80080d8 <HAL_GPIO_Init+0x18c>)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fbc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007fbe:	4a46      	ldr	r2, [pc, #280]	@ (80080d8 <HAL_GPIO_Init+0x18c>)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	08da      	lsrs	r2, r3, #3
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	3208      	adds	r2, #8
 8007fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	220f      	movs	r2, #15
 8007fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe6:	43db      	mvns	r3, r3
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	4013      	ands	r3, r2
 8007fec:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	220b      	movs	r2, #11
 8007ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	08da      	lsrs	r2, r3, #3
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	3208      	adds	r2, #8
 800800a:	69f9      	ldr	r1, [r7, #28]
 800800c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	2203      	movs	r2, #3
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	43db      	mvns	r3, r3
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	4013      	ands	r3, r2
 8008026:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	2202      	movs	r2, #2
 800802e:	fa02 f303 	lsl.w	r3, r2, r3
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	4313      	orrs	r3, r2
 8008036:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	e067      	b.n	8008110 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d003      	beq.n	8008050 <HAL_GPIO_Init+0x104>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b12      	cmp	r3, #18
 800804e:	d145      	bne.n	80080dc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	08da      	lsrs	r2, r3, #3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3208      	adds	r2, #8
 8008058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	220f      	movs	r2, #15
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	43db      	mvns	r3, r3
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	4013      	ands	r3, r2
 8008072:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f003 020f 	and.w	r2, r3, #15
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	fa02 f303 	lsl.w	r3, r2, r3
 8008088:	69fa      	ldr	r2, [r7, #28]
 800808a:	4313      	orrs	r3, r2
 800808c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	08da      	lsrs	r2, r3, #3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3208      	adds	r2, #8
 8008096:	69f9      	ldr	r1, [r7, #28]
 8008098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	2203      	movs	r2, #3
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	43db      	mvns	r3, r3
 80080ae:	69fa      	ldr	r2, [r7, #28]
 80080b0:	4013      	ands	r3, r2
 80080b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f003 0203 	and.w	r2, r3, #3
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	69fa      	ldr	r2, [r7, #28]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	69fa      	ldr	r2, [r7, #28]
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	e01e      	b.n	8008110 <HAL_GPIO_Init+0x1c4>
 80080d2:	bf00      	nop
 80080d4:	46020000 	.word	0x46020000
 80080d8:	08012694 	.word	0x08012694
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	2203      	movs	r2, #3
 80080e8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ec:	43db      	mvns	r3, r3
 80080ee:	69fa      	ldr	r2, [r7, #28]
 80080f0:	4013      	ands	r3, r2
 80080f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f003 0203 	and.w	r2, r3, #3
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	fa02 f303 	lsl.w	r3, r2, r3
 8008104:	69fa      	ldr	r2, [r7, #28]
 8008106:	4313      	orrs	r3, r2
 8008108:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d00b      	beq.n	8008130 <HAL_GPIO_Init+0x1e4>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b02      	cmp	r3, #2
 800811e:	d007      	beq.n	8008130 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008124:	2b11      	cmp	r3, #17
 8008126:	d003      	beq.n	8008130 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2b12      	cmp	r3, #18
 800812e:	d130      	bne.n	8008192 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	2203      	movs	r2, #3
 800813c:	fa02 f303 	lsl.w	r3, r2, r3
 8008140:	43db      	mvns	r3, r3
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	4013      	ands	r3, r2
 8008146:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	4313      	orrs	r3, r2
 8008158:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8008166:	2201      	movs	r2, #1
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	43db      	mvns	r3, r3
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	4013      	ands	r3, r2
 8008174:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	091b      	lsrs	r3, r3, #4
 800817c:	f003 0201 	and.w	r2, r3, #1
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	69fa      	ldr	r2, [r7, #28]
 8008188:	4313      	orrs	r3, r2
 800818a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	2b03      	cmp	r3, #3
 8008198:	d017      	beq.n	80081ca <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	2203      	movs	r2, #3
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	43db      	mvns	r3, r3
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	4013      	ands	r3, r2
 80081b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	fa02 f303 	lsl.w	r3, r2, r3
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d07c      	beq.n	80082d0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80081d6:	4a47      	ldr	r2, [pc, #284]	@ (80082f4 <HAL_GPIO_Init+0x3a8>)
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	089b      	lsrs	r3, r3, #2
 80081dc:	3318      	adds	r3, #24
 80081de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	220f      	movs	r2, #15
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	43db      	mvns	r3, r3
 80081f4:	69fa      	ldr	r2, [r7, #28]
 80081f6:	4013      	ands	r3, r2
 80081f8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	0a9a      	lsrs	r2, r3, #10
 80081fe:	4b3e      	ldr	r3, [pc, #248]	@ (80082f8 <HAL_GPIO_Init+0x3ac>)
 8008200:	4013      	ands	r3, r2
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	f002 0203 	and.w	r2, r2, #3
 8008208:	00d2      	lsls	r2, r2, #3
 800820a:	4093      	lsls	r3, r2
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	4313      	orrs	r3, r2
 8008210:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8008212:	4938      	ldr	r1, [pc, #224]	@ (80082f4 <HAL_GPIO_Init+0x3a8>)
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	089b      	lsrs	r3, r3, #2
 8008218:	3318      	adds	r3, #24
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8008220:	4b34      	ldr	r3, [pc, #208]	@ (80082f4 <HAL_GPIO_Init+0x3a8>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	43db      	mvns	r3, r3
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	4013      	ands	r3, r2
 800822e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4313      	orrs	r3, r2
 8008242:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8008244:	4a2b      	ldr	r2, [pc, #172]	@ (80082f4 <HAL_GPIO_Init+0x3a8>)
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800824a:	4b2a      	ldr	r3, [pc, #168]	@ (80082f4 <HAL_GPIO_Init+0x3a8>)
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	43db      	mvns	r3, r3
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	4013      	ands	r3, r2
 8008258:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8008266:	69fa      	ldr	r2, [r7, #28]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800826e:	4a21      	ldr	r2, [pc, #132]	@ (80082f4 <HAL_GPIO_Init+0x3a8>)
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8008274:	4b1f      	ldr	r3, [pc, #124]	@ (80082f4 <HAL_GPIO_Init+0x3a8>)
 8008276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800827a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	43db      	mvns	r3, r3
 8008280:	69fa      	ldr	r2, [r7, #28]
 8008282:	4013      	ands	r3, r2
 8008284:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800829a:	4a16      	ldr	r2, [pc, #88]	@ (80082f4 <HAL_GPIO_Init+0x3a8>)
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80082a2:	4b14      	ldr	r3, [pc, #80]	@ (80082f4 <HAL_GPIO_Init+0x3a8>)
 80082a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	43db      	mvns	r3, r3
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	4013      	ands	r3, r2
 80082b2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80082c8:	4a0a      	ldr	r2, [pc, #40]	@ (80082f4 <HAL_GPIO_Init+0x3a8>)
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	3301      	adds	r3, #1
 80082d4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	fa22 f303 	lsr.w	r3, r2, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f47f ae3d 	bne.w	8007f60 <HAL_GPIO_Init+0x14>
  }
}
 80082e6:	bf00      	nop
 80082e8:	bf00      	nop
 80082ea:	3724      	adds	r7, #36	@ 0x24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	46022000 	.word	0x46022000
 80082f8:	002f7f7f 	.word	0x002f7f7f

080082fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	807b      	strh	r3, [r7, #2]
 8008308:	4613      	mov	r3, r2
 800830a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800830c:	787b      	ldrb	r3, [r7, #1]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008312:	887a      	ldrh	r2, [r7, #2]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8008318:	e002      	b.n	8008320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800831a:	887a      	ldrh	r2, [r7, #2]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800833e:	887a      	ldrh	r2, [r7, #2]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4013      	ands	r3, r2
 8008344:	041a      	lsls	r2, r3, #16
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	43d9      	mvns	r1, r3
 800834a:	887b      	ldrh	r3, [r7, #2]
 800834c:	400b      	ands	r3, r1
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	619a      	str	r2, [r3, #24]
}
 8008354:	bf00      	nop
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800836a:	4b0f      	ldr	r3, [pc, #60]	@ (80083a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	88fb      	ldrh	r3, [r7, #6]
 8008370:	4013      	ands	r3, r2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d006      	beq.n	8008384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008376:	4a0c      	ldr	r2, [pc, #48]	@ (80083a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008378:	88fb      	ldrh	r3, [r7, #6]
 800837a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800837c:	88fb      	ldrh	r3, [r7, #6]
 800837e:	4618      	mov	r0, r3
 8008380:	f000 f814 	bl	80083ac <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8008384:	4b08      	ldr	r3, [pc, #32]	@ (80083a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	88fb      	ldrh	r3, [r7, #6]
 800838a:	4013      	ands	r3, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d006      	beq.n	800839e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008390:	4a05      	ldr	r2, [pc, #20]	@ (80083a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008396:	88fb      	ldrh	r3, [r7, #6]
 8008398:	4618      	mov	r0, r3
 800839a:	f000 f812 	bl	80083c2 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	46022000 	.word	0x46022000

080083ac <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	4603      	mov	r3, r0
 80083ca:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e08d      	b.n	8008506 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7fa f9ba 	bl	8002778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2224      	movs	r2, #36	@ 0x24
 8008408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0201 	bic.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d107      	bne.n	8008452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800844e:	609a      	str	r2, [r3, #8]
 8008450:	e006      	b.n	8008460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689a      	ldr	r2, [r3, #8]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800845e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	2b02      	cmp	r3, #2
 8008466:	d108      	bne.n	800847a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008476:	605a      	str	r2, [r3, #4]
 8008478:	e007      	b.n	800848a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008488:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	6812      	ldr	r2, [r2, #0]
 8008494:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800849c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	69d9      	ldr	r1, [r3, #28]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a1a      	ldr	r2, [r3, #32]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0201 	orr.w	r2, r2, #1
 80084e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2220      	movs	r2, #32
 80084f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af02      	add	r7, sp, #8
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	607a      	str	r2, [r7, #4]
 800851a:	461a      	mov	r2, r3
 800851c:	460b      	mov	r3, r1
 800851e:	817b      	strh	r3, [r7, #10]
 8008520:	4613      	mov	r3, r2
 8008522:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b20      	cmp	r3, #32
 800852e:	f040 80da 	bne.w	80086e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_I2C_Master_Transmit+0x30>
 800853c:	2302      	movs	r3, #2
 800853e:	e0d3      	b.n	80086e8 <HAL_I2C_Master_Transmit+0x1d8>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008548:	f7fb f8ac 	bl	80036a4 <HAL_GetTick>
 800854c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	2319      	movs	r3, #25
 8008554:	2201      	movs	r2, #1
 8008556:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 fe7d 	bl	800925a <I2C_WaitOnFlagUntilTimeout>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e0be      	b.n	80086e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2221      	movs	r2, #33	@ 0x21
 800856e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2210      	movs	r2, #16
 8008576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	893a      	ldrh	r2, [r7, #8]
 800858a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008596:	b29b      	uxth	r3, r3
 8008598:	2bff      	cmp	r3, #255	@ 0xff
 800859a:	d90e      	bls.n	80085ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	22ff      	movs	r2, #255	@ 0xff
 80085a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	8979      	ldrh	r1, [r7, #10]
 80085aa:	4b51      	ldr	r3, [pc, #324]	@ (80086f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f001 f814 	bl	80095e0 <I2C_TransferConfig>
 80085b8:	e06c      	b.n	8008694 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085be:	b29a      	uxth	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	8979      	ldrh	r1, [r7, #10]
 80085cc:	4b48      	ldr	r3, [pc, #288]	@ (80086f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f001 f803 	bl	80095e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80085da:	e05b      	b.n	8008694 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	6a39      	ldr	r1, [r7, #32]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 fe93 	bl	800930c <I2C_WaitOnTXISFlagUntilTimeout>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e07b      	b.n	80086e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f4:	781a      	ldrb	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800860a:	b29b      	uxth	r3, r3
 800860c:	3b01      	subs	r3, #1
 800860e:	b29a      	uxth	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008618:	3b01      	subs	r3, #1
 800861a:	b29a      	uxth	r2, r3
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008624:	b29b      	uxth	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d034      	beq.n	8008694 <HAL_I2C_Master_Transmit+0x184>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800862e:	2b00      	cmp	r3, #0
 8008630:	d130      	bne.n	8008694 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	2200      	movs	r2, #0
 800863a:	2180      	movs	r1, #128	@ 0x80
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 fe0c 	bl	800925a <I2C_WaitOnFlagUntilTimeout>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e04d      	b.n	80086e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008650:	b29b      	uxth	r3, r3
 8008652:	2bff      	cmp	r3, #255	@ 0xff
 8008654:	d90e      	bls.n	8008674 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	22ff      	movs	r2, #255	@ 0xff
 800865a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008660:	b2da      	uxtb	r2, r3
 8008662:	8979      	ldrh	r1, [r7, #10]
 8008664:	2300      	movs	r3, #0
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 ffb7 	bl	80095e0 <I2C_TransferConfig>
 8008672:	e00f      	b.n	8008694 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008682:	b2da      	uxtb	r2, r3
 8008684:	8979      	ldrh	r1, [r7, #10]
 8008686:	2300      	movs	r3, #0
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 ffa6 	bl	80095e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008698:	b29b      	uxth	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d19e      	bne.n	80085dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	6a39      	ldr	r1, [r7, #32]
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 fe79 	bl	800939a <I2C_WaitOnSTOPFlagUntilTimeout>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e01a      	b.n	80086e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2220      	movs	r2, #32
 80086b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6859      	ldr	r1, [r3, #4]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	4b0b      	ldr	r3, [pc, #44]	@ (80086f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80086c6:	400b      	ands	r3, r1
 80086c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	e000      	b.n	80086e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80086e6:	2302      	movs	r3, #2
  }
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	80002000 	.word	0x80002000
 80086f4:	fe00e800 	.word	0xfe00e800

080086f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008714:	2b00      	cmp	r3, #0
 8008716:	d005      	beq.n	8008724 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	68f9      	ldr	r1, [r7, #12]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	4798      	blx	r3
  }
}
 8008724:	bf00      	nop
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00f      	beq.n	800876e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00a      	beq.n	800876e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800875c:	f043 0201 	orr.w	r2, r3, #1
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800876c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00f      	beq.n	8008798 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008786:	f043 0208 	orr.w	r2, r3, #8
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008796:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00f      	beq.n	80087c2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b0:	f043 0202 	orr.w	r2, r3, #2
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f003 030b 	and.w	r3, r3, #11
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fbe7 	bl	8008fa8 <I2C_ITError>
  }
}
 80087da:	bf00      	nop
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
 8008816:	4613      	mov	r3, r2
 8008818:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b086      	sub	sp, #24
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008872:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <I2C_Slave_ISR_IT+0x24>
 8008882:	2302      	movs	r3, #2
 8008884:	e0e2      	b.n	8008a4c <I2C_Slave_ISR_IT+0x1ea>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d009      	beq.n	80088ac <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d004      	beq.n	80088ac <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80088a2:	6939      	ldr	r1, [r7, #16]
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 f9b5 	bl	8008c14 <I2C_ITSlaveCplt>
 80088aa:	e0ca      	b.n	8008a42 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f003 0310 	and.w	r3, r3, #16
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d04b      	beq.n	800894e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d046      	beq.n	800894e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d128      	bne.n	800891c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b28      	cmp	r3, #40	@ 0x28
 80088d4:	d108      	bne.n	80088e8 <I2C_Slave_ISR_IT+0x86>
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088dc:	d104      	bne.n	80088e8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80088de:	6939      	ldr	r1, [r7, #16]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 fb0d 	bl	8008f00 <I2C_ITListenCplt>
 80088e6:	e031      	b.n	800894c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b29      	cmp	r3, #41	@ 0x29
 80088f2:	d10e      	bne.n	8008912 <I2C_Slave_ISR_IT+0xb0>
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80088fa:	d00a      	beq.n	8008912 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2210      	movs	r2, #16
 8008902:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 fc66 	bl	80091d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 f926 	bl	8008b5c <I2C_ITSlaveSeqCplt>
 8008910:	e01c      	b.n	800894c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2210      	movs	r2, #16
 8008918:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800891a:	e08f      	b.n	8008a3c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2210      	movs	r2, #16
 8008922:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008928:	f043 0204 	orr.w	r2, r3, #4
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <I2C_Slave_ISR_IT+0xdc>
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800893c:	d17e      	bne.n	8008a3c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008942:	4619      	mov	r1, r3
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 fb2f 	bl	8008fa8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800894a:	e077      	b.n	8008a3c <I2C_Slave_ISR_IT+0x1da>
 800894c:	e076      	b.n	8008a3c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d02f      	beq.n	80089b8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800895e:	2b00      	cmp	r3, #0
 8008960:	d02a      	beq.n	80089b8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008966:	b29b      	uxth	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d018      	beq.n	800899e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008988:	3b01      	subs	r3, #1
 800898a:	b29a      	uxth	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008994:	b29b      	uxth	r3, r3
 8008996:	3b01      	subs	r3, #1
 8008998:	b29a      	uxth	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d14b      	bne.n	8008a40 <I2C_Slave_ISR_IT+0x1de>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089ae:	d047      	beq.n	8008a40 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 f8d3 	bl	8008b5c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80089b6:	e043      	b.n	8008a40 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f003 0308 	and.w	r3, r3, #8
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d004      	beq.n	80089d6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80089cc:	6939      	ldr	r1, [r7, #16]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f840 	bl	8008a54 <I2C_ITAddrCplt>
 80089d4:	e035      	b.n	8008a42 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d030      	beq.n	8008a42 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d02b      	beq.n	8008a42 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d018      	beq.n	8008a26 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f8:	781a      	ldrb	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	3b01      	subs	r3, #1
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008a24:	e00d      	b.n	8008a42 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a2c:	d002      	beq.n	8008a34 <I2C_Slave_ISR_IT+0x1d2>
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 f891 	bl	8008b5c <I2C_ITSlaveSeqCplt>
 8008a3a:	e002      	b.n	8008a42 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8008a3c:	bf00      	nop
 8008a3e:	e000      	b.n	8008a42 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8008a40:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008a6a:	2b28      	cmp	r3, #40	@ 0x28
 8008a6c:	d16a      	bne.n	8008b44 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	0c1b      	lsrs	r3, r3, #16
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	0c1b      	lsrs	r3, r3, #16
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008a8c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a9a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008aa8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d138      	bne.n	8008b24 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008ab2:	897b      	ldrh	r3, [r7, #10]
 8008ab4:	09db      	lsrs	r3, r3, #7
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	89bb      	ldrh	r3, [r7, #12]
 8008aba:	4053      	eors	r3, r2
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	f003 0306 	and.w	r3, r3, #6
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d11c      	bne.n	8008b00 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008ac6:	897b      	ldrh	r3, [r7, #10]
 8008ac8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d13b      	bne.n	8008b54 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008af2:	89ba      	ldrh	r2, [r7, #12]
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff fe86 	bl	800880a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008afe:	e029      	b.n	8008b54 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008b00:	893b      	ldrh	r3, [r7, #8]
 8008b02:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008b04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fd9b 	bl	8009644 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008b16:	89ba      	ldrh	r2, [r7, #12]
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff fe74 	bl	800880a <HAL_I2C_AddrCallback>
}
 8008b22:	e017      	b.n	8008b54 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008b24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fd8b 	bl	8009644 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008b36:	89ba      	ldrh	r2, [r7, #12]
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff fe64 	bl	800880a <HAL_I2C_AddrCallback>
}
 8008b42:	e007      	b.n	8008b54 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2208      	movs	r2, #8
 8008b4a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008b54:	bf00      	nop
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d008      	beq.n	8008b90 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	e00c      	b.n	8008baa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d007      	beq.n	8008baa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ba8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b29      	cmp	r3, #41	@ 0x29
 8008bb4:	d112      	bne.n	8008bdc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2228      	movs	r2, #40	@ 0x28
 8008bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2221      	movs	r2, #33	@ 0x21
 8008bc2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fd3c 	bl	8009644 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff fe04 	bl	80087e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008bda:	e017      	b.n	8008c0c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008be6:	d111      	bne.n	8008c0c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2228      	movs	r2, #40	@ 0x28
 8008bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2222      	movs	r2, #34	@ 0x22
 8008bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008bf6:	2102      	movs	r1, #2
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fd23 	bl	8009644 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fdf5 	bl	80087f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008c0c:	bf00      	nop
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c14:	b590      	push	{r4, r7, lr}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c36:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c40:	7afb      	ldrb	r3, [r7, #11]
 8008c42:	2b21      	cmp	r3, #33	@ 0x21
 8008c44:	d002      	beq.n	8008c4c <I2C_ITSlaveCplt+0x38>
 8008c46:	7afb      	ldrb	r3, [r7, #11]
 8008c48:	2b29      	cmp	r3, #41	@ 0x29
 8008c4a:	d108      	bne.n	8008c5e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008c4c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fcf7 	bl	8009644 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2221      	movs	r2, #33	@ 0x21
 8008c5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c5c:	e019      	b.n	8008c92 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c5e:	7afb      	ldrb	r3, [r7, #11]
 8008c60:	2b22      	cmp	r3, #34	@ 0x22
 8008c62:	d002      	beq.n	8008c6a <I2C_ITSlaveCplt+0x56>
 8008c64:	7afb      	ldrb	r3, [r7, #11]
 8008c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c68:	d108      	bne.n	8008c7c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008c6a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fce8 	bl	8009644 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2222      	movs	r2, #34	@ 0x22
 8008c78:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c7a:	e00a      	b.n	8008c92 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008c7c:	7afb      	ldrb	r3, [r7, #11]
 8008c7e:	2b28      	cmp	r3, #40	@ 0x28
 8008c80:	d107      	bne.n	8008c92 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008c82:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fcdc 	bl	8009644 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ca0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6859      	ldr	r1, [r3, #4]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	4b92      	ldr	r3, [pc, #584]	@ (8008ef8 <I2C_ITSlaveCplt+0x2e4>)
 8008cae:	400b      	ands	r3, r1
 8008cb0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fa8f 	bl	80091d6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01c      	beq.n	8008cfc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cd0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d031      	beq.n	8008d3e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ce2:	b29c      	uxth	r4, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe fc30 	bl	800754e <HAL_DMAEx_GetFifoLevel>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	4423      	add	r3, r4
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008cfa:	e020      	b.n	8008d3e <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d01b      	beq.n	8008d3e <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d14:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00f      	beq.n	8008d3e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d26:	b29c      	uxth	r4, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe fc0e 	bl	800754e <HAL_DMAEx_GetFifoLevel>
 8008d32:	4603      	mov	r3, r0
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	4423      	add	r3, r4
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d020      	beq.n	8008d8a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f023 0304 	bic.w	r3, r3, #4
 8008d4e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5a:	b2d2      	uxtb	r2, r2
 8008d5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d62:	1c5a      	adds	r2, r3, #1
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00c      	beq.n	8008d8a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d74:	3b01      	subs	r3, #1
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	3b01      	subs	r3, #1
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d98:	f043 0204 	orr.w	r2, r3, #4
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d049      	beq.n	8008e3e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d044      	beq.n	8008e3e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d128      	bne.n	8008e10 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b28      	cmp	r3, #40	@ 0x28
 8008dc8:	d108      	bne.n	8008ddc <I2C_ITSlaveCplt+0x1c8>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dd0:	d104      	bne.n	8008ddc <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008dd2:	6979      	ldr	r1, [r7, #20]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f893 	bl	8008f00 <I2C_ITListenCplt>
 8008dda:	e030      	b.n	8008e3e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b29      	cmp	r3, #41	@ 0x29
 8008de6:	d10e      	bne.n	8008e06 <I2C_ITSlaveCplt+0x1f2>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008dee:	d00a      	beq.n	8008e06 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2210      	movs	r2, #16
 8008df6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f9ec 	bl	80091d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff feac 	bl	8008b5c <I2C_ITSlaveSeqCplt>
 8008e04:	e01b      	b.n	8008e3e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2210      	movs	r2, #16
 8008e0c:	61da      	str	r2, [r3, #28]
 8008e0e:	e016      	b.n	8008e3e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2210      	movs	r2, #16
 8008e16:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e1c:	f043 0204 	orr.w	r2, r3, #4
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <I2C_ITSlaveCplt+0x21e>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e30:	d105      	bne.n	8008e3e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f8b5 	bl	8008fa8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d010      	beq.n	8008e76 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f8a4 	bl	8008fa8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b28      	cmp	r3, #40	@ 0x28
 8008e6a:	d141      	bne.n	8008ef0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008e6c:	6979      	ldr	r1, [r7, #20]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f846 	bl	8008f00 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008e74:	e03c      	b.n	8008ef0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008e7e:	d014      	beq.n	8008eaa <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7ff fe6b 	bl	8008b5c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a1c      	ldr	r2, [pc, #112]	@ (8008efc <I2C_ITSlaveCplt+0x2e8>)
 8008e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff fcbf 	bl	8008826 <HAL_I2C_ListenCpltCallback>
}
 8008ea8:	e022      	b.n	8008ef0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b22      	cmp	r3, #34	@ 0x22
 8008eb4:	d10e      	bne.n	8008ed4 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff fc92 	bl	80087f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008ed2:	e00d      	b.n	8008ef0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff fc79 	bl	80087e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8008ef0:	bf00      	nop
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd90      	pop	{r4, r7, pc}
 8008ef8:	fe00e800 	.word	0xfe00e800
 8008efc:	ffff0000 	.word	0xffff0000

08008f00 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a25      	ldr	r2, [pc, #148]	@ (8008fa4 <I2C_ITListenCplt+0xa4>)
 8008f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	f003 0304 	and.w	r3, r3, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d022      	beq.n	8008f7c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d012      	beq.n	8008f7c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f74:	f043 0204 	orr.w	r2, r3, #4
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008f7c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fb5f 	bl	8009644 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2210      	movs	r2, #16
 8008f8c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff fc45 	bl	8008826 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	ffff0000 	.word	0xffff0000

08008fa8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fb8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a6d      	ldr	r2, [pc, #436]	@ (800917c <I2C_ITError+0x1d4>)
 8008fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	2b28      	cmp	r3, #40	@ 0x28
 8008fde:	d005      	beq.n	8008fec <I2C_ITError+0x44>
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
 8008fe2:	2b29      	cmp	r3, #41	@ 0x29
 8008fe4:	d002      	beq.n	8008fec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fea:	d10b      	bne.n	8009004 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008fec:	2103      	movs	r1, #3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fb28 	bl	8009644 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2228      	movs	r2, #40	@ 0x28
 8008ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a60      	ldr	r2, [pc, #384]	@ (8009180 <I2C_ITError+0x1d8>)
 8009000:	635a      	str	r2, [r3, #52]	@ 0x34
 8009002:	e030      	b.n	8009066 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009004:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fb1b 	bl	8009644 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f8e1 	bl	80091d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b60      	cmp	r3, #96	@ 0x60
 800901e:	d01f      	beq.n	8009060 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2220      	movs	r2, #32
 8009024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	f003 0320 	and.w	r3, r3, #32
 8009032:	2b20      	cmp	r3, #32
 8009034:	d114      	bne.n	8009060 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	2b10      	cmp	r3, #16
 8009042:	d109      	bne.n	8009058 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2210      	movs	r2, #16
 800904a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009050:	f043 0204 	orr.w	r2, r3, #4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2220      	movs	r2, #32
 800905e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009070:	2b00      	cmp	r3, #0
 8009072:	d039      	beq.n	80090e8 <I2C_ITError+0x140>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b11      	cmp	r3, #17
 8009078:	d002      	beq.n	8009080 <I2C_ITError+0xd8>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b21      	cmp	r3, #33	@ 0x21
 800907e:	d133      	bne.n	80090e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800908a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800908e:	d107      	bne.n	80090a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800909e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fd fa6f 	bl	8006588 <HAL_DMA_GetState>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d017      	beq.n	80090e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b4:	4a33      	ldr	r2, [pc, #204]	@ (8009184 <I2C_ITError+0x1dc>)
 80090b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fd f8d5 	bl	8006274 <HAL_DMA_Abort_IT>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d04d      	beq.n	800916c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80090da:	4610      	mov	r0, r2
 80090dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80090de:	e045      	b.n	800916c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f851 	bl	8009188 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80090e6:	e041      	b.n	800916c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d039      	beq.n	8009164 <I2C_ITError+0x1bc>
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2b12      	cmp	r3, #18
 80090f4:	d002      	beq.n	80090fc <I2C_ITError+0x154>
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b22      	cmp	r3, #34	@ 0x22
 80090fa:	d133      	bne.n	8009164 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800910a:	d107      	bne.n	800911c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800911a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009120:	4618      	mov	r0, r3
 8009122:	f7fd fa31 	bl	8006588 <HAL_DMA_GetState>
 8009126:	4603      	mov	r3, r0
 8009128:	2b01      	cmp	r3, #1
 800912a:	d017      	beq.n	800915c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009130:	4a14      	ldr	r2, [pc, #80]	@ (8009184 <I2C_ITError+0x1dc>)
 8009132:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009140:	4618      	mov	r0, r3
 8009142:	f7fd f897 	bl	8006274 <HAL_DMA_Abort_IT>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d011      	beq.n	8009170 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009156:	4610      	mov	r0, r2
 8009158:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800915a:	e009      	b.n	8009170 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f813 	bl	8009188 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009162:	e005      	b.n	8009170 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f80f 	bl	8009188 <I2C_TreatErrorCallback>
  }
}
 800916a:	e002      	b.n	8009172 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800916c:	bf00      	nop
 800916e:	e000      	b.n	8009172 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009170:	bf00      	nop
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	ffff0000 	.word	0xffff0000
 8009180:	08008863 	.word	0x08008863
 8009184:	0800921f 	.word	0x0800921f

08009188 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b60      	cmp	r3, #96	@ 0x60
 800919a:	d10e      	bne.n	80091ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2220      	movs	r2, #32
 80091a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff fb4b 	bl	800884e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80091b8:	e009      	b.n	80091ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff fb36 	bl	800883a <HAL_I2C_ErrorCallback>
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d103      	bne.n	80091f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2200      	movs	r2, #0
 80091f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d007      	beq.n	8009212 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f042 0201 	orr.w	r2, r2, #1
 8009210:	619a      	str	r2, [r3, #24]
  }
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800922a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009238:	2200      	movs	r2, #0
 800923a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009248:	2200      	movs	r2, #0
 800924a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f7ff ff9b 	bl	8009188 <I2C_TreatErrorCallback>
}
 8009252:	bf00      	nop
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	603b      	str	r3, [r7, #0]
 8009266:	4613      	mov	r3, r2
 8009268:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800926a:	e03b      	b.n	80092e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 f8d5 	bl	8009420 <I2C_IsErrorOccurred>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e041      	b.n	8009304 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	d02d      	beq.n	80092e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009288:	f7fa fa0c 	bl	80036a4 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	429a      	cmp	r2, r3
 8009296:	d302      	bcc.n	800929e <I2C_WaitOnFlagUntilTimeout+0x44>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d122      	bne.n	80092e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	699a      	ldr	r2, [r3, #24]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4013      	ands	r3, r2
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	bf0c      	ite	eq
 80092ae:	2301      	moveq	r3, #1
 80092b0:	2300      	movne	r3, #0
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	461a      	mov	r2, r3
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d113      	bne.n	80092e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092c0:	f043 0220 	orr.w	r2, r3, #32
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e00f      	b.n	8009304 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	4013      	ands	r3, r2
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	bf0c      	ite	eq
 80092f4:	2301      	moveq	r3, #1
 80092f6:	2300      	movne	r3, #0
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	461a      	mov	r2, r3
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d0b4      	beq.n	800926c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009318:	e033      	b.n	8009382 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	68b9      	ldr	r1, [r7, #8]
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f87e 	bl	8009420 <I2C_IsErrorOccurred>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e031      	b.n	8009392 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009334:	d025      	beq.n	8009382 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009336:	f7fa f9b5 	bl	80036a4 <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	429a      	cmp	r2, r3
 8009344:	d302      	bcc.n	800934c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d11a      	bne.n	8009382 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b02      	cmp	r3, #2
 8009358:	d013      	beq.n	8009382 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800935e:	f043 0220 	orr.w	r2, r3, #32
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2220      	movs	r2, #32
 800936a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e007      	b.n	8009392 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b02      	cmp	r3, #2
 800938e:	d1c4      	bne.n	800931a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093a6:	e02f      	b.n	8009408 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f837 	bl	8009420 <I2C_IsErrorOccurred>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e02d      	b.n	8009418 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093bc:	f7fa f972 	bl	80036a4 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d302      	bcc.n	80093d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d11a      	bne.n	8009408 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	f003 0320 	and.w	r3, r3, #32
 80093dc:	2b20      	cmp	r3, #32
 80093de:	d013      	beq.n	8009408 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e4:	f043 0220 	orr.w	r2, r3, #32
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e007      	b.n	8009418 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	f003 0320 	and.w	r3, r3, #32
 8009412:	2b20      	cmp	r3, #32
 8009414:	d1c8      	bne.n	80093a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b08a      	sub	sp, #40	@ 0x28
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	f003 0310 	and.w	r3, r3, #16
 8009448:	2b00      	cmp	r3, #0
 800944a:	d068      	beq.n	800951e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2210      	movs	r2, #16
 8009452:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009454:	e049      	b.n	80094ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945c:	d045      	beq.n	80094ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800945e:	f7fa f921 	bl	80036a4 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	429a      	cmp	r2, r3
 800946c:	d302      	bcc.n	8009474 <I2C_IsErrorOccurred+0x54>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d13a      	bne.n	80094ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800947e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009486:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009496:	d121      	bne.n	80094dc <I2C_IsErrorOccurred+0xbc>
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800949e:	d01d      	beq.n	80094dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80094a0:	7cfb      	ldrb	r3, [r7, #19]
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	d01a      	beq.n	80094dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80094b6:	f7fa f8f5 	bl	80036a4 <HAL_GetTick>
 80094ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094bc:	e00e      	b.n	80094dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80094be:	f7fa f8f1 	bl	80036a4 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	2b19      	cmp	r3, #25
 80094ca:	d907      	bls.n	80094dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	f043 0320 	orr.w	r3, r3, #32
 80094d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80094da:	e006      	b.n	80094ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	f003 0320 	and.w	r3, r3, #32
 80094e6:	2b20      	cmp	r3, #32
 80094e8:	d1e9      	bne.n	80094be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d003      	beq.n	8009500 <I2C_IsErrorOccurred+0xe0>
 80094f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d0aa      	beq.n	8009456 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009504:	2b00      	cmp	r3, #0
 8009506:	d103      	bne.n	8009510 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2220      	movs	r2, #32
 800950e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	f043 0304 	orr.w	r3, r3, #4
 8009516:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00b      	beq.n	8009548 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	f043 0301 	orr.w	r3, r3, #1
 8009536:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009540:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00b      	beq.n	800956a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	f043 0308 	orr.w	r3, r3, #8
 8009558:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009562:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	f043 0302 	orr.w	r3, r3, #2
 800957a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009584:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800958c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009590:	2b00      	cmp	r3, #0
 8009592:	d01c      	beq.n	80095ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff fe1e 	bl	80091d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6859      	ldr	r1, [r3, #4]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	4b0d      	ldr	r3, [pc, #52]	@ (80095dc <I2C_IsErrorOccurred+0x1bc>)
 80095a6:	400b      	ands	r3, r1
 80095a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	431a      	orrs	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80095ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3728      	adds	r7, #40	@ 0x28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	fe00e800 	.word	0xfe00e800

080095e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	607b      	str	r3, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	817b      	strh	r3, [r7, #10]
 80095ee:	4613      	mov	r3, r2
 80095f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095f2:	897b      	ldrh	r3, [r7, #10]
 80095f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095f8:	7a7b      	ldrb	r3, [r7, #9]
 80095fa:	041b      	lsls	r3, r3, #16
 80095fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009600:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	4313      	orrs	r3, r2
 800960a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800960e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	0d5b      	lsrs	r3, r3, #21
 800961a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800961e:	4b08      	ldr	r3, [pc, #32]	@ (8009640 <I2C_TransferConfig+0x60>)
 8009620:	430b      	orrs	r3, r1
 8009622:	43db      	mvns	r3, r3
 8009624:	ea02 0103 	and.w	r1, r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	430a      	orrs	r2, r1
 8009630:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009632:	bf00      	nop
 8009634:	371c      	adds	r7, #28
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	03ff63ff 	.word	0x03ff63ff

08009644 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009654:	887b      	ldrh	r3, [r7, #2]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00f      	beq.n	800967e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009664:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800966c:	b2db      	uxtb	r3, r3
 800966e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009672:	2b28      	cmp	r3, #40	@ 0x28
 8009674:	d003      	beq.n	800967e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800967c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800967e:	887b      	ldrh	r3, [r7, #2]
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00f      	beq.n	80096a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800968e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800969c:	2b28      	cmp	r3, #40	@ 0x28
 800969e:	d003      	beq.n	80096a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80096a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80096a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	da03      	bge.n	80096b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80096b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80096b8:	887b      	ldrh	r3, [r7, #2]
 80096ba:	2b10      	cmp	r3, #16
 80096bc:	d103      	bne.n	80096c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80096c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80096c6:	887b      	ldrh	r3, [r7, #2]
 80096c8:	2b20      	cmp	r3, #32
 80096ca:	d103      	bne.n	80096d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f043 0320 	orr.w	r3, r3, #32
 80096d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80096d4:	887b      	ldrh	r3, [r7, #2]
 80096d6:	2b40      	cmp	r3, #64	@ 0x40
 80096d8:	d103      	bne.n	80096e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6819      	ldr	r1, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	43da      	mvns	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	400a      	ands	r2, r1
 80096f2:	601a      	str	r2, [r3, #0]
}
 80096f4:	bf00      	nop
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b20      	cmp	r3, #32
 8009714:	d138      	bne.n	8009788 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009720:	2302      	movs	r3, #2
 8009722:	e032      	b.n	800978a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2224      	movs	r2, #36	@ 0x24
 8009730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0201 	bic.w	r2, r2, #1
 8009742:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009752:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6819      	ldr	r1, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	430a      	orrs	r2, r1
 8009762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	e000      	b.n	800978a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009788:	2302      	movs	r3, #2
  }
}
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009796:	b480      	push	{r7}
 8009798:	b085      	sub	sp, #20
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	d139      	bne.n	8009820 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d101      	bne.n	80097ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e033      	b.n	8009822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2224      	movs	r2, #36	@ 0x24
 80097c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 0201 	bic.w	r2, r2, #1
 80097d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80097e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0201 	orr.w	r2, r2, #1
 800980a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2220      	movs	r2, #32
 8009810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	e000      	b.n	8009822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009820:	2302      	movs	r3, #2
  }
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
	...

08009830 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800983c:	4b0b      	ldr	r3, [pc, #44]	@ (800986c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	73fb      	strb	r3, [r7, #15]
 800984c:	e007      	b.n	800985e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800984e:	4b07      	ldr	r3, [pc, #28]	@ (800986c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f023 0204 	bic.w	r2, r3, #4
 8009856:	4905      	ldr	r1, [pc, #20]	@ (800986c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4313      	orrs	r3, r2
 800985c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	40030400 	.word	0x40030400

08009870 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8009870:	b480      	push	{r7}
 8009872:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009874:	4b05      	ldr	r3, [pc, #20]	@ (800988c <HAL_ICACHE_Enable+0x1c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a04      	ldr	r2, [pc, #16]	@ (800988c <HAL_ICACHE_Enable+0x1c>)
 800987a:	f043 0301 	orr.w	r3, r3, #1
 800987e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	40030400 	.word	0x40030400

08009890 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e0bf      	b.n	8009a22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7f9 f84c 	bl	8002954 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699a      	ldr	r2, [r3, #24]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80098d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6999      	ldr	r1, [r3, #24]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80098e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6899      	ldr	r1, [r3, #8]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4b4a      	ldr	r3, [pc, #296]	@ (8009a2c <HAL_LTDC_Init+0x19c>)
 8009904:	400b      	ands	r3, r1
 8009906:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	041b      	lsls	r3, r3, #16
 800990e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6899      	ldr	r1, [r3, #8]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	699a      	ldr	r2, [r3, #24]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	430a      	orrs	r2, r1
 8009924:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68d9      	ldr	r1, [r3, #12]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	4b3e      	ldr	r3, [pc, #248]	@ (8009a2c <HAL_LTDC_Init+0x19c>)
 8009932:	400b      	ands	r3, r1
 8009934:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	041b      	lsls	r3, r3, #16
 800993c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68d9      	ldr	r1, [r3, #12]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6a1a      	ldr	r2, [r3, #32]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6919      	ldr	r1, [r3, #16]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	4b33      	ldr	r3, [pc, #204]	@ (8009a2c <HAL_LTDC_Init+0x19c>)
 8009960:	400b      	ands	r3, r1
 8009962:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009968:	041b      	lsls	r3, r3, #16
 800996a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6919      	ldr	r1, [r3, #16]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	431a      	orrs	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	430a      	orrs	r2, r1
 8009980:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6959      	ldr	r1, [r3, #20]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	4b27      	ldr	r3, [pc, #156]	@ (8009a2c <HAL_LTDC_Init+0x19c>)
 800998e:	400b      	ands	r3, r1
 8009990:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009996:	041b      	lsls	r3, r3, #16
 8009998:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6959      	ldr	r1, [r3, #20]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80099b6:	021b      	lsls	r3, r3, #8
 80099b8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80099c0:	041b      	lsls	r3, r3, #16
 80099c2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80099d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	4313      	orrs	r3, r2
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80099e6:	431a      	orrs	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	430a      	orrs	r2, r1
 80099ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0206 	orr.w	r2, r2, #6
 80099fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699a      	ldr	r2, [r3, #24]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f042 0201 	orr.w	r2, r2, #1
 8009a0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	f000f800 	.word	0xf000f800

08009a30 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a3e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a46:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f003 0304 	and.w	r3, r3, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d023      	beq.n	8009a9a <HAL_LTDC_IRQHandler+0x6a>
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	f003 0304 	and.w	r3, r3, #4
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d01e      	beq.n	8009a9a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f022 0204 	bic.w	r2, r2, #4
 8009a6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2204      	movs	r2, #4
 8009a72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a7a:	f043 0201 	orr.w	r2, r3, #1
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2204      	movs	r2, #4
 8009a88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f86f 	bl	8009b78 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d023      	beq.n	8009aec <HAL_LTDC_IRQHandler+0xbc>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f003 0302 	and.w	r3, r3, #2
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01e      	beq.n	8009aec <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0202 	bic.w	r2, r2, #2
 8009abc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009acc:	f043 0202 	orr.w	r2, r3, #2
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2204      	movs	r2, #4
 8009ada:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f846 	bl	8009b78 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d01b      	beq.n	8009b2e <HAL_LTDC_IRQHandler+0xfe>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d016      	beq.n	8009b2e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f022 0201 	bic.w	r2, r2, #1
 8009b0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2201      	movs	r2, #1
 8009b16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f82f 	bl	8009b8c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f003 0308 	and.w	r3, r3, #8
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d01b      	beq.n	8009b70 <HAL_LTDC_IRQHandler+0x140>
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f003 0308 	and.w	r3, r3, #8
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d016      	beq.n	8009b70 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0208 	bic.w	r2, r2, #8
 8009b50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2208      	movs	r2, #8
 8009b58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f818 	bl	8009ba0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009b70:	bf00      	nop
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009bb4:	b5b0      	push	{r4, r5, r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d101      	bne.n	8009bce <HAL_LTDC_ConfigLayer+0x1a>
 8009bca:	2302      	movs	r3, #2
 8009bcc:	e02c      	b.n	8009c28 <HAL_LTDC_ConfigLayer+0x74>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2134      	movs	r1, #52	@ 0x34
 8009be4:	fb01 f303 	mul.w	r3, r1, r3
 8009be8:	4413      	add	r3, r2
 8009bea:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	461d      	mov	r5, r3
 8009bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 f811 	bl	8009c30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2201      	movs	r2, #1
 8009c14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bdb0      	pop	{r4, r5, r7, pc}

08009c30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b089      	sub	sp, #36	@ 0x24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	0c1b      	lsrs	r3, r3, #16
 8009c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c4c:	4413      	add	r3, r2
 8009c4e:	041b      	lsls	r3, r3, #16
 8009c50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	01db      	lsls	r3, r3, #7
 8009c5c:	4413      	add	r3, r2
 8009c5e:	3384      	adds	r3, #132	@ 0x84
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	4611      	mov	r1, r2
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	01d2      	lsls	r2, r2, #7
 8009c6c:	440a      	add	r2, r1
 8009c6e:	3284      	adds	r2, #132	@ 0x84
 8009c70:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009c74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	0c1b      	lsrs	r3, r3, #16
 8009c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009c86:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009c88:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	01db      	lsls	r3, r3, #7
 8009c94:	440b      	add	r3, r1
 8009c96:	3384      	adds	r3, #132	@ 0x84
 8009c98:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009c9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	68da      	ldr	r2, [r3, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cae:	4413      	add	r3, r2
 8009cb0:	041b      	lsls	r3, r3, #16
 8009cb2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	01db      	lsls	r3, r3, #7
 8009cbe:	4413      	add	r3, r2
 8009cc0:	3384      	adds	r3, #132	@ 0x84
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	6812      	ldr	r2, [r2, #0]
 8009cc8:	4611      	mov	r1, r2
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	01d2      	lsls	r2, r2, #7
 8009cce:	440a      	add	r2, r1
 8009cd0:	3284      	adds	r2, #132	@ 0x84
 8009cd2:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009cd6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	689a      	ldr	r2, [r3, #8]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ce6:	4413      	add	r3, r2
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	01db      	lsls	r3, r3, #7
 8009cf4:	440b      	add	r3, r1
 8009cf6:	3384      	adds	r3, #132	@ 0x84
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	01db      	lsls	r3, r3, #7
 8009d0a:	4413      	add	r3, r2
 8009d0c:	3384      	adds	r3, #132	@ 0x84
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	6812      	ldr	r2, [r2, #0]
 8009d14:	4611      	mov	r1, r2
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	01d2      	lsls	r2, r2, #7
 8009d1a:	440a      	add	r2, r1
 8009d1c:	3284      	adds	r2, #132	@ 0x84
 8009d1e:	f023 0307 	bic.w	r3, r3, #7
 8009d22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	01db      	lsls	r3, r3, #7
 8009d2e:	4413      	add	r3, r2
 8009d30:	3384      	adds	r3, #132	@ 0x84
 8009d32:	461a      	mov	r2, r3
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009d40:	021b      	lsls	r3, r3, #8
 8009d42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009d4a:	041b      	lsls	r3, r3, #16
 8009d4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	061b      	lsls	r3, r3, #24
 8009d54:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	431a      	orrs	r2, r3
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	01db      	lsls	r3, r3, #7
 8009d70:	440b      	add	r3, r1
 8009d72:	3384      	adds	r3, #132	@ 0x84
 8009d74:	4619      	mov	r1, r3
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	461a      	mov	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	01db      	lsls	r3, r3, #7
 8009d86:	4413      	add	r3, r2
 8009d88:	3384      	adds	r3, #132	@ 0x84
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	6812      	ldr	r2, [r2, #0]
 8009d90:	4611      	mov	r1, r2
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	01d2      	lsls	r2, r2, #7
 8009d96:	440a      	add	r2, r1
 8009d98:	3284      	adds	r2, #132	@ 0x84
 8009d9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009d9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	01db      	lsls	r3, r3, #7
 8009daa:	4413      	add	r3, r2
 8009dac:	3384      	adds	r3, #132	@ 0x84
 8009dae:	461a      	mov	r2, r3
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	01db      	lsls	r3, r3, #7
 8009dc0:	4413      	add	r3, r2
 8009dc2:	3384      	adds	r3, #132	@ 0x84
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	6812      	ldr	r2, [r2, #0]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	01d2      	lsls	r2, r2, #7
 8009dd0:	440a      	add	r2, r1
 8009dd2:	3284      	adds	r2, #132	@ 0x84
 8009dd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009dd8:	f023 0307 	bic.w	r3, r3, #7
 8009ddc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	69da      	ldr	r2, [r3, #28]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	68f9      	ldr	r1, [r7, #12]
 8009de8:	6809      	ldr	r1, [r1, #0]
 8009dea:	4608      	mov	r0, r1
 8009dec:	6879      	ldr	r1, [r7, #4]
 8009dee:	01c9      	lsls	r1, r1, #7
 8009df0:	4401      	add	r1, r0
 8009df2:	3184      	adds	r1, #132	@ 0x84
 8009df4:	4313      	orrs	r3, r2
 8009df6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	01db      	lsls	r3, r3, #7
 8009e02:	4413      	add	r3, r2
 8009e04:	3384      	adds	r3, #132	@ 0x84
 8009e06:	461a      	mov	r2, r3
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d102      	bne.n	8009e1c <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8009e16:	2304      	movs	r3, #4
 8009e18:	61fb      	str	r3, [r7, #28]
 8009e1a:	e01b      	b.n	8009e54 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d102      	bne.n	8009e2a <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8009e24:	2303      	movs	r3, #3
 8009e26:	61fb      	str	r3, [r7, #28]
 8009e28:	e014      	b.n	8009e54 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d00b      	beq.n	8009e4a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d007      	beq.n	8009e4a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d003      	beq.n	8009e4a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009e46:	2b07      	cmp	r3, #7
 8009e48:	d102      	bne.n	8009e50 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	61fb      	str	r3, [r7, #28]
 8009e4e:	e001      	b.n	8009e54 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8009e50:	2301      	movs	r3, #1
 8009e52:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	01db      	lsls	r3, r3, #7
 8009e5e:	4413      	add	r3, r2
 8009e60:	3384      	adds	r3, #132	@ 0x84
 8009e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	6812      	ldr	r2, [r2, #0]
 8009e68:	4611      	mov	r1, r2
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	01d2      	lsls	r2, r2, #7
 8009e6e:	440a      	add	r2, r1
 8009e70:	3284      	adds	r2, #132	@ 0x84
 8009e72:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7c:	69fa      	ldr	r2, [r7, #28]
 8009e7e:	fb02 f303 	mul.w	r3, r2, r3
 8009e82:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6859      	ldr	r1, [r3, #4]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	1acb      	subs	r3, r1, r3
 8009e8e:	69f9      	ldr	r1, [r7, #28]
 8009e90:	fb01 f303 	mul.w	r3, r1, r3
 8009e94:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009e96:	68f9      	ldr	r1, [r7, #12]
 8009e98:	6809      	ldr	r1, [r1, #0]
 8009e9a:	4608      	mov	r0, r1
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	01c9      	lsls	r1, r1, #7
 8009ea0:	4401      	add	r1, r0
 8009ea2:	3184      	adds	r1, #132	@ 0x84
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	461a      	mov	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	01db      	lsls	r3, r3, #7
 8009eb2:	4413      	add	r3, r2
 8009eb4:	3384      	adds	r3, #132	@ 0x84
 8009eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	6812      	ldr	r2, [r2, #0]
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	01d2      	lsls	r2, r2, #7
 8009ec2:	440a      	add	r2, r1
 8009ec4:	3284      	adds	r2, #132	@ 0x84
 8009ec6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009eca:	f023 0307 	bic.w	r3, r3, #7
 8009ece:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	01db      	lsls	r3, r3, #7
 8009eda:	4413      	add	r3, r2
 8009edc:	3384      	adds	r3, #132	@ 0x84
 8009ede:	461a      	mov	r2, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	01db      	lsls	r3, r3, #7
 8009ef0:	4413      	add	r3, r2
 8009ef2:	3384      	adds	r3, #132	@ 0x84
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	6812      	ldr	r2, [r2, #0]
 8009efa:	4611      	mov	r1, r2
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	01d2      	lsls	r2, r2, #7
 8009f00:	440a      	add	r2, r1
 8009f02:	3284      	adds	r2, #132	@ 0x84
 8009f04:	f043 0301 	orr.w	r3, r3, #1
 8009f08:	6013      	str	r3, [r2, #0]
}
 8009f0a:	bf00      	nop
 8009f0c:	3724      	adds	r7, #36	@ 0x24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b086      	sub	sp, #24
 8009f1a:	af02      	add	r7, sp, #8
 8009f1c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e0fe      	b.n	800a126 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d106      	bne.n	8009f42 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7f8 ffa3 	bl	8002e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2203      	movs	r2, #3
 8009f46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f008 f895 	bl	801207e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6818      	ldr	r0, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7c1a      	ldrb	r2, [r3, #16]
 8009f5c:	f88d 2000 	strb.w	r2, [sp]
 8009f60:	3304      	adds	r3, #4
 8009f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f64:	f008 f85c 	bl	8012020 <USB_CoreInit>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d005      	beq.n	8009f7a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2202      	movs	r2, #2
 8009f72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e0d5      	b.n	800a126 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2100      	movs	r1, #0
 8009f80:	4618      	mov	r0, r3
 8009f82:	f008 f88d 	bl	80120a0 <USB_SetCurrentMode>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d005      	beq.n	8009f98 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e0c6      	b.n	800a126 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]
 8009f9c:	e04a      	b.n	800a034 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009f9e:	7bfa      	ldrb	r2, [r7, #15]
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	00db      	lsls	r3, r3, #3
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	440b      	add	r3, r1
 8009fac:	3315      	adds	r3, #21
 8009fae:	2201      	movs	r2, #1
 8009fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009fb2:	7bfa      	ldrb	r2, [r7, #15]
 8009fb4:	6879      	ldr	r1, [r7, #4]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	00db      	lsls	r3, r3, #3
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	3314      	adds	r3, #20
 8009fc2:	7bfa      	ldrb	r2, [r7, #15]
 8009fc4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009fc6:	7bfa      	ldrb	r2, [r7, #15]
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	b298      	uxth	r0, r3
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	00db      	lsls	r3, r3, #3
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	440b      	add	r3, r1
 8009fd8:	332e      	adds	r3, #46	@ 0x2e
 8009fda:	4602      	mov	r2, r0
 8009fdc:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009fde:	7bfa      	ldrb	r2, [r7, #15]
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	00db      	lsls	r3, r3, #3
 8009fe6:	4413      	add	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	440b      	add	r3, r1
 8009fec:	3318      	adds	r3, #24
 8009fee:	2200      	movs	r2, #0
 8009ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009ff2:	7bfa      	ldrb	r2, [r7, #15]
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	440b      	add	r3, r1
 800a000:	331c      	adds	r3, #28
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a006:	7bfa      	ldrb	r2, [r7, #15]
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	4613      	mov	r3, r2
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	4413      	add	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	440b      	add	r3, r1
 800a014:	3320      	adds	r3, #32
 800a016:	2200      	movs	r2, #0
 800a018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a01a:	7bfa      	ldrb	r2, [r7, #15]
 800a01c:	6879      	ldr	r1, [r7, #4]
 800a01e:	4613      	mov	r3, r2
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	4413      	add	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	440b      	add	r3, r1
 800a028:	3324      	adds	r3, #36	@ 0x24
 800a02a:	2200      	movs	r2, #0
 800a02c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
 800a030:	3301      	adds	r3, #1
 800a032:	73fb      	strb	r3, [r7, #15]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	791b      	ldrb	r3, [r3, #4]
 800a038:	7bfa      	ldrb	r2, [r7, #15]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d3af      	bcc.n	8009f9e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]
 800a042:	e044      	b.n	800a0ce <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a044:	7bfa      	ldrb	r2, [r7, #15]
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	4613      	mov	r3, r2
 800a04a:	00db      	lsls	r3, r3, #3
 800a04c:	4413      	add	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	440b      	add	r3, r1
 800a052:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a056:	2200      	movs	r2, #0
 800a058:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a05a:	7bfa      	ldrb	r2, [r7, #15]
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	4613      	mov	r3, r2
 800a060:	00db      	lsls	r3, r3, #3
 800a062:	4413      	add	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	440b      	add	r3, r1
 800a068:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a06c:	7bfa      	ldrb	r2, [r7, #15]
 800a06e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a070:	7bfa      	ldrb	r2, [r7, #15]
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	4613      	mov	r3, r2
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	4413      	add	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a086:	7bfa      	ldrb	r2, [r7, #15]
 800a088:	6879      	ldr	r1, [r7, #4]
 800a08a:	4613      	mov	r3, r2
 800a08c:	00db      	lsls	r3, r3, #3
 800a08e:	4413      	add	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	440b      	add	r3, r1
 800a094:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a09c:	7bfa      	ldrb	r2, [r7, #15]
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	440b      	add	r3, r1
 800a0aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a0b2:	7bfa      	ldrb	r2, [r7, #15]
 800a0b4:	6879      	ldr	r1, [r7, #4]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	00db      	lsls	r3, r3, #3
 800a0ba:	4413      	add	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	440b      	add	r3, r1
 800a0c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	73fb      	strb	r3, [r7, #15]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	791b      	ldrb	r3, [r3, #4]
 800a0d2:	7bfa      	ldrb	r2, [r7, #15]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d3b5      	bcc.n	800a044 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	7c1a      	ldrb	r2, [r3, #16]
 800a0e0:	f88d 2000 	strb.w	r2, [sp]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0e8:	f008 f826 	bl	8012138 <USB_DevInit>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e013      	b.n	800a126 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	7b1b      	ldrb	r3, [r3, #12]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d102      	bne.n	800a11a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f80a 	bl	800a12e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4618      	mov	r0, r3
 800a120:	f008 f9f3 	bl	801250a <USB_DevDisconnect>

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a12e:	b480      	push	{r7}
 800a130:	b085      	sub	sp, #20
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a15c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a160:	f043 0303 	orr.w	r3, r3, #3
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
	...

0800a178 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a17c:	4b05      	ldr	r3, [pc, #20]	@ (800a194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a180:	4a04      	ldr	r2, [pc, #16]	@ (800a194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a182:	f043 0301 	orr.w	r3, r3, #1
 800a186:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800a188:	bf00      	nop
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	46020800 	.word	0x46020800

0800a198 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800a1a0:	4b39      	ldr	r3, [pc, #228]	@ (800a288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a1a8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d10b      	bne.n	800a1ca <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1b8:	d905      	bls.n	800a1c6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a1ba:	4b33      	ldr	r3, [pc, #204]	@ (800a288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	4a32      	ldr	r2, [pc, #200]	@ (800a288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a1c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a1c4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	e057      	b.n	800a27a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1d0:	d90a      	bls.n	800a1e8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800a1d2:	4b2d      	ldr	r3, [pc, #180]	@ (800a288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	4a2a      	ldr	r2, [pc, #168]	@ (800a288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a1e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a1e4:	60d3      	str	r3, [r2, #12]
 800a1e6:	e007      	b.n	800a1f8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800a1e8:	4b27      	ldr	r3, [pc, #156]	@ (800a288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a1f0:	4925      	ldr	r1, [pc, #148]	@ (800a288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a1f8:	4b24      	ldr	r3, [pc, #144]	@ (800a28c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a24      	ldr	r2, [pc, #144]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a202:	099b      	lsrs	r3, r3, #6
 800a204:	2232      	movs	r2, #50	@ 0x32
 800a206:	fb02 f303 	mul.w	r3, r2, r3
 800a20a:	4a21      	ldr	r2, [pc, #132]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a20c:	fba2 2303 	umull	r2, r3, r2, r3
 800a210:	099b      	lsrs	r3, r3, #6
 800a212:	3301      	adds	r3, #1
 800a214:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a216:	e002      	b.n	800a21e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a21e:	4b1a      	ldr	r3, [pc, #104]	@ (800a288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a226:	2b00      	cmp	r3, #0
 800a228:	d102      	bne.n	800a230 <HAL_PWREx_ControlVoltageScaling+0x98>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1f3      	bne.n	800a218 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d01b      	beq.n	800a26e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a236:	4b15      	ldr	r3, [pc, #84]	@ (800a28c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a15      	ldr	r2, [pc, #84]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a23c:	fba2 2303 	umull	r2, r3, r2, r3
 800a240:	099b      	lsrs	r3, r3, #6
 800a242:	2232      	movs	r2, #50	@ 0x32
 800a244:	fb02 f303 	mul.w	r3, r2, r3
 800a248:	4a11      	ldr	r2, [pc, #68]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a24a:	fba2 2303 	umull	r2, r3, r2, r3
 800a24e:	099b      	lsrs	r3, r3, #6
 800a250:	3301      	adds	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a254:	e002      	b.n	800a25c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3b01      	subs	r3, #1
 800a25a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a25c:	4b0a      	ldr	r3, [pc, #40]	@ (800a288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a25e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d102      	bne.n	800a26e <HAL_PWREx_ControlVoltageScaling+0xd6>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1f3      	bne.n	800a256 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e000      	b.n	800a27a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	46020800 	.word	0x46020800
 800a28c:	20000028 	.word	0x20000028
 800a290:	10624dd3 	.word	0x10624dd3

0800a294 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a294:	b480      	push	{r7}
 800a296:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800a298:	4b04      	ldr	r3, [pc, #16]	@ (800a2ac <HAL_PWREx_GetVoltageRange+0x18>)
 800a29a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a29c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	46020800 	.word	0x46020800

0800a2b0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a2b8:	4b22      	ldr	r3, [pc, #136]	@ (800a344 <HAL_PWREx_ConfigSupply+0x94>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a22      	ldr	r2, [pc, #136]	@ (800a348 <HAL_PWREx_ConfigSupply+0x98>)
 800a2be:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c2:	099b      	lsrs	r3, r3, #6
 800a2c4:	2232      	movs	r2, #50	@ 0x32
 800a2c6:	fb02 f303 	mul.w	r3, r2, r3
 800a2ca:	4a1f      	ldr	r2, [pc, #124]	@ (800a348 <HAL_PWREx_ConfigSupply+0x98>)
 800a2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d0:	099b      	lsrs	r3, r3, #6
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d113      	bne.n	800a304 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a2dc:	4b1b      	ldr	r3, [pc, #108]	@ (800a34c <HAL_PWREx_ConfigSupply+0x9c>)
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	4a1a      	ldr	r2, [pc, #104]	@ (800a34c <HAL_PWREx_ConfigSupply+0x9c>)
 800a2e2:	f023 0302 	bic.w	r3, r3, #2
 800a2e6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a2e8:	e002      	b.n	800a2f0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a2f0:	4b16      	ldr	r3, [pc, #88]	@ (800a34c <HAL_PWREx_ConfigSupply+0x9c>)
 800a2f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d116      	bne.n	800a32a <HAL_PWREx_ConfigSupply+0x7a>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1f3      	bne.n	800a2ea <HAL_PWREx_ConfigSupply+0x3a>
 800a302:	e012      	b.n	800a32a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a304:	4b11      	ldr	r3, [pc, #68]	@ (800a34c <HAL_PWREx_ConfigSupply+0x9c>)
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	4a10      	ldr	r2, [pc, #64]	@ (800a34c <HAL_PWREx_ConfigSupply+0x9c>)
 800a30a:	f043 0302 	orr.w	r3, r3, #2
 800a30e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a310:	e002      	b.n	800a318 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3b01      	subs	r3, #1
 800a316:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a318:	4b0c      	ldr	r3, [pc, #48]	@ (800a34c <HAL_PWREx_ConfigSupply+0x9c>)
 800a31a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b00      	cmp	r3, #0
 800a322:	d102      	bne.n	800a32a <HAL_PWREx_ConfigSupply+0x7a>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1f3      	bne.n	800a312 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e000      	b.n	800a336 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	20000028 	.word	0x20000028
 800a348:	10624dd3 	.word	0x10624dd3
 800a34c:	46020800 	.word	0x46020800

0800a350 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800a354:	4b05      	ldr	r3, [pc, #20]	@ (800a36c <HAL_PWREx_EnableVddUSB+0x1c>)
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	4a04      	ldr	r2, [pc, #16]	@ (800a36c <HAL_PWREx_EnableVddUSB+0x1c>)
 800a35a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a35e:	6113      	str	r3, [r2, #16]
}
 800a360:	bf00      	nop
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	46020800 	.word	0x46020800

0800a370 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800a374:	4b05      	ldr	r3, [pc, #20]	@ (800a38c <HAL_PWREx_EnableVddIO2+0x1c>)
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	4a04      	ldr	r2, [pc, #16]	@ (800a38c <HAL_PWREx_EnableVddIO2+0x1c>)
 800a37a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a37e:	6113      	str	r3, [r2, #16]
}
 800a380:	bf00      	nop
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	46020800 	.word	0x46020800

0800a390 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800a390:	b480      	push	{r7}
 800a392:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800a394:	4b05      	ldr	r3, [pc, #20]	@ (800a3ac <HAL_PWREx_EnableVddA+0x1c>)
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	4a04      	ldr	r2, [pc, #16]	@ (800a3ac <HAL_PWREx_EnableVddA+0x1c>)
 800a39a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a39e:	6113      	str	r3, [r2, #16]
}
 800a3a0:	bf00      	nop
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	46020800 	.word	0x46020800

0800a3b0 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800a3b6:	f7ff ff6d 	bl	800a294 <HAL_PWREx_GetVoltageRange>
 800a3ba:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a3c2:	d003      	beq.n	800a3cc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3ca:	d107      	bne.n	800a3dc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800a3cc:	4b06      	ldr	r3, [pc, #24]	@ (800a3e8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	4a05      	ldr	r2, [pc, #20]	@ (800a3e8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800a3d2:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800a3d6:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e000      	b.n	800a3de <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	46020800 	.word	0x46020800

0800a3ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b08e      	sub	sp, #56	@ 0x38
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	f000 bec8 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a406:	4b99      	ldr	r3, [pc, #612]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	f003 030c 	and.w	r3, r3, #12
 800a40e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a410:	4b96      	ldr	r3, [pc, #600]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a414:	f003 0303 	and.w	r3, r3, #3
 800a418:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0310 	and.w	r3, r3, #16
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 816c 	beq.w	800a700 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d007      	beq.n	800a43e <HAL_RCC_OscConfig+0x52>
 800a42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a430:	2b0c      	cmp	r3, #12
 800a432:	f040 80de 	bne.w	800a5f2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a438:	2b01      	cmp	r3, #1
 800a43a:	f040 80da 	bne.w	800a5f2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d102      	bne.n	800a44c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	f000 bea5 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a450:	4b86      	ldr	r3, [pc, #536]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d004      	beq.n	800a466 <HAL_RCC_OscConfig+0x7a>
 800a45c:	4b83      	ldr	r3, [pc, #524]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a464:	e005      	b.n	800a472 <HAL_RCC_OscConfig+0x86>
 800a466:	4b81      	ldr	r3, [pc, #516]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a46c:	041b      	lsls	r3, r3, #16
 800a46e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a472:	4293      	cmp	r3, r2
 800a474:	d255      	bcs.n	800a522 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10a      	bne.n	800a492 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a480:	4618      	mov	r0, r3
 800a482:	f001 f9d9 	bl	800b838 <RCC_SetFlashLatencyFromMSIRange>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	f000 be82 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a492:	4b76      	ldr	r3, [pc, #472]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	4a75      	ldr	r2, [pc, #468]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a498:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a49c:	6093      	str	r3, [r2, #8]
 800a49e:	4b73      	ldr	r3, [pc, #460]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4aa:	4970      	ldr	r1, [pc, #448]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a4b8:	d309      	bcc.n	800a4ce <HAL_RCC_OscConfig+0xe2>
 800a4ba:	4b6c      	ldr	r3, [pc, #432]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	f023 021f 	bic.w	r2, r3, #31
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	4969      	ldr	r1, [pc, #420]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	60cb      	str	r3, [r1, #12]
 800a4cc:	e07e      	b.n	800a5cc <HAL_RCC_OscConfig+0x1e0>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	da0a      	bge.n	800a4ec <HAL_RCC_OscConfig+0x100>
 800a4d6:	4b65      	ldr	r3, [pc, #404]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	015b      	lsls	r3, r3, #5
 800a4e4:	4961      	ldr	r1, [pc, #388]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60cb      	str	r3, [r1, #12]
 800a4ea:	e06f      	b.n	800a5cc <HAL_RCC_OscConfig+0x1e0>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4f4:	d30a      	bcc.n	800a50c <HAL_RCC_OscConfig+0x120>
 800a4f6:	4b5d      	ldr	r3, [pc, #372]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	029b      	lsls	r3, r3, #10
 800a504:	4959      	ldr	r1, [pc, #356]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a506:	4313      	orrs	r3, r2
 800a508:	60cb      	str	r3, [r1, #12]
 800a50a:	e05f      	b.n	800a5cc <HAL_RCC_OscConfig+0x1e0>
 800a50c:	4b57      	ldr	r3, [pc, #348]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	03db      	lsls	r3, r3, #15
 800a51a:	4954      	ldr	r1, [pc, #336]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	60cb      	str	r3, [r1, #12]
 800a520:	e054      	b.n	800a5cc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a522:	4b52      	ldr	r3, [pc, #328]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	4a51      	ldr	r2, [pc, #324]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a528:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a52c:	6093      	str	r3, [r2, #8]
 800a52e:	4b4f      	ldr	r3, [pc, #316]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53a:	494c      	ldr	r1, [pc, #304]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a53c:	4313      	orrs	r3, r2
 800a53e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a544:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a548:	d309      	bcc.n	800a55e <HAL_RCC_OscConfig+0x172>
 800a54a:	4b48      	ldr	r3, [pc, #288]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	f023 021f 	bic.w	r2, r3, #31
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	4945      	ldr	r1, [pc, #276]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a558:	4313      	orrs	r3, r2
 800a55a:	60cb      	str	r3, [r1, #12]
 800a55c:	e028      	b.n	800a5b0 <HAL_RCC_OscConfig+0x1c4>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a562:	2b00      	cmp	r3, #0
 800a564:	da0a      	bge.n	800a57c <HAL_RCC_OscConfig+0x190>
 800a566:	4b41      	ldr	r3, [pc, #260]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	015b      	lsls	r3, r3, #5
 800a574:	493d      	ldr	r1, [pc, #244]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a576:	4313      	orrs	r3, r2
 800a578:	60cb      	str	r3, [r1, #12]
 800a57a:	e019      	b.n	800a5b0 <HAL_RCC_OscConfig+0x1c4>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a584:	d30a      	bcc.n	800a59c <HAL_RCC_OscConfig+0x1b0>
 800a586:	4b39      	ldr	r3, [pc, #228]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	029b      	lsls	r3, r3, #10
 800a594:	4935      	ldr	r1, [pc, #212]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a596:	4313      	orrs	r3, r2
 800a598:	60cb      	str	r3, [r1, #12]
 800a59a:	e009      	b.n	800a5b0 <HAL_RCC_OscConfig+0x1c4>
 800a59c:	4b33      	ldr	r3, [pc, #204]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	03db      	lsls	r3, r3, #15
 800a5aa:	4930      	ldr	r1, [pc, #192]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10a      	bne.n	800a5cc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f001 f93c 	bl	800b838 <RCC_SetFlashLatencyFromMSIRange>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	f000 bde5 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800a5cc:	f001 f8de 	bl	800b78c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a5d0:	4b27      	ldr	r3, [pc, #156]	@ (800a670 <HAL_RCC_OscConfig+0x284>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7f8 ffdb 	bl	8003590 <HAL_InitTick>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800a5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 808a 	beq.w	800a6fe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800a5ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5ee:	f000 bdd2 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d066      	beq.n	800a6c8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800a5fa:	4b1c      	ldr	r3, [pc, #112]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a1b      	ldr	r2, [pc, #108]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a600:	f043 0301 	orr.w	r3, r3, #1
 800a604:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a606:	f7f9 f84d 	bl	80036a4 <HAL_GetTick>
 800a60a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a60c:	e009      	b.n	800a622 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a60e:	f7f9 f849 	bl	80036a4 <HAL_GetTick>
 800a612:	4602      	mov	r2, r0
 800a614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d902      	bls.n	800a622 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	f000 bdba 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a622:	4b12      	ldr	r3, [pc, #72]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0304 	and.w	r3, r3, #4
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d0ef      	beq.n	800a60e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a62e:	4b0f      	ldr	r3, [pc, #60]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	4a0e      	ldr	r2, [pc, #56]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a634:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a638:	6093      	str	r3, [r2, #8]
 800a63a:	4b0c      	ldr	r3, [pc, #48]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a646:	4909      	ldr	r1, [pc, #36]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a648:	4313      	orrs	r3, r2
 800a64a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a650:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a654:	d30e      	bcc.n	800a674 <HAL_RCC_OscConfig+0x288>
 800a656:	4b05      	ldr	r3, [pc, #20]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	f023 021f 	bic.w	r2, r3, #31
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	4902      	ldr	r1, [pc, #8]	@ (800a66c <HAL_RCC_OscConfig+0x280>)
 800a664:	4313      	orrs	r3, r2
 800a666:	60cb      	str	r3, [r1, #12]
 800a668:	e04a      	b.n	800a700 <HAL_RCC_OscConfig+0x314>
 800a66a:	bf00      	nop
 800a66c:	46020c00 	.word	0x46020c00
 800a670:	2000002c 	.word	0x2000002c
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da0a      	bge.n	800a692 <HAL_RCC_OscConfig+0x2a6>
 800a67c:	4b98      	ldr	r3, [pc, #608]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a1b      	ldr	r3, [r3, #32]
 800a688:	015b      	lsls	r3, r3, #5
 800a68a:	4995      	ldr	r1, [pc, #596]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	60cb      	str	r3, [r1, #12]
 800a690:	e036      	b.n	800a700 <HAL_RCC_OscConfig+0x314>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a69a:	d30a      	bcc.n	800a6b2 <HAL_RCC_OscConfig+0x2c6>
 800a69c:	4b90      	ldr	r3, [pc, #576]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
 800a6a8:	029b      	lsls	r3, r3, #10
 800a6aa:	498d      	ldr	r1, [pc, #564]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	60cb      	str	r3, [r1, #12]
 800a6b0:	e026      	b.n	800a700 <HAL_RCC_OscConfig+0x314>
 800a6b2:	4b8b      	ldr	r3, [pc, #556]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	03db      	lsls	r3, r3, #15
 800a6c0:	4987      	ldr	r1, [pc, #540]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	60cb      	str	r3, [r1, #12]
 800a6c6:	e01b      	b.n	800a700 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800a6c8:	4b85      	ldr	r3, [pc, #532]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a84      	ldr	r2, [pc, #528]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a6ce:	f023 0301 	bic.w	r3, r3, #1
 800a6d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a6d4:	f7f8 ffe6 	bl	80036a4 <HAL_GetTick>
 800a6d8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a6da:	e009      	b.n	800a6f0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a6dc:	f7f8 ffe2 	bl	80036a4 <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d902      	bls.n	800a6f0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	f000 bd53 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a6f0:	4b7b      	ldr	r3, [pc, #492]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0304 	and.w	r3, r3, #4
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1ef      	bne.n	800a6dc <HAL_RCC_OscConfig+0x2f0>
 800a6fc:	e000      	b.n	800a700 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a6fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 808b 	beq.w	800a824 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a710:	2b08      	cmp	r3, #8
 800a712:	d005      	beq.n	800a720 <HAL_RCC_OscConfig+0x334>
 800a714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a716:	2b0c      	cmp	r3, #12
 800a718:	d109      	bne.n	800a72e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	d106      	bne.n	800a72e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d17d      	bne.n	800a824 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	f000 bd34 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a736:	d106      	bne.n	800a746 <HAL_RCC_OscConfig+0x35a>
 800a738:	4b69      	ldr	r3, [pc, #420]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a68      	ldr	r2, [pc, #416]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a73e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	e041      	b.n	800a7ca <HAL_RCC_OscConfig+0x3de>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a74e:	d112      	bne.n	800a776 <HAL_RCC_OscConfig+0x38a>
 800a750:	4b63      	ldr	r3, [pc, #396]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a62      	ldr	r2, [pc, #392]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a756:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	4b60      	ldr	r3, [pc, #384]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a5f      	ldr	r2, [pc, #380]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a762:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	4b5d      	ldr	r3, [pc, #372]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a5c      	ldr	r2, [pc, #368]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a76e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	e029      	b.n	800a7ca <HAL_RCC_OscConfig+0x3de>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a77e:	d112      	bne.n	800a7a6 <HAL_RCC_OscConfig+0x3ba>
 800a780:	4b57      	ldr	r3, [pc, #348]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a56      	ldr	r2, [pc, #344]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a786:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a78a:	6013      	str	r3, [r2, #0]
 800a78c:	4b54      	ldr	r3, [pc, #336]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a53      	ldr	r2, [pc, #332]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	4b51      	ldr	r3, [pc, #324]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a50      	ldr	r2, [pc, #320]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a79e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	e011      	b.n	800a7ca <HAL_RCC_OscConfig+0x3de>
 800a7a6:	4b4e      	ldr	r3, [pc, #312]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a4d      	ldr	r2, [pc, #308]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a7ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	4b4b      	ldr	r3, [pc, #300]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a4a      	ldr	r2, [pc, #296]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a7b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	4b48      	ldr	r3, [pc, #288]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a47      	ldr	r2, [pc, #284]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a7c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a7c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d014      	beq.n	800a7fc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800a7d2:	f7f8 ff67 	bl	80036a4 <HAL_GetTick>
 800a7d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a7d8:	e009      	b.n	800a7ee <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7da:	f7f8 ff63 	bl	80036a4 <HAL_GetTick>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	2b64      	cmp	r3, #100	@ 0x64
 800a7e6:	d902      	bls.n	800a7ee <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	f000 bcd4 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a7ee:	4b3c      	ldr	r3, [pc, #240]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d0ef      	beq.n	800a7da <HAL_RCC_OscConfig+0x3ee>
 800a7fa:	e013      	b.n	800a824 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800a7fc:	f7f8 ff52 	bl	80036a4 <HAL_GetTick>
 800a800:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a802:	e009      	b.n	800a818 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a804:	f7f8 ff4e 	bl	80036a4 <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	2b64      	cmp	r3, #100	@ 0x64
 800a810:	d902      	bls.n	800a818 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	f000 bcbf 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a818:	4b31      	ldr	r3, [pc, #196]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d1ef      	bne.n	800a804 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0302 	and.w	r3, r3, #2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d05f      	beq.n	800a8f0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a832:	2b04      	cmp	r3, #4
 800a834:	d005      	beq.n	800a842 <HAL_RCC_OscConfig+0x456>
 800a836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a838:	2b0c      	cmp	r3, #12
 800a83a:	d114      	bne.n	800a866 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d111      	bne.n	800a866 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d102      	bne.n	800a850 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	f000 bca3 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a850:	4b23      	ldr	r3, [pc, #140]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	041b      	lsls	r3, r3, #16
 800a85e:	4920      	ldr	r1, [pc, #128]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a860:	4313      	orrs	r3, r2
 800a862:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a864:	e044      	b.n	800a8f0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d024      	beq.n	800a8b8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800a86e:	4b1c      	ldr	r3, [pc, #112]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a1b      	ldr	r2, [pc, #108]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a878:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a87a:	f7f8 ff13 	bl	80036a4 <HAL_GetTick>
 800a87e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a880:	e009      	b.n	800a896 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a882:	f7f8 ff0f 	bl	80036a4 <HAL_GetTick>
 800a886:	4602      	mov	r2, r0
 800a888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d902      	bls.n	800a896 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a890:	2303      	movs	r3, #3
 800a892:	f000 bc80 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a896:	4b12      	ldr	r3, [pc, #72]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0ef      	beq.n	800a882 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a8a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	041b      	lsls	r3, r3, #16
 800a8b0:	490b      	ldr	r1, [pc, #44]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	610b      	str	r3, [r1, #16]
 800a8b6:	e01b      	b.n	800a8f0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800a8b8:	4b09      	ldr	r3, [pc, #36]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a08      	ldr	r2, [pc, #32]	@ (800a8e0 <HAL_RCC_OscConfig+0x4f4>)
 800a8be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a8c4:	f7f8 feee 	bl	80036a4 <HAL_GetTick>
 800a8c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a8ca:	e00b      	b.n	800a8e4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8cc:	f7f8 feea 	bl	80036a4 <HAL_GetTick>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d904      	bls.n	800a8e4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	f000 bc5b 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
 800a8e0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a8e4:	4baf      	ldr	r3, [pc, #700]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1ed      	bne.n	800a8cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 0308 	and.w	r3, r3, #8
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 80c8 	beq.w	800aa8e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a8fe:	2300      	movs	r3, #0
 800a900:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a904:	4ba7      	ldr	r3, [pc, #668]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a90a:	f003 0304 	and.w	r3, r3, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d111      	bne.n	800a936 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a912:	4ba4      	ldr	r3, [pc, #656]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a918:	4aa2      	ldr	r2, [pc, #648]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a91a:	f043 0304 	orr.w	r3, r3, #4
 800a91e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a922:	4ba0      	ldr	r3, [pc, #640]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a930:	2301      	movs	r3, #1
 800a932:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a936:	4b9c      	ldr	r3, [pc, #624]	@ (800aba8 <HAL_RCC_OscConfig+0x7bc>)
 800a938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d119      	bne.n	800a976 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a942:	4b99      	ldr	r3, [pc, #612]	@ (800aba8 <HAL_RCC_OscConfig+0x7bc>)
 800a944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a946:	4a98      	ldr	r2, [pc, #608]	@ (800aba8 <HAL_RCC_OscConfig+0x7bc>)
 800a948:	f043 0301 	orr.w	r3, r3, #1
 800a94c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a94e:	f7f8 fea9 	bl	80036a4 <HAL_GetTick>
 800a952:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a954:	e009      	b.n	800a96a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a956:	f7f8 fea5 	bl	80036a4 <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	2b02      	cmp	r3, #2
 800a962:	d902      	bls.n	800a96a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	f000 bc16 	b.w	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a96a:	4b8f      	ldr	r3, [pc, #572]	@ (800aba8 <HAL_RCC_OscConfig+0x7bc>)
 800a96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0ef      	beq.n	800a956 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d05f      	beq.n	800aa3e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a97e:	4b89      	ldr	r3, [pc, #548]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a984:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	699a      	ldr	r2, [r3, #24]
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a990:	429a      	cmp	r2, r3
 800a992:	d037      	beq.n	800aa04 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d006      	beq.n	800a9ac <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d101      	bne.n	800a9ac <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e3f4      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d01b      	beq.n	800a9ee <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800a9b6:	4b7b      	ldr	r3, [pc, #492]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a9b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9bc:	4a79      	ldr	r2, [pc, #484]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a9be:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a9c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800a9c6:	f7f8 fe6d 	bl	80036a4 <HAL_GetTick>
 800a9ca:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a9cc:	e008      	b.n	800a9e0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9ce:	f7f8 fe69 	bl	80036a4 <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	2b05      	cmp	r3, #5
 800a9da:	d901      	bls.n	800a9e0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e3da      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a9e0:	4b70      	ldr	r3, [pc, #448]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a9e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1ef      	bne.n	800a9ce <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a9ee:	4b6d      	ldr	r3, [pc, #436]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a9f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	4969      	ldr	r1, [pc, #420]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800aa04:	4b67      	ldr	r3, [pc, #412]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aa06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa0a:	4a66      	ldr	r2, [pc, #408]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aa0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aa10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800aa14:	f7f8 fe46 	bl	80036a4 <HAL_GetTick>
 800aa18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800aa1a:	e008      	b.n	800aa2e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa1c:	f7f8 fe42 	bl	80036a4 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b05      	cmp	r3, #5
 800aa28:	d901      	bls.n	800aa2e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e3b3      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800aa2e:	4b5d      	ldr	r3, [pc, #372]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aa30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d0ef      	beq.n	800aa1c <HAL_RCC_OscConfig+0x630>
 800aa3c:	e01b      	b.n	800aa76 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800aa3e:	4b59      	ldr	r3, [pc, #356]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aa40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa44:	4a57      	ldr	r2, [pc, #348]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aa46:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800aa4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800aa4e:	f7f8 fe29 	bl	80036a4 <HAL_GetTick>
 800aa52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800aa54:	e008      	b.n	800aa68 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa56:	f7f8 fe25 	bl	80036a4 <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	2b05      	cmp	r3, #5
 800aa62:	d901      	bls.n	800aa68 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e396      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800aa68:	4b4e      	ldr	r3, [pc, #312]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aa6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1ef      	bne.n	800aa56 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aa76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d107      	bne.n	800aa8e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa7e:	4b49      	ldr	r3, [pc, #292]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aa80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa84:	4a47      	ldr	r2, [pc, #284]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aa86:	f023 0304 	bic.w	r3, r3, #4
 800aa8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0304 	and.w	r3, r3, #4
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 8111 	beq.w	800acbe <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aaa2:	4b40      	ldr	r3, [pc, #256]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aaa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaa8:	f003 0304 	and.w	r3, r3, #4
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d111      	bne.n	800aad4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aab0:	4b3c      	ldr	r3, [pc, #240]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aab6:	4a3b      	ldr	r2, [pc, #236]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aab8:	f043 0304 	orr.w	r3, r3, #4
 800aabc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800aac0:	4b38      	ldr	r3, [pc, #224]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800aac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aac6:	f003 0304 	and.w	r3, r3, #4
 800aaca:	613b      	str	r3, [r7, #16]
 800aacc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800aace:	2301      	movs	r3, #1
 800aad0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800aad4:	4b34      	ldr	r3, [pc, #208]	@ (800aba8 <HAL_RCC_OscConfig+0x7bc>)
 800aad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d118      	bne.n	800ab12 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800aae0:	4b31      	ldr	r3, [pc, #196]	@ (800aba8 <HAL_RCC_OscConfig+0x7bc>)
 800aae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae4:	4a30      	ldr	r2, [pc, #192]	@ (800aba8 <HAL_RCC_OscConfig+0x7bc>)
 800aae6:	f043 0301 	orr.w	r3, r3, #1
 800aaea:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aaec:	f7f8 fdda 	bl	80036a4 <HAL_GetTick>
 800aaf0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800aaf2:	e008      	b.n	800ab06 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aaf4:	f7f8 fdd6 	bl	80036a4 <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d901      	bls.n	800ab06 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e347      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab06:	4b28      	ldr	r3, [pc, #160]	@ (800aba8 <HAL_RCC_OscConfig+0x7bc>)
 800ab08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0a:	f003 0301 	and.w	r3, r3, #1
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0f0      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d01f      	beq.n	800ab5e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f003 0304 	and.w	r3, r3, #4
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d010      	beq.n	800ab4c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ab2a:	4b1e      	ldr	r3, [pc, #120]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800ab2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab30:	4a1c      	ldr	r2, [pc, #112]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800ab32:	f043 0304 	orr.w	r3, r3, #4
 800ab36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ab3a:	4b1a      	ldr	r3, [pc, #104]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800ab3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab40:	4a18      	ldr	r2, [pc, #96]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800ab42:	f043 0301 	orr.w	r3, r3, #1
 800ab46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ab4a:	e018      	b.n	800ab7e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ab4c:	4b15      	ldr	r3, [pc, #84]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800ab4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab52:	4a14      	ldr	r2, [pc, #80]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800ab54:	f043 0301 	orr.w	r3, r3, #1
 800ab58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ab5c:	e00f      	b.n	800ab7e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ab5e:	4b11      	ldr	r3, [pc, #68]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800ab60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab64:	4a0f      	ldr	r2, [pc, #60]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800ab66:	f023 0301 	bic.w	r3, r3, #1
 800ab6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ab6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800ab70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab74:	4a0b      	ldr	r2, [pc, #44]	@ (800aba4 <HAL_RCC_OscConfig+0x7b8>)
 800ab76:	f023 0304 	bic.w	r3, r3, #4
 800ab7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d057      	beq.n	800ac36 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800ab86:	f7f8 fd8d 	bl	80036a4 <HAL_GetTick>
 800ab8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab8c:	e00e      	b.n	800abac <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab8e:	f7f8 fd89 	bl	80036a4 <HAL_GetTick>
 800ab92:	4602      	mov	r2, r0
 800ab94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d905      	bls.n	800abac <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e2f8      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
 800aba4:	46020c00 	.word	0x46020c00
 800aba8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abac:	4b9c      	ldr	r3, [pc, #624]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800abae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abb2:	f003 0302 	and.w	r3, r3, #2
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d0e9      	beq.n	800ab8e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d01b      	beq.n	800abfe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800abc6:	4b96      	ldr	r3, [pc, #600]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800abc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abcc:	4a94      	ldr	r2, [pc, #592]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800abce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800abd6:	e00a      	b.n	800abee <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abd8:	f7f8 fd64 	bl	80036a4 <HAL_GetTick>
 800abdc:	4602      	mov	r2, r0
 800abde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d901      	bls.n	800abee <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e2d3      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800abee:	4b8c      	ldr	r3, [pc, #560]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800abf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d0ed      	beq.n	800abd8 <HAL_RCC_OscConfig+0x7ec>
 800abfc:	e053      	b.n	800aca6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800abfe:	4b88      	ldr	r3, [pc, #544]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ac00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac04:	4a86      	ldr	r2, [pc, #536]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ac06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ac0e:	e00a      	b.n	800ac26 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac10:	f7f8 fd48 	bl	80036a4 <HAL_GetTick>
 800ac14:	4602      	mov	r2, r0
 800ac16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac18:	1ad3      	subs	r3, r2, r3
 800ac1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d901      	bls.n	800ac26 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e2b7      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ac26:	4b7e      	ldr	r3, [pc, #504]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ac28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1ed      	bne.n	800ac10 <HAL_RCC_OscConfig+0x824>
 800ac34:	e037      	b.n	800aca6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800ac36:	f7f8 fd35 	bl	80036a4 <HAL_GetTick>
 800ac3a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ac3c:	e00a      	b.n	800ac54 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac3e:	f7f8 fd31 	bl	80036a4 <HAL_GetTick>
 800ac42:	4602      	mov	r2, r0
 800ac44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d901      	bls.n	800ac54 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e2a0      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ac54:	4b72      	ldr	r3, [pc, #456]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ac56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1ed      	bne.n	800ac3e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800ac62:	4b6f      	ldr	r3, [pc, #444]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ac64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01a      	beq.n	800aca6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ac70:	4b6b      	ldr	r3, [pc, #428]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ac72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac76:	4a6a      	ldr	r2, [pc, #424]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ac78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ac80:	e00a      	b.n	800ac98 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac82:	f7f8 fd0f 	bl	80036a4 <HAL_GetTick>
 800ac86:	4602      	mov	r2, r0
 800ac88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d901      	bls.n	800ac98 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800ac94:	2303      	movs	r3, #3
 800ac96:	e27e      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ac98:	4b61      	ldr	r3, [pc, #388]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ac9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1ed      	bne.n	800ac82 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aca6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d107      	bne.n	800acbe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800acae:	4b5c      	ldr	r3, [pc, #368]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800acb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acb4:	4a5a      	ldr	r2, [pc, #360]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800acb6:	f023 0304 	bic.w	r3, r3, #4
 800acba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 0320 	and.w	r3, r3, #32
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d036      	beq.n	800ad38 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d019      	beq.n	800ad06 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800acd2:	4b53      	ldr	r3, [pc, #332]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a52      	ldr	r2, [pc, #328]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800acd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800acdc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800acde:	f7f8 fce1 	bl	80036a4 <HAL_GetTick>
 800ace2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ace4:	e008      	b.n	800acf8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ace6:	f7f8 fcdd 	bl	80036a4 <HAL_GetTick>
 800acea:	4602      	mov	r2, r0
 800acec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d901      	bls.n	800acf8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800acf4:	2303      	movs	r3, #3
 800acf6:	e24e      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800acf8:	4b49      	ldr	r3, [pc, #292]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d0f0      	beq.n	800ace6 <HAL_RCC_OscConfig+0x8fa>
 800ad04:	e018      	b.n	800ad38 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800ad06:	4b46      	ldr	r3, [pc, #280]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a45      	ldr	r2, [pc, #276]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ad0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad10:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ad12:	f7f8 fcc7 	bl	80036a4 <HAL_GetTick>
 800ad16:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ad18:	e008      	b.n	800ad2c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad1a:	f7f8 fcc3 	bl	80036a4 <HAL_GetTick>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d901      	bls.n	800ad2c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e234      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ad2c:	4b3c      	ldr	r3, [pc, #240]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1f0      	bne.n	800ad1a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d036      	beq.n	800adb2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d019      	beq.n	800ad80 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800ad4c:	4b34      	ldr	r3, [pc, #208]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a33      	ldr	r2, [pc, #204]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ad52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ad58:	f7f8 fca4 	bl	80036a4 <HAL_GetTick>
 800ad5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800ad5e:	e008      	b.n	800ad72 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800ad60:	f7f8 fca0 	bl	80036a4 <HAL_GetTick>
 800ad64:	4602      	mov	r2, r0
 800ad66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d901      	bls.n	800ad72 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e211      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800ad72:	4b2b      	ldr	r3, [pc, #172]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0f0      	beq.n	800ad60 <HAL_RCC_OscConfig+0x974>
 800ad7e:	e018      	b.n	800adb2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800ad80:	4b27      	ldr	r3, [pc, #156]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a26      	ldr	r2, [pc, #152]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ad86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ad8c:	f7f8 fc8a 	bl	80036a4 <HAL_GetTick>
 800ad90:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800ad92:	e008      	b.n	800ada6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800ad94:	f7f8 fc86 	bl	80036a4 <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d901      	bls.n	800ada6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800ada2:	2303      	movs	r3, #3
 800ada4:	e1f7      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800ada6:	4b1e      	ldr	r3, [pc, #120]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1f0      	bne.n	800ad94 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d07f      	beq.n	800aebe <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d062      	beq.n	800ae8c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800adc6:	4b16      	ldr	r3, [pc, #88]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	4a15      	ldr	r2, [pc, #84]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800adcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800add0:	6093      	str	r3, [r2, #8]
 800add2:	4b13      	ldr	r3, [pc, #76]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adde:	4910      	ldr	r1, [pc, #64]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ade0:	4313      	orrs	r3, r2
 800ade2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800adec:	d309      	bcc.n	800ae02 <HAL_RCC_OscConfig+0xa16>
 800adee:	4b0c      	ldr	r3, [pc, #48]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	f023 021f 	bic.w	r2, r3, #31
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a1b      	ldr	r3, [r3, #32]
 800adfa:	4909      	ldr	r1, [pc, #36]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800adfc:	4313      	orrs	r3, r2
 800adfe:	60cb      	str	r3, [r1, #12]
 800ae00:	e02a      	b.n	800ae58 <HAL_RCC_OscConfig+0xa6c>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	da0c      	bge.n	800ae24 <HAL_RCC_OscConfig+0xa38>
 800ae0a:	4b05      	ldr	r3, [pc, #20]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	015b      	lsls	r3, r3, #5
 800ae18:	4901      	ldr	r1, [pc, #4]	@ (800ae20 <HAL_RCC_OscConfig+0xa34>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	60cb      	str	r3, [r1, #12]
 800ae1e:	e01b      	b.n	800ae58 <HAL_RCC_OscConfig+0xa6c>
 800ae20:	46020c00 	.word	0x46020c00
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae2c:	d30a      	bcc.n	800ae44 <HAL_RCC_OscConfig+0xa58>
 800ae2e:	4ba1      	ldr	r3, [pc, #644]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	029b      	lsls	r3, r3, #10
 800ae3c:	499d      	ldr	r1, [pc, #628]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	60cb      	str	r3, [r1, #12]
 800ae42:	e009      	b.n	800ae58 <HAL_RCC_OscConfig+0xa6c>
 800ae44:	4b9b      	ldr	r3, [pc, #620]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a1b      	ldr	r3, [r3, #32]
 800ae50:	03db      	lsls	r3, r3, #15
 800ae52:	4998      	ldr	r1, [pc, #608]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800ae54:	4313      	orrs	r3, r2
 800ae56:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800ae58:	4b96      	ldr	r3, [pc, #600]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a95      	ldr	r2, [pc, #596]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800ae5e:	f043 0310 	orr.w	r3, r3, #16
 800ae62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ae64:	f7f8 fc1e 	bl	80036a4 <HAL_GetTick>
 800ae68:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800ae6a:	e008      	b.n	800ae7e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800ae6c:	f7f8 fc1a 	bl	80036a4 <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d901      	bls.n	800ae7e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e18b      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800ae7e:	4b8d      	ldr	r3, [pc, #564]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 0320 	and.w	r3, r3, #32
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0f0      	beq.n	800ae6c <HAL_RCC_OscConfig+0xa80>
 800ae8a:	e018      	b.n	800aebe <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800ae8c:	4b89      	ldr	r3, [pc, #548]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a88      	ldr	r2, [pc, #544]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800ae92:	f023 0310 	bic.w	r3, r3, #16
 800ae96:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ae98:	f7f8 fc04 	bl	80036a4 <HAL_GetTick>
 800ae9c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800ae9e:	e008      	b.n	800aeb2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800aea0:	f7f8 fc00 	bl	80036a4 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d901      	bls.n	800aeb2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e171      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800aeb2:	4b80      	ldr	r3, [pc, #512]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0320 	and.w	r3, r3, #32
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1f0      	bne.n	800aea0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 8166 	beq.w	800b194 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800aec8:	2300      	movs	r3, #0
 800aeca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aece:	4b79      	ldr	r3, [pc, #484]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800aed0:	69db      	ldr	r3, [r3, #28]
 800aed2:	f003 030c 	and.w	r3, r3, #12
 800aed6:	2b0c      	cmp	r3, #12
 800aed8:	f000 80f2 	beq.w	800b0c0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	f040 80c5 	bne.w	800b070 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800aee6:	4b73      	ldr	r3, [pc, #460]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a72      	ldr	r2, [pc, #456]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800aeec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aef0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aef2:	f7f8 fbd7 	bl	80036a4 <HAL_GetTick>
 800aef6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800aef8:	e008      	b.n	800af0c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aefa:	f7f8 fbd3 	bl	80036a4 <HAL_GetTick>
 800aefe:	4602      	mov	r2, r0
 800af00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	2b02      	cmp	r3, #2
 800af06:	d901      	bls.n	800af0c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e144      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800af0c:	4b69      	ldr	r3, [pc, #420]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1f0      	bne.n	800aefa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af18:	4b66      	ldr	r3, [pc, #408]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800af1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af1e:	f003 0304 	and.w	r3, r3, #4
 800af22:	2b00      	cmp	r3, #0
 800af24:	d111      	bne.n	800af4a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800af26:	4b63      	ldr	r3, [pc, #396]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800af28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af2c:	4a61      	ldr	r2, [pc, #388]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800af2e:	f043 0304 	orr.w	r3, r3, #4
 800af32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800af36:	4b5f      	ldr	r3, [pc, #380]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800af38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af3c:	f003 0304 	and.w	r3, r3, #4
 800af40:	60fb      	str	r3, [r7, #12]
 800af42:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800af44:	2301      	movs	r3, #1
 800af46:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800af4a:	4b5b      	ldr	r3, [pc, #364]	@ (800b0b8 <HAL_RCC_OscConfig+0xccc>)
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800af52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af56:	d102      	bne.n	800af5e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800af5e:	4b56      	ldr	r3, [pc, #344]	@ (800b0b8 <HAL_RCC_OscConfig+0xccc>)
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	4a55      	ldr	r2, [pc, #340]	@ (800b0b8 <HAL_RCC_OscConfig+0xccc>)
 800af64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af68:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800af6a:	4b52      	ldr	r3, [pc, #328]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800af6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800af7e:	3a01      	subs	r2, #1
 800af80:	0212      	lsls	r2, r2, #8
 800af82:	4311      	orrs	r1, r2
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800af88:	430a      	orrs	r2, r1
 800af8a:	494a      	ldr	r1, [pc, #296]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800af8c:	4313      	orrs	r3, r2
 800af8e:	628b      	str	r3, [r1, #40]	@ 0x28
 800af90:	4b48      	ldr	r3, [pc, #288]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800af92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af94:	4b49      	ldr	r3, [pc, #292]	@ (800b0bc <HAL_RCC_OscConfig+0xcd0>)
 800af96:	4013      	ands	r3, r2
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800af9c:	3a01      	subs	r2, #1
 800af9e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800afa6:	3a01      	subs	r2, #1
 800afa8:	0252      	lsls	r2, r2, #9
 800afaa:	b292      	uxth	r2, r2
 800afac:	4311      	orrs	r1, r2
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800afb2:	3a01      	subs	r2, #1
 800afb4:	0412      	lsls	r2, r2, #16
 800afb6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800afba:	4311      	orrs	r1, r2
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800afc0:	3a01      	subs	r2, #1
 800afc2:	0612      	lsls	r2, r2, #24
 800afc4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800afc8:	430a      	orrs	r2, r1
 800afca:	493a      	ldr	r1, [pc, #232]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800afcc:	4313      	orrs	r3, r2
 800afce:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800afd0:	4b38      	ldr	r3, [pc, #224]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800afd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd4:	4a37      	ldr	r2, [pc, #220]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800afd6:	f023 0310 	bic.w	r3, r3, #16
 800afda:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afe0:	4a34      	ldr	r2, [pc, #208]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800afe2:	00db      	lsls	r3, r3, #3
 800afe4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800afe6:	4b33      	ldr	r3, [pc, #204]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800afe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afea:	4a32      	ldr	r2, [pc, #200]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800afec:	f043 0310 	orr.w	r3, r3, #16
 800aff0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800aff2:	4b30      	ldr	r3, [pc, #192]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800aff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff6:	f023 020c 	bic.w	r2, r3, #12
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800affe:	492d      	ldr	r1, [pc, #180]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b000:	4313      	orrs	r3, r2
 800b002:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800b004:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d105      	bne.n	800b018 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b00c:	4b2a      	ldr	r3, [pc, #168]	@ (800b0b8 <HAL_RCC_OscConfig+0xccc>)
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	4a29      	ldr	r2, [pc, #164]	@ (800b0b8 <HAL_RCC_OscConfig+0xccc>)
 800b012:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b016:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800b018:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d107      	bne.n	800b030 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800b020:	4b24      	ldr	r3, [pc, #144]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b026:	4a23      	ldr	r2, [pc, #140]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b028:	f023 0304 	bic.w	r3, r3, #4
 800b02c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800b030:	4b20      	ldr	r3, [pc, #128]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a1f      	ldr	r2, [pc, #124]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b03a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b03c:	f7f8 fb32 	bl	80036a4 <HAL_GetTick>
 800b040:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b042:	e008      	b.n	800b056 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b044:	f7f8 fb2e 	bl	80036a4 <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d901      	bls.n	800b056 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e09f      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b056:	4b17      	ldr	r3, [pc, #92]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d0f0      	beq.n	800b044 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b062:	4b14      	ldr	r3, [pc, #80]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b066:	4a13      	ldr	r2, [pc, #76]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b06c:	6293      	str	r3, [r2, #40]	@ 0x28
 800b06e:	e091      	b.n	800b194 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800b070:	4b10      	ldr	r3, [pc, #64]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a0f      	ldr	r2, [pc, #60]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b07a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b07c:	f7f8 fb12 	bl	80036a4 <HAL_GetTick>
 800b080:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b082:	e008      	b.n	800b096 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b084:	f7f8 fb0e 	bl	80036a4 <HAL_GetTick>
 800b088:	4602      	mov	r2, r0
 800b08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d901      	bls.n	800b096 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800b092:	2303      	movs	r3, #3
 800b094:	e07f      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b096:	4b07      	ldr	r3, [pc, #28]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1f0      	bne.n	800b084 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800b0a2:	4b04      	ldr	r3, [pc, #16]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b0a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a6:	4a03      	ldr	r2, [pc, #12]	@ (800b0b4 <HAL_RCC_OscConfig+0xcc8>)
 800b0a8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b0ac:	f023 0303 	bic.w	r3, r3, #3
 800b0b0:	6293      	str	r3, [r2, #40]	@ 0x28
 800b0b2:	e06f      	b.n	800b194 <HAL_RCC_OscConfig+0xda8>
 800b0b4:	46020c00 	.word	0x46020c00
 800b0b8:	46020800 	.word	0x46020800
 800b0bc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800b0c0:	4b37      	ldr	r3, [pc, #220]	@ (800b1a0 <HAL_RCC_OscConfig+0xdb4>)
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b0c6:	4b36      	ldr	r3, [pc, #216]	@ (800b1a0 <HAL_RCC_OscConfig+0xdb4>)
 800b0c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0ca:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d039      	beq.n	800b148 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	f003 0203 	and.w	r2, r3, #3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d132      	bne.n	800b148 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	0a1b      	lsrs	r3, r3, #8
 800b0e6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ee:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d129      	bne.n	800b148 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d122      	bne.n	800b148 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b10c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800b10e:	429a      	cmp	r2, r3
 800b110:	d11a      	bne.n	800b148 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	0a5b      	lsrs	r3, r3, #9
 800b116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b11e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b120:	429a      	cmp	r2, r3
 800b122:	d111      	bne.n	800b148 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	0c1b      	lsrs	r3, r3, #16
 800b128:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b130:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b132:	429a      	cmp	r2, r3
 800b134:	d108      	bne.n	800b148 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	0e1b      	lsrs	r3, r3, #24
 800b13a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b142:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b144:	429a      	cmp	r2, r3
 800b146:	d001      	beq.n	800b14c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e024      	b.n	800b196 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800b14c:	4b14      	ldr	r3, [pc, #80]	@ (800b1a0 <HAL_RCC_OscConfig+0xdb4>)
 800b14e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b150:	08db      	lsrs	r3, r3, #3
 800b152:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d01a      	beq.n	800b194 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800b15e:	4b10      	ldr	r3, [pc, #64]	@ (800b1a0 <HAL_RCC_OscConfig+0xdb4>)
 800b160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b162:	4a0f      	ldr	r2, [pc, #60]	@ (800b1a0 <HAL_RCC_OscConfig+0xdb4>)
 800b164:	f023 0310 	bic.w	r3, r3, #16
 800b168:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b16a:	f7f8 fa9b 	bl	80036a4 <HAL_GetTick>
 800b16e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800b170:	bf00      	nop
 800b172:	f7f8 fa97 	bl	80036a4 <HAL_GetTick>
 800b176:	4602      	mov	r2, r0
 800b178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d0f9      	beq.n	800b172 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b182:	4a07      	ldr	r2, [pc, #28]	@ (800b1a0 <HAL_RCC_OscConfig+0xdb4>)
 800b184:	00db      	lsls	r3, r3, #3
 800b186:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800b188:	4b05      	ldr	r3, [pc, #20]	@ (800b1a0 <HAL_RCC_OscConfig+0xdb4>)
 800b18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b18c:	4a04      	ldr	r2, [pc, #16]	@ (800b1a0 <HAL_RCC_OscConfig+0xdb4>)
 800b18e:	f043 0310 	orr.w	r3, r3, #16
 800b192:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3738      	adds	r7, #56	@ 0x38
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	46020c00 	.word	0x46020c00

0800b1a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e1d9      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1b8:	4b9b      	ldr	r3, [pc, #620]	@ (800b428 <HAL_RCC_ClockConfig+0x284>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 030f 	and.w	r3, r3, #15
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d910      	bls.n	800b1e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1c6:	4b98      	ldr	r3, [pc, #608]	@ (800b428 <HAL_RCC_ClockConfig+0x284>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f023 020f 	bic.w	r2, r3, #15
 800b1ce:	4996      	ldr	r1, [pc, #600]	@ (800b428 <HAL_RCC_ClockConfig+0x284>)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1d6:	4b94      	ldr	r3, [pc, #592]	@ (800b428 <HAL_RCC_ClockConfig+0x284>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 030f 	and.w	r3, r3, #15
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d001      	beq.n	800b1e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e1c1      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 0310 	and.w	r3, r3, #16
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d010      	beq.n	800b216 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	695a      	ldr	r2, [r3, #20]
 800b1f8:	4b8c      	ldr	r3, [pc, #560]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b200:	429a      	cmp	r2, r3
 800b202:	d908      	bls.n	800b216 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800b204:	4b89      	ldr	r3, [pc, #548]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b208:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	695b      	ldr	r3, [r3, #20]
 800b210:	4986      	ldr	r1, [pc, #536]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b212:	4313      	orrs	r3, r2
 800b214:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0308 	and.w	r3, r3, #8
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d012      	beq.n	800b248 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	691a      	ldr	r2, [r3, #16]
 800b226:	4b81      	ldr	r3, [pc, #516]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	091b      	lsrs	r3, r3, #4
 800b22c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b230:	429a      	cmp	r2, r3
 800b232:	d909      	bls.n	800b248 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b234:	4b7d      	ldr	r3, [pc, #500]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b236:	6a1b      	ldr	r3, [r3, #32]
 800b238:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	011b      	lsls	r3, r3, #4
 800b242:	497a      	ldr	r1, [pc, #488]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b244:	4313      	orrs	r3, r2
 800b246:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b00      	cmp	r3, #0
 800b252:	d010      	beq.n	800b276 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	68da      	ldr	r2, [r3, #12]
 800b258:	4b74      	ldr	r3, [pc, #464]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b260:	429a      	cmp	r2, r3
 800b262:	d908      	bls.n	800b276 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b264:	4b71      	ldr	r3, [pc, #452]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	496e      	ldr	r1, [pc, #440]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b272:	4313      	orrs	r3, r2
 800b274:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 0302 	and.w	r3, r3, #2
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d010      	beq.n	800b2a4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	689a      	ldr	r2, [r3, #8]
 800b286:	4b69      	ldr	r3, [pc, #420]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	f003 030f 	and.w	r3, r3, #15
 800b28e:	429a      	cmp	r2, r3
 800b290:	d908      	bls.n	800b2a4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b292:	4b66      	ldr	r3, [pc, #408]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	f023 020f 	bic.w	r2, r3, #15
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	4963      	ldr	r1, [pc, #396]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f000 80d2 	beq.w	800b456 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d143      	bne.n	800b346 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b2be:	4b5b      	ldr	r3, [pc, #364]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b2c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b2c4:	f003 0304 	and.w	r3, r3, #4
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d110      	bne.n	800b2ee <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b2cc:	4b57      	ldr	r3, [pc, #348]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b2ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b2d2:	4a56      	ldr	r2, [pc, #344]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b2d4:	f043 0304 	orr.w	r3, r3, #4
 800b2d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b2dc:	4b53      	ldr	r3, [pc, #332]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b2de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b2e2:	f003 0304 	and.w	r3, r3, #4
 800b2e6:	60bb      	str	r3, [r7, #8]
 800b2e8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800b2ee:	f7f8 f9d9 	bl	80036a4 <HAL_GetTick>
 800b2f2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800b2f4:	4b4e      	ldr	r3, [pc, #312]	@ (800b430 <HAL_RCC_ClockConfig+0x28c>)
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00f      	beq.n	800b320 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b300:	e008      	b.n	800b314 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800b302:	f7f8 f9cf 	bl	80036a4 <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d901      	bls.n	800b314 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e12b      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b314:	4b46      	ldr	r3, [pc, #280]	@ (800b430 <HAL_RCC_ClockConfig+0x28c>)
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0f0      	beq.n	800b302 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b320:	7dfb      	ldrb	r3, [r7, #23]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d107      	bne.n	800b336 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b326:	4b41      	ldr	r3, [pc, #260]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b32c:	4a3f      	ldr	r2, [pc, #252]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b32e:	f023 0304 	bic.w	r3, r3, #4
 800b332:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b336:	4b3d      	ldr	r3, [pc, #244]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d121      	bne.n	800b386 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e112      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d107      	bne.n	800b35e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b34e:	4b37      	ldr	r3, [pc, #220]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d115      	bne.n	800b386 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e106      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d107      	bne.n	800b376 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800b366:	4b31      	ldr	r3, [pc, #196]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 0304 	and.w	r3, r3, #4
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d109      	bne.n	800b386 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e0fa      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b376:	4b2d      	ldr	r3, [pc, #180]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e0f2      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800b386:	4b29      	ldr	r3, [pc, #164]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b388:	69db      	ldr	r3, [r3, #28]
 800b38a:	f023 0203 	bic.w	r2, r3, #3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	4926      	ldr	r1, [pc, #152]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b394:	4313      	orrs	r3, r2
 800b396:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800b398:	f7f8 f984 	bl	80036a4 <HAL_GetTick>
 800b39c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d112      	bne.n	800b3cc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b3a6:	e00a      	b.n	800b3be <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3a8:	f7f8 f97c 	bl	80036a4 <HAL_GetTick>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d901      	bls.n	800b3be <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	e0d6      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b3be:	4b1b      	ldr	r3, [pc, #108]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	f003 030c 	and.w	r3, r3, #12
 800b3c6:	2b0c      	cmp	r3, #12
 800b3c8:	d1ee      	bne.n	800b3a8 <HAL_RCC_ClockConfig+0x204>
 800b3ca:	e044      	b.n	800b456 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d112      	bne.n	800b3fa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b3d4:	e00a      	b.n	800b3ec <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3d6:	f7f8 f965 	bl	80036a4 <HAL_GetTick>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d901      	bls.n	800b3ec <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e0bf      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b3ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	f003 030c 	and.w	r3, r3, #12
 800b3f4:	2b08      	cmp	r3, #8
 800b3f6:	d1ee      	bne.n	800b3d6 <HAL_RCC_ClockConfig+0x232>
 800b3f8:	e02d      	b.n	800b456 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d123      	bne.n	800b44a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b402:	e00a      	b.n	800b41a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b404:	f7f8 f94e 	bl	80036a4 <HAL_GetTick>
 800b408:	4602      	mov	r2, r0
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b412:	4293      	cmp	r3, r2
 800b414:	d901      	bls.n	800b41a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800b416:	2303      	movs	r3, #3
 800b418:	e0a8      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b41a:	4b04      	ldr	r3, [pc, #16]	@ (800b42c <HAL_RCC_ClockConfig+0x288>)
 800b41c:	69db      	ldr	r3, [r3, #28]
 800b41e:	f003 030c 	and.w	r3, r3, #12
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1ee      	bne.n	800b404 <HAL_RCC_ClockConfig+0x260>
 800b426:	e016      	b.n	800b456 <HAL_RCC_ClockConfig+0x2b2>
 800b428:	40022000 	.word	0x40022000
 800b42c:	46020c00 	.word	0x46020c00
 800b430:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b434:	f7f8 f936 	bl	80036a4 <HAL_GetTick>
 800b438:	4602      	mov	r2, r0
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b442:	4293      	cmp	r3, r2
 800b444:	d901      	bls.n	800b44a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	e090      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b44a:	4b4a      	ldr	r3, [pc, #296]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	f003 030c 	and.w	r3, r3, #12
 800b452:	2b04      	cmp	r3, #4
 800b454:	d1ee      	bne.n	800b434 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 0302 	and.w	r3, r3, #2
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d010      	beq.n	800b484 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	689a      	ldr	r2, [r3, #8]
 800b466:	4b43      	ldr	r3, [pc, #268]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	f003 030f 	and.w	r3, r3, #15
 800b46e:	429a      	cmp	r2, r3
 800b470:	d208      	bcs.n	800b484 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b472:	4b40      	ldr	r3, [pc, #256]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	f023 020f 	bic.w	r2, r3, #15
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	493d      	ldr	r1, [pc, #244]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b480:	4313      	orrs	r3, r2
 800b482:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b484:	4b3c      	ldr	r3, [pc, #240]	@ (800b578 <HAL_RCC_ClockConfig+0x3d4>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 030f 	and.w	r3, r3, #15
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d210      	bcs.n	800b4b4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b492:	4b39      	ldr	r3, [pc, #228]	@ (800b578 <HAL_RCC_ClockConfig+0x3d4>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f023 020f 	bic.w	r2, r3, #15
 800b49a:	4937      	ldr	r1, [pc, #220]	@ (800b578 <HAL_RCC_ClockConfig+0x3d4>)
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4a2:	4b35      	ldr	r3, [pc, #212]	@ (800b578 <HAL_RCC_ClockConfig+0x3d4>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 030f 	and.w	r3, r3, #15
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d001      	beq.n	800b4b4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e05b      	b.n	800b56c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 0304 	and.w	r3, r3, #4
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d010      	beq.n	800b4e2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	68da      	ldr	r2, [r3, #12]
 800b4c4:	4b2b      	ldr	r3, [pc, #172]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d208      	bcs.n	800b4e2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b4d0:	4b28      	ldr	r3, [pc, #160]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b4d2:	6a1b      	ldr	r3, [r3, #32]
 800b4d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	4925      	ldr	r1, [pc, #148]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f003 0308 	and.w	r3, r3, #8
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d012      	beq.n	800b514 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	691a      	ldr	r2, [r3, #16]
 800b4f2:	4b20      	ldr	r3, [pc, #128]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	091b      	lsrs	r3, r3, #4
 800b4f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d209      	bcs.n	800b514 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b500:	4b1c      	ldr	r3, [pc, #112]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b502:	6a1b      	ldr	r3, [r3, #32]
 800b504:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	011b      	lsls	r3, r3, #4
 800b50e:	4919      	ldr	r1, [pc, #100]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b510:	4313      	orrs	r3, r2
 800b512:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0310 	and.w	r3, r3, #16
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d010      	beq.n	800b542 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	695a      	ldr	r2, [r3, #20]
 800b524:	4b13      	ldr	r3, [pc, #76]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b528:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d208      	bcs.n	800b542 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800b530:	4b10      	ldr	r3, [pc, #64]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b534:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	695b      	ldr	r3, [r3, #20]
 800b53c:	490d      	ldr	r1, [pc, #52]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b53e:	4313      	orrs	r3, r2
 800b540:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b542:	f000 f821 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800b546:	4602      	mov	r2, r0
 800b548:	4b0a      	ldr	r3, [pc, #40]	@ (800b574 <HAL_RCC_ClockConfig+0x3d0>)
 800b54a:	6a1b      	ldr	r3, [r3, #32]
 800b54c:	f003 030f 	and.w	r3, r3, #15
 800b550:	490a      	ldr	r1, [pc, #40]	@ (800b57c <HAL_RCC_ClockConfig+0x3d8>)
 800b552:	5ccb      	ldrb	r3, [r1, r3]
 800b554:	fa22 f303 	lsr.w	r3, r2, r3
 800b558:	4a09      	ldr	r2, [pc, #36]	@ (800b580 <HAL_RCC_ClockConfig+0x3dc>)
 800b55a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b55c:	4b09      	ldr	r3, [pc, #36]	@ (800b584 <HAL_RCC_ClockConfig+0x3e0>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4618      	mov	r0, r3
 800b562:	f7f8 f815 	bl	8003590 <HAL_InitTick>
 800b566:	4603      	mov	r3, r0
 800b568:	73fb      	strb	r3, [r7, #15]

  return status;
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	46020c00 	.word	0x46020c00
 800b578:	40022000 	.word	0x40022000
 800b57c:	0801263c 	.word	0x0801263c
 800b580:	20000028 	.word	0x20000028
 800b584:	2000002c 	.word	0x2000002c

0800b588 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b588:	b480      	push	{r7}
 800b58a:	b08b      	sub	sp, #44	@ 0x2c
 800b58c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b58e:	2300      	movs	r3, #0
 800b590:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800b592:	2300      	movs	r3, #0
 800b594:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b596:	4b78      	ldr	r3, [pc, #480]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	f003 030c 	and.w	r3, r3, #12
 800b59e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b5a0:	4b75      	ldr	r3, [pc, #468]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a4:	f003 0303 	and.w	r3, r3, #3
 800b5a8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d005      	beq.n	800b5bc <HAL_RCC_GetSysClockFreq+0x34>
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	2b0c      	cmp	r3, #12
 800b5b4:	d121      	bne.n	800b5fa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d11e      	bne.n	800b5fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800b5bc:	4b6e      	ldr	r3, [pc, #440]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d107      	bne.n	800b5d8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800b5c8:	4b6b      	ldr	r3, [pc, #428]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b5ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b5ce:	0b1b      	lsrs	r3, r3, #12
 800b5d0:	f003 030f 	and.w	r3, r3, #15
 800b5d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5d6:	e005      	b.n	800b5e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800b5d8:	4b67      	ldr	r3, [pc, #412]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	0f1b      	lsrs	r3, r3, #28
 800b5de:	f003 030f 	and.w	r3, r3, #15
 800b5e2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b5e4:	4a65      	ldr	r2, [pc, #404]	@ (800b77c <HAL_RCC_GetSysClockFreq+0x1f4>)
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5ec:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d110      	bne.n	800b616 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b5f8:	e00d      	b.n	800b616 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b5fa:	4b5f      	ldr	r3, [pc, #380]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	f003 030c 	and.w	r3, r3, #12
 800b602:	2b04      	cmp	r3, #4
 800b604:	d102      	bne.n	800b60c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b606:	4b5e      	ldr	r3, [pc, #376]	@ (800b780 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b608:	623b      	str	r3, [r7, #32]
 800b60a:	e004      	b.n	800b616 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	2b08      	cmp	r3, #8
 800b610:	d101      	bne.n	800b616 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b612:	4b5b      	ldr	r3, [pc, #364]	@ (800b780 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b614:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	2b0c      	cmp	r3, #12
 800b61a:	f040 80a5 	bne.w	800b768 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b61e:	4b56      	ldr	r3, [pc, #344]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b622:	f003 0303 	and.w	r3, r3, #3
 800b626:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b628:	4b53      	ldr	r3, [pc, #332]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b62c:	0a1b      	lsrs	r3, r3, #8
 800b62e:	f003 030f 	and.w	r3, r3, #15
 800b632:	3301      	adds	r3, #1
 800b634:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b636:	4b50      	ldr	r3, [pc, #320]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63a:	091b      	lsrs	r3, r3, #4
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b642:	4b4d      	ldr	r3, [pc, #308]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b646:	08db      	lsrs	r3, r3, #3
 800b648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	fb02 f303 	mul.w	r3, r2, r3
 800b652:	ee07 3a90 	vmov	s15, r3
 800b656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	2b02      	cmp	r3, #2
 800b662:	d003      	beq.n	800b66c <HAL_RCC_GetSysClockFreq+0xe4>
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	2b03      	cmp	r3, #3
 800b668:	d022      	beq.n	800b6b0 <HAL_RCC_GetSysClockFreq+0x128>
 800b66a:	e043      	b.n	800b6f4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	ee07 3a90 	vmov	s15, r3
 800b672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b676:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800b784 <HAL_RCC_GetSysClockFreq+0x1fc>
 800b67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b67e:	4b3e      	ldr	r3, [pc, #248]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b686:	ee07 3a90 	vmov	s15, r3
 800b68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b68e:	ed97 6a01 	vldr	s12, [r7, #4]
 800b692:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800b788 <HAL_RCC_GetSysClockFreq+0x200>
 800b696:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b69e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6ae:	e046      	b.n	800b73e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	ee07 3a90 	vmov	s15, r3
 800b6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ba:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800b784 <HAL_RCC_GetSysClockFreq+0x1fc>
 800b6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6c2:	4b2d      	ldr	r3, [pc, #180]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b6c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ca:	ee07 3a90 	vmov	s15, r3
 800b6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b6d2:	ed97 6a01 	vldr	s12, [r7, #4]
 800b6d6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800b788 <HAL_RCC_GetSysClockFreq+0x200>
 800b6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b6e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6f2:	e024      	b.n	800b73e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f6:	ee07 3a90 	vmov	s15, r3
 800b6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	ee07 3a90 	vmov	s15, r3
 800b704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70c:	4b1a      	ldr	r3, [pc, #104]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b70e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b714:	ee07 3a90 	vmov	s15, r3
 800b718:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b71c:	ed97 6a01 	vldr	s12, [r7, #4]
 800b720:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800b788 <HAL_RCC_GetSysClockFreq+0x200>
 800b724:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b728:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b72c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b730:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b734:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b738:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b73c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800b73e:	4b0e      	ldr	r3, [pc, #56]	@ (800b778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b742:	0e1b      	lsrs	r3, r3, #24
 800b744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b748:	3301      	adds	r3, #1
 800b74a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	ee07 3a90 	vmov	s15, r3
 800b752:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b756:	edd7 6a07 	vldr	s13, [r7, #28]
 800b75a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b75e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b762:	ee17 3a90 	vmov	r3, s15
 800b766:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800b768:	6a3b      	ldr	r3, [r7, #32]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	372c      	adds	r7, #44	@ 0x2c
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	46020c00 	.word	0x46020c00
 800b77c:	08012654 	.word	0x08012654
 800b780:	00f42400 	.word	0x00f42400
 800b784:	4b742400 	.word	0x4b742400
 800b788:	46000000 	.word	0x46000000

0800b78c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b790:	f7ff fefa 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800b794:	4602      	mov	r2, r0
 800b796:	4b07      	ldr	r3, [pc, #28]	@ (800b7b4 <HAL_RCC_GetHCLKFreq+0x28>)
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	f003 030f 	and.w	r3, r3, #15
 800b79e:	4906      	ldr	r1, [pc, #24]	@ (800b7b8 <HAL_RCC_GetHCLKFreq+0x2c>)
 800b7a0:	5ccb      	ldrb	r3, [r1, r3]
 800b7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7a6:	4a05      	ldr	r2, [pc, #20]	@ (800b7bc <HAL_RCC_GetHCLKFreq+0x30>)
 800b7a8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b7aa:	4b04      	ldr	r3, [pc, #16]	@ (800b7bc <HAL_RCC_GetHCLKFreq+0x30>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	46020c00 	.word	0x46020c00
 800b7b8:	0801263c 	.word	0x0801263c
 800b7bc:	20000028 	.word	0x20000028

0800b7c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b7c4:	f7ff ffe2 	bl	800b78c <HAL_RCC_GetHCLKFreq>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	4b05      	ldr	r3, [pc, #20]	@ (800b7e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b7cc:	6a1b      	ldr	r3, [r3, #32]
 800b7ce:	091b      	lsrs	r3, r3, #4
 800b7d0:	f003 0307 	and.w	r3, r3, #7
 800b7d4:	4903      	ldr	r1, [pc, #12]	@ (800b7e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b7d6:	5ccb      	ldrb	r3, [r1, r3]
 800b7d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	46020c00 	.word	0x46020c00
 800b7e4:	0801264c 	.word	0x0801264c

0800b7e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800b7ec:	f7ff ffce 	bl	800b78c <HAL_RCC_GetHCLKFreq>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	4b05      	ldr	r3, [pc, #20]	@ (800b808 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	0a1b      	lsrs	r3, r3, #8
 800b7f8:	f003 0307 	and.w	r3, r3, #7
 800b7fc:	4903      	ldr	r1, [pc, #12]	@ (800b80c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7fe:	5ccb      	ldrb	r3, [r1, r3]
 800b800:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b804:	4618      	mov	r0, r3
 800b806:	bd80      	pop	{r7, pc}
 800b808:	46020c00 	.word	0x46020c00
 800b80c:	0801264c 	.word	0x0801264c

0800b810 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800b814:	f7ff ffba 	bl	800b78c <HAL_RCC_GetHCLKFreq>
 800b818:	4602      	mov	r2, r0
 800b81a:	4b05      	ldr	r3, [pc, #20]	@ (800b830 <HAL_RCC_GetPCLK3Freq+0x20>)
 800b81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b81e:	091b      	lsrs	r3, r3, #4
 800b820:	f003 0307 	and.w	r3, r3, #7
 800b824:	4903      	ldr	r1, [pc, #12]	@ (800b834 <HAL_RCC_GetPCLK3Freq+0x24>)
 800b826:	5ccb      	ldrb	r3, [r1, r3]
 800b828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	46020c00 	.word	0x46020c00
 800b834:	0801264c 	.word	0x0801264c

0800b838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b840:	4b3e      	ldr	r3, [pc, #248]	@ (800b93c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b846:	f003 0304 	and.w	r3, r3, #4
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b84e:	f7fe fd21 	bl	800a294 <HAL_PWREx_GetVoltageRange>
 800b852:	6178      	str	r0, [r7, #20]
 800b854:	e019      	b.n	800b88a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b856:	4b39      	ldr	r3, [pc, #228]	@ (800b93c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b85c:	4a37      	ldr	r2, [pc, #220]	@ (800b93c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b85e:	f043 0304 	orr.w	r3, r3, #4
 800b862:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b866:	4b35      	ldr	r3, [pc, #212]	@ (800b93c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b86c:	f003 0304 	and.w	r3, r3, #4
 800b870:	60fb      	str	r3, [r7, #12]
 800b872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b874:	f7fe fd0e 	bl	800a294 <HAL_PWREx_GetVoltageRange>
 800b878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b87a:	4b30      	ldr	r3, [pc, #192]	@ (800b93c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b87c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b880:	4a2e      	ldr	r2, [pc, #184]	@ (800b93c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b882:	f023 0304 	bic.w	r3, r3, #4
 800b886:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b890:	d003      	beq.n	800b89a <RCC_SetFlashLatencyFromMSIRange+0x62>
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b898:	d109      	bne.n	800b8ae <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8a0:	d202      	bcs.n	800b8a8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b8a6:	e033      	b.n	800b910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b8ac:	e030      	b.n	800b910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8b4:	d208      	bcs.n	800b8c8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8bc:	d102      	bne.n	800b8c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800b8be:	2303      	movs	r3, #3
 800b8c0:	613b      	str	r3, [r7, #16]
 800b8c2:	e025      	b.n	800b910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e035      	b.n	800b934 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8ce:	d90f      	bls.n	800b8f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d109      	bne.n	800b8ea <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8dc:	d902      	bls.n	800b8e4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800b8de:	2300      	movs	r3, #0
 800b8e0:	613b      	str	r3, [r7, #16]
 800b8e2:	e015      	b.n	800b910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	613b      	str	r3, [r7, #16]
 800b8e8:	e012      	b.n	800b910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	613b      	str	r3, [r7, #16]
 800b8ee:	e00f      	b.n	800b910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8f6:	d109      	bne.n	800b90c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8fe:	d102      	bne.n	800b906 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b900:	2301      	movs	r3, #1
 800b902:	613b      	str	r3, [r7, #16]
 800b904:	e004      	b.n	800b910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b906:	2302      	movs	r3, #2
 800b908:	613b      	str	r3, [r7, #16]
 800b90a:	e001      	b.n	800b910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b90c:	2301      	movs	r3, #1
 800b90e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b910:	4b0b      	ldr	r3, [pc, #44]	@ (800b940 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f023 020f 	bic.w	r2, r3, #15
 800b918:	4909      	ldr	r1, [pc, #36]	@ (800b940 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b920:	4b07      	ldr	r3, [pc, #28]	@ (800b940 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 030f 	and.w	r3, r3, #15
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d001      	beq.n	800b932 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e000      	b.n	800b934 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	46020c00 	.word	0x46020c00
 800b940:	40022000 	.word	0x40022000

0800b944 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800b944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b948:	b0c8      	sub	sp, #288	@ 0x120
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b950:	2300      	movs	r3, #0
 800b952:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b956:	2300      	movs	r3, #0
 800b958:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b95c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b964:	f002 0401 	and.w	r4, r2, #1
 800b968:	2500      	movs	r5, #0
 800b96a:	ea54 0305 	orrs.w	r3, r4, r5
 800b96e:	d00b      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b970:	4bd5      	ldr	r3, [pc, #852]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b976:	f023 0103 	bic.w	r1, r3, #3
 800b97a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b97e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b980:	4ad1      	ldr	r2, [pc, #836]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b982:	430b      	orrs	r3, r1
 800b984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f002 0802 	and.w	r8, r2, #2
 800b994:	f04f 0900 	mov.w	r9, #0
 800b998:	ea58 0309 	orrs.w	r3, r8, r9
 800b99c:	d00b      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b99e:	4bca      	ldr	r3, [pc, #808]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9a4:	f023 010c 	bic.w	r1, r3, #12
 800b9a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ae:	4ac6      	ldr	r2, [pc, #792]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9b0:	430b      	orrs	r3, r1
 800b9b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b9b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f002 0a04 	and.w	sl, r2, #4
 800b9c2:	f04f 0b00 	mov.w	fp, #0
 800b9c6:	ea5a 030b 	orrs.w	r3, sl, fp
 800b9ca:	d00b      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b9cc:	4bbe      	ldr	r3, [pc, #760]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9d2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b9d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9dc:	4aba      	ldr	r2, [pc, #744]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9de:	430b      	orrs	r3, r1
 800b9e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b9e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	f002 0308 	and.w	r3, r2, #8
 800b9f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b9fa:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4313      	orrs	r3, r2
 800ba02:	d00b      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800ba04:	4bb0      	ldr	r3, [pc, #704]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ba0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba14:	4aac      	ldr	r2, [pc, #688]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba16:	430b      	orrs	r3, r1
 800ba18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ba1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	f002 0310 	and.w	r3, r2, #16
 800ba28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ba32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ba36:	460b      	mov	r3, r1
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	d00b      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800ba3c:	4ba2      	ldr	r3, [pc, #648]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ba46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba4c:	4a9e      	ldr	r2, [pc, #632]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba4e:	430b      	orrs	r3, r1
 800ba50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ba54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ba60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ba64:	2300      	movs	r3, #0
 800ba66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ba6a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4313      	orrs	r3, r2
 800ba72:	d00b      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800ba74:	4b94      	ldr	r3, [pc, #592]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ba7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba84:	4a90      	ldr	r2, [pc, #576]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba86:	430b      	orrs	r3, r1
 800ba88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	f002 0320 	and.w	r3, r2, #32
 800ba98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800baa2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800baa6:	460b      	mov	r3, r1
 800baa8:	4313      	orrs	r3, r2
 800baaa:	d00b      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800baac:	4b86      	ldr	r3, [pc, #536]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800baae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bab2:	f023 0107 	bic.w	r1, r3, #7
 800bab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800babc:	4a82      	ldr	r2, [pc, #520]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800babe:	430b      	orrs	r3, r1
 800bac0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800bad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bad4:	2300      	movs	r3, #0
 800bad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bada:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bade:	460b      	mov	r3, r1
 800bae0:	4313      	orrs	r3, r2
 800bae2:	d00b      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800bae4:	4b78      	ldr	r3, [pc, #480]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800baea:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800baee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baf4:	4a74      	ldr	r2, [pc, #464]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800baf6:	430b      	orrs	r3, r1
 800baf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bafc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800bb08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bb12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bb16:	460b      	mov	r3, r1
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	d00b      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800bb1c:	4b6a      	ldr	r3, [pc, #424]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bb26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb2c:	4a66      	ldr	r2, [pc, #408]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb2e:	430b      	orrs	r3, r1
 800bb30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bb34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800bb40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bb44:	2300      	movs	r3, #0
 800bb46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bb4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4313      	orrs	r3, r2
 800bb52:	d00b      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800bb54:	4b5c      	ldr	r3, [pc, #368]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bb5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb64:	4a58      	ldr	r2, [pc, #352]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb66:	430b      	orrs	r3, r1
 800bb68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bb78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bb82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bb86:	460b      	mov	r3, r1
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	d00b      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800bb8c:	4b4e      	ldr	r3, [pc, #312]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb92:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800bb96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb9c:	4a4a      	ldr	r2, [pc, #296]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb9e:	430b      	orrs	r3, r1
 800bba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800bba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bbb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bbba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	d00b      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800bbc4:	4b40      	ldr	r3, [pc, #256]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbca:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800bbce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bbd4:	4a3c      	ldr	r2, [pc, #240]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbd6:	430b      	orrs	r3, r1
 800bbd8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800bbdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bbe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bbec:	2300      	movs	r3, #0
 800bbee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bbf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	d00c      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800bbfc:	4b32      	ldr	r3, [pc, #200]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc02:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800bc06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc0e:	4a2e      	ldr	r2, [pc, #184]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc10:	430b      	orrs	r3, r1
 800bc12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bc16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800bc22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc26:	2300      	movs	r3, #0
 800bc28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bc2c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bc30:	460b      	mov	r3, r1
 800bc32:	4313      	orrs	r3, r2
 800bc34:	d00c      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800bc36:	4b24      	ldr	r3, [pc, #144]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc3c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800bc40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc48:	4a1f      	ldr	r2, [pc, #124]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc4a:	430b      	orrs	r3, r1
 800bc4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bc50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800bc5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bc60:	2300      	movs	r3, #0
 800bc62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc66:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	d00c      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800bc70:	4b15      	ldr	r3, [pc, #84]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc76:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800bc7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc82:	4a11      	ldr	r2, [pc, #68]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc84:	430b      	orrs	r3, r1
 800bc86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800bc8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bc96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bca0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800bca4:	460b      	mov	r3, r1
 800bca6:	4313      	orrs	r3, r2
 800bca8:	d010      	beq.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800bcaa:	4b07      	ldr	r3, [pc, #28]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bcb0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bcb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bcbc:	4a02      	ldr	r2, [pc, #8]	@ (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcbe:	430b      	orrs	r3, r1
 800bcc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bcc4:	e002      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x388>
 800bcc6:	bf00      	nop
 800bcc8:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bcd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bce2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800bce6:	460b      	mov	r3, r1
 800bce8:	4313      	orrs	r3, r2
 800bcea:	d04c      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800bcec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bcf4:	2b80      	cmp	r3, #128	@ 0x80
 800bcf6:	d02d      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bcf8:	2b80      	cmp	r3, #128	@ 0x80
 800bcfa:	d827      	bhi.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bcfc:	2b60      	cmp	r3, #96	@ 0x60
 800bcfe:	d02b      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800bd00:	2b60      	cmp	r3, #96	@ 0x60
 800bd02:	d823      	bhi.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bd04:	2b40      	cmp	r3, #64	@ 0x40
 800bd06:	d006      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800bd08:	2b40      	cmp	r3, #64	@ 0x40
 800bd0a:	d81f      	bhi.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d009      	beq.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bd10:	2b20      	cmp	r3, #32
 800bd12:	d011      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800bd14:	e01a      	b.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bd16:	4bc0      	ldr	r3, [pc, #768]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bd18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd1a:	4abf      	ldr	r2, [pc, #764]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bd1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd20:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bd22:	e01a      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bd24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd28:	3308      	adds	r3, #8
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f002 fcd6 	bl	800e6dc <RCCEx_PLL2_Config>
 800bd30:	4603      	mov	r3, r0
 800bd32:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bd36:	e010      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bd38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd3c:	332c      	adds	r3, #44	@ 0x2c
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f002 fd64 	bl	800e80c <RCCEx_PLL3_Config>
 800bd44:	4603      	mov	r3, r0
 800bd46:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bd4a:	e006      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bd52:	e002      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800bd54:	bf00      	nop
 800bd56:	e000      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800bd58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd5a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10d      	bne.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800bd62:	4bad      	ldr	r3, [pc, #692]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bd64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd68:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800bd6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bd74:	4aa8      	ldr	r2, [pc, #672]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bd76:	430b      	orrs	r3, r1
 800bd78:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bd7c:	e003      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd7e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd82:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bd86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bd92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bd96:	2300      	movs	r3, #0
 800bd98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bd9c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800bda0:	460b      	mov	r3, r1
 800bda2:	4313      	orrs	r3, r2
 800bda4:	d053      	beq.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800bda6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bdae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdb2:	d033      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800bdb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdb8:	d82c      	bhi.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bdba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdbe:	d02f      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800bdc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdc4:	d826      	bhi.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bdc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdca:	d008      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800bdcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdd0:	d820      	bhi.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00a      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800bdd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdda:	d011      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800bddc:	e01a      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bdde:	4b8e      	ldr	r3, [pc, #568]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde2:	4a8d      	ldr	r2, [pc, #564]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bde4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bde8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800bdea:	e01a      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bdec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f002 fc72 	bl	800e6dc <RCCEx_PLL2_Config>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800bdfe:	e010      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800be00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be04:	332c      	adds	r3, #44	@ 0x2c
 800be06:	4618      	mov	r0, r3
 800be08:	f002 fd00 	bl	800e80c <RCCEx_PLL3_Config>
 800be0c:	4603      	mov	r3, r0
 800be0e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800be12:	e006      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800be1a:	e002      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800be1c:	bf00      	nop
 800be1e:	e000      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800be20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be22:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10d      	bne.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800be2a:	4b7b      	ldr	r3, [pc, #492]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800be2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be30:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800be34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800be3c:	4a76      	ldr	r2, [pc, #472]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800be3e:	430b      	orrs	r3, r1
 800be40:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800be44:	e003      	b.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be46:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be4a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800be4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800be5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800be5e:	2300      	movs	r3, #0
 800be60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800be64:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800be68:	460b      	mov	r3, r1
 800be6a:	4313      	orrs	r3, r2
 800be6c:	d046      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800be6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be76:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800be7a:	d028      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800be7c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800be80:	d821      	bhi.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800be82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be86:	d022      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800be88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be8c:	d81b      	bhi.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800be8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be92:	d01c      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800be94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be98:	d815      	bhi.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800be9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be9e:	d008      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800bea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bea4:	d80f      	bhi.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d011      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800beaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800beae:	d00e      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800beb0:	e009      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800beb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beb6:	3308      	adds	r3, #8
 800beb8:	4618      	mov	r0, r3
 800beba:	f002 fc0f 	bl	800e6dc <RCCEx_PLL2_Config>
 800bebe:	4603      	mov	r3, r0
 800bec0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bec4:	e004      	b.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800becc:	e000      	b.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800bece:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bed0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d10d      	bne.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800bed8:	4b4f      	ldr	r3, [pc, #316]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800beda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bede:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bee6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800beea:	4a4b      	ldr	r2, [pc, #300]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800beec:	430b      	orrs	r3, r1
 800beee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bef2:	e003      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bef8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800befc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bf08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bf12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800bf16:	460b      	mov	r3, r1
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	d03f      	beq.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800bf1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf24:	2b04      	cmp	r3, #4
 800bf26:	d81e      	bhi.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800bf28:	a201      	add	r2, pc, #4	@ (adr r2, 800bf30 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800bf2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2e:	bf00      	nop
 800bf30:	0800bf6f 	.word	0x0800bf6f
 800bf34:	0800bf45 	.word	0x0800bf45
 800bf38:	0800bf53 	.word	0x0800bf53
 800bf3c:	0800bf6f 	.word	0x0800bf6f
 800bf40:	0800bf6f 	.word	0x0800bf6f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bf44:	4b34      	ldr	r3, [pc, #208]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf48:	4a33      	ldr	r2, [pc, #204]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf4e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800bf50:	e00e      	b.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bf52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf56:	332c      	adds	r3, #44	@ 0x2c
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f002 fc57 	bl	800e80c <RCCEx_PLL3_Config>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bf64:	e004      	b.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bf6c:	e000      	b.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800bf6e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bf70:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10d      	bne.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800bf78:	4b27      	ldr	r3, [pc, #156]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf7e:	f023 0107 	bic.w	r1, r3, #7
 800bf82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf8a:	4a23      	ldr	r2, [pc, #140]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf8c:	430b      	orrs	r3, r1
 800bf8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bf92:	e003      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf94:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf98:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800bf9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800bfa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bfaa:	2300      	movs	r3, #0
 800bfac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bfae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	d04c      	beq.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800bfb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bfc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bfc4:	d02a      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800bfc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bfca:	d821      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800bfcc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bfd0:	d026      	beq.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800bfd2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bfd6:	d81b      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800bfd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfdc:	d00e      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800bfde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfe2:	d815      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d01d      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800bfe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfec:	d110      	bne.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bfee:	4b0a      	ldr	r3, [pc, #40]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bff2:	4a09      	ldr	r2, [pc, #36]	@ (800c018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bff8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800bffa:	e014      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c000:	332c      	adds	r3, #44	@ 0x2c
 800c002:	4618      	mov	r0, r3
 800c004:	f002 fc02 	bl	800e80c <RCCEx_PLL3_Config>
 800c008:	4603      	mov	r3, r0
 800c00a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c00e:	e00a      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c016:	e006      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800c018:	46020c00 	.word	0x46020c00
        break;
 800c01c:	bf00      	nop
 800c01e:	e002      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800c020:	bf00      	nop
 800c022:	e000      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800c024:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c026:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10d      	bne.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800c02e:	4baf      	ldr	r3, [pc, #700]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c034:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c03c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c040:	4aaa      	ldr	r2, [pc, #680]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c042:	430b      	orrs	r3, r1
 800c044:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800c048:	e003      	b.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c04a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c04e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c05e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c060:	2300      	movs	r3, #0
 800c062:	677b      	str	r3, [r7, #116]	@ 0x74
 800c064:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c068:	460b      	mov	r3, r1
 800c06a:	4313      	orrs	r3, r2
 800c06c:	f000 80b5 	beq.w	800c1da <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c070:	2300      	movs	r3, #0
 800c072:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c076:	4b9d      	ldr	r3, [pc, #628]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c07c:	f003 0304 	and.w	r3, r3, #4
 800c080:	2b00      	cmp	r3, #0
 800c082:	d113      	bne.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c084:	4b99      	ldr	r3, [pc, #612]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c08a:	4a98      	ldr	r2, [pc, #608]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c08c:	f043 0304 	orr.w	r3, r3, #4
 800c090:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c094:	4b95      	ldr	r3, [pc, #596]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c09a:	f003 0304 	and.w	r3, r3, #4
 800c09e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800c0a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c0ac:	4b90      	ldr	r3, [pc, #576]	@ (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0b0:	4a8f      	ldr	r2, [pc, #572]	@ (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c0b2:	f043 0301 	orr.w	r3, r3, #1
 800c0b6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c0b8:	f7f7 faf4 	bl	80036a4 <HAL_GetTick>
 800c0bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c0c0:	e00b      	b.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0c2:	f7f7 faef 	bl	80036a4 <HAL_GetTick>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d903      	bls.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c0d8:	e005      	b.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c0da:	4b85      	ldr	r3, [pc, #532]	@ (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d0ed      	beq.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800c0e6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d165      	bne.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c0ee:	4b7f      	ldr	r3, [pc, #508]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c0f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c0f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800c0fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c100:	2b00      	cmp	r3, #0
 800c102:	d023      	beq.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x808>
 800c104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c108:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800c10c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c110:	4293      	cmp	r3, r2
 800c112:	d01b      	beq.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c114:	4b75      	ldr	r3, [pc, #468]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c11a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c11e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c122:	4b72      	ldr	r3, [pc, #456]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c128:	4a70      	ldr	r2, [pc, #448]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c12a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c12e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c132:	4b6e      	ldr	r3, [pc, #440]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c138:	4a6c      	ldr	r2, [pc, #432]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c13a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c13e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c142:	4a6a      	ldr	r2, [pc, #424]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c144:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c148:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c14c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	d019      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c158:	f7f7 faa4 	bl	80036a4 <HAL_GetTick>
 800c15c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c160:	e00d      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c162:	f7f7 fa9f 	bl	80036a4 <HAL_GetTick>
 800c166:	4602      	mov	r2, r0
 800c168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c16c:	1ad2      	subs	r2, r2, r3
 800c16e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c172:	429a      	cmp	r2, r3
 800c174:	d903      	bls.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800c176:	2303      	movs	r3, #3
 800c178:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800c17c:	e006      	b.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c17e:	4b5b      	ldr	r3, [pc, #364]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c184:	f003 0302 	and.w	r3, r3, #2
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d0ea      	beq.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800c18c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10d      	bne.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800c194:	4b55      	ldr	r3, [pc, #340]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c19a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c19e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800c1a6:	4a51      	ldr	r2, [pc, #324]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c1a8:	430b      	orrs	r3, r1
 800c1aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c1ae:	e008      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c1b0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c1b4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800c1b8:	e003      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c1be:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c1c2:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d107      	bne.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c1ca:	4b48      	ldr	r3, [pc, #288]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c1cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c1d0:	4a46      	ldr	r2, [pc, #280]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c1d2:	f023 0304 	bic.w	r3, r3, #4
 800c1d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800c1da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c1e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	d042      	beq.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800c1f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c1fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c202:	d022      	beq.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x906>
 800c204:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c208:	d81b      	bhi.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c20a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c20e:	d011      	beq.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800c210:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c214:	d815      	bhi.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c216:	2b00      	cmp	r3, #0
 800c218:	d019      	beq.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800c21a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c21e:	d110      	bne.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c224:	3308      	adds	r3, #8
 800c226:	4618      	mov	r0, r3
 800c228:	f002 fa58 	bl	800e6dc <RCCEx_PLL2_Config>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c232:	e00d      	b.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c234:	4b2d      	ldr	r3, [pc, #180]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c238:	4a2c      	ldr	r2, [pc, #176]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c23a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c23e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c240:	e006      	b.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c248:	e002      	b.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800c24a:	bf00      	nop
 800c24c:	e000      	b.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800c24e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c250:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10d      	bne.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800c258:	4b24      	ldr	r3, [pc, #144]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c25a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c25e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800c262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c266:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c26a:	4a20      	ldr	r2, [pc, #128]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c26c:	430b      	orrs	r3, r1
 800c26e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c272:	e003      	b.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c274:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c278:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c27c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c284:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c288:	663b      	str	r3, [r7, #96]	@ 0x60
 800c28a:	2300      	movs	r3, #0
 800c28c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c28e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c292:	460b      	mov	r3, r1
 800c294:	4313      	orrs	r3, r2
 800c296:	d031      	beq.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800c298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c29c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c2a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2a4:	d00b      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800c2a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2aa:	d804      	bhi.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d008      	beq.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800c2b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2b4:	d007      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c2bc:	e004      	b.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c2be:	bf00      	nop
 800c2c0:	e002      	b.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c2c2:	bf00      	nop
 800c2c4:	e000      	b.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c2c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c2c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d111      	bne.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800c2d0:	4b06      	ldr	r3, [pc, #24]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c2d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c2da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c2e2:	4a02      	ldr	r2, [pc, #8]	@ (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2e4:	430b      	orrs	r3, r1
 800c2e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c2ea:	e007      	b.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800c2ec:	46020c00 	.word	0x46020c00
 800c2f0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2f4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c2f8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800c2fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c308:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c30a:	2300      	movs	r3, #0
 800c30c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c30e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c312:	460b      	mov	r3, r1
 800c314:	4313      	orrs	r3, r2
 800c316:	d00c      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800c318:	4bb2      	ldr	r3, [pc, #712]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c31a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c31e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800c322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c326:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c32a:	4aae      	ldr	r2, [pc, #696]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c32c:	430b      	orrs	r3, r1
 800c32e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800c332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c33e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c340:	2300      	movs	r3, #0
 800c342:	657b      	str	r3, [r7, #84]	@ 0x54
 800c344:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c348:	460b      	mov	r3, r1
 800c34a:	4313      	orrs	r3, r2
 800c34c:	d019      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800c34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c35a:	d105      	bne.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c35c:	4ba1      	ldr	r3, [pc, #644]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c360:	4aa0      	ldr	r2, [pc, #640]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c366:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800c368:	4b9e      	ldr	r3, [pc, #632]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c36a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c36e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800c372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c37a:	4a9a      	ldr	r2, [pc, #616]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c37c:	430b      	orrs	r3, r1
 800c37e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800c382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c38e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c390:	2300      	movs	r3, #0
 800c392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c394:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c398:	460b      	mov	r3, r1
 800c39a:	4313      	orrs	r3, r2
 800c39c:	d00c      	beq.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800c39e:	4b91      	ldr	r3, [pc, #580]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3a4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c3a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c3b0:	4a8c      	ldr	r2, [pc, #560]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3b2:	430b      	orrs	r3, r1
 800c3b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800c3b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c3c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	d00c      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800c3d4:	4b83      	ldr	r3, [pc, #524]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c3de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c3e6:	4a7f      	ldr	r2, [pc, #508]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3e8:	430b      	orrs	r3, r1
 800c3ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800c3ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c3fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c400:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c404:	460b      	mov	r3, r1
 800c406:	4313      	orrs	r3, r2
 800c408:	d00c      	beq.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800c40a:	4b76      	ldr	r3, [pc, #472]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c40c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c410:	f023 0118 	bic.w	r1, r3, #24
 800c414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c418:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c41c:	4a71      	ldr	r2, [pc, #452]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c41e:	430b      	orrs	r3, r1
 800c420:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800c430:	633b      	str	r3, [r7, #48]	@ 0x30
 800c432:	2300      	movs	r3, #0
 800c434:	637b      	str	r3, [r7, #52]	@ 0x34
 800c436:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c43a:	460b      	mov	r3, r1
 800c43c:	4313      	orrs	r3, r2
 800c43e:	d032      	beq.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800c440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c444:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c448:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c44c:	d105      	bne.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c44e:	4b65      	ldr	r3, [pc, #404]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c452:	4a64      	ldr	r2, [pc, #400]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c458:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800c45a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c45e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c462:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c466:	d108      	bne.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c46c:	3308      	adds	r3, #8
 800c46e:	4618      	mov	r0, r3
 800c470:	f002 f934 	bl	800e6dc <RCCEx_PLL2_Config>
 800c474:	4603      	mov	r3, r0
 800c476:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800c47a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10d      	bne.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800c482:	4b58      	ldr	r3, [pc, #352]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c484:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c488:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c48c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c490:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c494:	4a53      	ldr	r2, [pc, #332]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c496:	430b      	orrs	r3, r1
 800c498:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c49c:	e003      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c49e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c4a2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800c4a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	d04a      	beq.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800c4c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c4ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c4ce:	d01e      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800c4d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c4d4:	d825      	bhi.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c4d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c4da:	d00e      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800c4dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c4e0:	d81f      	bhi.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d021      	beq.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800c4e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c4ea:	d11a      	bne.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4ec:	4b3d      	ldr	r3, [pc, #244]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f0:	4a3c      	ldr	r2, [pc, #240]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4f6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c4f8:	e018      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c4fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4fe:	3308      	adds	r3, #8
 800c500:	4618      	mov	r0, r3
 800c502:	f002 f8eb 	bl	800e6dc <RCCEx_PLL2_Config>
 800c506:	4603      	mov	r3, r0
 800c508:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c50c:	e00e      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c50e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c512:	332c      	adds	r3, #44	@ 0x2c
 800c514:	4618      	mov	r0, r3
 800c516:	f002 f979 	bl	800e80c <RCCEx_PLL3_Config>
 800c51a:	4603      	mov	r3, r0
 800c51c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c520:	e004      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c528:	e000      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800c52a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c52c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10d      	bne.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800c534:	4b2b      	ldr	r3, [pc, #172]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c536:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c53a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c53e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c542:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c546:	4927      	ldr	r1, [pc, #156]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c548:	4313      	orrs	r3, r2
 800c54a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c54e:	e003      	b.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c550:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c554:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800c558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800c564:	623b      	str	r3, [r7, #32]
 800c566:	2300      	movs	r3, #0
 800c568:	627b      	str	r3, [r7, #36]	@ 0x24
 800c56a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c56e:	460b      	mov	r3, r1
 800c570:	4313      	orrs	r3, r2
 800c572:	d03d      	beq.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800c574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c57c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c580:	d00e      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800c582:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c586:	d815      	bhi.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d017      	beq.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c58c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c590:	d110      	bne.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c592:	4b14      	ldr	r3, [pc, #80]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c596:	4a13      	ldr	r2, [pc, #76]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c59c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c59e:	e00e      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5a4:	3308      	adds	r3, #8
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f002 f898 	bl	800e6dc <RCCEx_PLL2_Config>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c5b2:	e004      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c5ba:	e000      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c5be:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d110      	bne.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800c5c6:	4b07      	ldr	r3, [pc, #28]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c5cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5d8:	4902      	ldr	r1, [pc, #8]	@ (800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800c5e0:	e006      	b.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c5e2:	bf00      	nop
 800c5e4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5e8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c5ec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800c5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800c5fc:	61bb      	str	r3, [r7, #24]
 800c5fe:	2300      	movs	r3, #0
 800c600:	61fb      	str	r3, [r7, #28]
 800c602:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c606:	460b      	mov	r3, r1
 800c608:	4313      	orrs	r3, r2
 800c60a:	d00c      	beq.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800c60c:	4b68      	ldr	r3, [pc, #416]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c60e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c612:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c61a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c61e:	4964      	ldr	r1, [pc, #400]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c620:	4313      	orrs	r3, r2
 800c622:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	2100      	movs	r1, #0
 800c630:	6139      	str	r1, [r7, #16]
 800c632:	f003 0302 	and.w	r3, r3, #2
 800c636:	617b      	str	r3, [r7, #20]
 800c638:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c63c:	460b      	mov	r3, r1
 800c63e:	4313      	orrs	r3, r2
 800c640:	d036      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800c642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c646:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00c      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c64e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c652:	d113      	bne.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c658:	3308      	adds	r3, #8
 800c65a:	4618      	mov	r0, r3
 800c65c:	f002 f83e 	bl	800e6dc <RCCEx_PLL2_Config>
 800c660:	4603      	mov	r3, r0
 800c662:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c666:	e00d      	b.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c66c:	332c      	adds	r3, #44	@ 0x2c
 800c66e:	4618      	mov	r0, r3
 800c670:	f002 f8cc 	bl	800e80c <RCCEx_PLL3_Config>
 800c674:	4603      	mov	r3, r0
 800c676:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c67a:	e003      	b.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c682:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c684:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10d      	bne.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800c68c:	4b48      	ldr	r3, [pc, #288]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c68e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c692:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c69a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c69e:	4944      	ldr	r1, [pc, #272]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c6a6:	e003      	b.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6a8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c6ac:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800c6b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	60b9      	str	r1, [r7, #8]
 800c6bc:	f003 0304 	and.w	r3, r3, #4
 800c6c0:	60fb      	str	r3, [r7, #12]
 800c6c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	d024      	beq.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800c6cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d108      	bne.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c6d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6dc:	332c      	adds	r3, #44	@ 0x2c
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f002 f894 	bl	800e80c <RCCEx_PLL3_Config>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800c6ea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10d      	bne.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800c6f2:	4b2f      	ldr	r3, [pc, #188]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c6f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c6f8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c6fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c704:	492a      	ldr	r1, [pc, #168]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c706:	4313      	orrs	r3, r2
 800c708:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c70c:	e003      	b.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c70e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c712:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800c716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71e:	2100      	movs	r1, #0
 800c720:	6039      	str	r1, [r7, #0]
 800c722:	f003 0308 	and.w	r3, r3, #8
 800c726:	607b      	str	r3, [r7, #4]
 800c728:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c72c:	460b      	mov	r3, r1
 800c72e:	4313      	orrs	r3, r2
 800c730:	d036      	beq.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800c732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c736:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c73a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c73e:	d00d      	beq.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800c740:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c744:	d811      	bhi.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c74a:	d012      	beq.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c74c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c750:	d80b      	bhi.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00d      	beq.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c75a:	d106      	bne.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c75c:	4b14      	ldr	r3, [pc, #80]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c760:	4a13      	ldr	r2, [pc, #76]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c766:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800c768:	e004      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800c76a:	2301      	movs	r3, #1
 800c76c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c770:	e000      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800c772:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c774:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10d      	bne.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800c77c:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c77e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c782:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c78a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c78e:	4908      	ldr	r1, [pc, #32]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c790:	4313      	orrs	r3, r2
 800c792:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c796:	e003      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c798:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c79c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800c7a0:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7b0:	46020c00 	.word	0x46020c00

0800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b089      	sub	sp, #36	@ 0x24
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800c7bc:	4ba6      	ldr	r3, [pc, #664]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c7c6:	4ba4      	ldr	r3, [pc, #656]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7ca:	f003 0303 	and.w	r3, r3, #3
 800c7ce:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800c7d0:	4ba1      	ldr	r3, [pc, #644]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7d4:	0a1b      	lsrs	r3, r3, #8
 800c7d6:	f003 030f 	and.w	r3, r3, #15
 800c7da:	3301      	adds	r3, #1
 800c7dc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c7de:	4b9e      	ldr	r3, [pc, #632]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7e2:	091b      	lsrs	r3, r3, #4
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800c7ea:	4b9b      	ldr	r3, [pc, #620]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ee:	08db      	lsrs	r3, r3, #3
 800c7f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	fb02 f303 	mul.w	r3, r2, r3
 800c7fa:	ee07 3a90 	vmov	s15, r3
 800c7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c802:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	2b03      	cmp	r3, #3
 800c80a:	d062      	beq.n	800c8d2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	2b03      	cmp	r3, #3
 800c810:	f200 8081 	bhi.w	800c916 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2b01      	cmp	r3, #1
 800c818:	d024      	beq.n	800c864 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d17a      	bne.n	800c916 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	ee07 3a90 	vmov	s15, r3
 800c826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c82a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c82e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c832:	4b89      	ldr	r3, [pc, #548]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c83a:	ee07 3a90 	vmov	s15, r3
 800c83e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c842:	ed97 6a02 	vldr	s12, [r7, #8]
 800c846:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c84a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c84e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c856:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c85a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c85e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c862:	e08f      	b.n	800c984 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c864:	4b7c      	ldr	r3, [pc, #496]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d005      	beq.n	800c87c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800c870:	4b79      	ldr	r3, [pc, #484]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	0f1b      	lsrs	r3, r3, #28
 800c876:	f003 030f 	and.w	r3, r3, #15
 800c87a:	e006      	b.n	800c88a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800c87c:	4b76      	ldr	r3, [pc, #472]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c87e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c882:	041b      	lsls	r3, r3, #16
 800c884:	0f1b      	lsrs	r3, r3, #28
 800c886:	f003 030f 	and.w	r3, r3, #15
 800c88a:	4a76      	ldr	r2, [pc, #472]	@ (800ca64 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c890:	ee07 3a90 	vmov	s15, r3
 800c894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	ee07 3a90 	vmov	s15, r3
 800c89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	ee07 3a90 	vmov	s15, r3
 800c8ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b0:	ed97 6a02 	vldr	s12, [r7, #8]
 800c8b4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c8b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c8c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c8c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8d0:	e058      	b.n	800c984 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	ee07 3a90 	vmov	s15, r3
 800c8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8dc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c8e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8e4:	4b5c      	ldr	r3, [pc, #368]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c8e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ec:	ee07 3a90 	vmov	s15, r3
 800c8f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8f4:	ed97 6a02 	vldr	s12, [r7, #8]
 800c8f8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c8fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c900:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c904:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c908:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c90c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c910:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c914:	e036      	b.n	800c984 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c916:	4b50      	ldr	r3, [pc, #320]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d005      	beq.n	800c92e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800c922:	4b4d      	ldr	r3, [pc, #308]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	0f1b      	lsrs	r3, r3, #28
 800c928:	f003 030f 	and.w	r3, r3, #15
 800c92c:	e006      	b.n	800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800c92e:	4b4a      	ldr	r3, [pc, #296]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c934:	041b      	lsls	r3, r3, #16
 800c936:	0f1b      	lsrs	r3, r3, #28
 800c938:	f003 030f 	and.w	r3, r3, #15
 800c93c:	4a49      	ldr	r2, [pc, #292]	@ (800ca64 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c942:	ee07 3a90 	vmov	s15, r3
 800c946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	ee07 3a90 	vmov	s15, r3
 800c950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	ee07 3a90 	vmov	s15, r3
 800c95e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c962:	ed97 6a02 	vldr	s12, [r7, #8]
 800c966:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c96a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c96e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c976:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c97a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c97e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c982:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800c984:	4b34      	ldr	r3, [pc, #208]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d017      	beq.n	800c9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c990:	4b31      	ldr	r3, [pc, #196]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c994:	0a5b      	lsrs	r3, r3, #9
 800c996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c99a:	ee07 3a90 	vmov	s15, r3
 800c99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800c9a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c9a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c9aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9b6:	ee17 2a90 	vmov	r2, s15
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	e002      	b.n	800c9c6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800c9c6:	4b24      	ldr	r3, [pc, #144]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d017      	beq.n	800ca02 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c9d2:	4b21      	ldr	r3, [pc, #132]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9d6:	0c1b      	lsrs	r3, r3, #16
 800c9d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9dc:	ee07 3a90 	vmov	s15, r3
 800c9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800c9e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c9e8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c9ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9f8:	ee17 2a90 	vmov	r2, s15
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	605a      	str	r2, [r3, #4]
 800ca00:	e002      	b.n	800ca08 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800ca08:	4b13      	ldr	r3, [pc, #76]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d017      	beq.n	800ca44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ca14:	4b10      	ldr	r3, [pc, #64]	@ (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca18:	0e1b      	lsrs	r3, r3, #24
 800ca1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca1e:	ee07 3a90 	vmov	s15, r3
 800ca22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800ca26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca2a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ca2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca3a:	ee17 2a90 	vmov	r2, s15
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ca42:	e002      	b.n	800ca4a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	609a      	str	r2, [r3, #8]
}
 800ca4a:	bf00      	nop
 800ca4c:	3724      	adds	r7, #36	@ 0x24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	46020c00 	.word	0x46020c00
 800ca5c:	4b742400 	.word	0x4b742400
 800ca60:	46000000 	.word	0x46000000
 800ca64:	08012654 	.word	0x08012654

0800ca68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b089      	sub	sp, #36	@ 0x24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800ca70:	4ba6      	ldr	r3, [pc, #664]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ca72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca78:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800ca7a:	4ba4      	ldr	r3, [pc, #656]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ca7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca7e:	f003 0303 	and.w	r3, r3, #3
 800ca82:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800ca84:	4ba1      	ldr	r3, [pc, #644]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ca86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca88:	0a1b      	lsrs	r3, r3, #8
 800ca8a:	f003 030f 	and.w	r3, r3, #15
 800ca8e:	3301      	adds	r3, #1
 800ca90:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800ca92:	4b9e      	ldr	r3, [pc, #632]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ca94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca96:	091b      	lsrs	r3, r3, #4
 800ca98:	f003 0301 	and.w	r3, r3, #1
 800ca9c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800ca9e:	4b9b      	ldr	r3, [pc, #620]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800caa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa2:	08db      	lsrs	r3, r3, #3
 800caa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	fb02 f303 	mul.w	r3, r2, r3
 800caae:	ee07 3a90 	vmov	s15, r3
 800cab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2b03      	cmp	r3, #3
 800cabe:	d062      	beq.n	800cb86 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	f200 8081 	bhi.w	800cbca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d024      	beq.n	800cb18 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d17a      	bne.n	800cbca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	ee07 3a90 	vmov	s15, r3
 800cada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cade:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800cd10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800cae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cae6:	4b89      	ldr	r3, [pc, #548]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800caf6:	ed97 6a02 	vldr	s12, [r7, #8]
 800cafa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800cd14 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cb02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cb0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb16:	e08f      	b.n	800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800cb18:	4b7c      	ldr	r3, [pc, #496]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d005      	beq.n	800cb30 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800cb24:	4b79      	ldr	r3, [pc, #484]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	0f1b      	lsrs	r3, r3, #28
 800cb2a:	f003 030f 	and.w	r3, r3, #15
 800cb2e:	e006      	b.n	800cb3e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800cb30:	4b76      	ldr	r3, [pc, #472]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb36:	041b      	lsls	r3, r3, #16
 800cb38:	0f1b      	lsrs	r3, r3, #28
 800cb3a:	f003 030f 	and.w	r3, r3, #15
 800cb3e:	4a76      	ldr	r2, [pc, #472]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800cb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb44:	ee07 3a90 	vmov	s15, r3
 800cb48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	ee07 3a90 	vmov	s15, r3
 800cb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	ee07 3a90 	vmov	s15, r3
 800cb60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb64:	ed97 6a02 	vldr	s12, [r7, #8]
 800cb68:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800cd14 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cb6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb78:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800cb7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb84:	e058      	b.n	800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	ee07 3a90 	vmov	s15, r3
 800cb8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb90:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cd10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800cb94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb98:	4b5c      	ldr	r3, [pc, #368]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba0:	ee07 3a90 	vmov	s15, r3
 800cba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cba8:	ed97 6a02 	vldr	s12, [r7, #8]
 800cbac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cd14 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cbb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cbb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cbc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbc8:	e036      	b.n	800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800cbca:	4b50      	ldr	r3, [pc, #320]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d005      	beq.n	800cbe2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800cbd6:	4b4d      	ldr	r3, [pc, #308]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	0f1b      	lsrs	r3, r3, #28
 800cbdc:	f003 030f 	and.w	r3, r3, #15
 800cbe0:	e006      	b.n	800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800cbe2:	4b4a      	ldr	r3, [pc, #296]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cbe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cbe8:	041b      	lsls	r3, r3, #16
 800cbea:	0f1b      	lsrs	r3, r3, #28
 800cbec:	f003 030f 	and.w	r3, r3, #15
 800cbf0:	4a49      	ldr	r2, [pc, #292]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800cbf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbf6:	ee07 3a90 	vmov	s15, r3
 800cbfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	ee07 3a90 	vmov	s15, r3
 800cc04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	ee07 3a90 	vmov	s15, r3
 800cc12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc16:	ed97 6a02 	vldr	s12, [r7, #8]
 800cc1a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800cd14 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cc1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800cc2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc36:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800cc38:	4b34      	ldr	r3, [pc, #208]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d017      	beq.n	800cc74 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cc44:	4b31      	ldr	r3, [pc, #196]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc48:	0a5b      	lsrs	r3, r3, #9
 800cc4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc4e:	ee07 3a90 	vmov	s15, r3
 800cc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800cc56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc5a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cc5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc6a:	ee17 2a90 	vmov	r2, s15
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	601a      	str	r2, [r3, #0]
 800cc72:	e002      	b.n	800cc7a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800cc7a:	4b24      	ldr	r3, [pc, #144]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d017      	beq.n	800ccb6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cc86:	4b21      	ldr	r3, [pc, #132]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc8a:	0c1b      	lsrs	r3, r3, #16
 800cc8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc90:	ee07 3a90 	vmov	s15, r3
 800cc94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800cc98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc9c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cca0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccac:	ee17 2a90 	vmov	r2, s15
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	605a      	str	r2, [r3, #4]
 800ccb4:	e002      	b.n	800ccbc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ccbc:	4b13      	ldr	r3, [pc, #76]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ccbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d017      	beq.n	800ccf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ccc8:	4b10      	ldr	r3, [pc, #64]	@ (800cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ccca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cccc:	0e1b      	lsrs	r3, r3, #24
 800ccce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccd2:	ee07 3a90 	vmov	s15, r3
 800ccd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ccda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ccde:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cce2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccee:	ee17 2a90 	vmov	r2, s15
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ccf6:	e002      	b.n	800ccfe <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	609a      	str	r2, [r3, #8]
}
 800ccfe:	bf00      	nop
 800cd00:	3724      	adds	r7, #36	@ 0x24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	46020c00 	.word	0x46020c00
 800cd10:	4b742400 	.word	0x4b742400
 800cd14:	46000000 	.word	0x46000000
 800cd18:	08012654 	.word	0x08012654

0800cd1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b089      	sub	sp, #36	@ 0x24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800cd24:	4ba6      	ldr	r3, [pc, #664]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd2c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800cd2e:	4ba4      	ldr	r3, [pc, #656]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd32:	f003 0303 	and.w	r3, r3, #3
 800cd36:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800cd38:	4ba1      	ldr	r3, [pc, #644]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd3c:	0a1b      	lsrs	r3, r3, #8
 800cd3e:	f003 030f 	and.w	r3, r3, #15
 800cd42:	3301      	adds	r3, #1
 800cd44:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800cd46:	4b9e      	ldr	r3, [pc, #632]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd4a:	091b      	lsrs	r3, r3, #4
 800cd4c:	f003 0301 	and.w	r3, r3, #1
 800cd50:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800cd52:	4b9b      	ldr	r3, [pc, #620]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd56:	08db      	lsrs	r3, r3, #3
 800cd58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	fb02 f303 	mul.w	r3, r2, r3
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b03      	cmp	r3, #3
 800cd72:	d062      	beq.n	800ce3a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2b03      	cmp	r3, #3
 800cd78:	f200 8081 	bhi.w	800ce7e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d024      	beq.n	800cdcc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d17a      	bne.n	800ce7e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	ee07 3a90 	vmov	s15, r3
 800cd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd92:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800cfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800cd96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd9a:	4b89      	ldr	r3, [pc, #548]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda2:	ee07 3a90 	vmov	s15, r3
 800cda6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800cdae:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800cfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cdb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cdb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cdc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdc6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800cdca:	e08f      	b.n	800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cdcc:	4b7c      	ldr	r3, [pc, #496]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d005      	beq.n	800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800cdd8:	4b79      	ldr	r3, [pc, #484]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	0f1b      	lsrs	r3, r3, #28
 800cdde:	f003 030f 	and.w	r3, r3, #15
 800cde2:	e006      	b.n	800cdf2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800cde4:	4b76      	ldr	r3, [pc, #472]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cde6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cdea:	041b      	lsls	r3, r3, #16
 800cdec:	0f1b      	lsrs	r3, r3, #28
 800cdee:	f003 030f 	and.w	r3, r3, #15
 800cdf2:	4a76      	ldr	r2, [pc, #472]	@ (800cfcc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800cdf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf8:	ee07 3a90 	vmov	s15, r3
 800cdfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	ee07 3a90 	vmov	s15, r3
 800ce06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	ee07 3a90 	vmov	s15, r3
 800ce14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce18:	ed97 6a02 	vldr	s12, [r7, #8]
 800ce1c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800cfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ce20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ce30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce38:	e058      	b.n	800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	ee07 3a90 	vmov	s15, r3
 800ce40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce44:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ce48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce4c:	4b5c      	ldr	r3, [pc, #368]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ce4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce54:	ee07 3a90 	vmov	s15, r3
 800ce58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce5c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ce60:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ce64:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ce68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ce74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce7c:	e036      	b.n	800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ce7e:	4b50      	ldr	r3, [pc, #320]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ce80:	689b      	ldr	r3, [r3, #8]
 800ce82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d005      	beq.n	800ce96 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800ce8a:	4b4d      	ldr	r3, [pc, #308]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	0f1b      	lsrs	r3, r3, #28
 800ce90:	f003 030f 	and.w	r3, r3, #15
 800ce94:	e006      	b.n	800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800ce96:	4b4a      	ldr	r3, [pc, #296]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ce98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce9c:	041b      	lsls	r3, r3, #16
 800ce9e:	0f1b      	lsrs	r3, r3, #28
 800cea0:	f003 030f 	and.w	r3, r3, #15
 800cea4:	4a49      	ldr	r2, [pc, #292]	@ (800cfcc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800cea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceaa:	ee07 3a90 	vmov	s15, r3
 800ceae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	ee07 3a90 	vmov	s15, r3
 800ceb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	ee07 3a90 	vmov	s15, r3
 800cec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceca:	ed97 6a02 	vldr	s12, [r7, #8]
 800cece:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800cfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ced2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ced6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cede:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cee6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ceea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ceec:	4b34      	ldr	r3, [pc, #208]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ceee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d017      	beq.n	800cf28 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cef8:	4b31      	ldr	r3, [pc, #196]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cefa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cefc:	0a5b      	lsrs	r3, r3, #9
 800cefe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf02:	ee07 3a90 	vmov	s15, r3
 800cf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800cf0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf0e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cf12:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf1e:	ee17 2a90 	vmov	r2, s15
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	601a      	str	r2, [r3, #0]
 800cf26:	e002      	b.n	800cf2e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800cf2e:	4b24      	ldr	r3, [pc, #144]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d017      	beq.n	800cf6a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cf3a:	4b21      	ldr	r3, [pc, #132]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf3e:	0c1b      	lsrs	r3, r3, #16
 800cf40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf44:	ee07 3a90 	vmov	s15, r3
 800cf48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800cf4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf50:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cf54:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf60:	ee17 2a90 	vmov	r2, s15
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	605a      	str	r2, [r3, #4]
 800cf68:	e002      	b.n	800cf70 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800cf70:	4b13      	ldr	r3, [pc, #76]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d017      	beq.n	800cfac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cf7c:	4b10      	ldr	r3, [pc, #64]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf80:	0e1b      	lsrs	r3, r3, #24
 800cf82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf86:	ee07 3a90 	vmov	s15, r3
 800cf8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800cf8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf92:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cf96:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfa2:	ee17 2a90 	vmov	r2, s15
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cfaa:	e002      	b.n	800cfb2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	609a      	str	r2, [r3, #8]
}
 800cfb2:	bf00      	nop
 800cfb4:	3724      	adds	r7, #36	@ 0x24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	46020c00 	.word	0x46020c00
 800cfc4:	4b742400 	.word	0x4b742400
 800cfc8:	46000000 	.word	0x46000000
 800cfcc:	08012654 	.word	0x08012654

0800cfd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08e      	sub	sp, #56	@ 0x38
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800cfda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfde:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800cfe2:	430b      	orrs	r3, r1
 800cfe4:	d145      	bne.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800cfe6:	4ba7      	ldr	r3, [pc, #668]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cfe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cff0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800cff2:	4ba4      	ldr	r3, [pc, #656]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cff8:	f003 0302 	and.w	r3, r3, #2
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d108      	bne.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800d000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d006:	d104      	bne.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800d008:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d00c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d00e:	f001 bb5a 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800d012:	4b9c      	ldr	r3, [pc, #624]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d01c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d020:	d114      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800d022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d028:	d110      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d02a:	4b96      	ldr	r3, [pc, #600]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d02c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d038:	d103      	bne.n	800d042 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800d03a:	23fa      	movs	r3, #250	@ 0xfa
 800d03c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d03e:	f001 bb42 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d042:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d046:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d048:	f001 bb3d 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800d04c:	4b8d      	ldr	r3, [pc, #564]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d054:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d058:	d107      	bne.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800d05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d060:	d103      	bne.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800d062:	4b89      	ldr	r3, [pc, #548]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800d064:	637b      	str	r3, [r7, #52]	@ 0x34
 800d066:	f001 bb2e 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800d06a:	2300      	movs	r3, #0
 800d06c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d06e:	f001 bb2a 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d072:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d076:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d07a:	430b      	orrs	r3, r1
 800d07c:	d151      	bne.n	800d122 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d07e:	4b81      	ldr	r3, [pc, #516]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d080:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d084:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800d088:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08c:	2b80      	cmp	r3, #128	@ 0x80
 800d08e:	d035      	beq.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800d090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d092:	2b80      	cmp	r3, #128	@ 0x80
 800d094:	d841      	bhi.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d098:	2b60      	cmp	r3, #96	@ 0x60
 800d09a:	d02a      	beq.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800d09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09e:	2b60      	cmp	r3, #96	@ 0x60
 800d0a0:	d83b      	bhi.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a4:	2b40      	cmp	r3, #64	@ 0x40
 800d0a6:	d009      	beq.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0aa:	2b40      	cmp	r3, #64	@ 0x40
 800d0ac:	d835      	bhi.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00c      	beq.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b6:	2b20      	cmp	r3, #32
 800d0b8:	d012      	beq.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d0ba:	e02e      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7ff fb77 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0ca:	f001 bafc 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ce:	f107 0318 	add.w	r3, r7, #24
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7ff fcc8 	bl	800ca68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0dc:	f001 baf3 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0e0:	f107 030c 	add.w	r3, r7, #12
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7ff fe19 	bl	800cd1c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0ee:	f001 baea 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d0f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d0f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0f8:	f001 bae5 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d0fc:	4b61      	ldr	r3, [pc, #388]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d108:	d103      	bne.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800d10a:	4b60      	ldr	r3, [pc, #384]	@ (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d10c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d10e:	f001 bada 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d112:	2300      	movs	r3, #0
 800d114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d116:	f001 bad6 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800d11a:	2300      	movs	r3, #0
 800d11c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d11e:	f001 bad2 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d122:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d126:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d12a:	430b      	orrs	r3, r1
 800d12c:	d158      	bne.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d12e:	4b55      	ldr	r3, [pc, #340]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d130:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d134:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d138:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d13c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d140:	d03b      	beq.n	800d1ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800d142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d148:	d846      	bhi.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d150:	d02e      	beq.n	800d1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800d152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d158:	d83e      	bhi.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d160:	d00b      	beq.n	800d17a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800d162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d168:	d836      	bhi.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00d      	beq.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800d170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d176:	d012      	beq.n	800d19e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800d178:	e02e      	b.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d17a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d17e:	4618      	mov	r0, r3
 800d180:	f7ff fb18 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d186:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d188:	f001 ba9d 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d18c:	f107 0318 	add.w	r3, r7, #24
 800d190:	4618      	mov	r0, r3
 800d192:	f7ff fc69 	bl	800ca68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d19a:	f001 ba94 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d19e:	f107 030c 	add.w	r3, r7, #12
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff fdba 	bl	800cd1c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1ac:	f001 ba8b 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d1b0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d1b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1b6:	f001 ba86 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1ba:	4b32      	ldr	r3, [pc, #200]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1c6:	d103      	bne.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800d1c8:	4b30      	ldr	r3, [pc, #192]	@ (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d1ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1cc:	f001 ba7b 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1d4:	f001 ba77 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1dc:	f001 ba73 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800d1e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1e4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d1e8:	430b      	orrs	r3, r1
 800d1ea:	d126      	bne.n	800d23a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800d1ec:	4b25      	ldr	r3, [pc, #148]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d1ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d1f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800d1f8:	4b22      	ldr	r3, [pc, #136]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d204:	d106      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800d206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d103      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800d20c:	4b1f      	ldr	r3, [pc, #124]	@ (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d20e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d210:	f001 ba59 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800d214:	4b1b      	ldr	r3, [pc, #108]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d21c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d220:	d107      	bne.n	800d232 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800d222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d228:	d103      	bne.n	800d232 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800d22a:	4b19      	ldr	r3, [pc, #100]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d22c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d22e:	f001 ba4a 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800d232:	2300      	movs	r3, #0
 800d234:	637b      	str	r3, [r7, #52]	@ 0x34
 800d236:	f001 ba46 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800d23a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d23e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800d242:	430b      	orrs	r3, r1
 800d244:	d16e      	bne.n	800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d246:	4b0f      	ldr	r3, [pc, #60]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d24c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d250:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d254:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d258:	d03d      	beq.n	800d2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800d25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d260:	d85c      	bhi.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d268:	d014      	beq.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800d26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d270:	d854      	bhi.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d274:	2b00      	cmp	r3, #0
 800d276:	d01f      	beq.n	800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800d278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d27e:	d012      	beq.n	800d2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800d280:	e04c      	b.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d282:	bf00      	nop
 800d284:	46020c00 	.word	0x46020c00
 800d288:	0007a120 	.word	0x0007a120
 800d28c:	00f42400 	.word	0x00f42400
 800d290:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d298:	4618      	mov	r0, r3
 800d29a:	f7ff fa8b 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2a2:	f001 ba10 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2a6:	f107 0318 	add.w	r3, r7, #24
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7ff fbdc 	bl	800ca68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2b4:	f001 ba07 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d2b8:	4ba7      	ldr	r3, [pc, #668]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d2c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2c4:	d103      	bne.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800d2c6:	4ba5      	ldr	r3, [pc, #660]	@ (800d55c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d2c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d2ca:	f001 b9fc 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2d2:	f001 b9f8 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d2d6:	4ba0      	ldr	r3, [pc, #640]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f003 0320 	and.w	r3, r3, #32
 800d2de:	2b20      	cmp	r3, #32
 800d2e0:	d118      	bne.n	800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d2e2:	4b9d      	ldr	r3, [pc, #628]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d005      	beq.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800d2ee:	4b9a      	ldr	r3, [pc, #616]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	0e1b      	lsrs	r3, r3, #24
 800d2f4:	f003 030f 	and.w	r3, r3, #15
 800d2f8:	e006      	b.n	800d308 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800d2fa:	4b97      	ldr	r3, [pc, #604]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d2fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d300:	041b      	lsls	r3, r3, #16
 800d302:	0e1b      	lsrs	r3, r3, #24
 800d304:	f003 030f 	and.w	r3, r3, #15
 800d308:	4a95      	ldr	r2, [pc, #596]	@ (800d560 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d30e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d310:	f001 b9d9 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d314:	2300      	movs	r3, #0
 800d316:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d318:	f001 b9d5 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800d31c:	2300      	movs	r3, #0
 800d31e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d320:	f001 b9d1 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d324:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d328:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800d32c:	430b      	orrs	r3, r1
 800d32e:	d17f      	bne.n	800d430 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d330:	4b89      	ldr	r3, [pc, #548]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d332:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d33a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800d33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d165      	bne.n	800d40e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d342:	4b85      	ldr	r3, [pc, #532]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d348:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d34c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d350:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d354:	d034      	beq.n	800d3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800d356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d358:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d35c:	d853      	bhi.n	800d406 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800d35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d364:	d00b      	beq.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800d366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d368:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d36c:	d84b      	bhi.n	800d406 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800d36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d370:	2b00      	cmp	r3, #0
 800d372:	d016      	beq.n	800d3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800d374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d376:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d37a:	d009      	beq.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800d37c:	e043      	b.n	800d406 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d37e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fa16 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d38c:	f001 b99b 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d390:	f107 0318 	add.w	r3, r7, #24
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff fb67 	bl	800ca68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d39e:	f001 b992 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d3a2:	4b6d      	ldr	r3, [pc, #436]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d3aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d3ae:	d103      	bne.n	800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800d3b0:	4b6a      	ldr	r3, [pc, #424]	@ (800d55c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d3b2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d3b4:	f001 b987 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d3bc:	f001 b983 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d3c0:	4b65      	ldr	r3, [pc, #404]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 0320 	and.w	r3, r3, #32
 800d3c8:	2b20      	cmp	r3, #32
 800d3ca:	d118      	bne.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3cc:	4b62      	ldr	r3, [pc, #392]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d005      	beq.n	800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800d3d8:	4b5f      	ldr	r3, [pc, #380]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	0e1b      	lsrs	r3, r3, #24
 800d3de:	f003 030f 	and.w	r3, r3, #15
 800d3e2:	e006      	b.n	800d3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800d3e4:	4b5c      	ldr	r3, [pc, #368]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d3e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3ea:	041b      	lsls	r3, r3, #16
 800d3ec:	0e1b      	lsrs	r3, r3, #24
 800d3ee:	f003 030f 	and.w	r3, r3, #15
 800d3f2:	4a5b      	ldr	r2, [pc, #364]	@ (800d560 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d3f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3f8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d3fa:	f001 b964 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d3fe:	2300      	movs	r3, #0
 800d400:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d402:	f001 b960 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800d406:	2300      	movs	r3, #0
 800d408:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d40a:	f001 b95c 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800d40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d410:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d414:	d108      	bne.n	800d428 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff f9ca 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d422:	637b      	str	r3, [r7, #52]	@ 0x34
 800d424:	f001 b94f 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800d428:	2300      	movs	r3, #0
 800d42a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d42c:	f001 b94b 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800d430:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d434:	1e51      	subs	r1, r2, #1
 800d436:	430b      	orrs	r3, r1
 800d438:	d136      	bne.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800d43a:	4b47      	ldr	r3, [pc, #284]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d43c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d440:	f003 0303 	and.w	r3, r3, #3
 800d444:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800d446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d104      	bne.n	800d456 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800d44c:	f7fe f9cc 	bl	800b7e8 <HAL_RCC_GetPCLK2Freq>
 800d450:	6378      	str	r0, [r7, #52]	@ 0x34
 800d452:	f001 b938 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800d456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d104      	bne.n	800d466 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d45c:	f7fe f894 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800d460:	6378      	str	r0, [r7, #52]	@ 0x34
 800d462:	f001 b930 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800d466:	4b3c      	ldr	r3, [pc, #240]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d46e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d472:	d106      	bne.n	800d482 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800d474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d476:	2b02      	cmp	r3, #2
 800d478:	d103      	bne.n	800d482 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800d47a:	4b3a      	ldr	r3, [pc, #232]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d47c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d47e:	f001 b922 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800d482:	4b35      	ldr	r3, [pc, #212]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d488:	f003 0302 	and.w	r3, r3, #2
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d107      	bne.n	800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800d490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d492:	2b03      	cmp	r3, #3
 800d494:	d104      	bne.n	800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800d496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d49a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d49c:	f001 b913 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4a4:	f001 b90f 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800d4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ac:	1e91      	subs	r1, r2, #2
 800d4ae:	430b      	orrs	r3, r1
 800d4b0:	d136      	bne.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800d4b2:	4b29      	ldr	r3, [pc, #164]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4b8:	f003 030c 	and.w	r3, r3, #12
 800d4bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800d4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d104      	bne.n	800d4ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d4c4:	f7fe f97c 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800d4c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d4ca:	f001 b8fc 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d0:	2b04      	cmp	r3, #4
 800d4d2:	d104      	bne.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d4d4:	f7fe f858 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800d4d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d4da:	f001 b8f4 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800d4de:	4b1e      	ldr	r3, [pc, #120]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4ea:	d106      	bne.n	800d4fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ee:	2b08      	cmp	r3, #8
 800d4f0:	d103      	bne.n	800d4fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800d4f2:	4b1c      	ldr	r3, [pc, #112]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d4f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4f6:	f001 b8e6 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800d4fa:	4b17      	ldr	r3, [pc, #92]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d500:	f003 0302 	and.w	r3, r3, #2
 800d504:	2b02      	cmp	r3, #2
 800d506:	d107      	bne.n	800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800d508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d50a:	2b0c      	cmp	r3, #12
 800d50c:	d104      	bne.n	800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800d50e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d512:	637b      	str	r3, [r7, #52]	@ 0x34
 800d514:	f001 b8d7 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800d518:	2300      	movs	r3, #0
 800d51a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d51c:	f001 b8d3 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800d520:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d524:	1f11      	subs	r1, r2, #4
 800d526:	430b      	orrs	r3, r1
 800d528:	d13f      	bne.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800d52a:	4b0b      	ldr	r3, [pc, #44]	@ (800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d52c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d530:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d534:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800d536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d104      	bne.n	800d546 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d53c:	f7fe f940 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800d540:	6378      	str	r0, [r7, #52]	@ 0x34
 800d542:	f001 b8c0 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800d546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d548:	2b10      	cmp	r3, #16
 800d54a:	d10d      	bne.n	800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d54c:	f7fe f81c 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800d550:	6378      	str	r0, [r7, #52]	@ 0x34
 800d552:	f001 b8b8 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d556:	bf00      	nop
 800d558:	46020c00 	.word	0x46020c00
 800d55c:	02dc6c00 	.word	0x02dc6c00
 800d560:	08012654 	.word	0x08012654
 800d564:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800d568:	4ba8      	ldr	r3, [pc, #672]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d574:	d106      	bne.n	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800d576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d578:	2b20      	cmp	r3, #32
 800d57a:	d103      	bne.n	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800d57c:	4ba4      	ldr	r3, [pc, #656]	@ (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d57e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d580:	f001 b8a1 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800d584:	4ba1      	ldr	r3, [pc, #644]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d58a:	f003 0302 	and.w	r3, r3, #2
 800d58e:	2b02      	cmp	r3, #2
 800d590:	d107      	bne.n	800d5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d594:	2b30      	cmp	r3, #48	@ 0x30
 800d596:	d104      	bne.n	800d5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800d598:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d59c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d59e:	f001 b892 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5a6:	f001 b88e 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800d5aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5ae:	f1a2 0108 	sub.w	r1, r2, #8
 800d5b2:	430b      	orrs	r3, r1
 800d5b4:	d136      	bne.n	800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800d5b6:	4b95      	ldr	r3, [pc, #596]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d5b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d5c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d104      	bne.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d5c8:	f7fe f8fa 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800d5cc:	6378      	str	r0, [r7, #52]	@ 0x34
 800d5ce:	f001 b87a 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d4:	2b40      	cmp	r3, #64	@ 0x40
 800d5d6:	d104      	bne.n	800d5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d5d8:	f7fd ffd6 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800d5dc:	6378      	str	r0, [r7, #52]	@ 0x34
 800d5de:	f001 b872 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800d5e2:	4b8a      	ldr	r3, [pc, #552]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5ee:	d106      	bne.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f2:	2b80      	cmp	r3, #128	@ 0x80
 800d5f4:	d103      	bne.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800d5f6:	4b86      	ldr	r3, [pc, #536]	@ (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d5f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5fa:	f001 b864 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800d5fe:	4b83      	ldr	r3, [pc, #524]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b02      	cmp	r3, #2
 800d60a:	d107      	bne.n	800d61c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800d60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d610:	d104      	bne.n	800d61c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800d612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d616:	637b      	str	r3, [r7, #52]	@ 0x34
 800d618:	f001 b855 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800d61c:	2300      	movs	r3, #0
 800d61e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d620:	f001 b851 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800d624:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d628:	f1a2 0110 	sub.w	r1, r2, #16
 800d62c:	430b      	orrs	r3, r1
 800d62e:	d139      	bne.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800d630:	4b76      	ldr	r3, [pc, #472]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d63a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800d63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d104      	bne.n	800d64c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d642:	f7fe f8bd 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800d646:	6378      	str	r0, [r7, #52]	@ 0x34
 800d648:	f001 b83d 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800d64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d652:	d104      	bne.n	800d65e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d654:	f7fd ff98 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800d658:	6378      	str	r0, [r7, #52]	@ 0x34
 800d65a:	f001 b834 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800d65e:	4b6b      	ldr	r3, [pc, #428]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d66a:	d107      	bne.n	800d67c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800d66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d672:	d103      	bne.n	800d67c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800d674:	4b66      	ldr	r3, [pc, #408]	@ (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d676:	637b      	str	r3, [r7, #52]	@ 0x34
 800d678:	f001 b825 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800d67c:	4b63      	ldr	r3, [pc, #396]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d67e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d682:	f003 0302 	and.w	r3, r3, #2
 800d686:	2b02      	cmp	r3, #2
 800d688:	d108      	bne.n	800d69c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800d68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d690:	d104      	bne.n	800d69c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800d692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d696:	637b      	str	r3, [r7, #52]	@ 0x34
 800d698:	f001 b815 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d69c:	2300      	movs	r3, #0
 800d69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6a0:	f001 b811 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800d6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6a8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800d6ac:	430b      	orrs	r3, r1
 800d6ae:	d139      	bne.n	800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800d6b0:	4b56      	ldr	r3, [pc, #344]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d6b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d6b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d6ba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800d6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d104      	bne.n	800d6cc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d6c2:	f7fe f87d 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800d6c6:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6c8:	f000 bffd 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800d6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6d2:	d104      	bne.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d6d4:	f7fd ff58 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800d6d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6da:	f000 bff4 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800d6de:	4b4b      	ldr	r3, [pc, #300]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6ea:	d107      	bne.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d6f2:	d103      	bne.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800d6f4:	4b46      	ldr	r3, [pc, #280]	@ (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d6f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6f8:	f000 bfe5 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800d6fc:	4b43      	ldr	r3, [pc, #268]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d6fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d702:	f003 0302 	and.w	r3, r3, #2
 800d706:	2b02      	cmp	r3, #2
 800d708:	d108      	bne.n	800d71c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800d70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d710:	d104      	bne.n	800d71c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800d712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d716:	637b      	str	r3, [r7, #52]	@ 0x34
 800d718:	f000 bfd5 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d71c:	2300      	movs	r3, #0
 800d71e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d720:	f000 bfd1 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800d724:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d728:	f1a2 0120 	sub.w	r1, r2, #32
 800d72c:	430b      	orrs	r3, r1
 800d72e:	d158      	bne.n	800d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800d730:	4b36      	ldr	r3, [pc, #216]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d736:	f003 0307 	and.w	r3, r3, #7
 800d73a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800d73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d104      	bne.n	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800d742:	f7fe f865 	bl	800b810 <HAL_RCC_GetPCLK3Freq>
 800d746:	6378      	str	r0, [r7, #52]	@ 0x34
 800d748:	f000 bfbd 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800d74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d104      	bne.n	800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d752:	f7fd ff19 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800d756:	6378      	str	r0, [r7, #52]	@ 0x34
 800d758:	f000 bfb5 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800d75c:	4b2b      	ldr	r3, [pc, #172]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d768:	d106      	bne.n	800d778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800d76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76c:	2b02      	cmp	r3, #2
 800d76e:	d103      	bne.n	800d778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800d770:	4b27      	ldr	r3, [pc, #156]	@ (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d772:	637b      	str	r3, [r7, #52]	@ 0x34
 800d774:	f000 bfa7 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800d778:	4b24      	ldr	r3, [pc, #144]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d77a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d77e:	f003 0302 	and.w	r3, r3, #2
 800d782:	2b02      	cmp	r3, #2
 800d784:	d107      	bne.n	800d796 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800d786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d788:	2b03      	cmp	r3, #3
 800d78a:	d104      	bne.n	800d796 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800d78c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d790:	637b      	str	r3, [r7, #52]	@ 0x34
 800d792:	f000 bf98 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800d796:	4b1d      	ldr	r3, [pc, #116]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f003 0320 	and.w	r3, r3, #32
 800d79e:	2b20      	cmp	r3, #32
 800d7a0:	d11b      	bne.n	800d7da <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a4:	2b04      	cmp	r3, #4
 800d7a6:	d118      	bne.n	800d7da <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d7a8:	4b18      	ldr	r3, [pc, #96]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d005      	beq.n	800d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800d7b4:	4b15      	ldr	r3, [pc, #84]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	0e1b      	lsrs	r3, r3, #24
 800d7ba:	f003 030f 	and.w	r3, r3, #15
 800d7be:	e006      	b.n	800d7ce <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800d7c0:	4b12      	ldr	r3, [pc, #72]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d7c6:	041b      	lsls	r3, r3, #16
 800d7c8:	0e1b      	lsrs	r3, r3, #24
 800d7ca:	f003 030f 	and.w	r3, r3, #15
 800d7ce:	4a11      	ldr	r2, [pc, #68]	@ (800d814 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7d6:	f000 bf76 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7de:	f000 bf72 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800d7e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7e6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d7ea:	430b      	orrs	r3, r1
 800d7ec:	d172      	bne.n	800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800d7ee:	4b07      	ldr	r3, [pc, #28]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d7f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d7f8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d800:	d10a      	bne.n	800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d802:	f7fd fec1 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800d806:	6378      	str	r0, [r7, #52]	@ 0x34
 800d808:	f000 bf5d 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d80c:	46020c00 	.word	0x46020c00
 800d810:	00f42400 	.word	0x00f42400
 800d814:	08012654 	.word	0x08012654
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800d818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d81e:	d108      	bne.n	800d832 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d820:	f107 0318 	add.w	r3, r7, #24
 800d824:	4618      	mov	r0, r3
 800d826:	f7ff f91f 	bl	800ca68 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800d82a:	6a3b      	ldr	r3, [r7, #32]
 800d82c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d82e:	f000 bf4a 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	2b00      	cmp	r3, #0
 800d836:	d104      	bne.n	800d842 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800d838:	f7fd ffa8 	bl	800b78c <HAL_RCC_GetHCLKFreq>
 800d83c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d83e:	f000 bf42 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800d842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d844:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d848:	d122      	bne.n	800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d84a:	4bb0      	ldr	r3, [pc, #704]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f003 0320 	and.w	r3, r3, #32
 800d852:	2b20      	cmp	r3, #32
 800d854:	d118      	bne.n	800d888 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d856:	4bad      	ldr	r3, [pc, #692]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d005      	beq.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800d862:	4baa      	ldr	r3, [pc, #680]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	0e1b      	lsrs	r3, r3, #24
 800d868:	f003 030f 	and.w	r3, r3, #15
 800d86c:	e006      	b.n	800d87c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800d86e:	4ba7      	ldr	r3, [pc, #668]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d874:	041b      	lsls	r3, r3, #16
 800d876:	0e1b      	lsrs	r3, r3, #24
 800d878:	f003 030f 	and.w	r3, r3, #15
 800d87c:	4aa4      	ldr	r2, [pc, #656]	@ (800db10 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d87e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d882:	637b      	str	r3, [r7, #52]	@ 0x34
 800d884:	f000 bf1f 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d888:	2300      	movs	r3, #0
 800d88a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d88c:	f000 bf1b 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800d890:	4b9e      	ldr	r3, [pc, #632]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d89c:	d107      	bne.n	800d8ae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800d89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8a4:	d103      	bne.n	800d8ae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800d8a6:	4b9b      	ldr	r3, [pc, #620]	@ (800db14 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d8a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8aa:	f000 bf0c 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800d8ae:	4b97      	ldr	r3, [pc, #604]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8ba:	d107      	bne.n	800d8cc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d8c2:	d103      	bne.n	800d8cc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800d8c4:	4b93      	ldr	r3, [pc, #588]	@ (800db14 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8c8:	f000 befd 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8d0:	f000 bef9 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800d8d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8d8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d8dc:	430b      	orrs	r3, r1
 800d8de:	d158      	bne.n	800d992 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800d8e0:	4b8a      	ldr	r3, [pc, #552]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d8e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d8e6:	f003 0307 	and.w	r3, r3, #7
 800d8ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ee:	2b04      	cmp	r3, #4
 800d8f0:	d84b      	bhi.n	800d98a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800d8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800d8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f8:	0800d931 	.word	0x0800d931
 800d8fc:	0800d90d 	.word	0x0800d90d
 800d900:	0800d91f 	.word	0x0800d91f
 800d904:	0800d93b 	.word	0x0800d93b
 800d908:	0800d945 	.word	0x0800d945
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d90c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d910:	4618      	mov	r0, r3
 800d912:	f7fe ff4f 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d91a:	f000 bed4 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d91e:	f107 030c 	add.w	r3, r7, #12
 800d922:	4618      	mov	r0, r3
 800d924:	f7ff f9fa 	bl	800cd1c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d92c:	f000 becb 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d930:	f7fd ff2c 	bl	800b78c <HAL_RCC_GetHCLKFreq>
 800d934:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d936:	f000 bec6 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d93a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d93e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d940:	f000 bec1 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d944:	4b71      	ldr	r3, [pc, #452]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f003 0320 	and.w	r3, r3, #32
 800d94c:	2b20      	cmp	r3, #32
 800d94e:	d118      	bne.n	800d982 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d950:	4b6e      	ldr	r3, [pc, #440]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d005      	beq.n	800d968 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800d95c:	4b6b      	ldr	r3, [pc, #428]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	0e1b      	lsrs	r3, r3, #24
 800d962:	f003 030f 	and.w	r3, r3, #15
 800d966:	e006      	b.n	800d976 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800d968:	4b68      	ldr	r3, [pc, #416]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d96a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d96e:	041b      	lsls	r3, r3, #16
 800d970:	0e1b      	lsrs	r3, r3, #24
 800d972:	f003 030f 	and.w	r3, r3, #15
 800d976:	4a66      	ldr	r2, [pc, #408]	@ (800db10 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d97c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d97e:	f000 bea2 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d982:	2300      	movs	r3, #0
 800d984:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d986:	f000 be9e 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d98a:	2300      	movs	r3, #0
 800d98c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d98e:	f000 be9a 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800d992:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d996:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800d99a:	430b      	orrs	r3, r1
 800d99c:	d167      	bne.n	800da6e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800d99e:	4b5b      	ldr	r3, [pc, #364]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d9a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9a4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d9a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9b0:	d036      	beq.n	800da20 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9b8:	d855      	bhi.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d9c0:	d029      	beq.n	800da16 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d9c8:	d84d      	bhi.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9d0:	d013      	beq.n	800d9fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9d8:	d845      	bhi.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d015      	beq.n	800da0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800d9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9e6:	d13e      	bne.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d9e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fe fee1 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9f6:	f000 be66 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9fa:	f107 030c 	add.w	r3, r7, #12
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7ff f98c 	bl	800cd1c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da08:	f000 be5d 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800da0c:	f7fd febe 	bl	800b78c <HAL_RCC_GetHCLKFreq>
 800da10:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da12:	f000 be58 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800da16:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800da1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da1c:	f000 be53 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800da20:	4b3a      	ldr	r3, [pc, #232]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f003 0320 	and.w	r3, r3, #32
 800da28:	2b20      	cmp	r3, #32
 800da2a:	d118      	bne.n	800da5e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800da2c:	4b37      	ldr	r3, [pc, #220]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da34:	2b00      	cmp	r3, #0
 800da36:	d005      	beq.n	800da44 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800da38:	4b34      	ldr	r3, [pc, #208]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	0e1b      	lsrs	r3, r3, #24
 800da3e:	f003 030f 	and.w	r3, r3, #15
 800da42:	e006      	b.n	800da52 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800da44:	4b31      	ldr	r3, [pc, #196]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da4a:	041b      	lsls	r3, r3, #16
 800da4c:	0e1b      	lsrs	r3, r3, #24
 800da4e:	f003 030f 	and.w	r3, r3, #15
 800da52:	4a2f      	ldr	r2, [pc, #188]	@ (800db10 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800da54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da58:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800da5a:	f000 be34 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800da5e:	2300      	movs	r3, #0
 800da60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da62:	f000 be30 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800da66:	2300      	movs	r3, #0
 800da68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da6a:	f000 be2c 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800da6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da72:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800da76:	430b      	orrs	r3, r1
 800da78:	d152      	bne.n	800db20 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800da7a:	4b24      	ldr	r3, [pc, #144]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800da80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800da84:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800da86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d104      	bne.n	800da96 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800da8c:	f7fd fe98 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800da90:	6378      	str	r0, [r7, #52]	@ 0x34
 800da92:	f000 be18 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800da96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da9c:	d104      	bne.n	800daa8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800da9e:	f7fd fd73 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800daa2:	6378      	str	r0, [r7, #52]	@ 0x34
 800daa4:	f000 be0f 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800daa8:	4b18      	ldr	r3, [pc, #96]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dab4:	d107      	bne.n	800dac6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800dab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dabc:	d103      	bne.n	800dac6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800dabe:	4b15      	ldr	r3, [pc, #84]	@ (800db14 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800dac0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dac2:	f000 be00 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800dac6:	4b11      	ldr	r3, [pc, #68]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f003 0320 	and.w	r3, r3, #32
 800dace:	2b20      	cmp	r3, #32
 800dad0:	d122      	bne.n	800db18 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800dad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dad8:	d11e      	bne.n	800db18 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dada:	4b0c      	ldr	r3, [pc, #48]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d005      	beq.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800dae6:	4b09      	ldr	r3, [pc, #36]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dae8:	689b      	ldr	r3, [r3, #8]
 800daea:	0e1b      	lsrs	r3, r3, #24
 800daec:	f003 030f 	and.w	r3, r3, #15
 800daf0:	e006      	b.n	800db00 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800daf2:	4b06      	ldr	r3, [pc, #24]	@ (800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800daf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800daf8:	041b      	lsls	r3, r3, #16
 800dafa:	0e1b      	lsrs	r3, r3, #24
 800dafc:	f003 030f 	and.w	r3, r3, #15
 800db00:	4a03      	ldr	r2, [pc, #12]	@ (800db10 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800db02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db06:	637b      	str	r3, [r7, #52]	@ 0x34
 800db08:	f000 bddd 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800db0c:	46020c00 	.word	0x46020c00
 800db10:	08012654 	.word	0x08012654
 800db14:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800db18:	2300      	movs	r3, #0
 800db1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800db1c:	f000 bdd3 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800db20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db24:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800db28:	430b      	orrs	r3, r1
 800db2a:	d14c      	bne.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800db2c:	4ba8      	ldr	r3, [pc, #672]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800db32:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800db36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800db38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d104      	bne.n	800db48 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800db3e:	f7fd fe3f 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800db42:	6378      	str	r0, [r7, #52]	@ 0x34
 800db44:	f000 bdbf 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800db48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db4e:	d104      	bne.n	800db5a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800db50:	f7fd fd1a 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800db54:	6378      	str	r0, [r7, #52]	@ 0x34
 800db56:	f000 bdb6 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800db5a:	4b9d      	ldr	r3, [pc, #628]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db66:	d107      	bne.n	800db78 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800db68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db6e:	d103      	bne.n	800db78 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800db70:	4b98      	ldr	r3, [pc, #608]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800db72:	637b      	str	r3, [r7, #52]	@ 0x34
 800db74:	f000 bda7 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800db78:	4b95      	ldr	r3, [pc, #596]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f003 0320 	and.w	r3, r3, #32
 800db80:	2b20      	cmp	r3, #32
 800db82:	d11c      	bne.n	800dbbe <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800db84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800db8a:	d118      	bne.n	800dbbe <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800db8c:	4b90      	ldr	r3, [pc, #576]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db8e:	689b      	ldr	r3, [r3, #8]
 800db90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db94:	2b00      	cmp	r3, #0
 800db96:	d005      	beq.n	800dba4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800db98:	4b8d      	ldr	r3, [pc, #564]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	0e1b      	lsrs	r3, r3, #24
 800db9e:	f003 030f 	and.w	r3, r3, #15
 800dba2:	e006      	b.n	800dbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800dba4:	4b8a      	ldr	r3, [pc, #552]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dbaa:	041b      	lsls	r3, r3, #16
 800dbac:	0e1b      	lsrs	r3, r3, #24
 800dbae:	f003 030f 	and.w	r3, r3, #15
 800dbb2:	4a89      	ldr	r2, [pc, #548]	@ (800ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbba:	f000 bd84 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbc2:	f000 bd80 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800dbc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800dbce:	430b      	orrs	r3, r1
 800dbd0:	d158      	bne.n	800dc84 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800dbd2:	4b7f      	ldr	r3, [pc, #508]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dbd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dbd8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dbdc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe0:	2bc0      	cmp	r3, #192	@ 0xc0
 800dbe2:	d028      	beq.n	800dc36 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe6:	2bc0      	cmp	r3, #192	@ 0xc0
 800dbe8:	d848      	bhi.n	800dc7c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800dbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbec:	2b80      	cmp	r3, #128	@ 0x80
 800dbee:	d00e      	beq.n	800dc0e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800dbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf2:	2b80      	cmp	r3, #128	@ 0x80
 800dbf4:	d842      	bhi.n	800dc7c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d003      	beq.n	800dc04 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800dbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfe:	2b40      	cmp	r3, #64	@ 0x40
 800dc00:	d014      	beq.n	800dc2c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800dc02:	e03b      	b.n	800dc7c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800dc04:	f7fd fe04 	bl	800b810 <HAL_RCC_GetPCLK3Freq>
 800dc08:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dc0a:	f000 bd5c 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dc0e:	4b70      	ldr	r3, [pc, #448]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc1a:	d103      	bne.n	800dc24 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800dc1c:	4b6d      	ldr	r3, [pc, #436]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800dc1e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dc20:	f000 bd51 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dc24:	2300      	movs	r3, #0
 800dc26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc28:	f000 bd4d 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800dc2c:	f7fd fcac 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800dc30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dc32:	f000 bd48 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dc36:	4b66      	ldr	r3, [pc, #408]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f003 0320 	and.w	r3, r3, #32
 800dc3e:	2b20      	cmp	r3, #32
 800dc40:	d118      	bne.n	800dc74 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dc42:	4b63      	ldr	r3, [pc, #396]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d005      	beq.n	800dc5a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800dc4e:	4b60      	ldr	r3, [pc, #384]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	0e1b      	lsrs	r3, r3, #24
 800dc54:	f003 030f 	and.w	r3, r3, #15
 800dc58:	e006      	b.n	800dc68 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800dc5a:	4b5d      	ldr	r3, [pc, #372]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dc60:	041b      	lsls	r3, r3, #16
 800dc62:	0e1b      	lsrs	r3, r3, #24
 800dc64:	f003 030f 	and.w	r3, r3, #15
 800dc68:	4a5b      	ldr	r2, [pc, #364]	@ (800ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dc6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dc70:	f000 bd29 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dc74:	2300      	movs	r3, #0
 800dc76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc78:	f000 bd25 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc80:	f000 bd21 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800dc84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc88:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800dc8c:	430b      	orrs	r3, r1
 800dc8e:	d14c      	bne.n	800dd2a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800dc90:	4b4f      	ldr	r3, [pc, #316]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dc96:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800dc9a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800dc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d104      	bne.n	800dcac <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dca2:	f7fd fd8d 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800dca6:	6378      	str	r0, [r7, #52]	@ 0x34
 800dca8:	f000 bd0d 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800dcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dcb2:	d104      	bne.n	800dcbe <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dcb4:	f7fd fc68 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800dcb8:	6378      	str	r0, [r7, #52]	@ 0x34
 800dcba:	f000 bd04 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800dcbe:	4b44      	ldr	r3, [pc, #272]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dcc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcca:	d107      	bne.n	800dcdc <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800dccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dcd2:	d103      	bne.n	800dcdc <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800dcd4:	4b3f      	ldr	r3, [pc, #252]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800dcd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcd8:	f000 bcf5 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800dcdc:	4b3c      	ldr	r3, [pc, #240]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f003 0320 	and.w	r3, r3, #32
 800dce4:	2b20      	cmp	r3, #32
 800dce6:	d11c      	bne.n	800dd22 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800dce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800dcee:	d118      	bne.n	800dd22 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dcf0:	4b37      	ldr	r3, [pc, #220]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d005      	beq.n	800dd08 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800dcfc:	4b34      	ldr	r3, [pc, #208]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	0e1b      	lsrs	r3, r3, #24
 800dd02:	f003 030f 	and.w	r3, r3, #15
 800dd06:	e006      	b.n	800dd16 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800dd08:	4b31      	ldr	r3, [pc, #196]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dd0e:	041b      	lsls	r3, r3, #16
 800dd10:	0e1b      	lsrs	r3, r3, #24
 800dd12:	f003 030f 	and.w	r3, r3, #15
 800dd16:	4a30      	ldr	r2, [pc, #192]	@ (800ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd1e:	f000 bcd2 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800dd22:	2300      	movs	r3, #0
 800dd24:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd26:	f000 bcce 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800dd2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd2e:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800dd32:	430b      	orrs	r3, r1
 800dd34:	d152      	bne.n	800dddc <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800dd36:	4b26      	ldr	r3, [pc, #152]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd3c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800dd40:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800dd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d104      	bne.n	800dd52 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dd48:	f7fd fd3a 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800dd4c:	6378      	str	r0, [r7, #52]	@ 0x34
 800dd4e:	f000 bcba 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800dd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd58:	d104      	bne.n	800dd64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dd5a:	f7fd fc15 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800dd5e:	6378      	str	r0, [r7, #52]	@ 0x34
 800dd60:	f000 bcb1 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800dd64:	4b1a      	ldr	r3, [pc, #104]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd70:	d107      	bne.n	800dd82 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800dd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd78:	d103      	bne.n	800dd82 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800dd7a:	4b16      	ldr	r3, [pc, #88]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800dd7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd7e:	f000 bca2 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800dd82:	4b13      	ldr	r3, [pc, #76]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f003 0320 	and.w	r3, r3, #32
 800dd8a:	2b20      	cmp	r3, #32
 800dd8c:	d11c      	bne.n	800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dd94:	d118      	bne.n	800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dd96:	4b0e      	ldr	r3, [pc, #56]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d005      	beq.n	800ddae <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800dda2:	4b0b      	ldr	r3, [pc, #44]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	0e1b      	lsrs	r3, r3, #24
 800dda8:	f003 030f 	and.w	r3, r3, #15
 800ddac:	e006      	b.n	800ddbc <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800ddae:	4b08      	ldr	r3, [pc, #32]	@ (800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ddb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ddb4:	041b      	lsls	r3, r3, #16
 800ddb6:	0e1b      	lsrs	r3, r3, #24
 800ddb8:	f003 030f 	and.w	r3, r3, #15
 800ddbc:	4a06      	ldr	r2, [pc, #24]	@ (800ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ddbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddc4:	f000 bc7f 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddcc:	f000 bc7b 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ddd0:	46020c00 	.word	0x46020c00
 800ddd4:	00f42400 	.word	0x00f42400
 800ddd8:	08012654 	.word	0x08012654
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800dddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dde0:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800dde4:	430b      	orrs	r3, r1
 800dde6:	d14c      	bne.n	800de82 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800dde8:	4ba6      	ldr	r3, [pc, #664]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ddea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ddee:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ddf2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800ddf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d104      	bne.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ddfa:	f7fd fce1 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800ddfe:	6378      	str	r0, [r7, #52]	@ 0x34
 800de00:	f000 bc61 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800de04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800de0a:	d104      	bne.n	800de16 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800de0c:	f7fd fbbc 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800de10:	6378      	str	r0, [r7, #52]	@ 0x34
 800de12:	f000 bc58 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800de16:	4b9b      	ldr	r3, [pc, #620]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de22:	d107      	bne.n	800de34 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800de24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de2a:	d103      	bne.n	800de34 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800de2c:	4b96      	ldr	r3, [pc, #600]	@ (800e088 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800de2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800de30:	f000 bc49 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800de34:	4b93      	ldr	r3, [pc, #588]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f003 0320 	and.w	r3, r3, #32
 800de3c:	2b20      	cmp	r3, #32
 800de3e:	d11c      	bne.n	800de7a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800de40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de42:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800de46:	d118      	bne.n	800de7a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800de48:	4b8e      	ldr	r3, [pc, #568]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de50:	2b00      	cmp	r3, #0
 800de52:	d005      	beq.n	800de60 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800de54:	4b8b      	ldr	r3, [pc, #556]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	0e1b      	lsrs	r3, r3, #24
 800de5a:	f003 030f 	and.w	r3, r3, #15
 800de5e:	e006      	b.n	800de6e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800de60:	4b88      	ldr	r3, [pc, #544]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800de66:	041b      	lsls	r3, r3, #16
 800de68:	0e1b      	lsrs	r3, r3, #24
 800de6a:	f003 030f 	and.w	r3, r3, #15
 800de6e:	4a87      	ldr	r2, [pc, #540]	@ (800e08c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800de70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de74:	637b      	str	r3, [r7, #52]	@ 0x34
 800de76:	f000 bc26 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800de7a:	2300      	movs	r3, #0
 800de7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800de7e:	f000 bc22 	b.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800de82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de86:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800de8a:	430b      	orrs	r3, r1
 800de8c:	d164      	bne.n	800df58 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800de8e:	4b7d      	ldr	r3, [pc, #500]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800de98:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800de9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d120      	bne.n	800dee2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dea0:	4b78      	ldr	r3, [pc, #480]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f003 0320 	and.w	r3, r3, #32
 800dea8:	2b20      	cmp	r3, #32
 800deaa:	d117      	bne.n	800dedc <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800deac:	4b75      	ldr	r3, [pc, #468]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d005      	beq.n	800dec4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800deb8:	4b72      	ldr	r3, [pc, #456]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	0e1b      	lsrs	r3, r3, #24
 800debe:	f003 030f 	and.w	r3, r3, #15
 800dec2:	e006      	b.n	800ded2 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800dec4:	4b6f      	ldr	r3, [pc, #444]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800deca:	041b      	lsls	r3, r3, #16
 800decc:	0e1b      	lsrs	r3, r3, #24
 800dece:	f003 030f 	and.w	r3, r3, #15
 800ded2:	4a6e      	ldr	r2, [pc, #440]	@ (800e08c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800ded4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ded8:	637b      	str	r3, [r7, #52]	@ 0x34
 800deda:	e3f4      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800dedc:	2300      	movs	r3, #0
 800dede:	637b      	str	r3, [r7, #52]	@ 0x34
 800dee0:	e3f1      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800dee2:	4b68      	ldr	r3, [pc, #416]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800deec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800def0:	d112      	bne.n	800df18 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800def2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800def8:	d10e      	bne.n	800df18 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800defa:	4b62      	ldr	r3, [pc, #392]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800defc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800df04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df08:	d102      	bne.n	800df10 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800df0a:	23fa      	movs	r3, #250	@ 0xfa
 800df0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800df0e:	e3da      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800df10:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800df14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800df16:	e3d6      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800df18:	4b5a      	ldr	r3, [pc, #360]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800df20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df24:	d106      	bne.n	800df34 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800df26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df2c:	d102      	bne.n	800df34 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800df2e:	4b56      	ldr	r3, [pc, #344]	@ (800e088 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800df30:	637b      	str	r3, [r7, #52]	@ 0x34
 800df32:	e3c8      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800df34:	4b53      	ldr	r3, [pc, #332]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df3a:	f003 0302 	and.w	r3, r3, #2
 800df3e:	2b02      	cmp	r3, #2
 800df40:	d107      	bne.n	800df52 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800df42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800df48:	d103      	bne.n	800df52 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800df4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800df50:	e3b9      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800df52:	2300      	movs	r3, #0
 800df54:	637b      	str	r3, [r7, #52]	@ 0x34
 800df56:	e3b6      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800df58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df5c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800df60:	430b      	orrs	r3, r1
 800df62:	d164      	bne.n	800e02e <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800df64:	4b47      	ldr	r3, [pc, #284]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800df6a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800df6e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800df70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df72:	2b00      	cmp	r3, #0
 800df74:	d120      	bne.n	800dfb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800df76:	4b43      	ldr	r3, [pc, #268]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f003 0320 	and.w	r3, r3, #32
 800df7e:	2b20      	cmp	r3, #32
 800df80:	d117      	bne.n	800dfb2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800df82:	4b40      	ldr	r3, [pc, #256]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df84:	689b      	ldr	r3, [r3, #8]
 800df86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d005      	beq.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800df8e:	4b3d      	ldr	r3, [pc, #244]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	0e1b      	lsrs	r3, r3, #24
 800df94:	f003 030f 	and.w	r3, r3, #15
 800df98:	e006      	b.n	800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800df9a:	4b3a      	ldr	r3, [pc, #232]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dfa0:	041b      	lsls	r3, r3, #16
 800dfa2:	0e1b      	lsrs	r3, r3, #24
 800dfa4:	f003 030f 	and.w	r3, r3, #15
 800dfa8:	4a38      	ldr	r2, [pc, #224]	@ (800e08c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800dfaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfae:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfb0:	e389      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfb6:	e386      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800dfb8:	4b32      	ldr	r3, [pc, #200]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dfba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dfbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dfc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dfc6:	d112      	bne.n	800dfee <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800dfc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfce:	d10e      	bne.n	800dfee <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dfd0:	4b2c      	ldr	r3, [pc, #176]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dfd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dfd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dfda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dfde:	d102      	bne.n	800dfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800dfe0:	23fa      	movs	r3, #250	@ 0xfa
 800dfe2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dfe4:	e36f      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800dfe6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dfea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dfec:	e36b      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800dfee:	4b25      	ldr	r3, [pc, #148]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dffa:	d106      	bne.n	800e00a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800dffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dffe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e002:	d102      	bne.n	800e00a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800e004:	4b20      	ldr	r3, [pc, #128]	@ (800e088 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800e006:	637b      	str	r3, [r7, #52]	@ 0x34
 800e008:	e35d      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800e00a:	4b1e      	ldr	r3, [pc, #120]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e00c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e010:	f003 0302 	and.w	r3, r3, #2
 800e014:	2b02      	cmp	r3, #2
 800e016:	d107      	bne.n	800e028 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800e018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e01e:	d103      	bne.n	800e028 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800e020:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e024:	637b      	str	r3, [r7, #52]	@ 0x34
 800e026:	e34e      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800e028:	2300      	movs	r3, #0
 800e02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e02c:	e34b      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800e02e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e032:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800e036:	430b      	orrs	r3, r1
 800e038:	d14e      	bne.n	800e0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e03a:	4b12      	ldr	r3, [pc, #72]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e03c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e040:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800e044:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800e046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d103      	bne.n	800e054 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e04c:	f7fd fbb8 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800e050:	6378      	str	r0, [r7, #52]	@ 0x34
 800e052:	e338      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800e054:	4b0b      	ldr	r3, [pc, #44]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e05a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e05e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e062:	d119      	bne.n	800e098 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800e064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e066:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e06a:	d115      	bne.n	800e098 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e06c:	4b05      	ldr	r3, [pc, #20]	@ (800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e06e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e07a:	d109      	bne.n	800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800e07c:	23fa      	movs	r3, #250	@ 0xfa
 800e07e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e080:	e321      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800e082:	bf00      	nop
 800e084:	46020c00 	.word	0x46020c00
 800e088:	00f42400 	.word	0x00f42400
 800e08c:	08012654 	.word	0x08012654
      }
      else
      {
        frequency = LSI_VALUE;
 800e090:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e094:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e096:	e316      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800e098:	4ba8      	ldr	r3, [pc, #672]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e0a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0a4:	d106      	bne.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e0ac:	d102      	bne.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800e0ae:	4ba4      	ldr	r3, [pc, #656]	@ (800e340 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0b2:	e308      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800e0b4:	4ba1      	ldr	r3, [pc, #644]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e0b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e0ba:	f003 0302 	and.w	r3, r3, #2
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	d107      	bne.n	800e0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800e0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800e0c8:	d103      	bne.n	800e0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800e0ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0d0:	e2f9      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0d6:	e2f6      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800e0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0dc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800e0e0:	430b      	orrs	r3, r1
 800e0e2:	d12d      	bne.n	800e140 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800e0e4:	4b95      	ldr	r3, [pc, #596]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e0e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e0ea:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800e0ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800e0f0:	4b92      	ldr	r3, [pc, #584]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e0fc:	d105      	bne.n	800e10a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e100:	2b00      	cmp	r3, #0
 800e102:	d102      	bne.n	800e10a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800e104:	4b8e      	ldr	r3, [pc, #568]	@ (800e340 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e106:	637b      	str	r3, [r7, #52]	@ 0x34
 800e108:	e2dd      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800e10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e10c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e110:	d107      	bne.n	800e122 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e116:	4618      	mov	r0, r3
 800e118:	f7fe fb4c 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800e11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e11e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e120:	e2d1      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800e122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e124:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e128:	d107      	bne.n	800e13a <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e12a:	f107 0318 	add.w	r3, r7, #24
 800e12e:	4618      	mov	r0, r3
 800e130:	f7fe fc9a 	bl	800ca68 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	637b      	str	r3, [r7, #52]	@ 0x34
 800e138:	e2c5      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800e13a:	2300      	movs	r3, #0
 800e13c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e13e:	e2c2      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800e140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e144:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800e148:	430b      	orrs	r3, r1
 800e14a:	d156      	bne.n	800e1fa <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800e14c:	4b7b      	ldr	r3, [pc, #492]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e14e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e152:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e156:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e15e:	d028      	beq.n	800e1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800e160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e162:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e166:	d845      	bhi.n	800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800e168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e16a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e16e:	d013      	beq.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800e170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e172:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e176:	d83d      	bhi.n	800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800e178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d004      	beq.n	800e188 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800e17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e180:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e184:	d004      	beq.n	800e190 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800e186:	e035      	b.n	800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800e188:	f7fd fb2e 	bl	800b7e8 <HAL_RCC_GetPCLK2Freq>
 800e18c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e18e:	e29a      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e190:	f7fd f9fa 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800e194:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e196:	e296      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e198:	4b68      	ldr	r3, [pc, #416]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e1a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1a4:	d102      	bne.n	800e1ac <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800e1a6:	4b66      	ldr	r3, [pc, #408]	@ (800e340 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e1a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e1aa:	e28c      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e1b0:	e289      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e1b2:	4b62      	ldr	r3, [pc, #392]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f003 0320 	and.w	r3, r3, #32
 800e1ba:	2b20      	cmp	r3, #32
 800e1bc:	d117      	bne.n	800e1ee <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e1be:	4b5f      	ldr	r3, [pc, #380]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d005      	beq.n	800e1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800e1ca:	4b5c      	ldr	r3, [pc, #368]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	0e1b      	lsrs	r3, r3, #24
 800e1d0:	f003 030f 	and.w	r3, r3, #15
 800e1d4:	e006      	b.n	800e1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800e1d6:	4b59      	ldr	r3, [pc, #356]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e1d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e1dc:	041b      	lsls	r3, r3, #16
 800e1de:	0e1b      	lsrs	r3, r3, #24
 800e1e0:	f003 030f 	and.w	r3, r3, #15
 800e1e4:	4a57      	ldr	r2, [pc, #348]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800e1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e1ec:	e26b      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e1f2:	e268      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e1f8:	e265      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800e1fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1fe:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800e202:	430b      	orrs	r3, r1
 800e204:	d156      	bne.n	800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800e206:	4b4d      	ldr	r3, [pc, #308]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e20c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e210:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e214:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e218:	d028      	beq.n	800e26c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800e21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e21c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e220:	d845      	bhi.n	800e2ae <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800e222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e228:	d013      	beq.n	800e252 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800e22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e230:	d83d      	bhi.n	800e2ae <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800e232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e234:	2b00      	cmp	r3, #0
 800e236:	d004      	beq.n	800e242 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800e238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e23a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e23e:	d004      	beq.n	800e24a <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800e240:	e035      	b.n	800e2ae <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800e242:	f7fd fabd 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800e246:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e248:	e23d      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e24a:	f7fd f99d 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800e24e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e250:	e239      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e252:	4b3a      	ldr	r3, [pc, #232]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e25a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e25e:	d102      	bne.n	800e266 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800e260:	4b37      	ldr	r3, [pc, #220]	@ (800e340 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e262:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e264:	e22f      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e266:	2300      	movs	r3, #0
 800e268:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e26a:	e22c      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e26c:	4b33      	ldr	r3, [pc, #204]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f003 0320 	and.w	r3, r3, #32
 800e274:	2b20      	cmp	r3, #32
 800e276:	d117      	bne.n	800e2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e278:	4b30      	ldr	r3, [pc, #192]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e280:	2b00      	cmp	r3, #0
 800e282:	d005      	beq.n	800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800e284:	4b2d      	ldr	r3, [pc, #180]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	0e1b      	lsrs	r3, r3, #24
 800e28a:	f003 030f 	and.w	r3, r3, #15
 800e28e:	e006      	b.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800e290:	4b2a      	ldr	r3, [pc, #168]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e292:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e296:	041b      	lsls	r3, r3, #16
 800e298:	0e1b      	lsrs	r3, r3, #24
 800e29a:	f003 030f 	and.w	r3, r3, #15
 800e29e:	4a29      	ldr	r2, [pc, #164]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800e2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2a4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e2a6:	e20e      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e2ac:	e20b      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e2b2:	e208      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800e2b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2b8:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800e2bc:	430b      	orrs	r3, r1
 800e2be:	d17c      	bne.n	800e3ba <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800e2c0:	4b1e      	ldr	r3, [pc, #120]	@ (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e2c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e2c6:	f003 0318 	and.w	r3, r3, #24
 800e2ca:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ce:	2b18      	cmp	r3, #24
 800e2d0:	d870      	bhi.n	800e3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800e2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800e2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d8:	0800e349 	.word	0x0800e349
 800e2dc:	0800e3b5 	.word	0x0800e3b5
 800e2e0:	0800e3b5 	.word	0x0800e3b5
 800e2e4:	0800e3b5 	.word	0x0800e3b5
 800e2e8:	0800e3b5 	.word	0x0800e3b5
 800e2ec:	0800e3b5 	.word	0x0800e3b5
 800e2f0:	0800e3b5 	.word	0x0800e3b5
 800e2f4:	0800e3b5 	.word	0x0800e3b5
 800e2f8:	0800e351 	.word	0x0800e351
 800e2fc:	0800e3b5 	.word	0x0800e3b5
 800e300:	0800e3b5 	.word	0x0800e3b5
 800e304:	0800e3b5 	.word	0x0800e3b5
 800e308:	0800e3b5 	.word	0x0800e3b5
 800e30c:	0800e3b5 	.word	0x0800e3b5
 800e310:	0800e3b5 	.word	0x0800e3b5
 800e314:	0800e3b5 	.word	0x0800e3b5
 800e318:	0800e359 	.word	0x0800e359
 800e31c:	0800e3b5 	.word	0x0800e3b5
 800e320:	0800e3b5 	.word	0x0800e3b5
 800e324:	0800e3b5 	.word	0x0800e3b5
 800e328:	0800e3b5 	.word	0x0800e3b5
 800e32c:	0800e3b5 	.word	0x0800e3b5
 800e330:	0800e3b5 	.word	0x0800e3b5
 800e334:	0800e3b5 	.word	0x0800e3b5
 800e338:	0800e373 	.word	0x0800e373
 800e33c:	46020c00 	.word	0x46020c00
 800e340:	00f42400 	.word	0x00f42400
 800e344:	08012654 	.word	0x08012654
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800e348:	f7fd fa62 	bl	800b810 <HAL_RCC_GetPCLK3Freq>
 800e34c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e34e:	e1ba      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e350:	f7fd f91a 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800e354:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e356:	e1b6      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e358:	4b9f      	ldr	r3, [pc, #636]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e364:	d102      	bne.n	800e36c <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800e366:	4b9d      	ldr	r3, [pc, #628]	@ (800e5dc <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e368:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e36a:	e1ac      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e36c:	2300      	movs	r3, #0
 800e36e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e370:	e1a9      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e372:	4b99      	ldr	r3, [pc, #612]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f003 0320 	and.w	r3, r3, #32
 800e37a:	2b20      	cmp	r3, #32
 800e37c:	d117      	bne.n	800e3ae <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e37e:	4b96      	ldr	r3, [pc, #600]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e386:	2b00      	cmp	r3, #0
 800e388:	d005      	beq.n	800e396 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800e38a:	4b93      	ldr	r3, [pc, #588]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e38c:	689b      	ldr	r3, [r3, #8]
 800e38e:	0e1b      	lsrs	r3, r3, #24
 800e390:	f003 030f 	and.w	r3, r3, #15
 800e394:	e006      	b.n	800e3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800e396:	4b90      	ldr	r3, [pc, #576]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e39c:	041b      	lsls	r3, r3, #16
 800e39e:	0e1b      	lsrs	r3, r3, #24
 800e3a0:	f003 030f 	and.w	r3, r3, #15
 800e3a4:	4a8e      	ldr	r2, [pc, #568]	@ (800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e3ac:	e18b      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3b2:	e188      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3b8:	e185      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800e3ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3be:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800e3c2:	430b      	orrs	r3, r1
 800e3c4:	d155      	bne.n	800e472 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800e3c6:	4b84      	ldr	r3, [pc, #528]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e3c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e3cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e3d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e3d8:	d013      	beq.n	800e402 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800e3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e3e0:	d844      	bhi.n	800e46c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e3e8:	d013      	beq.n	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800e3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e3f0:	d83c      	bhi.n	800e46c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d014      	beq.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800e3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e3fe:	d014      	beq.n	800e42a <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800e400:	e034      	b.n	800e46c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e402:	f107 0318 	add.w	r3, r7, #24
 800e406:	4618      	mov	r0, r3
 800e408:	f7fe fb2e 	bl	800ca68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e410:	e159      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e416:	4618      	mov	r0, r3
 800e418:	f7fe f9cc 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e41e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e420:	e151      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e422:	f7fd f8b1 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800e426:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e428:	e14d      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e42a:	4b6b      	ldr	r3, [pc, #428]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f003 0320 	and.w	r3, r3, #32
 800e432:	2b20      	cmp	r3, #32
 800e434:	d117      	bne.n	800e466 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e436:	4b68      	ldr	r3, [pc, #416]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e438:	689b      	ldr	r3, [r3, #8]
 800e43a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d005      	beq.n	800e44e <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800e442:	4b65      	ldr	r3, [pc, #404]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	0e1b      	lsrs	r3, r3, #24
 800e448:	f003 030f 	and.w	r3, r3, #15
 800e44c:	e006      	b.n	800e45c <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800e44e:	4b62      	ldr	r3, [pc, #392]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e454:	041b      	lsls	r3, r3, #16
 800e456:	0e1b      	lsrs	r3, r3, #24
 800e458:	f003 030f 	and.w	r3, r3, #15
 800e45c:	4a60      	ldr	r2, [pc, #384]	@ (800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e462:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e464:	e12f      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e466:	2300      	movs	r3, #0
 800e468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e46a:	e12c      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e46c:	2300      	movs	r3, #0
 800e46e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e470:	e129      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800e472:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e476:	1e59      	subs	r1, r3, #1
 800e478:	ea52 0301 	orrs.w	r3, r2, r1
 800e47c:	d13c      	bne.n	800e4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800e47e:	4b56      	ldr	r3, [pc, #344]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e480:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e484:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800e488:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e48c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e490:	d027      	beq.n	800e4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800e492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e494:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e498:	d82b      	bhi.n	800e4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e49c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e4a0:	d017      	beq.n	800e4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800e4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e4a8:	d823      	bhi.n	800e4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d004      	beq.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800e4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e4b6:	d004      	beq.n	800e4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800e4b8:	e01b      	b.n	800e4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e4ba:	f7fd f865 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800e4be:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e4c0:	e101      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e4c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fe f974 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4d0:	e0f9      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4d2:	f107 0318 	add.w	r3, r7, #24
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe fac6 	bl	800ca68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4e0:	e0f1      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4e2:	f107 030c 	add.w	r3, r7, #12
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fe fc18 	bl	800cd1c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4f0:	e0e9      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4f6:	e0e6      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800e4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4fc:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800e500:	430b      	orrs	r3, r1
 800e502:	d131      	bne.n	800e568 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800e504:	4b34      	ldr	r3, [pc, #208]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e50a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e50e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800e510:	4b31      	ldr	r3, [pc, #196]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e516:	f003 0302 	and.w	r3, r3, #2
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d106      	bne.n	800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800e51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e520:	2b00      	cmp	r3, #0
 800e522:	d103      	bne.n	800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800e524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e528:	637b      	str	r3, [r7, #52]	@ 0x34
 800e52a:	e0cc      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800e52c:	4b2a      	ldr	r3, [pc, #168]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e52e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e532:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e536:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e53a:	d112      	bne.n	800e562 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800e53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e53e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e542:	d10e      	bne.n	800e562 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e544:	4b24      	ldr	r3, [pc, #144]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e54a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e54e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e552:	d102      	bne.n	800e55a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800e554:	23fa      	movs	r3, #250	@ 0xfa
 800e556:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e558:	e0b5      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e55a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e55e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e560:	e0b1      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800e562:	2300      	movs	r3, #0
 800e564:	637b      	str	r3, [r7, #52]	@ 0x34
 800e566:	e0ae      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800e568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e56c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e570:	430b      	orrs	r3, r1
 800e572:	d13b      	bne.n	800e5ec <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800e574:	4b18      	ldr	r3, [pc, #96]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e57a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e57e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800e580:	4b15      	ldr	r3, [pc, #84]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e58c:	d105      	bne.n	800e59a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800e58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e590:	2b00      	cmp	r3, #0
 800e592:	d102      	bne.n	800e59a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800e594:	4b13      	ldr	r3, [pc, #76]	@ (800e5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800e596:	637b      	str	r3, [r7, #52]	@ 0x34
 800e598:	e095      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800e59a:	4b0f      	ldr	r3, [pc, #60]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e5a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5a6:	d106      	bne.n	800e5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800e5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5ae:	d102      	bne.n	800e5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800e5b0:	4b0d      	ldr	r3, [pc, #52]	@ (800e5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800e5b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5b4:	e087      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800e5b6:	4b08      	ldr	r3, [pc, #32]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e5be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5c2:	d106      	bne.n	800e5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5ca:	d102      	bne.n	800e5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800e5cc:	4b03      	ldr	r3, [pc, #12]	@ (800e5dc <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e5ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5d0:	e079      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5d6:	e076      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800e5d8:	46020c00 	.word	0x46020c00
 800e5dc:	00f42400 	.word	0x00f42400
 800e5e0:	08012654 	.word	0x08012654
 800e5e4:	02dc6c00 	.word	0x02dc6c00
 800e5e8:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800e5ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5f0:	1e99      	subs	r1, r3, #2
 800e5f2:	ea52 0301 	orrs.w	r3, r2, r1
 800e5f6:	d120      	bne.n	800e63a <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800e5f8:	4b35      	ldr	r3, [pc, #212]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e5fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e5fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e602:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e606:	2b00      	cmp	r3, #0
 800e608:	d004      	beq.n	800e614 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800e60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e610:	d008      	beq.n	800e624 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800e612:	e00f      	b.n	800e634 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e614:	f107 030c 	add.w	r3, r7, #12
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fe fb7f 	bl	800cd1c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e622:	e050      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e624:	f107 0318 	add.w	r3, r7, #24
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fe fa1d 	bl	800ca68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800e62e:	6a3b      	ldr	r3, [r7, #32]
 800e630:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e632:	e048      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e634:	2300      	movs	r3, #0
 800e636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e638:	e045      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800e63a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e63e:	f1a3 0108 	sub.w	r1, r3, #8
 800e642:	ea52 0301 	orrs.w	r3, r2, r1
 800e646:	d13c      	bne.n	800e6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800e648:	4b21      	ldr	r3, [pc, #132]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e64a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e64e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e652:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800e654:	4b1e      	ldr	r3, [pc, #120]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e65c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e660:	d105      	bne.n	800e66e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800e662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e664:	2b00      	cmp	r3, #0
 800e666:	d102      	bne.n	800e66e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800e668:	4b1a      	ldr	r3, [pc, #104]	@ (800e6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800e66a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e66c:	e02b      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800e66e:	4b18      	ldr	r3, [pc, #96]	@ (800e6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e67a:	d106      	bne.n	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800e67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e682:	d102      	bne.n	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800e684:	4b14      	ldr	r3, [pc, #80]	@ (800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800e686:	637b      	str	r3, [r7, #52]	@ 0x34
 800e688:	e01d      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800e68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e68c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e690:	d107      	bne.n	800e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e696:	4618      	mov	r0, r3
 800e698:	f7fe f88c 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800e69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6a0:	e011      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800e6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800e6a8:	d108      	bne.n	800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e6aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fe f880 	bl	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b6:	085b      	lsrs	r3, r3, #1
 800e6b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6ba:	e004      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6c0:	e001      	b.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800e6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3738      	adds	r7, #56	@ 0x38
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	46020c00 	.word	0x46020c00
 800e6d4:	00f42400 	.word	0x00f42400
 800e6d8:	007a1200 	.word	0x007a1200

0800e6dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800e6e4:	4b47      	ldr	r3, [pc, #284]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a46      	ldr	r2, [pc, #280]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e6ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e6ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e6f0:	f7f4 ffd8 	bl	80036a4 <HAL_GetTick>
 800e6f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e6f6:	e008      	b.n	800e70a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e6f8:	f7f4 ffd4 	bl	80036a4 <HAL_GetTick>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	2b02      	cmp	r3, #2
 800e704:	d901      	bls.n	800e70a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e706:	2303      	movs	r3, #3
 800e708:	e077      	b.n	800e7fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e70a:	4b3e      	ldr	r3, [pc, #248]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e712:	2b00      	cmp	r3, #0
 800e714:	d1f0      	bne.n	800e6f8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800e716:	4b3b      	ldr	r3, [pc, #236]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e71a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e71e:	f023 0303 	bic.w	r3, r3, #3
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	6811      	ldr	r1, [r2, #0]
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	6852      	ldr	r2, [r2, #4]
 800e72a:	3a01      	subs	r2, #1
 800e72c:	0212      	lsls	r2, r2, #8
 800e72e:	430a      	orrs	r2, r1
 800e730:	4934      	ldr	r1, [pc, #208]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e732:	4313      	orrs	r3, r2
 800e734:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800e736:	4b33      	ldr	r3, [pc, #204]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e73a:	4b33      	ldr	r3, [pc, #204]	@ (800e808 <RCCEx_PLL2_Config+0x12c>)
 800e73c:	4013      	ands	r3, r2
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	6892      	ldr	r2, [r2, #8]
 800e742:	3a01      	subs	r2, #1
 800e744:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	68d2      	ldr	r2, [r2, #12]
 800e74c:	3a01      	subs	r2, #1
 800e74e:	0252      	lsls	r2, r2, #9
 800e750:	b292      	uxth	r2, r2
 800e752:	4311      	orrs	r1, r2
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	6912      	ldr	r2, [r2, #16]
 800e758:	3a01      	subs	r2, #1
 800e75a:	0412      	lsls	r2, r2, #16
 800e75c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e760:	4311      	orrs	r1, r2
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	6952      	ldr	r2, [r2, #20]
 800e766:	3a01      	subs	r2, #1
 800e768:	0612      	lsls	r2, r2, #24
 800e76a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e76e:	430a      	orrs	r2, r1
 800e770:	4924      	ldr	r1, [pc, #144]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e772:	4313      	orrs	r3, r2
 800e774:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800e776:	4b23      	ldr	r3, [pc, #140]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e77a:	f023 020c 	bic.w	r2, r3, #12
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	699b      	ldr	r3, [r3, #24]
 800e782:	4920      	ldr	r1, [pc, #128]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e784:	4313      	orrs	r3, r2
 800e786:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800e788:	4b1e      	ldr	r3, [pc, #120]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e78a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6a1b      	ldr	r3, [r3, #32]
 800e790:	491c      	ldr	r1, [pc, #112]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e792:	4313      	orrs	r3, r2
 800e794:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800e796:	4b1b      	ldr	r3, [pc, #108]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e79a:	4a1a      	ldr	r2, [pc, #104]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e79c:	f023 0310 	bic.w	r3, r3, #16
 800e7a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e7a2:	4b18      	ldr	r3, [pc, #96]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e7a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e7aa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	69d2      	ldr	r2, [r2, #28]
 800e7b2:	00d2      	lsls	r2, r2, #3
 800e7b4:	4913      	ldr	r1, [pc, #76]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800e7ba:	4b12      	ldr	r3, [pc, #72]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7be:	4a11      	ldr	r2, [pc, #68]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e7c0:	f043 0310 	orr.w	r3, r3, #16
 800e7c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800e7c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4a0e      	ldr	r2, [pc, #56]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e7cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e7d0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e7d2:	f7f4 ff67 	bl	80036a4 <HAL_GetTick>
 800e7d6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e7d8:	e008      	b.n	800e7ec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e7da:	f7f4 ff63 	bl	80036a4 <HAL_GetTick>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	1ad3      	subs	r3, r2, r3
 800e7e4:	2b02      	cmp	r3, #2
 800e7e6:	d901      	bls.n	800e7ec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	e006      	b.n	800e7fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e7ec:	4b05      	ldr	r3, [pc, #20]	@ (800e804 <RCCEx_PLL2_Config+0x128>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d0f0      	beq.n	800e7da <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800e7f8:	2300      	movs	r3, #0

}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	46020c00 	.word	0x46020c00
 800e808:	80800000 	.word	0x80800000

0800e80c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800e814:	4b47      	ldr	r3, [pc, #284]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a46      	ldr	r2, [pc, #280]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e81a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e81e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e820:	f7f4 ff40 	bl	80036a4 <HAL_GetTick>
 800e824:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e826:	e008      	b.n	800e83a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e828:	f7f4 ff3c 	bl	80036a4 <HAL_GetTick>
 800e82c:	4602      	mov	r2, r0
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	2b02      	cmp	r3, #2
 800e834:	d901      	bls.n	800e83a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e836:	2303      	movs	r3, #3
 800e838:	e077      	b.n	800e92a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e83a:	4b3e      	ldr	r3, [pc, #248]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e842:	2b00      	cmp	r3, #0
 800e844:	d1f0      	bne.n	800e828 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800e846:	4b3b      	ldr	r3, [pc, #236]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e84a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e84e:	f023 0303 	bic.w	r3, r3, #3
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	6811      	ldr	r1, [r2, #0]
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	6852      	ldr	r2, [r2, #4]
 800e85a:	3a01      	subs	r2, #1
 800e85c:	0212      	lsls	r2, r2, #8
 800e85e:	430a      	orrs	r2, r1
 800e860:	4934      	ldr	r1, [pc, #208]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e862:	4313      	orrs	r3, r2
 800e864:	630b      	str	r3, [r1, #48]	@ 0x30
 800e866:	4b33      	ldr	r3, [pc, #204]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e86a:	4b33      	ldr	r3, [pc, #204]	@ (800e938 <RCCEx_PLL3_Config+0x12c>)
 800e86c:	4013      	ands	r3, r2
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	6892      	ldr	r2, [r2, #8]
 800e872:	3a01      	subs	r2, #1
 800e874:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	68d2      	ldr	r2, [r2, #12]
 800e87c:	3a01      	subs	r2, #1
 800e87e:	0252      	lsls	r2, r2, #9
 800e880:	b292      	uxth	r2, r2
 800e882:	4311      	orrs	r1, r2
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	6912      	ldr	r2, [r2, #16]
 800e888:	3a01      	subs	r2, #1
 800e88a:	0412      	lsls	r2, r2, #16
 800e88c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e890:	4311      	orrs	r1, r2
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	6952      	ldr	r2, [r2, #20]
 800e896:	3a01      	subs	r2, #1
 800e898:	0612      	lsls	r2, r2, #24
 800e89a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e89e:	430a      	orrs	r2, r1
 800e8a0:	4924      	ldr	r1, [pc, #144]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800e8a6:	4b23      	ldr	r3, [pc, #140]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8aa:	f023 020c 	bic.w	r2, r3, #12
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	699b      	ldr	r3, [r3, #24]
 800e8b2:	4920      	ldr	r1, [pc, #128]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800e8b8:	4b1e      	ldr	r3, [pc, #120]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6a1b      	ldr	r3, [r3, #32]
 800e8c0:	491c      	ldr	r1, [pc, #112]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800e8c6:	4b1b      	ldr	r3, [pc, #108]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8ca:	4a1a      	ldr	r2, [pc, #104]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8cc:	f023 0310 	bic.w	r3, r3, #16
 800e8d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e8d2:	4b18      	ldr	r3, [pc, #96]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e8da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	69d2      	ldr	r2, [r2, #28]
 800e8e2:	00d2      	lsls	r2, r2, #3
 800e8e4:	4913      	ldr	r1, [pc, #76]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800e8ea:	4b12      	ldr	r3, [pc, #72]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8ee:	4a11      	ldr	r2, [pc, #68]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8f0:	f043 0310 	orr.w	r3, r3, #16
 800e8f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800e8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a0e      	ldr	r2, [pc, #56]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e8fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e900:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e902:	f7f4 fecf 	bl	80036a4 <HAL_GetTick>
 800e906:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e908:	e008      	b.n	800e91c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e90a:	f7f4 fecb 	bl	80036a4 <HAL_GetTick>
 800e90e:	4602      	mov	r2, r0
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	1ad3      	subs	r3, r2, r3
 800e914:	2b02      	cmp	r3, #2
 800e916:	d901      	bls.n	800e91c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e918:	2303      	movs	r3, #3
 800e91a:	e006      	b.n	800e92a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e91c:	4b05      	ldr	r3, [pc, #20]	@ (800e934 <RCCEx_PLL3_Config+0x128>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e924:	2b00      	cmp	r3, #0
 800e926:	d0f0      	beq.n	800e90a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	46020c00 	.word	0x46020c00
 800e938:	80800000 	.word	0x80800000

0800e93c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e944:	2301      	movs	r3, #1
 800e946:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d071      	beq.n	800ea32 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e954:	b2db      	uxtb	r3, r3
 800e956:	2b00      	cmp	r3, #0
 800e958:	d106      	bne.n	800e968 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7f4 f944 	bl	8002bf0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2202      	movs	r2, #2
 800e96c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e970:	4b32      	ldr	r3, [pc, #200]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	f003 0310 	and.w	r3, r3, #16
 800e978:	2b10      	cmp	r3, #16
 800e97a:	d051      	beq.n	800ea20 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e97c:	4b2f      	ldr	r3, [pc, #188]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e97e:	22ca      	movs	r2, #202	@ 0xca
 800e980:	625a      	str	r2, [r3, #36]	@ 0x24
 800e982:	4b2e      	ldr	r3, [pc, #184]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e984:	2253      	movs	r2, #83	@ 0x53
 800e986:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 f88b 	bl	800eaa4 <RTC_EnterInitMode>
 800e98e:	4603      	mov	r3, r0
 800e990:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800e992:	7bfb      	ldrb	r3, [r7, #15]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d13f      	bne.n	800ea18 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800e998:	4b28      	ldr	r3, [pc, #160]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	4a27      	ldr	r2, [pc, #156]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e99e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800e9a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9a6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800e9a8:	4b24      	ldr	r3, [pc, #144]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e9aa:	699a      	ldr	r2, [r3, #24]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6859      	ldr	r1, [r3, #4]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	691b      	ldr	r3, [r3, #16]
 800e9b4:	4319      	orrs	r1, r3
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	699b      	ldr	r3, [r3, #24]
 800e9ba:	430b      	orrs	r3, r1
 800e9bc:	491f      	ldr	r1, [pc, #124]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	68da      	ldr	r2, [r3, #12]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	041b      	lsls	r3, r3, #16
 800e9cc:	491b      	ldr	r1, [pc, #108]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800e9d2:	4b1a      	ldr	r3, [pc, #104]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e9d4:	68db      	ldr	r3, [r3, #12]
 800e9d6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9e2:	430b      	orrs	r3, r1
 800e9e4:	4915      	ldr	r1, [pc, #84]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 f896 	bl	800eb1c <RTC_ExitInitMode>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800e9f4:	7bfb      	ldrb	r3, [r7, #15]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d10e      	bne.n	800ea18 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800e9fa:	4b10      	ldr	r3, [pc, #64]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a19      	ldr	r1, [r3, #32]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	69db      	ldr	r3, [r3, #28]
 800ea0a:	4319      	orrs	r1, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	695b      	ldr	r3, [r3, #20]
 800ea10:	430b      	orrs	r3, r1
 800ea12:	490a      	ldr	r1, [pc, #40]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800ea14:	4313      	orrs	r3, r2
 800ea16:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ea18:	4b08      	ldr	r3, [pc, #32]	@ (800ea3c <HAL_RTC_Init+0x100>)
 800ea1a:	22ff      	movs	r2, #255	@ 0xff
 800ea1c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ea1e:	e001      	b.n	800ea24 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ea24:	7bfb      	ldrb	r3, [r7, #15]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d103      	bne.n	800ea32 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800ea32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	46007800 	.word	0x46007800

0800ea40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800ea48:	4b15      	ldr	r3, [pc, #84]	@ (800eaa0 <HAL_RTC_WaitForSynchro+0x60>)
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	4a14      	ldr	r2, [pc, #80]	@ (800eaa0 <HAL_RTC_WaitForSynchro+0x60>)
 800ea4e:	f023 0320 	bic.w	r3, r3, #32
 800ea52:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800ea54:	f7f4 fe26 	bl	80036a4 <HAL_GetTick>
 800ea58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ea5a:	e013      	b.n	800ea84 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ea5c:	f7f4 fe22 	bl	80036a4 <HAL_GetTick>
 800ea60:	4602      	mov	r2, r0
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ea6a:	d90b      	bls.n	800ea84 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ea6c:	4b0c      	ldr	r3, [pc, #48]	@ (800eaa0 <HAL_RTC_WaitForSynchro+0x60>)
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	f003 0320 	and.w	r3, r3, #32
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d10c      	bne.n	800ea92 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2203      	movs	r2, #3
 800ea7c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800ea80:	2303      	movs	r3, #3
 800ea82:	e008      	b.n	800ea96 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ea84:	4b06      	ldr	r3, [pc, #24]	@ (800eaa0 <HAL_RTC_WaitForSynchro+0x60>)
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	f003 0320 	and.w	r3, r3, #32
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d0e5      	beq.n	800ea5c <HAL_RTC_WaitForSynchro+0x1c>
 800ea90:	e000      	b.n	800ea94 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800ea92:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	46007800 	.word	0x46007800

0800eaa4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eaac:	2300      	movs	r3, #0
 800eaae:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800eab0:	4b19      	ldr	r3, [pc, #100]	@ (800eb18 <RTC_EnterInitMode+0x74>)
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d128      	bne.n	800eb0e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800eabc:	4b16      	ldr	r3, [pc, #88]	@ (800eb18 <RTC_EnterInitMode+0x74>)
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	4a15      	ldr	r2, [pc, #84]	@ (800eb18 <RTC_EnterInitMode+0x74>)
 800eac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eac6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800eac8:	f7f4 fdec 	bl	80036a4 <HAL_GetTick>
 800eacc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800eace:	e013      	b.n	800eaf8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ead0:	f7f4 fde8 	bl	80036a4 <HAL_GetTick>
 800ead4:	4602      	mov	r2, r0
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eade:	d90b      	bls.n	800eaf8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800eae0:	4b0d      	ldr	r3, [pc, #52]	@ (800eb18 <RTC_EnterInitMode+0x74>)
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10f      	bne.n	800eb0c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800eaec:	2303      	movs	r3, #3
 800eaee:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2203      	movs	r2, #3
 800eaf4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800eaf8:	4b07      	ldr	r3, [pc, #28]	@ (800eb18 <RTC_EnterInitMode+0x74>)
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d104      	bne.n	800eb0e <RTC_EnterInitMode+0x6a>
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
 800eb06:	2b03      	cmp	r3, #3
 800eb08:	d1e2      	bne.n	800ead0 <RTC_EnterInitMode+0x2c>
 800eb0a:	e000      	b.n	800eb0e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800eb0c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800eb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	46007800 	.word	0x46007800

0800eb1c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb24:	2300      	movs	r3, #0
 800eb26:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800eb28:	4b1a      	ldr	r3, [pc, #104]	@ (800eb94 <RTC_ExitInitMode+0x78>)
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	4a19      	ldr	r2, [pc, #100]	@ (800eb94 <RTC_ExitInitMode+0x78>)
 800eb2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb32:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800eb34:	4b17      	ldr	r3, [pc, #92]	@ (800eb94 <RTC_ExitInitMode+0x78>)
 800eb36:	699b      	ldr	r3, [r3, #24]
 800eb38:	f003 0320 	and.w	r3, r3, #32
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10c      	bne.n	800eb5a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff ff7d 	bl	800ea40 <HAL_RTC_WaitForSynchro>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d01e      	beq.n	800eb8a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2203      	movs	r2, #3
 800eb50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800eb54:	2303      	movs	r3, #3
 800eb56:	73fb      	strb	r3, [r7, #15]
 800eb58:	e017      	b.n	800eb8a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800eb5a:	4b0e      	ldr	r3, [pc, #56]	@ (800eb94 <RTC_ExitInitMode+0x78>)
 800eb5c:	699b      	ldr	r3, [r3, #24]
 800eb5e:	4a0d      	ldr	r2, [pc, #52]	@ (800eb94 <RTC_ExitInitMode+0x78>)
 800eb60:	f023 0320 	bic.w	r3, r3, #32
 800eb64:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f7ff ff6a 	bl	800ea40 <HAL_RTC_WaitForSynchro>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d005      	beq.n	800eb7e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2203      	movs	r2, #3
 800eb76:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800eb7e:	4b05      	ldr	r3, [pc, #20]	@ (800eb94 <RTC_ExitInitMode+0x78>)
 800eb80:	699b      	ldr	r3, [r3, #24]
 800eb82:	4a04      	ldr	r2, [pc, #16]	@ (800eb94 <RTC_ExitInitMode+0x78>)
 800eb84:	f043 0320 	orr.w	r3, r3, #32
 800eb88:	6193      	str	r3, [r2, #24]
  }
  return status;
 800eb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3710      	adds	r7, #16
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	46007800 	.word	0x46007800

0800eb98 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	4910      	ldr	r1, [pc, #64]	@ (800ebec <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ebac:	4313      	orrs	r3, r2
 800ebae:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	689a      	ldr	r2, [r3, #8]
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	431a      	orrs	r2, r3
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	699b      	ldr	r3, [r3, #24]
 800ebbe:	490c      	ldr	r1, [pc, #48]	@ (800ebf0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800ebc4:	4b0a      	ldr	r3, [pc, #40]	@ (800ebf0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ebc6:	6a1b      	ldr	r3, [r3, #32]
 800ebc8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	6919      	ldr	r1, [r3, #16]
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	695b      	ldr	r3, [r3, #20]
 800ebd4:	041b      	lsls	r3, r3, #16
 800ebd6:	430b      	orrs	r3, r1
 800ebd8:	4905      	ldr	r1, [pc, #20]	@ (800ebf0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800ebde:	2300      	movs	r3, #0
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr
 800ebec:	46007800 	.word	0x46007800
 800ebf0:	46007c00 	.word	0x46007c00

0800ebf4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b086      	sub	sp, #24
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
 800ec00:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d904      	bls.n	800ec12 <HAL_SAI_InitProtocol+0x1e>
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	3b03      	subs	r3, #3
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	d812      	bhi.n	800ec36 <HAL_SAI_InitProtocol+0x42>
 800ec10:	e008      	b.n	800ec24 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	68b9      	ldr	r1, [r7, #8]
 800ec18:	68f8      	ldr	r0, [r7, #12]
 800ec1a:	f000 fbed 	bl	800f3f8 <SAI_InitI2S>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	75fb      	strb	r3, [r7, #23]
      break;
 800ec22:	e00b      	b.n	800ec3c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	68b9      	ldr	r1, [r7, #8]
 800ec2a:	68f8      	ldr	r0, [r7, #12]
 800ec2c:	f000 fc96 	bl	800f55c <SAI_InitPCM>
 800ec30:	4603      	mov	r3, r0
 800ec32:	75fb      	strb	r3, [r7, #23]
      break;
 800ec34:	e002      	b.n	800ec3c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
 800ec38:	75fb      	strb	r3, [r7, #23]
      break;
 800ec3a:	bf00      	nop
  }

  if (status == HAL_OK)
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d104      	bne.n	800ec4c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f000 f808 	bl	800ec58 <HAL_SAI_Init>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ec4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3718      	adds	r7, #24
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
	...

0800ec58 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b08a      	sub	sp, #40	@ 0x28
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d101      	bne.n	800ec6a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ec66:	2301      	movs	r3, #1
 800ec68:	e1ce      	b.n	800f008 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d10e      	bne.n	800ec92 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4a83      	ldr	r2, [pc, #524]	@ (800ee88 <HAL_SAI_Init+0x230>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d107      	bne.n	800ec8e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d103      	bne.n	800ec8e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d001      	beq.n	800ec92 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e1ba      	b.n	800f008 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d106      	bne.n	800ecac <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f7f4 f974 	bl	8002f94 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 fd0f 	bl	800f6d0 <SAI_Disable>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d001      	beq.n	800ecbc <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	e1a5      	b.n	800f008 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2202      	movs	r2, #2
 800ecc0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	2b02      	cmp	r3, #2
 800ecca:	d00c      	beq.n	800ece6 <HAL_SAI_Init+0x8e>
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d80d      	bhi.n	800ecec <HAL_SAI_Init+0x94>
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d002      	beq.n	800ecda <HAL_SAI_Init+0x82>
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d003      	beq.n	800ece0 <HAL_SAI_Init+0x88>
 800ecd8:	e008      	b.n	800ecec <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ecde:	e008      	b.n	800ecf2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ece0:	2310      	movs	r3, #16
 800ece2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ece4:	e005      	b.n	800ecf2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ece6:	2320      	movs	r3, #32
 800ece8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ecea:	e002      	b.n	800ecf2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800ecec:	2300      	movs	r3, #0
 800ecee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ecf0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	2b03      	cmp	r3, #3
 800ecf8:	d81d      	bhi.n	800ed36 <HAL_SAI_Init+0xde>
 800ecfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ed00 <HAL_SAI_Init+0xa8>)
 800ecfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed00:	0800ed11 	.word	0x0800ed11
 800ed04:	0800ed17 	.word	0x0800ed17
 800ed08:	0800ed1f 	.word	0x0800ed1f
 800ed0c:	0800ed27 	.word	0x0800ed27
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ed10:	2300      	movs	r3, #0
 800ed12:	61fb      	str	r3, [r7, #28]
      break;
 800ed14:	e012      	b.n	800ed3c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ed16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed1a:	61fb      	str	r3, [r7, #28]
      break;
 800ed1c:	e00e      	b.n	800ed3c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ed1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ed22:	61fb      	str	r3, [r7, #28]
      break;
 800ed24:	e00a      	b.n	800ed3c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ed26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ed2a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2e:	f043 0301 	orr.w	r3, r3, #1
 800ed32:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ed34:	e002      	b.n	800ed3c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	61fb      	str	r3, [r7, #28]
      break;
 800ed3a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a51      	ldr	r2, [pc, #324]	@ (800ee88 <HAL_SAI_Init+0x230>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d004      	beq.n	800ed50 <HAL_SAI_Init+0xf8>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a50      	ldr	r2, [pc, #320]	@ (800ee8c <HAL_SAI_Init+0x234>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d103      	bne.n	800ed58 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800ed50:	4a4f      	ldr	r2, [pc, #316]	@ (800ee90 <HAL_SAI_Init+0x238>)
 800ed52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed54:	6013      	str	r3, [r2, #0]
 800ed56:	e002      	b.n	800ed5e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ed58:	4a4e      	ldr	r2, [pc, #312]	@ (800ee94 <HAL_SAI_Init+0x23c>)
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed5c:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6a1b      	ldr	r3, [r3, #32]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d077      	beq.n	800ee56 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4a47      	ldr	r2, [pc, #284]	@ (800ee88 <HAL_SAI_Init+0x230>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d004      	beq.n	800ed7a <HAL_SAI_Init+0x122>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a45      	ldr	r2, [pc, #276]	@ (800ee8c <HAL_SAI_Init+0x234>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d107      	bne.n	800ed8a <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ed7a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ed7e:	f04f 0100 	mov.w	r1, #0
 800ed82:	f7fe f925 	bl	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ed86:	61b8      	str	r0, [r7, #24]
 800ed88:	e006      	b.n	800ed98 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ed8a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ed8e:	f04f 0100 	mov.w	r1, #0
 800ed92:	f7fe f91d 	bl	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ed96:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	699b      	ldr	r3, [r3, #24]
 800ed9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800eda0:	d120      	bne.n	800ede4 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eda6:	2b04      	cmp	r3, #4
 800eda8:	d102      	bne.n	800edb0 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800edaa:	2340      	movs	r3, #64	@ 0x40
 800edac:	613b      	str	r3, [r7, #16]
 800edae:	e00a      	b.n	800edc6 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edb4:	2b08      	cmp	r3, #8
 800edb6:	d103      	bne.n	800edc0 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800edb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800edbc:	613b      	str	r3, [r7, #16]
 800edbe:	e002      	b.n	800edc6 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edc4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800edc6:	69ba      	ldr	r2, [r7, #24]
 800edc8:	4613      	mov	r3, r2
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	4413      	add	r3, r2
 800edce:	005b      	lsls	r3, r3, #1
 800edd0:	4619      	mov	r1, r3
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6a1b      	ldr	r3, [r3, #32]
 800edd6:	693a      	ldr	r2, [r7, #16]
 800edd8:	fb02 f303 	mul.w	r3, r2, r3
 800eddc:	fbb1 f3f3 	udiv	r3, r1, r3
 800ede0:	617b      	str	r3, [r7, #20]
 800ede2:	e017      	b.n	800ee14 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ede8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800edec:	d101      	bne.n	800edf2 <HAL_SAI_Init+0x19a>
 800edee:	2302      	movs	r3, #2
 800edf0:	e000      	b.n	800edf4 <HAL_SAI_Init+0x19c>
 800edf2:	2301      	movs	r3, #1
 800edf4:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800edf6:	69ba      	ldr	r2, [r7, #24]
 800edf8:	4613      	mov	r3, r2
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	4413      	add	r3, r2
 800edfe:	005b      	lsls	r3, r3, #1
 800ee00:	4619      	mov	r1, r3
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6a1b      	ldr	r3, [r3, #32]
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	fb02 f303 	mul.w	r3, r2, r3
 800ee0c:	021b      	lsls	r3, r3, #8
 800ee0e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ee12:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	4a20      	ldr	r2, [pc, #128]	@ (800ee98 <HAL_SAI_Init+0x240>)
 800ee18:	fba2 2303 	umull	r2, r3, r2, r3
 800ee1c:	08da      	lsrs	r2, r3, #3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ee22:	6979      	ldr	r1, [r7, #20]
 800ee24:	4b1c      	ldr	r3, [pc, #112]	@ (800ee98 <HAL_SAI_Init+0x240>)
 800ee26:	fba3 2301 	umull	r2, r3, r3, r1
 800ee2a:	08da      	lsrs	r2, r3, #3
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	4413      	add	r3, r2
 800ee32:	005b      	lsls	r3, r3, #1
 800ee34:	1aca      	subs	r2, r1, r3
 800ee36:	2a08      	cmp	r2, #8
 800ee38:	d904      	bls.n	800ee44 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee3e:	1c5a      	adds	r2, r3, #1
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee48:	2b04      	cmp	r3, #4
 800ee4a:	d104      	bne.n	800ee56 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee50:	085a      	lsrs	r2, r3, #1
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <HAL_SAI_Init+0x20e>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	d109      	bne.n	800ee7a <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d101      	bne.n	800ee72 <HAL_SAI_Init+0x21a>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	e001      	b.n	800ee76 <HAL_SAI_Init+0x21e>
 800ee72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ee76:	623b      	str	r3, [r7, #32]
 800ee78:	e012      	b.n	800eea0 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d10c      	bne.n	800ee9c <HAL_SAI_Init+0x244>
 800ee82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ee86:	e00a      	b.n	800ee9e <HAL_SAI_Init+0x246>
 800ee88:	40015404 	.word	0x40015404
 800ee8c:	40015424 	.word	0x40015424
 800ee90:	40015400 	.word	0x40015400
 800ee94:	40015800 	.word	0x40015800
 800ee98:	cccccccd 	.word	0xcccccccd
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	6819      	ldr	r1, [r3, #0]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	4b59      	ldr	r3, [pc, #356]	@ (800f010 <HAL_SAI_Init+0x3b8>)
 800eeac:	400b      	ands	r3, r1
 800eeae:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	6819      	ldr	r1, [r3, #0]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	685a      	ldr	r2, [r3, #4]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eebe:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eec4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eeca:	431a      	orrs	r2, r3
 800eecc:	6a3b      	ldr	r3, [r7, #32]
 800eece:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800eed8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	695b      	ldr	r3, [r3, #20]
 800eede:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eee4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeea:	051b      	lsls	r3, r3, #20
 800eeec:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800eef2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	430a      	orrs	r2, r1
 800ef00:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	6812      	ldr	r2, [r2, #0]
 800ef0c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ef10:	f023 030f 	bic.w	r3, r3, #15
 800ef14:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	6859      	ldr	r1, [r3, #4]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	69da      	ldr	r2, [r3, #28]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef24:	431a      	orrs	r2, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef2a:	431a      	orrs	r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	430a      	orrs	r2, r1
 800ef32:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	6899      	ldr	r1, [r3, #8]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	4b35      	ldr	r3, [pc, #212]	@ (800f014 <HAL_SAI_Init+0x3bc>)
 800ef40:	400b      	ands	r3, r1
 800ef42:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	6899      	ldr	r1, [r3, #8]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef4e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ef54:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800ef5a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800ef60:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef66:	3b01      	subs	r3, #1
 800ef68:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ef6a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	430a      	orrs	r2, r1
 800ef72:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	68d9      	ldr	r1, [r3, #12]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800ef82:	400b      	ands	r3, r1
 800ef84:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	68d9      	ldr	r1, [r3, #12]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef94:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef9a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ef9c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efa2:	3b01      	subs	r3, #1
 800efa4:	021b      	lsls	r3, r3, #8
 800efa6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	430a      	orrs	r2, r1
 800efae:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a18      	ldr	r2, [pc, #96]	@ (800f018 <HAL_SAI_Init+0x3c0>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d119      	bne.n	800efee <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800efba:	4b18      	ldr	r3, [pc, #96]	@ (800f01c <HAL_SAI_Init+0x3c4>)
 800efbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efbe:	4a17      	ldr	r2, [pc, #92]	@ (800f01c <HAL_SAI_Init+0x3c4>)
 800efc0:	f023 0301 	bic.w	r3, r3, #1
 800efc4:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d10e      	bne.n	800efee <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efd8:	3b01      	subs	r3, #1
 800efda:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800efdc:	490f      	ldr	r1, [pc, #60]	@ (800f01c <HAL_SAI_Init+0x3c4>)
 800efde:	4313      	orrs	r3, r2
 800efe0:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800efe2:	4b0e      	ldr	r3, [pc, #56]	@ (800f01c <HAL_SAI_Init+0x3c4>)
 800efe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efe6:	4a0d      	ldr	r2, [pc, #52]	@ (800f01c <HAL_SAI_Init+0x3c4>)
 800efe8:	f043 0301 	orr.w	r3, r3, #1
 800efec:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2200      	movs	r2, #0
 800eff2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2201      	movs	r2, #1
 800effa:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800f006:	2300      	movs	r3, #0
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3728      	adds	r7, #40	@ 0x28
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	f005c010 	.word	0xf005c010
 800f014:	fff88000 	.word	0xfff88000
 800f018:	40015404 	.word	0x40015404
 800f01c:	40015400 	.word	0x40015400

0800f020 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b088      	sub	sp, #32
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	4613      	mov	r3, r2
 800f02c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f02e:	f7f4 fb39 	bl	80036a4 <HAL_GetTick>
 800f032:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d002      	beq.n	800f040 <HAL_SAI_Transmit_DMA+0x20>
 800f03a:	88fb      	ldrh	r3, [r7, #6]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d101      	bne.n	800f044 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f040:	2301      	movs	r3, #1
 800f042:	e0e4      	b.n	800f20e <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	f040 80dd 	bne.w	800f20c <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d101      	bne.n	800f060 <HAL_SAI_Transmit_DMA+0x40>
 800f05c:	2302      	movs	r3, #2
 800f05e:	e0d6      	b.n	800f20e <HAL_SAI_Transmit_DMA+0x1ee>
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2201      	movs	r2, #1
 800f064:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	68ba      	ldr	r2, [r7, #8]
 800f06c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	88fa      	ldrh	r2, [r7, #6]
 800f072:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	88fa      	ldrh	r2, [r7, #6]
 800f07a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2200      	movs	r2, #0
 800f082:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2212      	movs	r2, #18
 800f08a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f094:	4a60      	ldr	r2, [pc, #384]	@ (800f218 <HAL_SAI_Transmit_DMA+0x1f8>)
 800f096:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f09e:	4a5f      	ldr	r2, [pc, #380]	@ (800f21c <HAL_SAI_Transmit_DMA+0x1fc>)
 800f0a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0a8:	4a5d      	ldr	r2, [pc, #372]	@ (800f220 <HAL_SAI_Transmit_DMA+0x200>)
 800f0aa:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0ba:	2b40      	cmp	r3, #64	@ 0x40
 800f0bc:	d106      	bne.n	800f0cc <HAL_SAI_Transmit_DMA+0xac>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d102      	bne.n	800f0cc <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800f0c6:	88fb      	ldrh	r3, [r7, #6]
 800f0c8:	61bb      	str	r3, [r7, #24]
 800f0ca:	e00a      	b.n	800f0e2 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0d0:	2b80      	cmp	r3, #128	@ 0x80
 800f0d2:	d803      	bhi.n	800f0dc <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800f0d4:	88fb      	ldrh	r3, [r7, #6]
 800f0d6:	005b      	lsls	r3, r3, #1
 800f0d8:	61bb      	str	r3, [r7, #24]
 800f0da:	e002      	b.n	800f0e2 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800f0dc:	88fb      	ldrh	r3, [r7, #6]
 800f0de:	009b      	lsls	r3, r3, #2
 800f0e0:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d02d      	beq.n	800f14e <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d021      	beq.n	800f142 <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	69ba      	ldr	r2, [r7, #24]
 800f10a:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f103 021c 	add.w	r2, r3, #28
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f12a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f136:	4618      	mov	r0, r3
 800f138:	f7f7 ff52 	bl	8006fe0 <HAL_DMAEx_List_Start_IT>
 800f13c:	4603      	mov	r3, r0
 800f13e:	77fb      	strb	r3, [r7, #31]
 800f140:	e014      	b.n	800f16c <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800f14a:	2301      	movs	r3, #1
 800f14c:	e05f      	b.n	800f20e <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f158:	4619      	mov	r1, r3
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	331c      	adds	r3, #28
 800f160:	461a      	mov	r2, r3
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	f7f6 ffaa 	bl	80060bc <HAL_DMA_Start_IT>
 800f168:	4603      	mov	r3, r0
 800f16a:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800f16c:	7ffb      	ldrb	r3, [r7, #31]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d005      	beq.n	800f17e <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2200      	movs	r2, #0
 800f176:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800f17a:	2301      	movs	r3, #1
 800f17c:	e047      	b.n	800f20e <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f17e:	2100      	movs	r1, #0
 800f180:	68f8      	ldr	r0, [r7, #12]
 800f182:	f000 fa6d 	bl	800f660 <SAI_InterruptFlag>
 800f186:	4601      	mov	r1, r0
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	691a      	ldr	r2, [r3, #16]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	430a      	orrs	r2, r1
 800f194:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f1a4:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f1a6:	e015      	b.n	800f1d4 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f1a8:	f7f4 fa7c 	bl	80036a4 <HAL_GetTick>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	1ad3      	subs	r3, r2, r3
 800f1b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f1b6:	d90d      	bls.n	800f1d4 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800f1d0:	2303      	movs	r3, #3
 800f1d2:	e01c      	b.n	800f20e <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	695b      	ldr	r3, [r3, #20]
 800f1da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d0e2      	beq.n	800f1a8 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d107      	bne.n	800f200 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f1fe:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800f208:	2300      	movs	r3, #0
 800f20a:	e000      	b.n	800f20e <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800f20c:	2302      	movs	r3, #2
  }
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3720      	adds	r7, #32
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	0800f7a3 	.word	0x0800f7a3
 800f21c:	0800f745 	.word	0x0800f745
 800f220:	0800f839 	.word	0x0800f839

0800f224 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b086      	sub	sp, #24
 800f228:	af00      	add	r7, sp, #0
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	4613      	mov	r3, r2
 800f230:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d002      	beq.n	800f23e <HAL_SAI_Receive_DMA+0x1a>
 800f238:	88fb      	ldrh	r3, [r7, #6]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d101      	bne.n	800f242 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800f23e:	2301      	movs	r3, #1
 800f240:	e0c6      	b.n	800f3d0 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	f040 80bf 	bne.w	800f3ce <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800f256:	2b01      	cmp	r3, #1
 800f258:	d101      	bne.n	800f25e <HAL_SAI_Receive_DMA+0x3a>
 800f25a:	2302      	movs	r3, #2
 800f25c:	e0b8      	b.n	800f3d0 <HAL_SAI_Receive_DMA+0x1ac>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2201      	movs	r2, #1
 800f262:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	88fa      	ldrh	r2, [r7, #6]
 800f270:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	88fa      	ldrh	r2, [r7, #6]
 800f278:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2222      	movs	r2, #34	@ 0x22
 800f288:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f292:	4a51      	ldr	r2, [pc, #324]	@ (800f3d8 <HAL_SAI_Receive_DMA+0x1b4>)
 800f294:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f29c:	4a4f      	ldr	r2, [pc, #316]	@ (800f3dc <HAL_SAI_Receive_DMA+0x1b8>)
 800f29e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2a6:	4a4e      	ldr	r2, [pc, #312]	@ (800f3e0 <HAL_SAI_Receive_DMA+0x1bc>)
 800f2a8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f2b8:	2b40      	cmp	r3, #64	@ 0x40
 800f2ba:	d106      	bne.n	800f2ca <HAL_SAI_Receive_DMA+0xa6>
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d102      	bne.n	800f2ca <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800f2c4:	88fb      	ldrh	r3, [r7, #6]
 800f2c6:	613b      	str	r3, [r7, #16]
 800f2c8:	e00a      	b.n	800f2e0 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f2ce:	2b80      	cmp	r3, #128	@ 0x80
 800f2d0:	d803      	bhi.n	800f2da <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800f2d2:	88fb      	ldrh	r3, [r7, #6]
 800f2d4:	005b      	lsls	r3, r3, #1
 800f2d6:	613b      	str	r3, [r7, #16]
 800f2d8:	e002      	b.n	800f2e0 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800f2da:	88fb      	ldrh	r3, [r7, #6]
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d02d      	beq.n	800f34c <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d021      	beq.n	800f340 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	693a      	ldr	r2, [r7, #16]
 800f308:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f103 021c 	add.w	r2, r3, #28
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f334:	4618      	mov	r0, r3
 800f336:	f7f7 fe53 	bl	8006fe0 <HAL_DMAEx_List_Start_IT>
 800f33a:	4603      	mov	r3, r0
 800f33c:	75fb      	strb	r3, [r7, #23]
 800f33e:	e014      	b.n	800f36a <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2200      	movs	r2, #0
 800f344:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800f348:	2301      	movs	r3, #1
 800f34a:	e041      	b.n	800f3d0 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	331c      	adds	r3, #28
 800f358:	4619      	mov	r1, r3
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f35e:	461a      	mov	r2, r3
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	f7f6 feab 	bl	80060bc <HAL_DMA_Start_IT>
 800f366:	4603      	mov	r3, r0
 800f368:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800f36a:	7dfb      	ldrb	r3, [r7, #23]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d005      	beq.n	800f37c <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800f378:	2301      	movs	r3, #1
 800f37a:	e029      	b.n	800f3d0 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f37c:	2100      	movs	r1, #0
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f000 f96e 	bl	800f660 <SAI_InterruptFlag>
 800f384:	4601      	mov	r1, r0
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	691a      	ldr	r2, [r3, #16]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	430a      	orrs	r2, r1
 800f392:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f3a2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d107      	bne.n	800f3c2 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	681a      	ldr	r2, [r3, #0]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f3c0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	e000      	b.n	800f3d0 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800f3ce:	2302      	movs	r3, #2
  }
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3718      	adds	r7, #24
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	0800f81d 	.word	0x0800f81d
 800f3dc:	0800f7bf 	.word	0x0800f7bf
 800f3e0:	0800f839 	.word	0x0800f839

0800f3e4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b083      	sub	sp, #12
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800f3ec:	bf00      	nop
 800f3ee:	370c      	adds	r7, #12
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr

0800f3f8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b087      	sub	sp, #28
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]
 800f404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f406:	2300      	movs	r3, #0
 800f408:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2200      	movs	r2, #0
 800f40e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2200      	movs	r2, #0
 800f414:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d003      	beq.n	800f426 <SAI_InitI2S+0x2e>
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	2b02      	cmp	r3, #2
 800f424:	d103      	bne.n	800f42e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2200      	movs	r2, #0
 800f42a:	651a      	str	r2, [r3, #80]	@ 0x50
 800f42c:	e002      	b.n	800f434 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2201      	movs	r2, #1
 800f432:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f43a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f442:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2200      	movs	r2, #0
 800f448:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	683a      	ldr	r2, [r7, #0]
 800f44e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	f003 0301 	and.w	r3, r3, #1
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800f45a:	2301      	movs	r3, #1
 800f45c:	e077      	b.n	800f54e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d107      	bne.n	800f474 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2200      	movs	r2, #0
 800f468:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f470:	665a      	str	r2, [r3, #100]	@ 0x64
 800f472:	e006      	b.n	800f482 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f47a:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2200      	movs	r2, #0
 800f480:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b03      	cmp	r3, #3
 800f486:	d84f      	bhi.n	800f528 <SAI_InitI2S+0x130>
 800f488:	a201      	add	r2, pc, #4	@ (adr r2, 800f490 <SAI_InitI2S+0x98>)
 800f48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48e:	bf00      	nop
 800f490:	0800f4a1 	.word	0x0800f4a1
 800f494:	0800f4c3 	.word	0x0800f4c3
 800f498:	0800f4e5 	.word	0x0800f4e5
 800f49c:	0800f507 	.word	0x0800f507
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2280      	movs	r2, #128	@ 0x80
 800f4a4:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	085b      	lsrs	r3, r3, #1
 800f4aa:	015a      	lsls	r2, r3, #5
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	085b      	lsrs	r3, r3, #1
 800f4b4:	011a      	lsls	r2, r3, #4
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2240      	movs	r2, #64	@ 0x40
 800f4be:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f4c0:	e035      	b.n	800f52e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2280      	movs	r2, #128	@ 0x80
 800f4c6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	085b      	lsrs	r3, r3, #1
 800f4cc:	019a      	lsls	r2, r3, #6
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	085b      	lsrs	r3, r3, #1
 800f4d6:	015a      	lsls	r2, r3, #5
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2280      	movs	r2, #128	@ 0x80
 800f4e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f4e2:	e024      	b.n	800f52e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	22c0      	movs	r2, #192	@ 0xc0
 800f4e8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	085b      	lsrs	r3, r3, #1
 800f4ee:	019a      	lsls	r2, r3, #6
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	085b      	lsrs	r3, r3, #1
 800f4f8:	015a      	lsls	r2, r3, #5
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2280      	movs	r2, #128	@ 0x80
 800f502:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f504:	e013      	b.n	800f52e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	22e0      	movs	r2, #224	@ 0xe0
 800f50a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	085b      	lsrs	r3, r3, #1
 800f510:	019a      	lsls	r2, r3, #6
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	085b      	lsrs	r3, r3, #1
 800f51a:	015a      	lsls	r2, r3, #5
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2280      	movs	r2, #128	@ 0x80
 800f524:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f526:	e002      	b.n	800f52e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800f528:	2301      	movs	r3, #1
 800f52a:	75fb      	strb	r3, [r7, #23]
      break;
 800f52c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	2b02      	cmp	r3, #2
 800f532:	d10b      	bne.n	800f54c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b01      	cmp	r3, #1
 800f538:	d102      	bne.n	800f540 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2210      	movs	r2, #16
 800f53e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b02      	cmp	r3, #2
 800f544:	d102      	bne.n	800f54c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2208      	movs	r2, #8
 800f54a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800f54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	371c      	adds	r7, #28
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop

0800f55c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b087      	sub	sp, #28
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
 800f568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f56a:	2300      	movs	r3, #0
 800f56c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2200      	movs	r2, #0
 800f572:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2200      	movs	r2, #0
 800f578:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d003      	beq.n	800f58a <SAI_InitPCM+0x2e>
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	2b02      	cmp	r3, #2
 800f588:	d103      	bne.n	800f592 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2201      	movs	r2, #1
 800f58e:	651a      	str	r2, [r3, #80]	@ 0x50
 800f590:	e002      	b.n	800f598 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2200      	movs	r2, #0
 800f596:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2200      	movs	r2, #0
 800f59c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f5a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f5ac:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	683a      	ldr	r2, [r7, #0]
 800f5b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f5c0:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	2b04      	cmp	r3, #4
 800f5c6:	d103      	bne.n	800f5d0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	659a      	str	r2, [r3, #88]	@ 0x58
 800f5ce:	e002      	b.n	800f5d6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	220d      	movs	r2, #13
 800f5d4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2b03      	cmp	r3, #3
 800f5da:	d837      	bhi.n	800f64c <SAI_InitPCM+0xf0>
 800f5dc:	a201      	add	r2, pc, #4	@ (adr r2, 800f5e4 <SAI_InitPCM+0x88>)
 800f5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e2:	bf00      	nop
 800f5e4:	0800f5f5 	.word	0x0800f5f5
 800f5e8:	0800f60b 	.word	0x0800f60b
 800f5ec:	0800f621 	.word	0x0800f621
 800f5f0:	0800f637 	.word	0x0800f637
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2280      	movs	r2, #128	@ 0x80
 800f5f8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	011a      	lsls	r2, r3, #4
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2240      	movs	r2, #64	@ 0x40
 800f606:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f608:	e023      	b.n	800f652 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2280      	movs	r2, #128	@ 0x80
 800f60e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	015a      	lsls	r2, r3, #5
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2280      	movs	r2, #128	@ 0x80
 800f61c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f61e:	e018      	b.n	800f652 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	22c0      	movs	r2, #192	@ 0xc0
 800f624:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	015a      	lsls	r2, r3, #5
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2280      	movs	r2, #128	@ 0x80
 800f632:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f634:	e00d      	b.n	800f652 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	22e0      	movs	r2, #224	@ 0xe0
 800f63a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	015a      	lsls	r2, r3, #5
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2280      	movs	r2, #128	@ 0x80
 800f648:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f64a:	e002      	b.n	800f652 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800f64c:	2301      	movs	r3, #1
 800f64e:	75fb      	strb	r3, [r7, #23]
      break;
 800f650:	bf00      	nop
  }

  return status;
 800f652:	7dfb      	ldrb	r3, [r7, #23]
}
 800f654:	4618      	mov	r0, r3
 800f656:	371c      	adds	r7, #28
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800f660:	b480      	push	{r7}
 800f662:	b085      	sub	sp, #20
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	460b      	mov	r3, r1
 800f66a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f670:	78fb      	ldrb	r3, [r7, #3]
 800f672:	2b01      	cmp	r3, #1
 800f674:	d103      	bne.n	800f67e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f043 0308 	orr.w	r3, r3, #8
 800f67c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f682:	2b08      	cmp	r3, #8
 800f684:	d10b      	bne.n	800f69e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f68a:	2b03      	cmp	r3, #3
 800f68c:	d003      	beq.n	800f696 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	2b01      	cmp	r3, #1
 800f694:	d103      	bne.n	800f69e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f043 0310 	orr.w	r3, r3, #16
 800f69c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	2b03      	cmp	r3, #3
 800f6a4:	d003      	beq.n	800f6ae <SAI_InterruptFlag+0x4e>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	2b02      	cmp	r3, #2
 800f6ac:	d104      	bne.n	800f6b8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f6b4:	60fb      	str	r3, [r7, #12]
 800f6b6:	e003      	b.n	800f6c0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f043 0304 	orr.w	r3, r3, #4
 800f6be:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3714      	adds	r7, #20
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr
	...

0800f6d0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b085      	sub	sp, #20
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f6d8:	4b18      	ldr	r3, [pc, #96]	@ (800f73c <SAI_Disable+0x6c>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a18      	ldr	r2, [pc, #96]	@ (800f740 <SAI_Disable+0x70>)
 800f6de:	fba2 2303 	umull	r2, r3, r2, r3
 800f6e2:	0b1b      	lsrs	r3, r3, #12
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f6fa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10a      	bne.n	800f718 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f708:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800f712:	2303      	movs	r3, #3
 800f714:	72fb      	strb	r3, [r7, #11]
      break;
 800f716:	e009      	b.n	800f72c <SAI_Disable+0x5c>
    }
    count--;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1e7      	bne.n	800f6fc <SAI_Disable+0x2c>

  return status;
 800f72c:	7afb      	ldrb	r3, [r7, #11]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	20000028 	.word	0x20000028
 800f740:	95cbec1b 	.word	0x95cbec1b

0800f744 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f750:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f756:	2b81      	cmp	r3, #129	@ 0x81
 800f758:	d01c      	beq.n	800f794 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2200      	movs	r2, #0
 800f75e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f770:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f772:	2100      	movs	r1, #0
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f7ff ff73 	bl	800f660 <SAI_InterruptFlag>
 800f77a:	4603      	mov	r3, r0
 800f77c:	43d9      	mvns	r1, r3
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	691a      	ldr	r2, [r3, #16]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	400a      	ands	r2, r1
 800f78a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2201      	movs	r2, #1
 800f790:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f7f2 fce3 	bl	8002160 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f79a:	bf00      	nop
 800f79c:	3710      	adds	r7, #16
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b084      	sub	sp, #16
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7ae:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f7b0:	68f8      	ldr	r0, [r7, #12]
 800f7b2:	f7f2 fcbf 	bl	8002134 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f7b6:	bf00      	nop
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b084      	sub	sp, #16
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7ca:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7d0:	2b81      	cmp	r3, #129	@ 0x81
 800f7d2:	d01c      	beq.n	800f80e <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f7e2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f7ff ff36 	bl	800f660 <SAI_InterruptFlag>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	43d9      	mvns	r1, r3
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	691a      	ldr	r2, [r3, #16]
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	400a      	ands	r2, r1
 800f804:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2201      	movs	r2, #1
 800f80a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f7f2 fc7a 	bl	8002108 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f814:	bf00      	nop
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f828:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f7f2 fc56 	bl	80020dc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f830:	bf00      	nop
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f844:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f84c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f864:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800f866:	68f8      	ldr	r0, [r7, #12]
 800f868:	f7ff ff32 	bl	800f6d0 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2200      	movs	r2, #0
 800f878:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f87c:	68f8      	ldr	r0, [r7, #12]
 800f87e:	f7ff fdb1 	bl	800f3e4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f882:	bf00      	nop
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b082      	sub	sp, #8
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d101      	bne.n	800f89c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f898:	2301      	movs	r3, #1
 800f89a:	e049      	b.n	800f930 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d106      	bne.n	800f8b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7f3 fa0b 	bl	8002ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2202      	movs	r2, #2
 800f8ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	4610      	mov	r0, r2
 800f8ca:	f000 fb3b 	bl	800ff44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2201      	movs	r2, #1
 800f902:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2201      	movs	r2, #1
 800f90a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2201      	movs	r2, #1
 800f912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2201      	movs	r2, #1
 800f91a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2201      	movs	r2, #1
 800f922:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2201      	movs	r2, #1
 800f92a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f946:	b2db      	uxtb	r3, r3
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d001      	beq.n	800f950 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f94c:	2301      	movs	r3, #1
 800f94e:	e06a      	b.n	800fa26 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2202      	movs	r2, #2
 800f954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4a35      	ldr	r2, [pc, #212]	@ (800fa34 <HAL_TIM_Base_Start+0xfc>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d040      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a34      	ldr	r2, [pc, #208]	@ (800fa38 <HAL_TIM_Base_Start+0x100>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d03b      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f974:	d036      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f97e:	d031      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a2d      	ldr	r2, [pc, #180]	@ (800fa3c <HAL_TIM_Base_Start+0x104>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d02c      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4a2c      	ldr	r2, [pc, #176]	@ (800fa40 <HAL_TIM_Base_Start+0x108>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d027      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	4a2a      	ldr	r2, [pc, #168]	@ (800fa44 <HAL_TIM_Base_Start+0x10c>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d022      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a29      	ldr	r2, [pc, #164]	@ (800fa48 <HAL_TIM_Base_Start+0x110>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d01d      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a27      	ldr	r2, [pc, #156]	@ (800fa4c <HAL_TIM_Base_Start+0x114>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d018      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a26      	ldr	r2, [pc, #152]	@ (800fa50 <HAL_TIM_Base_Start+0x118>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d013      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a24      	ldr	r2, [pc, #144]	@ (800fa54 <HAL_TIM_Base_Start+0x11c>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d00e      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a23      	ldr	r2, [pc, #140]	@ (800fa58 <HAL_TIM_Base_Start+0x120>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d009      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a21      	ldr	r2, [pc, #132]	@ (800fa5c <HAL_TIM_Base_Start+0x124>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d004      	beq.n	800f9e4 <HAL_TIM_Base_Start+0xac>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a20      	ldr	r2, [pc, #128]	@ (800fa60 <HAL_TIM_Base_Start+0x128>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d115      	bne.n	800fa10 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	689a      	ldr	r2, [r3, #8]
 800f9ea:	4b1e      	ldr	r3, [pc, #120]	@ (800fa64 <HAL_TIM_Base_Start+0x12c>)
 800f9ec:	4013      	ands	r3, r2
 800f9ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2b06      	cmp	r3, #6
 800f9f4:	d015      	beq.n	800fa22 <HAL_TIM_Base_Start+0xea>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9fc:	d011      	beq.n	800fa22 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f042 0201 	orr.w	r2, r2, #1
 800fa0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa0e:	e008      	b.n	800fa22 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f042 0201 	orr.w	r2, r2, #1
 800fa1e:	601a      	str	r2, [r3, #0]
 800fa20:	e000      	b.n	800fa24 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fa24:	2300      	movs	r3, #0
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3714      	adds	r7, #20
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	40012c00 	.word	0x40012c00
 800fa38:	50012c00 	.word	0x50012c00
 800fa3c:	40000400 	.word	0x40000400
 800fa40:	50000400 	.word	0x50000400
 800fa44:	40000800 	.word	0x40000800
 800fa48:	50000800 	.word	0x50000800
 800fa4c:	40000c00 	.word	0x40000c00
 800fa50:	50000c00 	.word	0x50000c00
 800fa54:	40013400 	.word	0x40013400
 800fa58:	50013400 	.word	0x50013400
 800fa5c:	40014000 	.word	0x40014000
 800fa60:	50014000 	.word	0x50014000
 800fa64:	00010007 	.word	0x00010007

0800fa68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d101      	bne.n	800fa7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fa76:	2301      	movs	r3, #1
 800fa78:	e049      	b.n	800fb0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d106      	bne.n	800fa94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7f3 f8fa 	bl	8002c88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2202      	movs	r2, #2
 800fa98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	3304      	adds	r3, #4
 800faa4:	4619      	mov	r1, r3
 800faa6:	4610      	mov	r0, r2
 800faa8:	f000 fa4c 	bl	800ff44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2201      	movs	r2, #1
 800fab0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2201      	movs	r2, #1
 800fab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2201      	movs	r2, #1
 800fac0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2201      	movs	r2, #1
 800fac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2201      	movs	r2, #1
 800fad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2201      	movs	r2, #1
 800fad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2201      	movs	r2, #1
 800fae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2201      	movs	r2, #1
 800faf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2201      	movs	r2, #1
 800faf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2201      	movs	r2, #1
 800fb08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
	...

0800fb18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b086      	sub	sp, #24
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fb24:	2300      	movs	r3, #0
 800fb26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb2e:	2b01      	cmp	r3, #1
 800fb30:	d101      	bne.n	800fb36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fb32:	2302      	movs	r3, #2
 800fb34:	e0ff      	b.n	800fd36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b14      	cmp	r3, #20
 800fb42:	f200 80f0 	bhi.w	800fd26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fb46:	a201      	add	r2, pc, #4	@ (adr r2, 800fb4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb4c:	0800fba1 	.word	0x0800fba1
 800fb50:	0800fd27 	.word	0x0800fd27
 800fb54:	0800fd27 	.word	0x0800fd27
 800fb58:	0800fd27 	.word	0x0800fd27
 800fb5c:	0800fbe1 	.word	0x0800fbe1
 800fb60:	0800fd27 	.word	0x0800fd27
 800fb64:	0800fd27 	.word	0x0800fd27
 800fb68:	0800fd27 	.word	0x0800fd27
 800fb6c:	0800fc23 	.word	0x0800fc23
 800fb70:	0800fd27 	.word	0x0800fd27
 800fb74:	0800fd27 	.word	0x0800fd27
 800fb78:	0800fd27 	.word	0x0800fd27
 800fb7c:	0800fc63 	.word	0x0800fc63
 800fb80:	0800fd27 	.word	0x0800fd27
 800fb84:	0800fd27 	.word	0x0800fd27
 800fb88:	0800fd27 	.word	0x0800fd27
 800fb8c:	0800fca5 	.word	0x0800fca5
 800fb90:	0800fd27 	.word	0x0800fd27
 800fb94:	0800fd27 	.word	0x0800fd27
 800fb98:	0800fd27 	.word	0x0800fd27
 800fb9c:	0800fce5 	.word	0x0800fce5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	68b9      	ldr	r1, [r7, #8]
 800fba6:	4618      	mov	r0, r3
 800fba8:	f000 fad2 	bl	8010150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	699a      	ldr	r2, [r3, #24]
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f042 0208 	orr.w	r2, r2, #8
 800fbba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	699a      	ldr	r2, [r3, #24]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f022 0204 	bic.w	r2, r2, #4
 800fbca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	6999      	ldr	r1, [r3, #24]
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	691a      	ldr	r2, [r3, #16]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	430a      	orrs	r2, r1
 800fbdc:	619a      	str	r2, [r3, #24]
      break;
 800fbde:	e0a5      	b.n	800fd2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68b9      	ldr	r1, [r7, #8]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f000 fb74 	bl	80102d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	699a      	ldr	r2, [r3, #24]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fbfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	699a      	ldr	r2, [r3, #24]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fc0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	6999      	ldr	r1, [r3, #24]
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	691b      	ldr	r3, [r3, #16]
 800fc16:	021a      	lsls	r2, r3, #8
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	430a      	orrs	r2, r1
 800fc1e:	619a      	str	r2, [r3, #24]
      break;
 800fc20:	e084      	b.n	800fd2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	68b9      	ldr	r1, [r7, #8]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f000 fc03 	bl	8010434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	69da      	ldr	r2, [r3, #28]
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f042 0208 	orr.w	r2, r2, #8
 800fc3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	69da      	ldr	r2, [r3, #28]
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f022 0204 	bic.w	r2, r2, #4
 800fc4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	69d9      	ldr	r1, [r3, #28]
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	691a      	ldr	r2, [r3, #16]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	430a      	orrs	r2, r1
 800fc5e:	61da      	str	r2, [r3, #28]
      break;
 800fc60:	e064      	b.n	800fd2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	68b9      	ldr	r1, [r7, #8]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f000 fc91 	bl	8010590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	69da      	ldr	r2, [r3, #28]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fc7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	69da      	ldr	r2, [r3, #28]
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fc8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	69d9      	ldr	r1, [r3, #28]
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	691b      	ldr	r3, [r3, #16]
 800fc98:	021a      	lsls	r2, r3, #8
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	430a      	orrs	r2, r1
 800fca0:	61da      	str	r2, [r3, #28]
      break;
 800fca2:	e043      	b.n	800fd2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	68b9      	ldr	r1, [r7, #8]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f000 fd20 	bl	80106f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f042 0208 	orr.w	r2, r2, #8
 800fcbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f022 0204 	bic.w	r2, r2, #4
 800fcce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	691a      	ldr	r2, [r3, #16]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	430a      	orrs	r2, r1
 800fce0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800fce2:	e023      	b.n	800fd2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	68b9      	ldr	r1, [r7, #8]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 fd82 	bl	80107f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fcfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fd0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	021a      	lsls	r2, r3, #8
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	430a      	orrs	r2, r1
 800fd22:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800fd24:	e002      	b.n	800fd2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fd26:	2301      	movs	r3, #1
 800fd28:	75fb      	strb	r3, [r7, #23]
      break;
 800fd2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fd34:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3718      	adds	r7, #24
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop

0800fd40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d101      	bne.n	800fd5c <HAL_TIM_ConfigClockSource+0x1c>
 800fd58:	2302      	movs	r3, #2
 800fd5a:	e0e6      	b.n	800ff2a <HAL_TIM_ConfigClockSource+0x1ea>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2201      	movs	r2, #1
 800fd60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2202      	movs	r2, #2
 800fd68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800fd7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fd7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fd86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4a67      	ldr	r2, [pc, #412]	@ (800ff34 <HAL_TIM_ConfigClockSource+0x1f4>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	f000 80b1 	beq.w	800fefe <HAL_TIM_ConfigClockSource+0x1be>
 800fd9c:	4a65      	ldr	r2, [pc, #404]	@ (800ff34 <HAL_TIM_ConfigClockSource+0x1f4>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	f200 80b6 	bhi.w	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fda4:	4a64      	ldr	r2, [pc, #400]	@ (800ff38 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	f000 80a9 	beq.w	800fefe <HAL_TIM_ConfigClockSource+0x1be>
 800fdac:	4a62      	ldr	r2, [pc, #392]	@ (800ff38 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	f200 80ae 	bhi.w	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fdb4:	4a61      	ldr	r2, [pc, #388]	@ (800ff3c <HAL_TIM_ConfigClockSource+0x1fc>)
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	f000 80a1 	beq.w	800fefe <HAL_TIM_ConfigClockSource+0x1be>
 800fdbc:	4a5f      	ldr	r2, [pc, #380]	@ (800ff3c <HAL_TIM_ConfigClockSource+0x1fc>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	f200 80a6 	bhi.w	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fdc4:	4a5e      	ldr	r2, [pc, #376]	@ (800ff40 <HAL_TIM_ConfigClockSource+0x200>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	f000 8099 	beq.w	800fefe <HAL_TIM_ConfigClockSource+0x1be>
 800fdcc:	4a5c      	ldr	r2, [pc, #368]	@ (800ff40 <HAL_TIM_ConfigClockSource+0x200>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	f200 809e 	bhi.w	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fdd4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fdd8:	f000 8091 	beq.w	800fefe <HAL_TIM_ConfigClockSource+0x1be>
 800fddc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fde0:	f200 8096 	bhi.w	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fde4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fde8:	f000 8089 	beq.w	800fefe <HAL_TIM_ConfigClockSource+0x1be>
 800fdec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fdf0:	f200 808e 	bhi.w	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fdf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fdf8:	d03e      	beq.n	800fe78 <HAL_TIM_ConfigClockSource+0x138>
 800fdfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fdfe:	f200 8087 	bhi.w	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fe02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe06:	f000 8086 	beq.w	800ff16 <HAL_TIM_ConfigClockSource+0x1d6>
 800fe0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe0e:	d87f      	bhi.n	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fe10:	2b70      	cmp	r3, #112	@ 0x70
 800fe12:	d01a      	beq.n	800fe4a <HAL_TIM_ConfigClockSource+0x10a>
 800fe14:	2b70      	cmp	r3, #112	@ 0x70
 800fe16:	d87b      	bhi.n	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fe18:	2b60      	cmp	r3, #96	@ 0x60
 800fe1a:	d050      	beq.n	800febe <HAL_TIM_ConfigClockSource+0x17e>
 800fe1c:	2b60      	cmp	r3, #96	@ 0x60
 800fe1e:	d877      	bhi.n	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fe20:	2b50      	cmp	r3, #80	@ 0x50
 800fe22:	d03c      	beq.n	800fe9e <HAL_TIM_ConfigClockSource+0x15e>
 800fe24:	2b50      	cmp	r3, #80	@ 0x50
 800fe26:	d873      	bhi.n	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fe28:	2b40      	cmp	r3, #64	@ 0x40
 800fe2a:	d058      	beq.n	800fede <HAL_TIM_ConfigClockSource+0x19e>
 800fe2c:	2b40      	cmp	r3, #64	@ 0x40
 800fe2e:	d86f      	bhi.n	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fe30:	2b30      	cmp	r3, #48	@ 0x30
 800fe32:	d064      	beq.n	800fefe <HAL_TIM_ConfigClockSource+0x1be>
 800fe34:	2b30      	cmp	r3, #48	@ 0x30
 800fe36:	d86b      	bhi.n	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fe38:	2b20      	cmp	r3, #32
 800fe3a:	d060      	beq.n	800fefe <HAL_TIM_ConfigClockSource+0x1be>
 800fe3c:	2b20      	cmp	r3, #32
 800fe3e:	d867      	bhi.n	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d05c      	beq.n	800fefe <HAL_TIM_ConfigClockSource+0x1be>
 800fe44:	2b10      	cmp	r3, #16
 800fe46:	d05a      	beq.n	800fefe <HAL_TIM_ConfigClockSource+0x1be>
 800fe48:	e062      	b.n	800ff10 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fe5a:	f000 fdcb 	bl	80109f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fe6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	68ba      	ldr	r2, [r7, #8]
 800fe74:	609a      	str	r2, [r3, #8]
      break;
 800fe76:	e04f      	b.n	800ff18 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fe88:	f000 fdb4 	bl	80109f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	689a      	ldr	r2, [r3, #8]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fe9a:	609a      	str	r2, [r3, #8]
      break;
 800fe9c:	e03c      	b.n	800ff18 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800feaa:	461a      	mov	r2, r3
 800feac:	f000 fd26 	bl	80108fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2150      	movs	r1, #80	@ 0x50
 800feb6:	4618      	mov	r0, r3
 800feb8:	f000 fd7f 	bl	80109ba <TIM_ITRx_SetConfig>
      break;
 800febc:	e02c      	b.n	800ff18 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800feca:	461a      	mov	r2, r3
 800fecc:	f000 fd45 	bl	801095a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2160      	movs	r1, #96	@ 0x60
 800fed6:	4618      	mov	r0, r3
 800fed8:	f000 fd6f 	bl	80109ba <TIM_ITRx_SetConfig>
      break;
 800fedc:	e01c      	b.n	800ff18 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800feea:	461a      	mov	r2, r3
 800feec:	f000 fd06 	bl	80108fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	2140      	movs	r1, #64	@ 0x40
 800fef6:	4618      	mov	r0, r3
 800fef8:	f000 fd5f 	bl	80109ba <TIM_ITRx_SetConfig>
      break;
 800fefc:	e00c      	b.n	800ff18 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	4619      	mov	r1, r3
 800ff08:	4610      	mov	r0, r2
 800ff0a:	f000 fd56 	bl	80109ba <TIM_ITRx_SetConfig>
      break;
 800ff0e:	e003      	b.n	800ff18 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800ff10:	2301      	movs	r3, #1
 800ff12:	73fb      	strb	r3, [r7, #15]
      break;
 800ff14:	e000      	b.n	800ff18 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800ff16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2200      	movs	r2, #0
 800ff24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	00100070 	.word	0x00100070
 800ff38:	00100040 	.word	0x00100040
 800ff3c:	00100030 	.word	0x00100030
 800ff40:	00100020 	.word	0x00100020

0800ff44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4a6e      	ldr	r2, [pc, #440]	@ (8010110 <TIM_Base_SetConfig+0x1cc>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d02b      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a6d      	ldr	r2, [pc, #436]	@ (8010114 <TIM_Base_SetConfig+0x1d0>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d027      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff6a:	d023      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ff72:	d01f      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	4a68      	ldr	r2, [pc, #416]	@ (8010118 <TIM_Base_SetConfig+0x1d4>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d01b      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	4a67      	ldr	r2, [pc, #412]	@ (801011c <TIM_Base_SetConfig+0x1d8>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d017      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	4a66      	ldr	r2, [pc, #408]	@ (8010120 <TIM_Base_SetConfig+0x1dc>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d013      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	4a65      	ldr	r2, [pc, #404]	@ (8010124 <TIM_Base_SetConfig+0x1e0>)
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d00f      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	4a64      	ldr	r2, [pc, #400]	@ (8010128 <TIM_Base_SetConfig+0x1e4>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d00b      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	4a63      	ldr	r2, [pc, #396]	@ (801012c <TIM_Base_SetConfig+0x1e8>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d007      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	4a62      	ldr	r2, [pc, #392]	@ (8010130 <TIM_Base_SetConfig+0x1ec>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d003      	beq.n	800ffb4 <TIM_Base_SetConfig+0x70>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	4a61      	ldr	r2, [pc, #388]	@ (8010134 <TIM_Base_SetConfig+0x1f0>)
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	d108      	bne.n	800ffc6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	68fa      	ldr	r2, [r7, #12]
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4a51      	ldr	r2, [pc, #324]	@ (8010110 <TIM_Base_SetConfig+0x1cc>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d043      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4a50      	ldr	r2, [pc, #320]	@ (8010114 <TIM_Base_SetConfig+0x1d0>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d03f      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffdc:	d03b      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ffe4:	d037      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4a4b      	ldr	r2, [pc, #300]	@ (8010118 <TIM_Base_SetConfig+0x1d4>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d033      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	4a4a      	ldr	r2, [pc, #296]	@ (801011c <TIM_Base_SetConfig+0x1d8>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d02f      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4a49      	ldr	r2, [pc, #292]	@ (8010120 <TIM_Base_SetConfig+0x1dc>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d02b      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4a48      	ldr	r2, [pc, #288]	@ (8010124 <TIM_Base_SetConfig+0x1e0>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d027      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	4a47      	ldr	r2, [pc, #284]	@ (8010128 <TIM_Base_SetConfig+0x1e4>)
 801000a:	4293      	cmp	r3, r2
 801000c:	d023      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4a46      	ldr	r2, [pc, #280]	@ (801012c <TIM_Base_SetConfig+0x1e8>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d01f      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	4a45      	ldr	r2, [pc, #276]	@ (8010130 <TIM_Base_SetConfig+0x1ec>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d01b      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	4a44      	ldr	r2, [pc, #272]	@ (8010134 <TIM_Base_SetConfig+0x1f0>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d017      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	4a43      	ldr	r2, [pc, #268]	@ (8010138 <TIM_Base_SetConfig+0x1f4>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d013      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4a42      	ldr	r2, [pc, #264]	@ (801013c <TIM_Base_SetConfig+0x1f8>)
 8010032:	4293      	cmp	r3, r2
 8010034:	d00f      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4a41      	ldr	r2, [pc, #260]	@ (8010140 <TIM_Base_SetConfig+0x1fc>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d00b      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4a40      	ldr	r2, [pc, #256]	@ (8010144 <TIM_Base_SetConfig+0x200>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d007      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a3f      	ldr	r2, [pc, #252]	@ (8010148 <TIM_Base_SetConfig+0x204>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d003      	beq.n	8010056 <TIM_Base_SetConfig+0x112>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4a3e      	ldr	r2, [pc, #248]	@ (801014c <TIM_Base_SetConfig+0x208>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d108      	bne.n	8010068 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801005c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	68fa      	ldr	r2, [r7, #12]
 8010064:	4313      	orrs	r3, r2
 8010066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	695b      	ldr	r3, [r3, #20]
 8010072:	4313      	orrs	r3, r2
 8010074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	68fa      	ldr	r2, [r7, #12]
 801007a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	689a      	ldr	r2, [r3, #8]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4a20      	ldr	r2, [pc, #128]	@ (8010110 <TIM_Base_SetConfig+0x1cc>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d023      	beq.n	80100dc <TIM_Base_SetConfig+0x198>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4a1f      	ldr	r2, [pc, #124]	@ (8010114 <TIM_Base_SetConfig+0x1d0>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d01f      	beq.n	80100dc <TIM_Base_SetConfig+0x198>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4a24      	ldr	r2, [pc, #144]	@ (8010130 <TIM_Base_SetConfig+0x1ec>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d01b      	beq.n	80100dc <TIM_Base_SetConfig+0x198>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4a23      	ldr	r2, [pc, #140]	@ (8010134 <TIM_Base_SetConfig+0x1f0>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d017      	beq.n	80100dc <TIM_Base_SetConfig+0x198>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	4a22      	ldr	r2, [pc, #136]	@ (8010138 <TIM_Base_SetConfig+0x1f4>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d013      	beq.n	80100dc <TIM_Base_SetConfig+0x198>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4a21      	ldr	r2, [pc, #132]	@ (801013c <TIM_Base_SetConfig+0x1f8>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d00f      	beq.n	80100dc <TIM_Base_SetConfig+0x198>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	4a20      	ldr	r2, [pc, #128]	@ (8010140 <TIM_Base_SetConfig+0x1fc>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d00b      	beq.n	80100dc <TIM_Base_SetConfig+0x198>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	4a1f      	ldr	r2, [pc, #124]	@ (8010144 <TIM_Base_SetConfig+0x200>)
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d007      	beq.n	80100dc <TIM_Base_SetConfig+0x198>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	4a1e      	ldr	r2, [pc, #120]	@ (8010148 <TIM_Base_SetConfig+0x204>)
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d003      	beq.n	80100dc <TIM_Base_SetConfig+0x198>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	4a1d      	ldr	r2, [pc, #116]	@ (801014c <TIM_Base_SetConfig+0x208>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d103      	bne.n	80100e4 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	691a      	ldr	r2, [r3, #16]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2201      	movs	r2, #1
 80100e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	691b      	ldr	r3, [r3, #16]
 80100ee:	f003 0301 	and.w	r3, r3, #1
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	d105      	bne.n	8010102 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	691b      	ldr	r3, [r3, #16]
 80100fa:	f023 0201 	bic.w	r2, r3, #1
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	611a      	str	r2, [r3, #16]
  }
}
 8010102:	bf00      	nop
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	40012c00 	.word	0x40012c00
 8010114:	50012c00 	.word	0x50012c00
 8010118:	40000400 	.word	0x40000400
 801011c:	50000400 	.word	0x50000400
 8010120:	40000800 	.word	0x40000800
 8010124:	50000800 	.word	0x50000800
 8010128:	40000c00 	.word	0x40000c00
 801012c:	50000c00 	.word	0x50000c00
 8010130:	40013400 	.word	0x40013400
 8010134:	50013400 	.word	0x50013400
 8010138:	40014000 	.word	0x40014000
 801013c:	50014000 	.word	0x50014000
 8010140:	40014400 	.word	0x40014400
 8010144:	50014400 	.word	0x50014400
 8010148:	40014800 	.word	0x40014800
 801014c:	50014800 	.word	0x50014800

08010150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010150:	b480      	push	{r7}
 8010152:	b087      	sub	sp, #28
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6a1b      	ldr	r3, [r3, #32]
 801015e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6a1b      	ldr	r3, [r3, #32]
 8010164:	f023 0201 	bic.w	r2, r3, #1
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	699b      	ldr	r3, [r3, #24]
 8010176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801017e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f023 0303 	bic.w	r3, r3, #3
 801018a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	68fa      	ldr	r2, [r7, #12]
 8010192:	4313      	orrs	r3, r2
 8010194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	f023 0302 	bic.w	r3, r3, #2
 801019c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	689b      	ldr	r3, [r3, #8]
 80101a2:	697a      	ldr	r2, [r7, #20]
 80101a4:	4313      	orrs	r3, r2
 80101a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	4a40      	ldr	r2, [pc, #256]	@ (80102ac <TIM_OC1_SetConfig+0x15c>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d023      	beq.n	80101f8 <TIM_OC1_SetConfig+0xa8>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	4a3f      	ldr	r2, [pc, #252]	@ (80102b0 <TIM_OC1_SetConfig+0x160>)
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d01f      	beq.n	80101f8 <TIM_OC1_SetConfig+0xa8>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	4a3e      	ldr	r2, [pc, #248]	@ (80102b4 <TIM_OC1_SetConfig+0x164>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d01b      	beq.n	80101f8 <TIM_OC1_SetConfig+0xa8>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4a3d      	ldr	r2, [pc, #244]	@ (80102b8 <TIM_OC1_SetConfig+0x168>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d017      	beq.n	80101f8 <TIM_OC1_SetConfig+0xa8>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4a3c      	ldr	r2, [pc, #240]	@ (80102bc <TIM_OC1_SetConfig+0x16c>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d013      	beq.n	80101f8 <TIM_OC1_SetConfig+0xa8>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	4a3b      	ldr	r2, [pc, #236]	@ (80102c0 <TIM_OC1_SetConfig+0x170>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d00f      	beq.n	80101f8 <TIM_OC1_SetConfig+0xa8>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	4a3a      	ldr	r2, [pc, #232]	@ (80102c4 <TIM_OC1_SetConfig+0x174>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d00b      	beq.n	80101f8 <TIM_OC1_SetConfig+0xa8>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	4a39      	ldr	r2, [pc, #228]	@ (80102c8 <TIM_OC1_SetConfig+0x178>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d007      	beq.n	80101f8 <TIM_OC1_SetConfig+0xa8>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	4a38      	ldr	r2, [pc, #224]	@ (80102cc <TIM_OC1_SetConfig+0x17c>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d003      	beq.n	80101f8 <TIM_OC1_SetConfig+0xa8>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4a37      	ldr	r2, [pc, #220]	@ (80102d0 <TIM_OC1_SetConfig+0x180>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d10c      	bne.n	8010212 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	f023 0308 	bic.w	r3, r3, #8
 80101fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	697a      	ldr	r2, [r7, #20]
 8010206:	4313      	orrs	r3, r2
 8010208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	f023 0304 	bic.w	r3, r3, #4
 8010210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4a25      	ldr	r2, [pc, #148]	@ (80102ac <TIM_OC1_SetConfig+0x15c>)
 8010216:	4293      	cmp	r3, r2
 8010218:	d023      	beq.n	8010262 <TIM_OC1_SetConfig+0x112>
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	4a24      	ldr	r2, [pc, #144]	@ (80102b0 <TIM_OC1_SetConfig+0x160>)
 801021e:	4293      	cmp	r3, r2
 8010220:	d01f      	beq.n	8010262 <TIM_OC1_SetConfig+0x112>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	4a23      	ldr	r2, [pc, #140]	@ (80102b4 <TIM_OC1_SetConfig+0x164>)
 8010226:	4293      	cmp	r3, r2
 8010228:	d01b      	beq.n	8010262 <TIM_OC1_SetConfig+0x112>
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4a22      	ldr	r2, [pc, #136]	@ (80102b8 <TIM_OC1_SetConfig+0x168>)
 801022e:	4293      	cmp	r3, r2
 8010230:	d017      	beq.n	8010262 <TIM_OC1_SetConfig+0x112>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4a21      	ldr	r2, [pc, #132]	@ (80102bc <TIM_OC1_SetConfig+0x16c>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d013      	beq.n	8010262 <TIM_OC1_SetConfig+0x112>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4a20      	ldr	r2, [pc, #128]	@ (80102c0 <TIM_OC1_SetConfig+0x170>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d00f      	beq.n	8010262 <TIM_OC1_SetConfig+0x112>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	4a1f      	ldr	r2, [pc, #124]	@ (80102c4 <TIM_OC1_SetConfig+0x174>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d00b      	beq.n	8010262 <TIM_OC1_SetConfig+0x112>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4a1e      	ldr	r2, [pc, #120]	@ (80102c8 <TIM_OC1_SetConfig+0x178>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d007      	beq.n	8010262 <TIM_OC1_SetConfig+0x112>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	4a1d      	ldr	r2, [pc, #116]	@ (80102cc <TIM_OC1_SetConfig+0x17c>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d003      	beq.n	8010262 <TIM_OC1_SetConfig+0x112>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	4a1c      	ldr	r2, [pc, #112]	@ (80102d0 <TIM_OC1_SetConfig+0x180>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d111      	bne.n	8010286 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	695b      	ldr	r3, [r3, #20]
 8010276:	693a      	ldr	r2, [r7, #16]
 8010278:	4313      	orrs	r3, r2
 801027a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	699b      	ldr	r3, [r3, #24]
 8010280:	693a      	ldr	r2, [r7, #16]
 8010282:	4313      	orrs	r3, r2
 8010284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	693a      	ldr	r2, [r7, #16]
 801028a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	68fa      	ldr	r2, [r7, #12]
 8010290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	697a      	ldr	r2, [r7, #20]
 801029e:	621a      	str	r2, [r3, #32]
}
 80102a0:	bf00      	nop
 80102a2:	371c      	adds	r7, #28
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr
 80102ac:	40012c00 	.word	0x40012c00
 80102b0:	50012c00 	.word	0x50012c00
 80102b4:	40013400 	.word	0x40013400
 80102b8:	50013400 	.word	0x50013400
 80102bc:	40014000 	.word	0x40014000
 80102c0:	50014000 	.word	0x50014000
 80102c4:	40014400 	.word	0x40014400
 80102c8:	50014400 	.word	0x50014400
 80102cc:	40014800 	.word	0x40014800
 80102d0:	50014800 	.word	0x50014800

080102d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b087      	sub	sp, #28
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6a1b      	ldr	r3, [r3, #32]
 80102e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6a1b      	ldr	r3, [r3, #32]
 80102e8:	f023 0210 	bic.w	r2, r3, #16
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	699b      	ldr	r3, [r3, #24]
 80102fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801030e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	021b      	lsls	r3, r3, #8
 8010316:	68fa      	ldr	r2, [r7, #12]
 8010318:	4313      	orrs	r3, r2
 801031a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	f023 0320 	bic.w	r3, r3, #32
 8010322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	011b      	lsls	r3, r3, #4
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	4313      	orrs	r3, r2
 801032e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4a36      	ldr	r2, [pc, #216]	@ (801040c <TIM_OC2_SetConfig+0x138>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d00b      	beq.n	8010350 <TIM_OC2_SetConfig+0x7c>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	4a35      	ldr	r2, [pc, #212]	@ (8010410 <TIM_OC2_SetConfig+0x13c>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d007      	beq.n	8010350 <TIM_OC2_SetConfig+0x7c>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	4a34      	ldr	r2, [pc, #208]	@ (8010414 <TIM_OC2_SetConfig+0x140>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d003      	beq.n	8010350 <TIM_OC2_SetConfig+0x7c>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4a33      	ldr	r2, [pc, #204]	@ (8010418 <TIM_OC2_SetConfig+0x144>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d10d      	bne.n	801036c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	011b      	lsls	r3, r3, #4
 801035e:	697a      	ldr	r2, [r7, #20]
 8010360:	4313      	orrs	r3, r2
 8010362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801036a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	4a27      	ldr	r2, [pc, #156]	@ (801040c <TIM_OC2_SetConfig+0x138>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d023      	beq.n	80103bc <TIM_OC2_SetConfig+0xe8>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	4a26      	ldr	r2, [pc, #152]	@ (8010410 <TIM_OC2_SetConfig+0x13c>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d01f      	beq.n	80103bc <TIM_OC2_SetConfig+0xe8>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	4a25      	ldr	r2, [pc, #148]	@ (8010414 <TIM_OC2_SetConfig+0x140>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d01b      	beq.n	80103bc <TIM_OC2_SetConfig+0xe8>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4a24      	ldr	r2, [pc, #144]	@ (8010418 <TIM_OC2_SetConfig+0x144>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d017      	beq.n	80103bc <TIM_OC2_SetConfig+0xe8>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4a23      	ldr	r2, [pc, #140]	@ (801041c <TIM_OC2_SetConfig+0x148>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d013      	beq.n	80103bc <TIM_OC2_SetConfig+0xe8>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4a22      	ldr	r2, [pc, #136]	@ (8010420 <TIM_OC2_SetConfig+0x14c>)
 8010398:	4293      	cmp	r3, r2
 801039a:	d00f      	beq.n	80103bc <TIM_OC2_SetConfig+0xe8>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4a21      	ldr	r2, [pc, #132]	@ (8010424 <TIM_OC2_SetConfig+0x150>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d00b      	beq.n	80103bc <TIM_OC2_SetConfig+0xe8>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4a20      	ldr	r2, [pc, #128]	@ (8010428 <TIM_OC2_SetConfig+0x154>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d007      	beq.n	80103bc <TIM_OC2_SetConfig+0xe8>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4a1f      	ldr	r2, [pc, #124]	@ (801042c <TIM_OC2_SetConfig+0x158>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d003      	beq.n	80103bc <TIM_OC2_SetConfig+0xe8>
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4a1e      	ldr	r2, [pc, #120]	@ (8010430 <TIM_OC2_SetConfig+0x15c>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d113      	bne.n	80103e4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80103c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80103ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	695b      	ldr	r3, [r3, #20]
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	693a      	ldr	r2, [r7, #16]
 80103d4:	4313      	orrs	r3, r2
 80103d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	699b      	ldr	r3, [r3, #24]
 80103dc:	009b      	lsls	r3, r3, #2
 80103de:	693a      	ldr	r2, [r7, #16]
 80103e0:	4313      	orrs	r3, r2
 80103e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	693a      	ldr	r2, [r7, #16]
 80103e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	685a      	ldr	r2, [r3, #4]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	697a      	ldr	r2, [r7, #20]
 80103fc:	621a      	str	r2, [r3, #32]
}
 80103fe:	bf00      	nop
 8010400:	371c      	adds	r7, #28
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr
 801040a:	bf00      	nop
 801040c:	40012c00 	.word	0x40012c00
 8010410:	50012c00 	.word	0x50012c00
 8010414:	40013400 	.word	0x40013400
 8010418:	50013400 	.word	0x50013400
 801041c:	40014000 	.word	0x40014000
 8010420:	50014000 	.word	0x50014000
 8010424:	40014400 	.word	0x40014400
 8010428:	50014400 	.word	0x50014400
 801042c:	40014800 	.word	0x40014800
 8010430:	50014800 	.word	0x50014800

08010434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010434:	b480      	push	{r7}
 8010436:	b087      	sub	sp, #28
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6a1b      	ldr	r3, [r3, #32]
 8010442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6a1b      	ldr	r3, [r3, #32]
 8010448:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	69db      	ldr	r3, [r3, #28]
 801045a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f023 0303 	bic.w	r3, r3, #3
 801046e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	68fa      	ldr	r2, [r7, #12]
 8010476:	4313      	orrs	r3, r2
 8010478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	689b      	ldr	r3, [r3, #8]
 8010486:	021b      	lsls	r3, r3, #8
 8010488:	697a      	ldr	r2, [r7, #20]
 801048a:	4313      	orrs	r3, r2
 801048c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4a35      	ldr	r2, [pc, #212]	@ (8010568 <TIM_OC3_SetConfig+0x134>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d00b      	beq.n	80104ae <TIM_OC3_SetConfig+0x7a>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	4a34      	ldr	r2, [pc, #208]	@ (801056c <TIM_OC3_SetConfig+0x138>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d007      	beq.n	80104ae <TIM_OC3_SetConfig+0x7a>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	4a33      	ldr	r2, [pc, #204]	@ (8010570 <TIM_OC3_SetConfig+0x13c>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d003      	beq.n	80104ae <TIM_OC3_SetConfig+0x7a>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4a32      	ldr	r2, [pc, #200]	@ (8010574 <TIM_OC3_SetConfig+0x140>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d10d      	bne.n	80104ca <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80104b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	68db      	ldr	r3, [r3, #12]
 80104ba:	021b      	lsls	r3, r3, #8
 80104bc:	697a      	ldr	r2, [r7, #20]
 80104be:	4313      	orrs	r3, r2
 80104c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80104c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4a26      	ldr	r2, [pc, #152]	@ (8010568 <TIM_OC3_SetConfig+0x134>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d023      	beq.n	801051a <TIM_OC3_SetConfig+0xe6>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	4a25      	ldr	r2, [pc, #148]	@ (801056c <TIM_OC3_SetConfig+0x138>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d01f      	beq.n	801051a <TIM_OC3_SetConfig+0xe6>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4a24      	ldr	r2, [pc, #144]	@ (8010570 <TIM_OC3_SetConfig+0x13c>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d01b      	beq.n	801051a <TIM_OC3_SetConfig+0xe6>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4a23      	ldr	r2, [pc, #140]	@ (8010574 <TIM_OC3_SetConfig+0x140>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d017      	beq.n	801051a <TIM_OC3_SetConfig+0xe6>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4a22      	ldr	r2, [pc, #136]	@ (8010578 <TIM_OC3_SetConfig+0x144>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d013      	beq.n	801051a <TIM_OC3_SetConfig+0xe6>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4a21      	ldr	r2, [pc, #132]	@ (801057c <TIM_OC3_SetConfig+0x148>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d00f      	beq.n	801051a <TIM_OC3_SetConfig+0xe6>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4a20      	ldr	r2, [pc, #128]	@ (8010580 <TIM_OC3_SetConfig+0x14c>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d00b      	beq.n	801051a <TIM_OC3_SetConfig+0xe6>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	4a1f      	ldr	r2, [pc, #124]	@ (8010584 <TIM_OC3_SetConfig+0x150>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d007      	beq.n	801051a <TIM_OC3_SetConfig+0xe6>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4a1e      	ldr	r2, [pc, #120]	@ (8010588 <TIM_OC3_SetConfig+0x154>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d003      	beq.n	801051a <TIM_OC3_SetConfig+0xe6>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4a1d      	ldr	r2, [pc, #116]	@ (801058c <TIM_OC3_SetConfig+0x158>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d113      	bne.n	8010542 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	695b      	ldr	r3, [r3, #20]
 801052e:	011b      	lsls	r3, r3, #4
 8010530:	693a      	ldr	r2, [r7, #16]
 8010532:	4313      	orrs	r3, r2
 8010534:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	699b      	ldr	r3, [r3, #24]
 801053a:	011b      	lsls	r3, r3, #4
 801053c:	693a      	ldr	r2, [r7, #16]
 801053e:	4313      	orrs	r3, r2
 8010540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	693a      	ldr	r2, [r7, #16]
 8010546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	68fa      	ldr	r2, [r7, #12]
 801054c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	685a      	ldr	r2, [r3, #4]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	697a      	ldr	r2, [r7, #20]
 801055a:	621a      	str	r2, [r3, #32]
}
 801055c:	bf00      	nop
 801055e:	371c      	adds	r7, #28
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr
 8010568:	40012c00 	.word	0x40012c00
 801056c:	50012c00 	.word	0x50012c00
 8010570:	40013400 	.word	0x40013400
 8010574:	50013400 	.word	0x50013400
 8010578:	40014000 	.word	0x40014000
 801057c:	50014000 	.word	0x50014000
 8010580:	40014400 	.word	0x40014400
 8010584:	50014400 	.word	0x50014400
 8010588:	40014800 	.word	0x40014800
 801058c:	50014800 	.word	0x50014800

08010590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010590:	b480      	push	{r7}
 8010592:	b087      	sub	sp, #28
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6a1b      	ldr	r3, [r3, #32]
 801059e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6a1b      	ldr	r3, [r3, #32]
 80105a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	69db      	ldr	r3, [r3, #28]
 80105b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80105be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80105c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80105ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	021b      	lsls	r3, r3, #8
 80105d2:	68fa      	ldr	r2, [r7, #12]
 80105d4:	4313      	orrs	r3, r2
 80105d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80105de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	689b      	ldr	r3, [r3, #8]
 80105e4:	031b      	lsls	r3, r3, #12
 80105e6:	697a      	ldr	r2, [r7, #20]
 80105e8:	4313      	orrs	r3, r2
 80105ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	4a36      	ldr	r2, [pc, #216]	@ (80106c8 <TIM_OC4_SetConfig+0x138>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d00b      	beq.n	801060c <TIM_OC4_SetConfig+0x7c>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4a35      	ldr	r2, [pc, #212]	@ (80106cc <TIM_OC4_SetConfig+0x13c>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d007      	beq.n	801060c <TIM_OC4_SetConfig+0x7c>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4a34      	ldr	r2, [pc, #208]	@ (80106d0 <TIM_OC4_SetConfig+0x140>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d003      	beq.n	801060c <TIM_OC4_SetConfig+0x7c>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	4a33      	ldr	r2, [pc, #204]	@ (80106d4 <TIM_OC4_SetConfig+0x144>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d10d      	bne.n	8010628 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	031b      	lsls	r3, r3, #12
 801061a:	697a      	ldr	r2, [r7, #20]
 801061c:	4313      	orrs	r3, r2
 801061e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010626:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4a27      	ldr	r2, [pc, #156]	@ (80106c8 <TIM_OC4_SetConfig+0x138>)
 801062c:	4293      	cmp	r3, r2
 801062e:	d023      	beq.n	8010678 <TIM_OC4_SetConfig+0xe8>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	4a26      	ldr	r2, [pc, #152]	@ (80106cc <TIM_OC4_SetConfig+0x13c>)
 8010634:	4293      	cmp	r3, r2
 8010636:	d01f      	beq.n	8010678 <TIM_OC4_SetConfig+0xe8>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	4a25      	ldr	r2, [pc, #148]	@ (80106d0 <TIM_OC4_SetConfig+0x140>)
 801063c:	4293      	cmp	r3, r2
 801063e:	d01b      	beq.n	8010678 <TIM_OC4_SetConfig+0xe8>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	4a24      	ldr	r2, [pc, #144]	@ (80106d4 <TIM_OC4_SetConfig+0x144>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d017      	beq.n	8010678 <TIM_OC4_SetConfig+0xe8>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4a23      	ldr	r2, [pc, #140]	@ (80106d8 <TIM_OC4_SetConfig+0x148>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d013      	beq.n	8010678 <TIM_OC4_SetConfig+0xe8>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	4a22      	ldr	r2, [pc, #136]	@ (80106dc <TIM_OC4_SetConfig+0x14c>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d00f      	beq.n	8010678 <TIM_OC4_SetConfig+0xe8>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4a21      	ldr	r2, [pc, #132]	@ (80106e0 <TIM_OC4_SetConfig+0x150>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d00b      	beq.n	8010678 <TIM_OC4_SetConfig+0xe8>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	4a20      	ldr	r2, [pc, #128]	@ (80106e4 <TIM_OC4_SetConfig+0x154>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d007      	beq.n	8010678 <TIM_OC4_SetConfig+0xe8>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	4a1f      	ldr	r2, [pc, #124]	@ (80106e8 <TIM_OC4_SetConfig+0x158>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d003      	beq.n	8010678 <TIM_OC4_SetConfig+0xe8>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	4a1e      	ldr	r2, [pc, #120]	@ (80106ec <TIM_OC4_SetConfig+0x15c>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d113      	bne.n	80106a0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801067e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010686:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	695b      	ldr	r3, [r3, #20]
 801068c:	019b      	lsls	r3, r3, #6
 801068e:	693a      	ldr	r2, [r7, #16]
 8010690:	4313      	orrs	r3, r2
 8010692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	699b      	ldr	r3, [r3, #24]
 8010698:	019b      	lsls	r3, r3, #6
 801069a:	693a      	ldr	r2, [r7, #16]
 801069c:	4313      	orrs	r3, r2
 801069e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	693a      	ldr	r2, [r7, #16]
 80106a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	68fa      	ldr	r2, [r7, #12]
 80106aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	685a      	ldr	r2, [r3, #4]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	621a      	str	r2, [r3, #32]
}
 80106ba:	bf00      	nop
 80106bc:	371c      	adds	r7, #28
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop
 80106c8:	40012c00 	.word	0x40012c00
 80106cc:	50012c00 	.word	0x50012c00
 80106d0:	40013400 	.word	0x40013400
 80106d4:	50013400 	.word	0x50013400
 80106d8:	40014000 	.word	0x40014000
 80106dc:	50014000 	.word	0x50014000
 80106e0:	40014400 	.word	0x40014400
 80106e4:	50014400 	.word	0x50014400
 80106e8:	40014800 	.word	0x40014800
 80106ec:	50014800 	.word	0x50014800

080106f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80106f0:	b480      	push	{r7}
 80106f2:	b087      	sub	sp, #28
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6a1b      	ldr	r3, [r3, #32]
 80106fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6a1b      	ldr	r3, [r3, #32]
 8010704:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801071e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	4313      	orrs	r3, r2
 801072c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010734:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	689b      	ldr	r3, [r3, #8]
 801073a:	041b      	lsls	r3, r3, #16
 801073c:	693a      	ldr	r2, [r7, #16]
 801073e:	4313      	orrs	r3, r2
 8010740:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	4a21      	ldr	r2, [pc, #132]	@ (80107cc <TIM_OC5_SetConfig+0xdc>)
 8010746:	4293      	cmp	r3, r2
 8010748:	d023      	beq.n	8010792 <TIM_OC5_SetConfig+0xa2>
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	4a20      	ldr	r2, [pc, #128]	@ (80107d0 <TIM_OC5_SetConfig+0xe0>)
 801074e:	4293      	cmp	r3, r2
 8010750:	d01f      	beq.n	8010792 <TIM_OC5_SetConfig+0xa2>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	4a1f      	ldr	r2, [pc, #124]	@ (80107d4 <TIM_OC5_SetConfig+0xe4>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d01b      	beq.n	8010792 <TIM_OC5_SetConfig+0xa2>
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	4a1e      	ldr	r2, [pc, #120]	@ (80107d8 <TIM_OC5_SetConfig+0xe8>)
 801075e:	4293      	cmp	r3, r2
 8010760:	d017      	beq.n	8010792 <TIM_OC5_SetConfig+0xa2>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	4a1d      	ldr	r2, [pc, #116]	@ (80107dc <TIM_OC5_SetConfig+0xec>)
 8010766:	4293      	cmp	r3, r2
 8010768:	d013      	beq.n	8010792 <TIM_OC5_SetConfig+0xa2>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4a1c      	ldr	r2, [pc, #112]	@ (80107e0 <TIM_OC5_SetConfig+0xf0>)
 801076e:	4293      	cmp	r3, r2
 8010770:	d00f      	beq.n	8010792 <TIM_OC5_SetConfig+0xa2>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	4a1b      	ldr	r2, [pc, #108]	@ (80107e4 <TIM_OC5_SetConfig+0xf4>)
 8010776:	4293      	cmp	r3, r2
 8010778:	d00b      	beq.n	8010792 <TIM_OC5_SetConfig+0xa2>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4a1a      	ldr	r2, [pc, #104]	@ (80107e8 <TIM_OC5_SetConfig+0xf8>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d007      	beq.n	8010792 <TIM_OC5_SetConfig+0xa2>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4a19      	ldr	r2, [pc, #100]	@ (80107ec <TIM_OC5_SetConfig+0xfc>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d003      	beq.n	8010792 <TIM_OC5_SetConfig+0xa2>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4a18      	ldr	r2, [pc, #96]	@ (80107f0 <TIM_OC5_SetConfig+0x100>)
 801078e:	4293      	cmp	r3, r2
 8010790:	d109      	bne.n	80107a6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	695b      	ldr	r3, [r3, #20]
 801079e:	021b      	lsls	r3, r3, #8
 80107a0:	697a      	ldr	r2, [r7, #20]
 80107a2:	4313      	orrs	r3, r2
 80107a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	697a      	ldr	r2, [r7, #20]
 80107aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	68fa      	ldr	r2, [r7, #12]
 80107b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	685a      	ldr	r2, [r3, #4]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	693a      	ldr	r2, [r7, #16]
 80107be:	621a      	str	r2, [r3, #32]
}
 80107c0:	bf00      	nop
 80107c2:	371c      	adds	r7, #28
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr
 80107cc:	40012c00 	.word	0x40012c00
 80107d0:	50012c00 	.word	0x50012c00
 80107d4:	40013400 	.word	0x40013400
 80107d8:	50013400 	.word	0x50013400
 80107dc:	40014000 	.word	0x40014000
 80107e0:	50014000 	.word	0x50014000
 80107e4:	40014400 	.word	0x40014400
 80107e8:	50014400 	.word	0x50014400
 80107ec:	40014800 	.word	0x40014800
 80107f0:	50014800 	.word	0x50014800

080107f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b087      	sub	sp, #28
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6a1b      	ldr	r3, [r3, #32]
 8010802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6a1b      	ldr	r3, [r3, #32]
 8010808:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801081a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	021b      	lsls	r3, r3, #8
 801082e:	68fa      	ldr	r2, [r7, #12]
 8010830:	4313      	orrs	r3, r2
 8010832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801083a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	051b      	lsls	r3, r3, #20
 8010842:	693a      	ldr	r2, [r7, #16]
 8010844:	4313      	orrs	r3, r2
 8010846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	4a22      	ldr	r2, [pc, #136]	@ (80108d4 <TIM_OC6_SetConfig+0xe0>)
 801084c:	4293      	cmp	r3, r2
 801084e:	d023      	beq.n	8010898 <TIM_OC6_SetConfig+0xa4>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	4a21      	ldr	r2, [pc, #132]	@ (80108d8 <TIM_OC6_SetConfig+0xe4>)
 8010854:	4293      	cmp	r3, r2
 8010856:	d01f      	beq.n	8010898 <TIM_OC6_SetConfig+0xa4>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	4a20      	ldr	r2, [pc, #128]	@ (80108dc <TIM_OC6_SetConfig+0xe8>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d01b      	beq.n	8010898 <TIM_OC6_SetConfig+0xa4>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	4a1f      	ldr	r2, [pc, #124]	@ (80108e0 <TIM_OC6_SetConfig+0xec>)
 8010864:	4293      	cmp	r3, r2
 8010866:	d017      	beq.n	8010898 <TIM_OC6_SetConfig+0xa4>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	4a1e      	ldr	r2, [pc, #120]	@ (80108e4 <TIM_OC6_SetConfig+0xf0>)
 801086c:	4293      	cmp	r3, r2
 801086e:	d013      	beq.n	8010898 <TIM_OC6_SetConfig+0xa4>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	4a1d      	ldr	r2, [pc, #116]	@ (80108e8 <TIM_OC6_SetConfig+0xf4>)
 8010874:	4293      	cmp	r3, r2
 8010876:	d00f      	beq.n	8010898 <TIM_OC6_SetConfig+0xa4>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	4a1c      	ldr	r2, [pc, #112]	@ (80108ec <TIM_OC6_SetConfig+0xf8>)
 801087c:	4293      	cmp	r3, r2
 801087e:	d00b      	beq.n	8010898 <TIM_OC6_SetConfig+0xa4>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	4a1b      	ldr	r2, [pc, #108]	@ (80108f0 <TIM_OC6_SetConfig+0xfc>)
 8010884:	4293      	cmp	r3, r2
 8010886:	d007      	beq.n	8010898 <TIM_OC6_SetConfig+0xa4>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	4a1a      	ldr	r2, [pc, #104]	@ (80108f4 <TIM_OC6_SetConfig+0x100>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d003      	beq.n	8010898 <TIM_OC6_SetConfig+0xa4>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	4a19      	ldr	r2, [pc, #100]	@ (80108f8 <TIM_OC6_SetConfig+0x104>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d109      	bne.n	80108ac <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801089e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	695b      	ldr	r3, [r3, #20]
 80108a4:	029b      	lsls	r3, r3, #10
 80108a6:	697a      	ldr	r2, [r7, #20]
 80108a8:	4313      	orrs	r3, r2
 80108aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	697a      	ldr	r2, [r7, #20]
 80108b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	68fa      	ldr	r2, [r7, #12]
 80108b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	685a      	ldr	r2, [r3, #4]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	693a      	ldr	r2, [r7, #16]
 80108c4:	621a      	str	r2, [r3, #32]
}
 80108c6:	bf00      	nop
 80108c8:	371c      	adds	r7, #28
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr
 80108d2:	bf00      	nop
 80108d4:	40012c00 	.word	0x40012c00
 80108d8:	50012c00 	.word	0x50012c00
 80108dc:	40013400 	.word	0x40013400
 80108e0:	50013400 	.word	0x50013400
 80108e4:	40014000 	.word	0x40014000
 80108e8:	50014000 	.word	0x50014000
 80108ec:	40014400 	.word	0x40014400
 80108f0:	50014400 	.word	0x50014400
 80108f4:	40014800 	.word	0x40014800
 80108f8:	50014800 	.word	0x50014800

080108fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b087      	sub	sp, #28
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6a1b      	ldr	r3, [r3, #32]
 801090c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	6a1b      	ldr	r3, [r3, #32]
 8010912:	f023 0201 	bic.w	r2, r3, #1
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	699b      	ldr	r3, [r3, #24]
 801091e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	011b      	lsls	r3, r3, #4
 801092c:	693a      	ldr	r2, [r7, #16]
 801092e:	4313      	orrs	r3, r2
 8010930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	f023 030a 	bic.w	r3, r3, #10
 8010938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801093a:	697a      	ldr	r2, [r7, #20]
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	4313      	orrs	r3, r2
 8010940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	693a      	ldr	r2, [r7, #16]
 8010946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	697a      	ldr	r2, [r7, #20]
 801094c:	621a      	str	r2, [r3, #32]
}
 801094e:	bf00      	nop
 8010950:	371c      	adds	r7, #28
 8010952:	46bd      	mov	sp, r7
 8010954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010958:	4770      	bx	lr

0801095a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801095a:	b480      	push	{r7}
 801095c:	b087      	sub	sp, #28
 801095e:	af00      	add	r7, sp, #0
 8010960:	60f8      	str	r0, [r7, #12]
 8010962:	60b9      	str	r1, [r7, #8]
 8010964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6a1b      	ldr	r3, [r3, #32]
 801096a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6a1b      	ldr	r3, [r3, #32]
 8010970:	f023 0210 	bic.w	r2, r3, #16
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	699b      	ldr	r3, [r3, #24]
 801097c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	031b      	lsls	r3, r3, #12
 801098a:	693a      	ldr	r2, [r7, #16]
 801098c:	4313      	orrs	r3, r2
 801098e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010996:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	011b      	lsls	r3, r3, #4
 801099c:	697a      	ldr	r2, [r7, #20]
 801099e:	4313      	orrs	r3, r2
 80109a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	693a      	ldr	r2, [r7, #16]
 80109a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	697a      	ldr	r2, [r7, #20]
 80109ac:	621a      	str	r2, [r3, #32]
}
 80109ae:	bf00      	nop
 80109b0:	371c      	adds	r7, #28
 80109b2:	46bd      	mov	sp, r7
 80109b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b8:	4770      	bx	lr

080109ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80109ba:	b480      	push	{r7}
 80109bc:	b085      	sub	sp, #20
 80109be:	af00      	add	r7, sp, #0
 80109c0:	6078      	str	r0, [r7, #4]
 80109c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80109d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80109d6:	683a      	ldr	r2, [r7, #0]
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	4313      	orrs	r3, r2
 80109dc:	f043 0307 	orr.w	r3, r3, #7
 80109e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	68fa      	ldr	r2, [r7, #12]
 80109e6:	609a      	str	r2, [r3, #8]
}
 80109e8:	bf00      	nop
 80109ea:	3714      	adds	r7, #20
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr

080109f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80109f4:	b480      	push	{r7}
 80109f6:	b087      	sub	sp, #28
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
 8010a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	689b      	ldr	r3, [r3, #8]
 8010a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	021a      	lsls	r2, r3, #8
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	431a      	orrs	r2, r3
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	4313      	orrs	r3, r2
 8010a1c:	697a      	ldr	r2, [r7, #20]
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	697a      	ldr	r2, [r7, #20]
 8010a26:	609a      	str	r2, [r3, #8]
}
 8010a28:	bf00      	nop
 8010a2a:	371c      	adds	r7, #28
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr

08010a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b085      	sub	sp, #20
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d101      	bne.n	8010a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010a48:	2302      	movs	r3, #2
 8010a4a:	e097      	b.n	8010b7c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2202      	movs	r2, #2
 8010a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	689b      	ldr	r3, [r3, #8]
 8010a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4a45      	ldr	r2, [pc, #276]	@ (8010b88 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d00e      	beq.n	8010a94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a44      	ldr	r2, [pc, #272]	@ (8010b8c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d009      	beq.n	8010a94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4a42      	ldr	r2, [pc, #264]	@ (8010b90 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d004      	beq.n	8010a94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	4a41      	ldr	r2, [pc, #260]	@ (8010b94 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010a90:	4293      	cmp	r3, r2
 8010a92:	d108      	bne.n	8010aa6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010a9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	68fa      	ldr	r2, [r7, #12]
 8010aa2:	4313      	orrs	r3, r2
 8010aa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ab0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	68fa      	ldr	r2, [r7, #12]
 8010ab8:	4313      	orrs	r3, r2
 8010aba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	68fa      	ldr	r2, [r7, #12]
 8010ac2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8010b88 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d040      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a2e      	ldr	r2, [pc, #184]	@ (8010b8c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d03b      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ae0:	d036      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010aea:	d031      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	4a29      	ldr	r2, [pc, #164]	@ (8010b98 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d02c      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a28      	ldr	r2, [pc, #160]	@ (8010b9c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d027      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a26      	ldr	r2, [pc, #152]	@ (8010ba0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d022      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	4a25      	ldr	r2, [pc, #148]	@ (8010ba4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d01d      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4a23      	ldr	r2, [pc, #140]	@ (8010ba8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d018      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4a22      	ldr	r2, [pc, #136]	@ (8010bac <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d013      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4a18      	ldr	r2, [pc, #96]	@ (8010b90 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d00e      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	4a17      	ldr	r2, [pc, #92]	@ (8010b94 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d009      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4a1b      	ldr	r2, [pc, #108]	@ (8010bb0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d004      	beq.n	8010b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8010bb4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8010b4c:	4293      	cmp	r3, r2
 8010b4e:	d10c      	bne.n	8010b6a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	689b      	ldr	r3, [r3, #8]
 8010b5c:	68ba      	ldr	r2, [r7, #8]
 8010b5e:	4313      	orrs	r3, r2
 8010b60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	68ba      	ldr	r2, [r7, #8]
 8010b68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2201      	movs	r2, #1
 8010b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010b7a:	2300      	movs	r3, #0
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3714      	adds	r7, #20
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr
 8010b88:	40012c00 	.word	0x40012c00
 8010b8c:	50012c00 	.word	0x50012c00
 8010b90:	40013400 	.word	0x40013400
 8010b94:	50013400 	.word	0x50013400
 8010b98:	40000400 	.word	0x40000400
 8010b9c:	50000400 	.word	0x50000400
 8010ba0:	40000800 	.word	0x40000800
 8010ba4:	50000800 	.word	0x50000800
 8010ba8:	40000c00 	.word	0x40000c00
 8010bac:	50000c00 	.word	0x50000c00
 8010bb0:	40014000 	.word	0x40014000
 8010bb4:	50014000 	.word	0x50014000

08010bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d101      	bne.n	8010bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	e042      	b.n	8010c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d106      	bne.n	8010be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f7f2 f8d1 	bl	8002d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2224      	movs	r2, #36	@ 0x24
 8010be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f022 0201 	bic.w	r2, r2, #1
 8010bf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d002      	beq.n	8010c08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 fd02 	bl	801160c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 fb51 	bl	80112b0 <UART_SetConfig>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d101      	bne.n	8010c18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010c14:	2301      	movs	r3, #1
 8010c16:	e01b      	b.n	8010c50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	685a      	ldr	r2, [r3, #4]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	689a      	ldr	r2, [r3, #8]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f042 0201 	orr.w	r2, r2, #1
 8010c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 fd81 	bl	8011750 <UART_CheckIdleState>
 8010c4e:	4603      	mov	r3, r0
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b0ba      	sub	sp, #232	@ 0xe8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	69db      	ldr	r3, [r3, #28]
 8010c66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	689b      	ldr	r3, [r3, #8]
 8010c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010c7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010c82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010c86:	4013      	ands	r3, r2
 8010c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d11b      	bne.n	8010ccc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c98:	f003 0320 	and.w	r3, r3, #32
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d015      	beq.n	8010ccc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ca4:	f003 0320 	and.w	r3, r3, #32
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d105      	bne.n	8010cb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d009      	beq.n	8010ccc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	f000 82cb 	beq.w	8011258 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	4798      	blx	r3
      }
      return;
 8010cca:	e2c5      	b.n	8011258 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	f000 8123 	beq.w	8010f1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010cd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010cda:	4b8d      	ldr	r3, [pc, #564]	@ (8010f10 <HAL_UART_IRQHandler+0x2b8>)
 8010cdc:	4013      	ands	r3, r2
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d106      	bne.n	8010cf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010ce2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8010f14 <HAL_UART_IRQHandler+0x2bc>)
 8010ce8:	4013      	ands	r3, r2
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	f000 8116 	beq.w	8010f1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010cf4:	f003 0301 	and.w	r3, r3, #1
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d011      	beq.n	8010d20 <HAL_UART_IRQHandler+0xc8>
 8010cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d00b      	beq.n	8010d20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010d16:	f043 0201 	orr.w	r2, r3, #1
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d24:	f003 0302 	and.w	r3, r3, #2
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d011      	beq.n	8010d50 <HAL_UART_IRQHandler+0xf8>
 8010d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010d30:	f003 0301 	and.w	r3, r3, #1
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d00b      	beq.n	8010d50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2202      	movs	r2, #2
 8010d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010d46:	f043 0204 	orr.w	r2, r3, #4
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d54:	f003 0304 	and.w	r3, r3, #4
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d011      	beq.n	8010d80 <HAL_UART_IRQHandler+0x128>
 8010d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010d60:	f003 0301 	and.w	r3, r3, #1
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d00b      	beq.n	8010d80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2204      	movs	r2, #4
 8010d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010d76:	f043 0202 	orr.w	r2, r3, #2
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d84:	f003 0308 	and.w	r3, r3, #8
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d017      	beq.n	8010dbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d90:	f003 0320 	and.w	r3, r3, #32
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d105      	bne.n	8010da4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010d98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8010f10 <HAL_UART_IRQHandler+0x2b8>)
 8010d9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d00b      	beq.n	8010dbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	2208      	movs	r2, #8
 8010daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010db2:	f043 0208 	orr.w	r2, r3, #8
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d012      	beq.n	8010dee <HAL_UART_IRQHandler+0x196>
 8010dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010dcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d00c      	beq.n	8010dee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010de4:	f043 0220 	orr.w	r2, r3, #32
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f000 8231 	beq.w	801125c <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010dfe:	f003 0320 	and.w	r3, r3, #32
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d013      	beq.n	8010e2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e0a:	f003 0320 	and.w	r3, r3, #32
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d105      	bne.n	8010e1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d007      	beq.n	8010e2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d003      	beq.n	8010e2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	689b      	ldr	r3, [r3, #8]
 8010e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e42:	2b40      	cmp	r3, #64	@ 0x40
 8010e44:	d005      	beq.n	8010e52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010e4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d054      	beq.n	8010efc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f000 fd93 	bl	801197e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	689b      	ldr	r3, [r3, #8]
 8010e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e62:	2b40      	cmp	r3, #64	@ 0x40
 8010e64:	d146      	bne.n	8010ef4 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	3308      	adds	r3, #8
 8010e6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010e74:	e853 3f00 	ldrex	r3, [r3]
 8010e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	3308      	adds	r3, #8
 8010e8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010e92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010e96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010e9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010ea2:	e841 2300 	strex	r3, r2, [r1]
 8010ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d1d9      	bne.n	8010e66 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d017      	beq.n	8010eec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ec2:	4a15      	ldr	r2, [pc, #84]	@ (8010f18 <HAL_UART_IRQHandler+0x2c0>)
 8010ec4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7f5 f9d1 	bl	8006274 <HAL_DMA_Abort_IT>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d019      	beq.n	8010f0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ee0:	687a      	ldr	r2, [r7, #4]
 8010ee2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010ee6:	4610      	mov	r0, r2
 8010ee8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010eea:	e00f      	b.n	8010f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 f9c9 	bl	8011284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ef2:	e00b      	b.n	8010f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f000 f9c5 	bl	8011284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010efa:	e007      	b.n	8010f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 f9c1 	bl	8011284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2200      	movs	r2, #0
 8010f06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010f0a:	e1a7      	b.n	801125c <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f0c:	bf00      	nop
    return;
 8010f0e:	e1a5      	b.n	801125c <HAL_UART_IRQHandler+0x604>
 8010f10:	10000001 	.word	0x10000001
 8010f14:	04000120 	.word	0x04000120
 8010f18:	08011a4b 	.word	0x08011a4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	f040 8150 	bne.w	80111c6 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f2a:	f003 0310 	and.w	r3, r3, #16
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	f000 8149 	beq.w	80111c6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f38:	f003 0310 	and.w	r3, r3, #16
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	f000 8142 	beq.w	80111c6 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2210      	movs	r2, #16
 8010f48:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	689b      	ldr	r3, [r3, #8]
 8010f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f54:	2b40      	cmp	r3, #64	@ 0x40
 8010f56:	f040 80b8 	bne.w	80110ca <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010f64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010f68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 8177 	beq.w	8011260 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010f78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	f080 816f 	bcs.w	8011260 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010f88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f94:	2b81      	cmp	r3, #129	@ 0x81
 8010f96:	f000 8087 	beq.w	80110a8 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010fa6:	e853 3f00 	ldrex	r3, [r3]
 8010faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010fb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010fc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010fc8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010fd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010fd4:	e841 2300 	strex	r3, r2, [r1]
 8010fd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1da      	bne.n	8010f9a <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	3308      	adds	r3, #8
 8010fea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010fee:	e853 3f00 	ldrex	r3, [r3]
 8010ff2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010ff4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ff6:	f023 0301 	bic.w	r3, r3, #1
 8010ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	3308      	adds	r3, #8
 8011004:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011008:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801100c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801100e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011010:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011014:	e841 2300 	strex	r3, r2, [r1]
 8011018:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801101a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801101c:	2b00      	cmp	r3, #0
 801101e:	d1e1      	bne.n	8010fe4 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	3308      	adds	r3, #8
 8011026:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801102a:	e853 3f00 	ldrex	r3, [r3]
 801102e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011036:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	3308      	adds	r3, #8
 8011040:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011044:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011046:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011048:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801104a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801104c:	e841 2300 	strex	r3, r2, [r1]
 8011050:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1e3      	bne.n	8011020 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2220      	movs	r2, #32
 801105c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2200      	movs	r2, #0
 8011064:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801106c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801106e:	e853 3f00 	ldrex	r3, [r3]
 8011072:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011076:	f023 0310 	bic.w	r3, r3, #16
 801107a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	461a      	mov	r2, r3
 8011084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011088:	65bb      	str	r3, [r7, #88]	@ 0x58
 801108a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801108c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801108e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011090:	e841 2300 	strex	r3, r2, [r1]
 8011094:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1e4      	bne.n	8011066 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7f5 f86a 	bl	800617c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2202      	movs	r2, #2
 80110ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	1ad3      	subs	r3, r2, r3
 80110be:	b29b      	uxth	r3, r3
 80110c0:	4619      	mov	r1, r3
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 f8e8 	bl	8011298 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80110c8:	e0ca      	b.n	8011260 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	1ad3      	subs	r3, r2, r3
 80110da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	f000 80bc 	beq.w	8011264 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80110ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	f000 80b7 	beq.w	8011264 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110fe:	e853 3f00 	ldrex	r3, [r3]
 8011102:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801110a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	461a      	mov	r2, r3
 8011114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011118:	647b      	str	r3, [r7, #68]	@ 0x44
 801111a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801111c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801111e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011120:	e841 2300 	strex	r3, r2, [r1]
 8011124:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011128:	2b00      	cmp	r3, #0
 801112a:	d1e4      	bne.n	80110f6 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	3308      	adds	r3, #8
 8011132:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011136:	e853 3f00 	ldrex	r3, [r3]
 801113a:	623b      	str	r3, [r7, #32]
   return(result);
 801113c:	6a3b      	ldr	r3, [r7, #32]
 801113e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011142:	f023 0301 	bic.w	r3, r3, #1
 8011146:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	3308      	adds	r3, #8
 8011150:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011154:	633a      	str	r2, [r7, #48]	@ 0x30
 8011156:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011158:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801115a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801115c:	e841 2300 	strex	r3, r2, [r1]
 8011160:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1e1      	bne.n	801112c <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2220      	movs	r2, #32
 801116c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2200      	movs	r2, #0
 8011174:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2200      	movs	r2, #0
 801117a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	e853 3f00 	ldrex	r3, [r3]
 8011188:	60fb      	str	r3, [r7, #12]
   return(result);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f023 0310 	bic.w	r3, r3, #16
 8011190:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	461a      	mov	r2, r3
 801119a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801119e:	61fb      	str	r3, [r7, #28]
 80111a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111a2:	69b9      	ldr	r1, [r7, #24]
 80111a4:	69fa      	ldr	r2, [r7, #28]
 80111a6:	e841 2300 	strex	r3, r2, [r1]
 80111aa:	617b      	str	r3, [r7, #20]
   return(result);
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d1e4      	bne.n	801117c <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2202      	movs	r2, #2
 80111b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80111b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80111bc:	4619      	mov	r1, r3
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f000 f86a 	bl	8011298 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80111c4:	e04e      	b.n	8011264 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80111c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d014      	beq.n	80111fc <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80111d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d105      	bne.n	80111ea <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80111de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80111e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d008      	beq.n	80111fc <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d03a      	beq.n	8011268 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	4798      	blx	r3
    }
    return;
 80111fa:	e035      	b.n	8011268 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80111fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011204:	2b00      	cmp	r3, #0
 8011206:	d009      	beq.n	801121c <HAL_UART_IRQHandler+0x5c4>
 8011208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801120c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011210:	2b00      	cmp	r3, #0
 8011212:	d003      	beq.n	801121c <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f000 fc2e 	bl	8011a76 <UART_EndTransmit_IT>
    return;
 801121a:	e026      	b.n	801126a <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801121c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011220:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011224:	2b00      	cmp	r3, #0
 8011226:	d009      	beq.n	801123c <HAL_UART_IRQHandler+0x5e4>
 8011228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801122c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011230:	2b00      	cmp	r3, #0
 8011232:	d003      	beq.n	801123c <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f000 fc53 	bl	8011ae0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801123a:	e016      	b.n	801126a <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801123c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011244:	2b00      	cmp	r3, #0
 8011246:	d010      	beq.n	801126a <HAL_UART_IRQHandler+0x612>
 8011248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801124c:	2b00      	cmp	r3, #0
 801124e:	da0c      	bge.n	801126a <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f000 fc3b 	bl	8011acc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011256:	e008      	b.n	801126a <HAL_UART_IRQHandler+0x612>
      return;
 8011258:	bf00      	nop
 801125a:	e006      	b.n	801126a <HAL_UART_IRQHandler+0x612>
    return;
 801125c:	bf00      	nop
 801125e:	e004      	b.n	801126a <HAL_UART_IRQHandler+0x612>
      return;
 8011260:	bf00      	nop
 8011262:	e002      	b.n	801126a <HAL_UART_IRQHandler+0x612>
      return;
 8011264:	bf00      	nop
 8011266:	e000      	b.n	801126a <HAL_UART_IRQHandler+0x612>
    return;
 8011268:	bf00      	nop
  }
}
 801126a:	37e8      	adds	r7, #232	@ 0xe8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011270:	b480      	push	{r7}
 8011272:	b083      	sub	sp, #12
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011278:	bf00      	nop
 801127a:	370c      	adds	r7, #12
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011284:	b480      	push	{r7}
 8011286:	b083      	sub	sp, #12
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801128c:	bf00      	nop
 801128e:	370c      	adds	r7, #12
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	460b      	mov	r3, r1
 80112a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80112a4:	bf00      	nop
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80112b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112b4:	b094      	sub	sp, #80	@ 0x50
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80112ba:	2300      	movs	r3, #0
 80112bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80112c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	4b83      	ldr	r3, [pc, #524]	@ (80114d4 <UART_SetConfig+0x224>)
 80112c6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80112c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ca:	689a      	ldr	r2, [r3, #8]
 80112cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	431a      	orrs	r2, r3
 80112d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112d4:	695b      	ldr	r3, [r3, #20]
 80112d6:	431a      	orrs	r2, r3
 80112d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112da:	69db      	ldr	r3, [r3, #28]
 80112dc:	4313      	orrs	r3, r2
 80112de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80112e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	497c      	ldr	r1, [pc, #496]	@ (80114d8 <UART_SetConfig+0x228>)
 80112e8:	4019      	ands	r1, r3
 80112ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ec:	681a      	ldr	r2, [r3, #0]
 80112ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112f0:	430b      	orrs	r3, r1
 80112f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80112f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80112fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011300:	68d9      	ldr	r1, [r3, #12]
 8011302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011304:	681a      	ldr	r2, [r3, #0]
 8011306:	ea40 0301 	orr.w	r3, r0, r1
 801130a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801130c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801130e:	699b      	ldr	r3, [r3, #24]
 8011310:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011314:	681a      	ldr	r2, [r3, #0]
 8011316:	4b6f      	ldr	r3, [pc, #444]	@ (80114d4 <UART_SetConfig+0x224>)
 8011318:	429a      	cmp	r2, r3
 801131a:	d009      	beq.n	8011330 <UART_SetConfig+0x80>
 801131c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	4b6e      	ldr	r3, [pc, #440]	@ (80114dc <UART_SetConfig+0x22c>)
 8011322:	429a      	cmp	r2, r3
 8011324:	d004      	beq.n	8011330 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011328:	6a1a      	ldr	r2, [r3, #32]
 801132a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801132c:	4313      	orrs	r3, r2
 801132e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	689b      	ldr	r3, [r3, #8]
 8011336:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801133a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 801133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011340:	681a      	ldr	r2, [r3, #0]
 8011342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011344:	430b      	orrs	r3, r1
 8011346:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801134e:	f023 000f 	bic.w	r0, r3, #15
 8011352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011354:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	ea40 0301 	orr.w	r3, r0, r1
 801135e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	4b5e      	ldr	r3, [pc, #376]	@ (80114e0 <UART_SetConfig+0x230>)
 8011366:	429a      	cmp	r2, r3
 8011368:	d102      	bne.n	8011370 <UART_SetConfig+0xc0>
 801136a:	2301      	movs	r3, #1
 801136c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801136e:	e032      	b.n	80113d6 <UART_SetConfig+0x126>
 8011370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	4b5b      	ldr	r3, [pc, #364]	@ (80114e4 <UART_SetConfig+0x234>)
 8011376:	429a      	cmp	r2, r3
 8011378:	d102      	bne.n	8011380 <UART_SetConfig+0xd0>
 801137a:	2302      	movs	r3, #2
 801137c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801137e:	e02a      	b.n	80113d6 <UART_SetConfig+0x126>
 8011380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	4b58      	ldr	r3, [pc, #352]	@ (80114e8 <UART_SetConfig+0x238>)
 8011386:	429a      	cmp	r2, r3
 8011388:	d102      	bne.n	8011390 <UART_SetConfig+0xe0>
 801138a:	2304      	movs	r3, #4
 801138c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801138e:	e022      	b.n	80113d6 <UART_SetConfig+0x126>
 8011390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011392:	681a      	ldr	r2, [r3, #0]
 8011394:	4b55      	ldr	r3, [pc, #340]	@ (80114ec <UART_SetConfig+0x23c>)
 8011396:	429a      	cmp	r2, r3
 8011398:	d102      	bne.n	80113a0 <UART_SetConfig+0xf0>
 801139a:	2308      	movs	r3, #8
 801139c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801139e:	e01a      	b.n	80113d6 <UART_SetConfig+0x126>
 80113a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	4b52      	ldr	r3, [pc, #328]	@ (80114f0 <UART_SetConfig+0x240>)
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d102      	bne.n	80113b0 <UART_SetConfig+0x100>
 80113aa:	2310      	movs	r3, #16
 80113ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113ae:	e012      	b.n	80113d6 <UART_SetConfig+0x126>
 80113b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	4b4f      	ldr	r3, [pc, #316]	@ (80114f4 <UART_SetConfig+0x244>)
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d103      	bne.n	80113c2 <UART_SetConfig+0x112>
 80113ba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80113be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113c0:	e009      	b.n	80113d6 <UART_SetConfig+0x126>
 80113c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	4b43      	ldr	r3, [pc, #268]	@ (80114d4 <UART_SetConfig+0x224>)
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d102      	bne.n	80113d2 <UART_SetConfig+0x122>
 80113cc:	2320      	movs	r3, #32
 80113ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113d0:	e001      	b.n	80113d6 <UART_SetConfig+0x126>
 80113d2:	2300      	movs	r3, #0
 80113d4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80113d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	4b3e      	ldr	r3, [pc, #248]	@ (80114d4 <UART_SetConfig+0x224>)
 80113dc:	429a      	cmp	r2, r3
 80113de:	d005      	beq.n	80113ec <UART_SetConfig+0x13c>
 80113e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	4b3d      	ldr	r3, [pc, #244]	@ (80114dc <UART_SetConfig+0x22c>)
 80113e6:	429a      	cmp	r2, r3
 80113e8:	f040 8088 	bne.w	80114fc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80113ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113ee:	2200      	movs	r2, #0
 80113f0:	623b      	str	r3, [r7, #32]
 80113f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80113f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80113f8:	f7fb fdea 	bl	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq>
 80113fc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80113fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011400:	2b00      	cmp	r3, #0
 8011402:	f000 80eb 	beq.w	80115dc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801140a:	4a3b      	ldr	r2, [pc, #236]	@ (80114f8 <UART_SetConfig+0x248>)
 801140c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011410:	461a      	mov	r2, r3
 8011412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011414:	fbb3 f3f2 	udiv	r3, r3, r2
 8011418:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801141a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801141c:	685a      	ldr	r2, [r3, #4]
 801141e:	4613      	mov	r3, r2
 8011420:	005b      	lsls	r3, r3, #1
 8011422:	4413      	add	r3, r2
 8011424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011426:	429a      	cmp	r2, r3
 8011428:	d305      	bcc.n	8011436 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801142a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011430:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011432:	429a      	cmp	r2, r3
 8011434:	d903      	bls.n	801143e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8011436:	2301      	movs	r3, #1
 8011438:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801143c:	e048      	b.n	80114d0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801143e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011440:	2200      	movs	r2, #0
 8011442:	61bb      	str	r3, [r7, #24]
 8011444:	61fa      	str	r2, [r7, #28]
 8011446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801144a:	4a2b      	ldr	r2, [pc, #172]	@ (80114f8 <UART_SetConfig+0x248>)
 801144c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011450:	b29b      	uxth	r3, r3
 8011452:	2200      	movs	r2, #0
 8011454:	613b      	str	r3, [r7, #16]
 8011456:	617a      	str	r2, [r7, #20]
 8011458:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801145c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011460:	f7ee ff28 	bl	80002b4 <__aeabi_uldivmod>
 8011464:	4602      	mov	r2, r0
 8011466:	460b      	mov	r3, r1
 8011468:	4610      	mov	r0, r2
 801146a:	4619      	mov	r1, r3
 801146c:	f04f 0200 	mov.w	r2, #0
 8011470:	f04f 0300 	mov.w	r3, #0
 8011474:	020b      	lsls	r3, r1, #8
 8011476:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801147a:	0202      	lsls	r2, r0, #8
 801147c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801147e:	6849      	ldr	r1, [r1, #4]
 8011480:	0849      	lsrs	r1, r1, #1
 8011482:	2000      	movs	r0, #0
 8011484:	460c      	mov	r4, r1
 8011486:	4605      	mov	r5, r0
 8011488:	eb12 0804 	adds.w	r8, r2, r4
 801148c:	eb43 0905 	adc.w	r9, r3, r5
 8011490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	2200      	movs	r2, #0
 8011496:	60bb      	str	r3, [r7, #8]
 8011498:	60fa      	str	r2, [r7, #12]
 801149a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801149e:	4640      	mov	r0, r8
 80114a0:	4649      	mov	r1, r9
 80114a2:	f7ee ff07 	bl	80002b4 <__aeabi_uldivmod>
 80114a6:	4602      	mov	r2, r0
 80114a8:	460b      	mov	r3, r1
 80114aa:	4613      	mov	r3, r2
 80114ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80114ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80114b4:	d308      	bcc.n	80114c8 <UART_SetConfig+0x218>
 80114b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80114bc:	d204      	bcs.n	80114c8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80114be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80114c4:	60da      	str	r2, [r3, #12]
 80114c6:	e003      	b.n	80114d0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80114c8:	2301      	movs	r3, #1
 80114ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80114ce:	e085      	b.n	80115dc <UART_SetConfig+0x32c>
 80114d0:	e084      	b.n	80115dc <UART_SetConfig+0x32c>
 80114d2:	bf00      	nop
 80114d4:	46002400 	.word	0x46002400
 80114d8:	cfff69f3 	.word	0xcfff69f3
 80114dc:	56002400 	.word	0x56002400
 80114e0:	40013800 	.word	0x40013800
 80114e4:	40004400 	.word	0x40004400
 80114e8:	40004800 	.word	0x40004800
 80114ec:	40004c00 	.word	0x40004c00
 80114f0:	40005000 	.word	0x40005000
 80114f4:	40006400 	.word	0x40006400
 80114f8:	08012714 	.word	0x08012714
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114fe:	69db      	ldr	r3, [r3, #28]
 8011500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011504:	d13c      	bne.n	8011580 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011508:	2200      	movs	r2, #0
 801150a:	603b      	str	r3, [r7, #0]
 801150c:	607a      	str	r2, [r7, #4]
 801150e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011512:	f7fb fd5d 	bl	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8011516:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801151a:	2b00      	cmp	r3, #0
 801151c:	d05e      	beq.n	80115dc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801151e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011522:	4a39      	ldr	r2, [pc, #228]	@ (8011608 <UART_SetConfig+0x358>)
 8011524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011528:	461a      	mov	r2, r3
 801152a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801152c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011530:	005a      	lsls	r2, r3, #1
 8011532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	085b      	lsrs	r3, r3, #1
 8011538:	441a      	add	r2, r3
 801153a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011542:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011546:	2b0f      	cmp	r3, #15
 8011548:	d916      	bls.n	8011578 <UART_SetConfig+0x2c8>
 801154a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801154c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011550:	d212      	bcs.n	8011578 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011554:	b29b      	uxth	r3, r3
 8011556:	f023 030f 	bic.w	r3, r3, #15
 801155a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801155c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801155e:	085b      	lsrs	r3, r3, #1
 8011560:	b29b      	uxth	r3, r3
 8011562:	f003 0307 	and.w	r3, r3, #7
 8011566:	b29a      	uxth	r2, r3
 8011568:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801156a:	4313      	orrs	r3, r2
 801156c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 801156e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011574:	60da      	str	r2, [r3, #12]
 8011576:	e031      	b.n	80115dc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8011578:	2301      	movs	r3, #1
 801157a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801157e:	e02d      	b.n	80115dc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011582:	2200      	movs	r2, #0
 8011584:	469a      	mov	sl, r3
 8011586:	4693      	mov	fp, r2
 8011588:	4650      	mov	r0, sl
 801158a:	4659      	mov	r1, fp
 801158c:	f7fb fd20 	bl	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8011590:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8011592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011594:	2b00      	cmp	r3, #0
 8011596:	d021      	beq.n	80115dc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801159a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801159c:	4a1a      	ldr	r2, [pc, #104]	@ (8011608 <UART_SetConfig+0x358>)
 801159e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115a2:	461a      	mov	r2, r3
 80115a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80115aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	085b      	lsrs	r3, r3, #1
 80115b0:	441a      	add	r2, r3
 80115b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80115ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80115bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115be:	2b0f      	cmp	r3, #15
 80115c0:	d909      	bls.n	80115d6 <UART_SetConfig+0x326>
 80115c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80115c8:	d205      	bcs.n	80115d6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80115ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	60da      	str	r2, [r3, #12]
 80115d4:	e002      	b.n	80115dc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80115d6:	2301      	movs	r3, #1
 80115d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80115dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115de:	2201      	movs	r2, #1
 80115e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80115e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e6:	2201      	movs	r2, #1
 80115e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80115ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ee:	2200      	movs	r2, #0
 80115f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80115f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f4:	2200      	movs	r2, #0
 80115f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80115f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3750      	adds	r7, #80	@ 0x50
 8011600:	46bd      	mov	sp, r7
 8011602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011606:	bf00      	nop
 8011608:	08012714 	.word	0x08012714

0801160c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011618:	f003 0308 	and.w	r3, r3, #8
 801161c:	2b00      	cmp	r3, #0
 801161e:	d00a      	beq.n	8011636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	430a      	orrs	r2, r1
 8011634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801163a:	f003 0301 	and.w	r3, r3, #1
 801163e:	2b00      	cmp	r3, #0
 8011640:	d00a      	beq.n	8011658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	430a      	orrs	r2, r1
 8011656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801165c:	f003 0302 	and.w	r3, r3, #2
 8011660:	2b00      	cmp	r3, #0
 8011662:	d00a      	beq.n	801167a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	430a      	orrs	r2, r1
 8011678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801167e:	f003 0304 	and.w	r3, r3, #4
 8011682:	2b00      	cmp	r3, #0
 8011684:	d00a      	beq.n	801169c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	430a      	orrs	r2, r1
 801169a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116a0:	f003 0310 	and.w	r3, r3, #16
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d00a      	beq.n	80116be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	689b      	ldr	r3, [r3, #8]
 80116ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	430a      	orrs	r2, r1
 80116bc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116c2:	f003 0320 	and.w	r3, r3, #32
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00a      	beq.n	80116e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	689b      	ldr	r3, [r3, #8]
 80116d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	430a      	orrs	r2, r1
 80116de:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d01a      	beq.n	8011722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	430a      	orrs	r2, r1
 8011700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801170a:	d10a      	bne.n	8011722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	430a      	orrs	r2, r1
 8011720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801172a:	2b00      	cmp	r3, #0
 801172c:	d00a      	beq.n	8011744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	430a      	orrs	r2, r1
 8011742:	605a      	str	r2, [r3, #4]
  }
}
 8011744:	bf00      	nop
 8011746:	370c      	adds	r7, #12
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b098      	sub	sp, #96	@ 0x60
 8011754:	af02      	add	r7, sp, #8
 8011756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2200      	movs	r2, #0
 801175c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011760:	f7f1 ffa0 	bl	80036a4 <HAL_GetTick>
 8011764:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	f003 0308 	and.w	r3, r3, #8
 8011770:	2b08      	cmp	r3, #8
 8011772:	d12f      	bne.n	80117d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011774:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011778:	9300      	str	r3, [sp, #0]
 801177a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801177c:	2200      	movs	r2, #0
 801177e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f000 f88e 	bl	80118a4 <UART_WaitOnFlagUntilTimeout>
 8011788:	4603      	mov	r3, r0
 801178a:	2b00      	cmp	r3, #0
 801178c:	d022      	beq.n	80117d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011796:	e853 3f00 	ldrex	r3, [r3]
 801179a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801179c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801179e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80117a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	461a      	mov	r2, r3
 80117aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80117ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80117b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80117b4:	e841 2300 	strex	r3, r2, [r1]
 80117b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80117ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d1e6      	bne.n	801178e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2220      	movs	r2, #32
 80117c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2200      	movs	r2, #0
 80117cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80117d0:	2303      	movs	r3, #3
 80117d2:	e063      	b.n	801189c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f003 0304 	and.w	r3, r3, #4
 80117de:	2b04      	cmp	r3, #4
 80117e0:	d149      	bne.n	8011876 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80117e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80117e6:	9300      	str	r3, [sp, #0]
 80117e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80117ea:	2200      	movs	r2, #0
 80117ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f000 f857 	bl	80118a4 <UART_WaitOnFlagUntilTimeout>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d03c      	beq.n	8011876 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011804:	e853 3f00 	ldrex	r3, [r3]
 8011808:	623b      	str	r3, [r7, #32]
   return(result);
 801180a:	6a3b      	ldr	r3, [r7, #32]
 801180c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011810:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	461a      	mov	r2, r3
 8011818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801181a:	633b      	str	r3, [r7, #48]	@ 0x30
 801181c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801181e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011822:	e841 2300 	strex	r3, r2, [r1]
 8011826:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801182a:	2b00      	cmp	r3, #0
 801182c:	d1e6      	bne.n	80117fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	3308      	adds	r3, #8
 8011834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	e853 3f00 	ldrex	r3, [r3]
 801183c:	60fb      	str	r3, [r7, #12]
   return(result);
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	f023 0301 	bic.w	r3, r3, #1
 8011844:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	3308      	adds	r3, #8
 801184c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801184e:	61fa      	str	r2, [r7, #28]
 8011850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011852:	69b9      	ldr	r1, [r7, #24]
 8011854:	69fa      	ldr	r2, [r7, #28]
 8011856:	e841 2300 	strex	r3, r2, [r1]
 801185a:	617b      	str	r3, [r7, #20]
   return(result);
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d1e5      	bne.n	801182e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2220      	movs	r2, #32
 8011866:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2200      	movs	r2, #0
 801186e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011872:	2303      	movs	r3, #3
 8011874:	e012      	b.n	801189c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2220      	movs	r2, #32
 801187a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2220      	movs	r2, #32
 8011882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2200      	movs	r2, #0
 801188a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2200      	movs	r2, #0
 8011896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801189a:	2300      	movs	r3, #0
}
 801189c:	4618      	mov	r0, r3
 801189e:	3758      	adds	r7, #88	@ 0x58
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b084      	sub	sp, #16
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	603b      	str	r3, [r7, #0]
 80118b0:	4613      	mov	r3, r2
 80118b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80118b4:	e04f      	b.n	8011956 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118bc:	d04b      	beq.n	8011956 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80118be:	f7f1 fef1 	bl	80036a4 <HAL_GetTick>
 80118c2:	4602      	mov	r2, r0
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	1ad3      	subs	r3, r2, r3
 80118c8:	69ba      	ldr	r2, [r7, #24]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d302      	bcc.n	80118d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d101      	bne.n	80118d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80118d4:	2303      	movs	r3, #3
 80118d6:	e04e      	b.n	8011976 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f003 0304 	and.w	r3, r3, #4
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d037      	beq.n	8011956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	2b80      	cmp	r3, #128	@ 0x80
 80118ea:	d034      	beq.n	8011956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	2b40      	cmp	r3, #64	@ 0x40
 80118f0:	d031      	beq.n	8011956 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	69db      	ldr	r3, [r3, #28]
 80118f8:	f003 0308 	and.w	r3, r3, #8
 80118fc:	2b08      	cmp	r3, #8
 80118fe:	d110      	bne.n	8011922 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	2208      	movs	r2, #8
 8011906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011908:	68f8      	ldr	r0, [r7, #12]
 801190a:	f000 f838 	bl	801197e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2208      	movs	r2, #8
 8011912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2200      	movs	r2, #0
 801191a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801191e:	2301      	movs	r3, #1
 8011920:	e029      	b.n	8011976 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	69db      	ldr	r3, [r3, #28]
 8011928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801192c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011930:	d111      	bne.n	8011956 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801193a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f000 f81e 	bl	801197e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	2220      	movs	r2, #32
 8011946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	2200      	movs	r2, #0
 801194e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011952:	2303      	movs	r3, #3
 8011954:	e00f      	b.n	8011976 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	69da      	ldr	r2, [r3, #28]
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	4013      	ands	r3, r2
 8011960:	68ba      	ldr	r2, [r7, #8]
 8011962:	429a      	cmp	r2, r3
 8011964:	bf0c      	ite	eq
 8011966:	2301      	moveq	r3, #1
 8011968:	2300      	movne	r3, #0
 801196a:	b2db      	uxtb	r3, r3
 801196c:	461a      	mov	r2, r3
 801196e:	79fb      	ldrb	r3, [r7, #7]
 8011970:	429a      	cmp	r2, r3
 8011972:	d0a0      	beq.n	80118b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011974:	2300      	movs	r3, #0
}
 8011976:	4618      	mov	r0, r3
 8011978:	3710      	adds	r7, #16
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}

0801197e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801197e:	b480      	push	{r7}
 8011980:	b095      	sub	sp, #84	@ 0x54
 8011982:	af00      	add	r7, sp, #0
 8011984:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801198c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801198e:	e853 3f00 	ldrex	r3, [r3]
 8011992:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011996:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801199a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	461a      	mov	r2, r3
 80119a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80119a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80119aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80119ac:	e841 2300 	strex	r3, r2, [r1]
 80119b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80119b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1e6      	bne.n	8011986 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	3308      	adds	r3, #8
 80119be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119c0:	6a3b      	ldr	r3, [r7, #32]
 80119c2:	e853 3f00 	ldrex	r3, [r3]
 80119c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80119c8:	69fb      	ldr	r3, [r7, #28]
 80119ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80119ce:	f023 0301 	bic.w	r3, r3, #1
 80119d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	3308      	adds	r3, #8
 80119da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80119de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80119e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119e4:	e841 2300 	strex	r3, r2, [r1]
 80119e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80119ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d1e3      	bne.n	80119b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	d118      	bne.n	8011a2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	e853 3f00 	ldrex	r3, [r3]
 8011a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	f023 0310 	bic.w	r3, r3, #16
 8011a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	461a      	mov	r2, r3
 8011a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a16:	61bb      	str	r3, [r7, #24]
 8011a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a1a:	6979      	ldr	r1, [r7, #20]
 8011a1c:	69ba      	ldr	r2, [r7, #24]
 8011a1e:	e841 2300 	strex	r3, r2, [r1]
 8011a22:	613b      	str	r3, [r7, #16]
   return(result);
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d1e6      	bne.n	80119f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2220      	movs	r2, #32
 8011a2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2200      	movs	r2, #0
 8011a36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011a3e:	bf00      	nop
 8011a40:	3754      	adds	r7, #84	@ 0x54
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr

08011a4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a4a:	b580      	push	{r7, lr}
 8011a4c:	b084      	sub	sp, #16
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2200      	movs	r2, #0
 8011a64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a68:	68f8      	ldr	r0, [r7, #12]
 8011a6a:	f7ff fc0b 	bl	8011284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a6e:	bf00      	nop
 8011a70:	3710      	adds	r7, #16
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b088      	sub	sp, #32
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	e853 3f00 	ldrex	r3, [r3]
 8011a8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a92:	61fb      	str	r3, [r7, #28]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	461a      	mov	r2, r3
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	61bb      	str	r3, [r7, #24]
 8011a9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aa0:	6979      	ldr	r1, [r7, #20]
 8011aa2:	69ba      	ldr	r2, [r7, #24]
 8011aa4:	e841 2300 	strex	r3, r2, [r1]
 8011aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d1e6      	bne.n	8011a7e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2220      	movs	r2, #32
 8011ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2200      	movs	r2, #0
 8011abc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f7ff fbd6 	bl	8011270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ac4:	bf00      	nop
 8011ac6:	3720      	adds	r7, #32
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011acc:	b480      	push	{r7}
 8011ace:	b083      	sub	sp, #12
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011ad4:	bf00      	nop
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr

08011ae0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b083      	sub	sp, #12
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011ae8:	bf00      	nop
 8011aea:	370c      	adds	r7, #12
 8011aec:	46bd      	mov	sp, r7
 8011aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af2:	4770      	bx	lr

08011af4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011af4:	b480      	push	{r7}
 8011af6:	b085      	sub	sp, #20
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d101      	bne.n	8011b0a <HAL_UARTEx_DisableFifoMode+0x16>
 8011b06:	2302      	movs	r3, #2
 8011b08:	e027      	b.n	8011b5a <HAL_UARTEx_DisableFifoMode+0x66>
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2224      	movs	r2, #36	@ 0x24
 8011b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	681a      	ldr	r2, [r3, #0]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f022 0201 	bic.w	r2, r2, #1
 8011b30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011b38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	68fa      	ldr	r2, [r7, #12]
 8011b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2220      	movs	r2, #32
 8011b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2200      	movs	r2, #0
 8011b54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011b58:	2300      	movs	r3, #0
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3714      	adds	r7, #20
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr

08011b66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b084      	sub	sp, #16
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011b76:	2b01      	cmp	r3, #1
 8011b78:	d101      	bne.n	8011b7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011b7a:	2302      	movs	r3, #2
 8011b7c:	e02d      	b.n	8011bda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2201      	movs	r2, #1
 8011b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2224      	movs	r2, #36	@ 0x24
 8011b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	681a      	ldr	r2, [r3, #0]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f022 0201 	bic.w	r2, r2, #1
 8011ba4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	689b      	ldr	r3, [r3, #8]
 8011bac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	683a      	ldr	r2, [r7, #0]
 8011bb6:	430a      	orrs	r2, r1
 8011bb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f000 f850 	bl	8011c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2220      	movs	r2, #32
 8011bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011bd8:	2300      	movs	r3, #0
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3710      	adds	r7, #16
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}

08011be2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011be2:	b580      	push	{r7, lr}
 8011be4:	b084      	sub	sp, #16
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d101      	bne.n	8011bfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011bf6:	2302      	movs	r3, #2
 8011bf8:	e02d      	b.n	8011c56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2224      	movs	r2, #36	@ 0x24
 8011c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	681a      	ldr	r2, [r3, #0]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f022 0201 	bic.w	r2, r2, #1
 8011c20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	689b      	ldr	r3, [r3, #8]
 8011c28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	683a      	ldr	r2, [r7, #0]
 8011c32:	430a      	orrs	r2, r1
 8011c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 f812 	bl	8011c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	68fa      	ldr	r2, [r7, #12]
 8011c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2220      	movs	r2, #32
 8011c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011c54:	2300      	movs	r3, #0
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3710      	adds	r7, #16
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
	...

08011c60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b085      	sub	sp, #20
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d108      	bne.n	8011c82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2201      	movs	r2, #1
 8011c74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011c80:	e031      	b.n	8011ce6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011c82:	2308      	movs	r3, #8
 8011c84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011c86:	2308      	movs	r3, #8
 8011c88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	689b      	ldr	r3, [r3, #8]
 8011c90:	0e5b      	lsrs	r3, r3, #25
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	f003 0307 	and.w	r3, r3, #7
 8011c98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	0f5b      	lsrs	r3, r3, #29
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	f003 0307 	and.w	r3, r3, #7
 8011ca8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011caa:	7bbb      	ldrb	r3, [r7, #14]
 8011cac:	7b3a      	ldrb	r2, [r7, #12]
 8011cae:	4911      	ldr	r1, [pc, #68]	@ (8011cf4 <UARTEx_SetNbDataToProcess+0x94>)
 8011cb0:	5c8a      	ldrb	r2, [r1, r2]
 8011cb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011cb6:	7b3a      	ldrb	r2, [r7, #12]
 8011cb8:	490f      	ldr	r1, [pc, #60]	@ (8011cf8 <UARTEx_SetNbDataToProcess+0x98>)
 8011cba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011cbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011cc8:	7bfb      	ldrb	r3, [r7, #15]
 8011cca:	7b7a      	ldrb	r2, [r7, #13]
 8011ccc:	4909      	ldr	r1, [pc, #36]	@ (8011cf4 <UARTEx_SetNbDataToProcess+0x94>)
 8011cce:	5c8a      	ldrb	r2, [r1, r2]
 8011cd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011cd4:	7b7a      	ldrb	r2, [r7, #13]
 8011cd6:	4908      	ldr	r1, [pc, #32]	@ (8011cf8 <UARTEx_SetNbDataToProcess+0x98>)
 8011cd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011cda:	fb93 f3f2 	sdiv	r3, r3, r2
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011ce6:	bf00      	nop
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	0801272c 	.word	0x0801272c
 8011cf8:	08012734 	.word	0x08012734

08011cfc <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b086      	sub	sp, #24
 8011d00:	af02      	add	r7, sp, #8
 8011d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d04:	2300      	movs	r3, #0
 8011d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011d08:	f7f1 fccc 	bl	80036a4 <HAL_GetTick>
 8011d0c:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d102      	bne.n	8011d1a <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011d14:	2301      	movs	r3, #1
 8011d16:	73fb      	strb	r3, [r7, #15]
 8011d18:	e137      	b.n	8011f8a <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4a76      	ldr	r2, [pc, #472]	@ (8011ef8 <HAL_XSPI_Init+0x1fc>)
 8011d20:	4293      	cmp	r3, r2
 8011d22:	d008      	beq.n	8011d36 <HAL_XSPI_Init+0x3a>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	4a74      	ldr	r2, [pc, #464]	@ (8011efc <HAL_XSPI_Init+0x200>)
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	d003      	beq.n	8011d36 <HAL_XSPI_Init+0x3a>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	4a73      	ldr	r2, [pc, #460]	@ (8011f00 <HAL_XSPI_Init+0x204>)
 8011d34:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	4a72      	ldr	r2, [pc, #456]	@ (8011f04 <HAL_XSPI_Init+0x208>)
 8011d3c:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	4a6d      	ldr	r2, [pc, #436]	@ (8011ef8 <HAL_XSPI_Init+0x1fc>)
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d008      	beq.n	8011d5a <HAL_XSPI_Init+0x5e>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4a6b      	ldr	r2, [pc, #428]	@ (8011efc <HAL_XSPI_Init+0x200>)
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	d003      	beq.n	8011d5a <HAL_XSPI_Init+0x5e>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	4a6a      	ldr	r2, [pc, #424]	@ (8011f00 <HAL_XSPI_Init+0x204>)
 8011d58:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	4a66      	ldr	r2, [pc, #408]	@ (8011ef8 <HAL_XSPI_Init+0x1fc>)
 8011d60:	4293      	cmp	r3, r2
 8011d62:	d008      	beq.n	8011d76 <HAL_XSPI_Init+0x7a>
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	4a64      	ldr	r2, [pc, #400]	@ (8011efc <HAL_XSPI_Init+0x200>)
 8011d6a:	4293      	cmp	r3, r2
 8011d6c:	d003      	beq.n	8011d76 <HAL_XSPI_Init+0x7a>
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	4a63      	ldr	r2, [pc, #396]	@ (8011f00 <HAL_XSPI_Init+0x204>)
 8011d74:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2200      	movs	r2, #0
 8011d7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	f040 8102 	bne.w	8011f8a <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7f0 fc8a 	bl	80026a0 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011d8c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f000 f8ff 	bl	8011f94 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	689a      	ldr	r2, [r3, #8]
 8011d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8011f08 <HAL_XSPI_Init+0x20c>)
 8011d9e:	4013      	ands	r3, r2
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	68d1      	ldr	r1, [r2, #12]
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	6912      	ldr	r2, [r2, #16]
 8011da8:	0412      	lsls	r2, r2, #16
 8011daa:	4311      	orrs	r1, r2
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	6952      	ldr	r2, [r2, #20]
 8011db0:	3a01      	subs	r2, #1
 8011db2:	0212      	lsls	r2, r2, #8
 8011db4:	4311      	orrs	r1, r2
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	69d2      	ldr	r2, [r2, #28]
 8011dba:	4311      	orrs	r1, r2
 8011dbc:	687a      	ldr	r2, [r7, #4]
 8011dbe:	6812      	ldr	r2, [r2, #0]
 8011dc0:	430b      	orrs	r3, r1
 8011dc2:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8011ef8 <HAL_XSPI_Init+0x1fc>)
 8011dca:	4293      	cmp	r3, r2
 8011dcc:	d00e      	beq.n	8011dec <HAL_XSPI_Init+0xf0>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8011efc <HAL_XSPI_Init+0x200>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d009      	beq.n	8011dec <HAL_XSPI_Init+0xf0>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	4a48      	ldr	r2, [pc, #288]	@ (8011f00 <HAL_XSPI_Init+0x204>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	d004      	beq.n	8011dec <HAL_XSPI_Init+0xf0>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	4a49      	ldr	r2, [pc, #292]	@ (8011f0c <HAL_XSPI_Init+0x210>)
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d10a      	bne.n	8011e02 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	689b      	ldr	r3, [r3, #8]
 8011df2:	f023 0108 	bic.w	r1, r3, #8
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	430a      	orrs	r2, r1
 8011e00:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6a1a      	ldr	r2, [r3, #32]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	430a      	orrs	r2, r1
 8011e16:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	691b      	ldr	r3, [r3, #16]
 8011e1e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e26:	041a      	lsls	r2, r3, #16
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	430a      	orrs	r2, r1
 8011e2e:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a30      	ldr	r2, [pc, #192]	@ (8011ef8 <HAL_XSPI_Init+0x1fc>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d00e      	beq.n	8011e58 <HAL_XSPI_Init+0x15c>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8011efc <HAL_XSPI_Init+0x200>)
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d009      	beq.n	8011e58 <HAL_XSPI_Init+0x15c>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	4a2d      	ldr	r2, [pc, #180]	@ (8011f00 <HAL_XSPI_Init+0x204>)
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	d004      	beq.n	8011e58 <HAL_XSPI_Init+0x15c>
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4a2e      	ldr	r2, [pc, #184]	@ (8011f0c <HAL_XSPI_Init+0x210>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d10a      	bne.n	8011e6e <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	691b      	ldr	r3, [r3, #16]
 8011e5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	430a      	orrs	r2, r1
 8011e6c:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011e76:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	3b01      	subs	r3, #1
 8011e88:	021a      	lsls	r2, r3, #8
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	430a      	orrs	r2, r1
 8011e90:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	2120      	movs	r1, #32
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 f887 	bl	8011fb2 <XSPI_WaitFlagStateUntilTimeout>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011ea8:	7bfb      	ldrb	r3, [r7, #15]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d16d      	bne.n	8011f8a <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	68db      	ldr	r3, [r3, #12]
 8011eb4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	430a      	orrs	r2, r1
 8011ec2:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8011f04 <HAL_XSPI_Init+0x208>)
 8011eca:	4293      	cmp	r3, r2
 8011ecc:	d004      	beq.n	8011ed8 <HAL_XSPI_Init+0x1dc>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8011f10 <HAL_XSPI_Init+0x214>)
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	d11d      	bne.n	8011f14 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011edc:	9300      	str	r3, [sp, #0]
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	2120      	movs	r1, #32
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f000 f864 	bl	8011fb2 <XSPI_WaitFlagStateUntilTimeout>
 8011eea:	4603      	mov	r3, r0
 8011eec:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8011eee:	7bfb      	ldrb	r3, [r7, #15]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d00f      	beq.n	8011f14 <HAL_XSPI_Init+0x218>
          {
            return status;
 8011ef4:	7bfb      	ldrb	r3, [r7, #15]
 8011ef6:	e049      	b.n	8011f8c <HAL_XSPI_Init+0x290>
 8011ef8:	420d1400 	.word	0x420d1400
 8011efc:	520d1400 	.word	0x520d1400
 8011f00:	420d2400 	.word	0x420d2400
 8011f04:	420d3400 	.word	0x420d3400
 8011f08:	f8e0c0fc 	.word	0xf8e0c0fc
 8011f0c:	520d2400 	.word	0x520d2400
 8011f10:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	689a      	ldr	r2, [r3, #8]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	430a      	orrs	r2, r1
 8011f28:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8011f32:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f3e:	431a      	orrs	r2, r3
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	430a      	orrs	r2, r1
 8011f46:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	f042 0201 	orr.w	r2, r2, #1
 8011f58:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	699b      	ldr	r3, [r3, #24]
 8011f5e:	2b02      	cmp	r3, #2
 8011f60:	d107      	bne.n	8011f72 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	689a      	ldr	r2, [r3, #8]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f042 0202 	orr.w	r2, r2, #2
 8011f70:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011f7a:	d103      	bne.n	8011f84 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2201      	movs	r2, #1
 8011f80:	655a      	str	r2, [r3, #84]	@ 0x54
 8011f82:	e002      	b.n	8011f8a <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2202      	movs	r2, #2
 8011f88:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8011f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3710      	adds	r7, #16
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b083      	sub	sp, #12
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	683a      	ldr	r2, [r7, #0]
 8011fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8011fa4:	2300      	movs	r3, #0
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	370c      	adds	r7, #12
 8011faa:	46bd      	mov	sp, r7
 8011fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb0:	4770      	bx	lr

08011fb2 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8011fb2:	b580      	push	{r7, lr}
 8011fb4:	b084      	sub	sp, #16
 8011fb6:	af00      	add	r7, sp, #0
 8011fb8:	60f8      	str	r0, [r7, #12]
 8011fba:	60b9      	str	r1, [r7, #8]
 8011fbc:	603b      	str	r3, [r7, #0]
 8011fbe:	4613      	mov	r3, r2
 8011fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8011fc2:	e01a      	b.n	8011ffa <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011fc4:	69bb      	ldr	r3, [r7, #24]
 8011fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fca:	d016      	beq.n	8011ffa <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011fcc:	f7f1 fb6a 	bl	80036a4 <HAL_GetTick>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	69ba      	ldr	r2, [r7, #24]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d302      	bcc.n	8011fe2 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8011fdc:	69bb      	ldr	r3, [r7, #24]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d10b      	bne.n	8011ffa <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011fe8:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011fee:	f043 0201 	orr.w	r2, r3, #1
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8011ff6:	2303      	movs	r3, #3
 8011ff8:	e00e      	b.n	8012018 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	6a1a      	ldr	r2, [r3, #32]
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	4013      	ands	r3, r2
 8012004:	2b00      	cmp	r3, #0
 8012006:	bf14      	ite	ne
 8012008:	2301      	movne	r3, #1
 801200a:	2300      	moveq	r3, #0
 801200c:	b2db      	uxtb	r3, r3
 801200e:	461a      	mov	r2, r3
 8012010:	79fb      	ldrb	r3, [r7, #7]
 8012012:	429a      	cmp	r2, r3
 8012014:	d1d6      	bne.n	8011fc4 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012016:	2300      	movs	r3, #0
}
 8012018:	4618      	mov	r0, r3
 801201a:	3710      	adds	r7, #16
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012020:	b084      	sub	sp, #16
 8012022:	b580      	push	{r7, lr}
 8012024:	b084      	sub	sp, #16
 8012026:	af00      	add	r7, sp, #0
 8012028:	6078      	str	r0, [r7, #4]
 801202a:	f107 001c 	add.w	r0, r7, #28
 801202e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8012032:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012036:	2b03      	cmp	r3, #3
 8012038:	d105      	bne.n	8012046 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 fa8e 	bl	8012568 <USB_CoreReset>
 801204c:	4603      	mov	r3, r0
 801204e:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8012050:	7fbb      	ldrb	r3, [r7, #30]
 8012052:	2b01      	cmp	r3, #1
 8012054:	d10b      	bne.n	801206e <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	689b      	ldr	r3, [r3, #8]
 801205a:	f043 0208 	orr.w	r2, r3, #8
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	689b      	ldr	r3, [r3, #8]
 8012066:	f043 0220 	orr.w	r2, r3, #32
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 801206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012070:	4618      	mov	r0, r3
 8012072:	3710      	adds	r7, #16
 8012074:	46bd      	mov	sp, r7
 8012076:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801207a:	b004      	add	sp, #16
 801207c:	4770      	bx	lr

0801207e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801207e:	b480      	push	{r7}
 8012080:	b083      	sub	sp, #12
 8012082:	af00      	add	r7, sp, #0
 8012084:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	689b      	ldr	r3, [r3, #8]
 801208a:	f023 0201 	bic.w	r2, r3, #1
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012092:	2300      	movs	r3, #0
}
 8012094:	4618      	mov	r0, r3
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr

080120a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	460b      	mov	r3, r1
 80120aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80120ac:	2300      	movs	r3, #0
 80120ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80120bc:	78fb      	ldrb	r3, [r7, #3]
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d115      	bne.n	80120ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80120ce:	200a      	movs	r0, #10
 80120d0:	f7f1 faf4 	bl	80036bc <HAL_Delay>
      ms += 10U;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	330a      	adds	r3, #10
 80120d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 fa36 	bl	801254c <USB_GetMode>
 80120e0:	4603      	mov	r3, r0
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	d01e      	beq.n	8012124 <USB_SetCurrentMode+0x84>
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80120ea:	d9f0      	bls.n	80120ce <USB_SetCurrentMode+0x2e>
 80120ec:	e01a      	b.n	8012124 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80120ee:	78fb      	ldrb	r3, [r7, #3]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d115      	bne.n	8012120 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012100:	200a      	movs	r0, #10
 8012102:	f7f1 fadb 	bl	80036bc <HAL_Delay>
      ms += 10U;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	330a      	adds	r3, #10
 801210a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 fa1d 	bl	801254c <USB_GetMode>
 8012112:	4603      	mov	r3, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d005      	beq.n	8012124 <USB_SetCurrentMode+0x84>
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2bc7      	cmp	r3, #199	@ 0xc7
 801211c:	d9f0      	bls.n	8012100 <USB_SetCurrentMode+0x60>
 801211e:	e001      	b.n	8012124 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012120:	2301      	movs	r3, #1
 8012122:	e005      	b.n	8012130 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2bc8      	cmp	r3, #200	@ 0xc8
 8012128:	d101      	bne.n	801212e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801212a:	2301      	movs	r3, #1
 801212c:	e000      	b.n	8012130 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801212e:	2300      	movs	r3, #0
}
 8012130:	4618      	mov	r0, r3
 8012132:	3710      	adds	r7, #16
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012138:	b084      	sub	sp, #16
 801213a:	b580      	push	{r7, lr}
 801213c:	b086      	sub	sp, #24
 801213e:	af00      	add	r7, sp, #0
 8012140:	6078      	str	r0, [r7, #4]
 8012142:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801214a:	2300      	movs	r3, #0
 801214c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012152:	2300      	movs	r3, #0
 8012154:	613b      	str	r3, [r7, #16]
 8012156:	e009      	b.n	801216c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012158:	687a      	ldr	r2, [r7, #4]
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	3340      	adds	r3, #64	@ 0x40
 801215e:	009b      	lsls	r3, r3, #2
 8012160:	4413      	add	r3, r2
 8012162:	2200      	movs	r2, #0
 8012164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	3301      	adds	r3, #1
 801216a:	613b      	str	r3, [r7, #16]
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	2b0e      	cmp	r3, #14
 8012170:	d9f2      	bls.n	8012158 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012176:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801217e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012182:	2b00      	cmp	r3, #0
 8012184:	d11c      	bne.n	80121c0 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801218c:	685b      	ldr	r3, [r3, #4]
 801218e:	68fa      	ldr	r2, [r7, #12]
 8012190:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012194:	f043 0302 	orr.w	r3, r3, #2
 8012198:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801219e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121aa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80121be:	e011      	b.n	80121e4 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121d0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80121ea:	461a      	mov	r2, r3
 80121ec:	2300      	movs	r3, #0
 80121ee:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80121f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80121f4:	2b03      	cmp	r3, #3
 80121f6:	d10d      	bne.n	8012214 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80121f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d104      	bne.n	801220a <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012200:	2100      	movs	r1, #0
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 f968 	bl	80124d8 <USB_SetDevSpeed>
 8012208:	e008      	b.n	801221c <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801220a:	2101      	movs	r1, #1
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 f963 	bl	80124d8 <USB_SetDevSpeed>
 8012212:	e003      	b.n	801221c <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012214:	2103      	movs	r1, #3
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f000 f95e 	bl	80124d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801221c:	2110      	movs	r1, #16
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f000 f8fa 	bl	8012418 <USB_FlushTxFifo>
 8012224:	4603      	mov	r3, r0
 8012226:	2b00      	cmp	r3, #0
 8012228:	d001      	beq.n	801222e <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 801222a:	2301      	movs	r3, #1
 801222c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f000 f924 	bl	801247c <USB_FlushRxFifo>
 8012234:	4603      	mov	r3, r0
 8012236:	2b00      	cmp	r3, #0
 8012238:	d001      	beq.n	801223e <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 801223a:	2301      	movs	r3, #1
 801223c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012244:	461a      	mov	r2, r3
 8012246:	2300      	movs	r3, #0
 8012248:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012250:	461a      	mov	r2, r3
 8012252:	2300      	movs	r3, #0
 8012254:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801225c:	461a      	mov	r2, r3
 801225e:	2300      	movs	r3, #0
 8012260:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012262:	2300      	movs	r3, #0
 8012264:	613b      	str	r3, [r7, #16]
 8012266:	e043      	b.n	80122f0 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	015a      	lsls	r2, r3, #5
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	4413      	add	r3, r2
 8012270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801227a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801227e:	d118      	bne.n	80122b2 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d10a      	bne.n	801229c <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	015a      	lsls	r2, r3, #5
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	4413      	add	r3, r2
 801228e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012292:	461a      	mov	r2, r3
 8012294:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012298:	6013      	str	r3, [r2, #0]
 801229a:	e013      	b.n	80122c4 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	015a      	lsls	r2, r3, #5
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	4413      	add	r3, r2
 80122a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122a8:	461a      	mov	r2, r3
 80122aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80122ae:	6013      	str	r3, [r2, #0]
 80122b0:	e008      	b.n	80122c4 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	015a      	lsls	r2, r3, #5
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	4413      	add	r3, r2
 80122ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122be:	461a      	mov	r2, r3
 80122c0:	2300      	movs	r3, #0
 80122c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	015a      	lsls	r2, r3, #5
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	4413      	add	r3, r2
 80122cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122d0:	461a      	mov	r2, r3
 80122d2:	2300      	movs	r3, #0
 80122d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	015a      	lsls	r2, r3, #5
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	4413      	add	r3, r2
 80122de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122e2:	461a      	mov	r2, r3
 80122e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80122e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	3301      	adds	r3, #1
 80122ee:	613b      	str	r3, [r7, #16]
 80122f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80122f4:	461a      	mov	r2, r3
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	4293      	cmp	r3, r2
 80122fa:	d3b5      	bcc.n	8012268 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80122fc:	2300      	movs	r3, #0
 80122fe:	613b      	str	r3, [r7, #16]
 8012300:	e043      	b.n	801238a <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	015a      	lsls	r2, r3, #5
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	4413      	add	r3, r2
 801230a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012314:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012318:	d118      	bne.n	801234c <USB_DevInit+0x214>
    {
      if (i == 0U)
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d10a      	bne.n	8012336 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	015a      	lsls	r2, r3, #5
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	4413      	add	r3, r2
 8012328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801232c:	461a      	mov	r2, r3
 801232e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012332:	6013      	str	r3, [r2, #0]
 8012334:	e013      	b.n	801235e <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	015a      	lsls	r2, r3, #5
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	4413      	add	r3, r2
 801233e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012342:	461a      	mov	r2, r3
 8012344:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012348:	6013      	str	r3, [r2, #0]
 801234a:	e008      	b.n	801235e <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801234c:	693b      	ldr	r3, [r7, #16]
 801234e:	015a      	lsls	r2, r3, #5
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	4413      	add	r3, r2
 8012354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012358:	461a      	mov	r2, r3
 801235a:	2300      	movs	r3, #0
 801235c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	015a      	lsls	r2, r3, #5
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	4413      	add	r3, r2
 8012366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801236a:	461a      	mov	r2, r3
 801236c:	2300      	movs	r3, #0
 801236e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	015a      	lsls	r2, r3, #5
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	4413      	add	r3, r2
 8012378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801237c:	461a      	mov	r2, r3
 801237e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012382:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	3301      	adds	r3, #1
 8012388:	613b      	str	r3, [r7, #16]
 801238a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801238e:	461a      	mov	r2, r3
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	4293      	cmp	r3, r2
 8012394:	d3b5      	bcc.n	8012302 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801239c:	691b      	ldr	r3, [r3, #16]
 801239e:	68fa      	ldr	r2, [r7, #12]
 80123a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80123a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80123a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2200      	movs	r2, #0
 80123ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80123b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80123b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d105      	bne.n	80123cc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	699b      	ldr	r3, [r3, #24]
 80123c4:	f043 0210 	orr.w	r2, r3, #16
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	699a      	ldr	r2, [r3, #24]
 80123d0:	4b10      	ldr	r3, [pc, #64]	@ (8012414 <USB_DevInit+0x2dc>)
 80123d2:	4313      	orrs	r3, r2
 80123d4:	687a      	ldr	r2, [r7, #4]
 80123d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80123d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d005      	beq.n	80123ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	699b      	ldr	r3, [r3, #24]
 80123e4:	f043 0208 	orr.w	r2, r3, #8
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80123ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80123f0:	2b01      	cmp	r3, #1
 80123f2:	d107      	bne.n	8012404 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	699b      	ldr	r3, [r3, #24]
 80123f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80123fc:	f043 0304 	orr.w	r3, r3, #4
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012404:	7dfb      	ldrb	r3, [r7, #23]
}
 8012406:	4618      	mov	r0, r3
 8012408:	3718      	adds	r7, #24
 801240a:	46bd      	mov	sp, r7
 801240c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012410:	b004      	add	sp, #16
 8012412:	4770      	bx	lr
 8012414:	803c3800 	.word	0x803c3800

08012418 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012418:	b480      	push	{r7}
 801241a:	b085      	sub	sp, #20
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012422:	2300      	movs	r3, #0
 8012424:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	3301      	adds	r3, #1
 801242a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012432:	d901      	bls.n	8012438 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012434:	2303      	movs	r3, #3
 8012436:	e01b      	b.n	8012470 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	691b      	ldr	r3, [r3, #16]
 801243c:	2b00      	cmp	r3, #0
 801243e:	daf2      	bge.n	8012426 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012440:	2300      	movs	r3, #0
 8012442:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	019b      	lsls	r3, r3, #6
 8012448:	f043 0220 	orr.w	r2, r3, #32
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	3301      	adds	r3, #1
 8012454:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801245c:	d901      	bls.n	8012462 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801245e:	2303      	movs	r3, #3
 8012460:	e006      	b.n	8012470 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	691b      	ldr	r3, [r3, #16]
 8012466:	f003 0320 	and.w	r3, r3, #32
 801246a:	2b20      	cmp	r3, #32
 801246c:	d0f0      	beq.n	8012450 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801246e:	2300      	movs	r3, #0
}
 8012470:	4618      	mov	r0, r3
 8012472:	3714      	adds	r7, #20
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801247c:	b480      	push	{r7}
 801247e:	b085      	sub	sp, #20
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012484:	2300      	movs	r3, #0
 8012486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	3301      	adds	r3, #1
 801248c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012494:	d901      	bls.n	801249a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012496:	2303      	movs	r3, #3
 8012498:	e018      	b.n	80124cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	691b      	ldr	r3, [r3, #16]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	daf2      	bge.n	8012488 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80124a2:	2300      	movs	r3, #0
 80124a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	2210      	movs	r2, #16
 80124aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	3301      	adds	r3, #1
 80124b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80124b8:	d901      	bls.n	80124be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80124ba:	2303      	movs	r3, #3
 80124bc:	e006      	b.n	80124cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	691b      	ldr	r3, [r3, #16]
 80124c2:	f003 0310 	and.w	r3, r3, #16
 80124c6:	2b10      	cmp	r3, #16
 80124c8:	d0f0      	beq.n	80124ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80124ca:	2300      	movs	r3, #0
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3714      	adds	r7, #20
 80124d0:	46bd      	mov	sp, r7
 80124d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d6:	4770      	bx	lr

080124d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80124d8:	b480      	push	{r7}
 80124da:	b085      	sub	sp, #20
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	460b      	mov	r3, r1
 80124e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124ee:	681a      	ldr	r2, [r3, #0]
 80124f0:	78fb      	ldrb	r3, [r7, #3]
 80124f2:	68f9      	ldr	r1, [r7, #12]
 80124f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80124f8:	4313      	orrs	r3, r2
 80124fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80124fc:	2300      	movs	r3, #0
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3714      	adds	r7, #20
 8012502:	46bd      	mov	sp, r7
 8012504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012508:	4770      	bx	lr

0801250a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801250a:	b480      	push	{r7}
 801250c:	b085      	sub	sp, #20
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	68fa      	ldr	r2, [r7, #12]
 8012520:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012524:	f023 0303 	bic.w	r3, r3, #3
 8012528:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	68fa      	ldr	r2, [r7, #12]
 8012534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012538:	f043 0302 	orr.w	r3, r3, #2
 801253c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801253e:	2300      	movs	r3, #0
}
 8012540:	4618      	mov	r0, r3
 8012542:	3714      	adds	r7, #20
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	695b      	ldr	r3, [r3, #20]
 8012558:	f003 0301 	and.w	r3, r3, #1
}
 801255c:	4618      	mov	r0, r3
 801255e:	370c      	adds	r7, #12
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012568:	b480      	push	{r7}
 801256a:	b085      	sub	sp, #20
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012570:	2300      	movs	r3, #0
 8012572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	3301      	adds	r3, #1
 8012578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012580:	d901      	bls.n	8012586 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012582:	2303      	movs	r3, #3
 8012584:	e01b      	b.n	80125be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	691b      	ldr	r3, [r3, #16]
 801258a:	2b00      	cmp	r3, #0
 801258c:	daf2      	bge.n	8012574 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801258e:	2300      	movs	r3, #0
 8012590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	691b      	ldr	r3, [r3, #16]
 8012596:	f043 0201 	orr.w	r2, r3, #1
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	3301      	adds	r3, #1
 80125a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80125aa:	d901      	bls.n	80125b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80125ac:	2303      	movs	r3, #3
 80125ae:	e006      	b.n	80125be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	691b      	ldr	r3, [r3, #16]
 80125b4:	f003 0301 	and.w	r3, r3, #1
 80125b8:	2b01      	cmp	r3, #1
 80125ba:	d0f0      	beq.n	801259e <USB_CoreReset+0x36>

  return HAL_OK;
 80125bc:	2300      	movs	r3, #0
}
 80125be:	4618      	mov	r0, r3
 80125c0:	3714      	adds	r7, #20
 80125c2:	46bd      	mov	sp, r7
 80125c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c8:	4770      	bx	lr

080125ca <memset>:
 80125ca:	4402      	add	r2, r0
 80125cc:	4603      	mov	r3, r0
 80125ce:	4293      	cmp	r3, r2
 80125d0:	d100      	bne.n	80125d4 <memset+0xa>
 80125d2:	4770      	bx	lr
 80125d4:	f803 1b01 	strb.w	r1, [r3], #1
 80125d8:	e7f9      	b.n	80125ce <memset+0x4>
	...

080125dc <__libc_init_array>:
 80125dc:	b570      	push	{r4, r5, r6, lr}
 80125de:	4d0d      	ldr	r5, [pc, #52]	@ (8012614 <__libc_init_array+0x38>)
 80125e0:	2600      	movs	r6, #0
 80125e2:	4c0d      	ldr	r4, [pc, #52]	@ (8012618 <__libc_init_array+0x3c>)
 80125e4:	1b64      	subs	r4, r4, r5
 80125e6:	10a4      	asrs	r4, r4, #2
 80125e8:	42a6      	cmp	r6, r4
 80125ea:	d109      	bne.n	8012600 <__libc_init_array+0x24>
 80125ec:	4d0b      	ldr	r5, [pc, #44]	@ (801261c <__libc_init_array+0x40>)
 80125ee:	2600      	movs	r6, #0
 80125f0:	4c0b      	ldr	r4, [pc, #44]	@ (8012620 <__libc_init_array+0x44>)
 80125f2:	f000 f817 	bl	8012624 <_init>
 80125f6:	1b64      	subs	r4, r4, r5
 80125f8:	10a4      	asrs	r4, r4, #2
 80125fa:	42a6      	cmp	r6, r4
 80125fc:	d105      	bne.n	801260a <__libc_init_array+0x2e>
 80125fe:	bd70      	pop	{r4, r5, r6, pc}
 8012600:	f855 3b04 	ldr.w	r3, [r5], #4
 8012604:	3601      	adds	r6, #1
 8012606:	4798      	blx	r3
 8012608:	e7ee      	b.n	80125e8 <__libc_init_array+0xc>
 801260a:	f855 3b04 	ldr.w	r3, [r5], #4
 801260e:	3601      	adds	r6, #1
 8012610:	4798      	blx	r3
 8012612:	e7f2      	b.n	80125fa <__libc_init_array+0x1e>
 8012614:	08012744 	.word	0x08012744
 8012618:	08012744 	.word	0x08012744
 801261c:	08012744 	.word	0x08012744
 8012620:	08012748 	.word	0x08012748

08012624 <_init>:
 8012624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012626:	bf00      	nop
 8012628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801262a:	bc08      	pop	{r3}
 801262c:	469e      	mov	lr, r3
 801262e:	4770      	bx	lr

08012630 <_fini>:
 8012630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012632:	bf00      	nop
 8012634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012636:	bc08      	pop	{r3}
 8012638:	469e      	mov	lr, r3
 801263a:	4770      	bx	lr
