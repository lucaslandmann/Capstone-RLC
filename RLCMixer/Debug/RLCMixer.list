
RLCMixer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118c8  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011b3c  08011b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c3c  08011c3c  0001302c  2**0
                  CONTENTS
  4 .ARM          00000008  08011c3c  08011c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c44  08011c44  0001302c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c44  08011c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011c48  08011c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08011c4c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046e4  2000002c  08011c78  0001302c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20004710  08011c78  00013710  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001302c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c32  00000000  00000000  00013062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d12  00000000  00000000  00044c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab0  00000000  00000000  000499a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000217b  00000000  00000000  0004c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047326  00000000  00000000  0004e5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b12  00000000  00000000  000958f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc9d7  00000000  00000000  000cb40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287de2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bdb8  00000000  00000000  00287e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00293be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000002c 	.word	0x2000002c
 8000290:	00000000 	.word	0x00000000
 8000294:	08011b24 	.word	0x08011b24

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000030 	.word	0x20000030
 80002b0:	08011b24 	.word	0x08011b24

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 fa63 	bl	8002a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8eb 	bl	80007b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f955 	bl	8000888 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f98a 	bl	80008f6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fef9 	bl	80013d8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fb87 	bl	8000cf8 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb47 	bl	8000c7c <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fbbb 	bl	8000d68 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc37 	bl	8000e64 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc75 	bl	8000ee4 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fc87 	bl	8000f0c <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fd05 	bl	800100c <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fdbd 	bl	8001180 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f985 	bl	8000914 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe6b 	bl	80012e4 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd4b 	bl	80010a8 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 fab9 	bl	8000b88 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fbe5 	bl	8000de4 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 feaf 	bl	800137c <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800061e:	f000 fe11 	bl	8001244 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //Begins DMA transfer for first ADC
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1));
 8000622:	220d      	movs	r2, #13
 8000624:	4950      	ldr	r1, [pc, #320]	@ (8000768 <main+0x19c>)
 8000626:	4851      	ldr	r0, [pc, #324]	@ (800076c <main+0x1a0>)
 8000628:	f003 f984 	bl	8003934 <HAL_ADC_Start_DMA>
  //begins DMA transfer for fourth ADC
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4));
 800062c:	2202      	movs	r2, #2
 800062e:	4950      	ldr	r1, [pc, #320]	@ (8000770 <main+0x1a4>)
 8000630:	4850      	ldr	r0, [pc, #320]	@ (8000774 <main+0x1a8>)
 8000632:	f003 f97f 	bl	8003934 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000636:	4850      	ldr	r0, [pc, #320]	@ (8000778 <main+0x1ac>)
 8000638:	f00e fbfe 	bl	800ee38 <HAL_TIM_Base_Start>

  HAL_Delay(2000);
 800063c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000640:	f002 faf2 	bl	8002c28 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000644:	2201      	movs	r2, #1
 8000646:	2104      	movs	r1, #4
 8000648:	484c      	ldr	r0, [pc, #304]	@ (800077c <main+0x1b0>)
 800064a:	f007 f8d7 	bl	80077fc <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800064e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000652:	f002 fae9 	bl	8002c28 <HAL_Delay>

  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e010      	b.n	800067e <main+0xb2>
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4a47      	ldr	r2, [pc, #284]	@ (8000780 <main+0x1b4>)
 8000662:	441a      	add	r2, r3
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2302      	movs	r3, #2
 800066a:	2190      	movs	r1, #144	@ 0x90
 800066c:	4845      	ldr	r0, [pc, #276]	@ (8000784 <main+0x1b8>)
 800066e:	f007 f9cf 	bl	8007a10 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	@ 0x64
 8000674:	f002 fad8 	bl	8002c28 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b1d      	cmp	r3, #29
 8000682:	d9eb      	bls.n	800065c <main+0x90>
  }

  HAL_Delay(100);
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f002 facf 	bl	8002c28 <HAL_Delay>
  //Begins DMA transfer for PCM6260
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData));
 800068a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068e:	493e      	ldr	r1, [pc, #248]	@ (8000788 <main+0x1bc>)
 8000690:	483e      	ldr	r0, [pc, #248]	@ (800078c <main+0x1c0>)
 8000692:	f00e f847 	bl	800e724 <HAL_SAI_Receive_DMA>
  //Begins DMA transfer for CS4334k-QZ
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacDataBuffer, DIM(dacDataBuffer));
 8000696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800069a:	493d      	ldr	r1, [pc, #244]	@ (8000790 <main+0x1c4>)
 800069c:	483d      	ldr	r0, [pc, #244]	@ (8000794 <main+0x1c8>)
 800069e:	f00d ff3f 	bl	800e520 <HAL_SAI_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t heartBeatTick = HAL_GetTick() + 1000;
 80006a2:	f002 fab5 	bl	8002c10 <HAL_GetTick>
 80006a6:	4603      	mov	r3, r0
 80006a8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006ac:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	  if(HAL_GetTick() >= heartBeatTick)
 80006ae:	f002 faaf 	bl	8002c10 <HAL_GetTick>
 80006b2:	4602      	mov	r2, r0
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d809      	bhi.n	80006ce <main+0x102>
	  {
		 heartBeatTick = HAL_GetTick() + 1000;
 80006ba:	f002 faa9 	bl	8002c10 <HAL_GetTick>
 80006be:	4603      	mov	r3, r0
 80006c0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006c4:	60bb      	str	r3, [r7, #8]
		 HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80006c6:	2104      	movs	r1, #4
 80006c8:	4833      	ldr	r0, [pc, #204]	@ (8000798 <main+0x1cc>)
 80006ca:	f007 f8af 	bl	800782c <HAL_GPIO_TogglePin>
	  }


	  if(adcReady)
 80006ce:	4b33      	ldr	r3, [pc, #204]	@ (800079c <main+0x1d0>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d02a      	beq.n	800072e <main+0x162>
	  {
		  //Loads sample data into Structs
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 80006d8:	2300      	movs	r3, #0
 80006da:	80fb      	strh	r3, [r7, #6]
 80006dc:	e021      	b.n	8000722 <main+0x156>
		  {
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 80006de:	2300      	movs	r3, #0
 80006e0:	80bb      	strh	r3, [r7, #4]
 80006e2:	e018      	b.n	8000716 <main+0x14a>
		        {
		        	//int32_t raw = adcData[channelCount*sample + channel] >> 1;
		        	//float convert = (float)raw / 16777216.0f;
		            channels[channel].channelData[sample] = signExtend24((uint32_t)(adcData[channelCount*sample + channel]));
 80006e4:	4b2e      	ldr	r3, [pc, #184]	@ (80007a0 <main+0x1d4>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	00d9      	lsls	r1, r3, #3
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	440b      	add	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	88fd      	ldrh	r5, [r7, #6]
 80006f8:	88bc      	ldrh	r4, [r7, #4]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ffa2 	bl	8001644 <signExtend24>
 8000700:	4602      	mov	r2, r0
 8000702:	4928      	ldr	r1, [pc, #160]	@ (80007a4 <main+0x1d8>)
 8000704:	238b      	movs	r3, #139	@ 0x8b
 8000706:	fb05 f303 	mul.w	r3, r5, r3
 800070a:	4423      	add	r3, r4
 800070c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000710:	88bb      	ldrh	r3, [r7, #4]
 8000712:	3301      	adds	r3, #1
 8000714:	80bb      	strh	r3, [r7, #4]
 8000716:	88bb      	ldrh	r3, [r7, #4]
 8000718:	2b7f      	cmp	r3, #127	@ 0x7f
 800071a:	d9e3      	bls.n	80006e4 <main+0x118>
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	3301      	adds	r3, #1
 8000720:	80fb      	strh	r3, [r7, #6]
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	2b07      	cmp	r3, #7
 8000726:	d9da      	bls.n	80006de <main+0x112>
		        }
		  }
		  //TODO: apply effects
		  //TODO: mix
		  adcReady = false;
 8000728:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <main+0x1d0>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
	  }
	  if(dacReady)
 800072e:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <main+0x1dc>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d0ba      	beq.n	80006ae <main+0xe2>
	  {
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000738:	2300      	movs	r3, #0
 800073a:	807b      	strh	r3, [r7, #2]
 800073c:	e00d      	b.n	800075a <main+0x18e>
		  {
			  dacData[(sample * 2) + 1] = channels[0].channelData[sample] * gain;
 800073e:	887a      	ldrh	r2, [r7, #2]
 8000740:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <main+0x1e0>)
 8000742:	6819      	ldr	r1, [r3, #0]
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	3304      	adds	r3, #4
 800074a:	440b      	add	r3, r1
 800074c:	4915      	ldr	r1, [pc, #84]	@ (80007a4 <main+0x1d8>)
 800074e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000752:	601a      	str	r2, [r3, #0]
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	3301      	adds	r3, #1
 8000758:	807b      	strh	r3, [r7, #2]
 800075a:	887b      	ldrh	r3, [r7, #2]
 800075c:	2b7f      	cmp	r3, #127	@ 0x7f
 800075e:	d9ee      	bls.n	800073e <main+0x172>
		  }
		  dacReady = false;
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <main+0x1dc>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() >= heartBeatTick)
 8000766:	e7a2      	b.n	80006ae <main+0xe2>
 8000768:	20000d7c 	.word	0x20000d7c
 800076c:	20000048 	.word	0x20000048
 8000770:	20000d98 	.word	0x20000d98
 8000774:	200000d4 	.word	0x200000d4
 8000778:	200007b8 	.word	0x200007b8
 800077c:	42021000 	.word	0x42021000
 8000780:	20000000 	.word	0x20000000
 8000784:	20000354 	.word	0x20000354
 8000788:	20000d9c 	.word	0x20000d9c
 800078c:	2000056c 	.word	0x2000056c
 8000790:	20002d9c 	.word	0x20002d9c
 8000794:	200004d4 	.word	0x200004d4
 8000798:	42020c00 	.word	0x42020c00
 800079c:	200046fc 	.word	0x200046fc
 80007a0:	20004700 	.word	0x20004700
 80007a4:	2000359c 	.word	0x2000359c
 80007a8:	200046fd 	.word	0x200046fd
 80007ac:	20004704 	.word	0x20004704

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09e      	sub	sp, #120	@ 0x78
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	2260      	movs	r2, #96	@ 0x60
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f011 f983 	bl	8011aca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007d4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007d8:	f008 ff5e 	bl	8009698 <HAL_PWREx_ControlVoltageScaling>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007e2:	f000 ff9d 	bl	8001720 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007e6:	f008 ff47 	bl	8009678 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007ea:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <SystemClock_Config+0xd4>)
 80007ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80007f0:	4a24      	ldr	r2, [pc, #144]	@ (8000884 <SystemClock_Config+0xd4>)
 80007f2:	f023 0318 	bic.w	r3, r3, #24
 80007f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007fa:	2307      	movs	r3, #7
 80007fc:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000802:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000804:	2381      	movs	r3, #129	@ 0x81
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080e:	2310      	movs	r3, #16
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	2303      	movs	r3, #3
 8000818:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000822:	2308      	movs	r3, #8
 8000824:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000826:	2308      	movs	r3, #8
 8000828:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000832:	230c      	movs	r3, #12
 8000834:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f009 f854 	bl	80098ec <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800084a:	f000 ff69 	bl	8001720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	231f      	movs	r3, #31
 8000850:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2303      	movs	r3, #3
 8000854:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	2103      	movs	r1, #3
 800086a:	4618      	mov	r0, r3
 800086c:	f009 ff1a 	bl	800a6a4 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000876:	f000 ff53 	bl	8001720 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3778      	adds	r7, #120	@ 0x78
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	46020c00 	.word	0x46020c00

08000888 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0b8      	sub	sp, #224	@ 0xe0
 800088c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	22e0      	movs	r2, #224	@ 0xe0
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f011 f918 	bl	8011aca <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 800089a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800089e:	f04f 0301 	mov.w	r3, #1
 80008a2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80008ac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80008b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80008b4:	2303      	movs	r3, #3
 80008b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80008bc:	230c      	movs	r3, #12
 80008be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 80008c4:	2303      	movs	r3, #3
 80008c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80008cc:	230c      	movs	r3, #12
 80008ce:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 80008d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 80008d6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4618      	mov	r0, r3
 80008e0:	f00a fab0 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 80008ea:	f000 ff19 	bl	8001720 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	37e0      	adds	r7, #224	@ 0xe0
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008fa:	f008 ffb9 	bl	8009870 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008fe:	2002      	movs	r0, #2
 8000900:	f008 ff56 	bl	80097b0 <HAL_PWREx_ConfigSupply>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800090a:	f000 ff09 	bl	8001720 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2220      	movs	r2, #32
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f011 f8d2 	bl	8011aca <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000926:	4b89      	ldr	r3, [pc, #548]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000928:	4a89      	ldr	r2, [pc, #548]	@ (8000b50 <MX_ADC1_Init+0x23c>)
 800092a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800092c:	4b87      	ldr	r3, [pc, #540]	@ (8000b4c <MX_ADC1_Init+0x238>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000932:	4b86      	ldr	r3, [pc, #536]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000938:	4b84      	ldr	r3, [pc, #528]	@ (8000b4c <MX_ADC1_Init+0x238>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093e:	4b83      	ldr	r3, [pc, #524]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000944:	4b81      	ldr	r3, [pc, #516]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000946:	2201      	movs	r2, #1
 8000948:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094a:	4b80      	ldr	r3, [pc, #512]	@ (8000b4c <MX_ADC1_Init+0x238>)
 800094c:	2204      	movs	r2, #4
 800094e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000950:	4b7e      	ldr	r3, [pc, #504]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000952:	2201      	movs	r2, #1
 8000954:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000956:	4b7d      	ldr	r3, [pc, #500]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000958:	2201      	movs	r2, #1
 800095a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 800095e:	4b7b      	ldr	r3, [pc, #492]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000960:	220d      	movs	r2, #13
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000964:	4b79      	ldr	r3, [pc, #484]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 800096c:	4b77      	ldr	r3, [pc, #476]	@ (8000b4c <MX_ADC1_Init+0x238>)
 800096e:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000972:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000974:	4b75      	ldr	r3, [pc, #468]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000976:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800097a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800097c:	4b73      	ldr	r3, [pc, #460]	@ (8000b4c <MX_ADC1_Init+0x238>)
 800097e:	2201      	movs	r2, #1
 8000980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000984:	4b71      	ldr	r3, [pc, #452]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000986:	2200      	movs	r2, #0
 8000988:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800098a:	4b70      	ldr	r3, [pc, #448]	@ (8000b4c <MX_ADC1_Init+0x238>)
 800098c:	2200      	movs	r2, #0
 800098e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000990:	4b6e      	ldr	r3, [pc, #440]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000992:	2200      	movs	r2, #0
 8000994:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000996:	4b6d      	ldr	r3, [pc, #436]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000998:	2203      	movs	r2, #3
 800099a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800099c:	4b6b      	ldr	r3, [pc, #428]	@ (8000b4c <MX_ADC1_Init+0x238>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a4:	4869      	ldr	r0, [pc, #420]	@ (8000b4c <MX_ADC1_Init+0x238>)
 80009a6:	f002 fcdd 	bl	8003364 <HAL_ADC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80009b0:	f000 feb6 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b4:	4b67      	ldr	r3, [pc, #412]	@ (8000b54 <MX_ADC1_Init+0x240>)
 80009b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b8:	2306      	movs	r3, #6
 80009ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c6:	2304      	movs	r3, #4
 80009c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	485e      	ldr	r0, [pc, #376]	@ (8000b4c <MX_ADC1_Init+0x238>)
 80009d4:	f003 fbf4 	bl	80041c0 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80009de:	f000 fe9f 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000b58 <MX_ADC1_Init+0x244>)
 80009e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009e6:	230c      	movs	r3, #12
 80009e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	4857      	ldr	r0, [pc, #348]	@ (8000b4c <MX_ADC1_Init+0x238>)
 80009f0:	f003 fbe6 	bl	80041c0 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80009fa:	f000 fe91 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009fe:	4b57      	ldr	r3, [pc, #348]	@ (8000b5c <MX_ADC1_Init+0x248>)
 8000a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a02:	2312      	movs	r3, #18
 8000a04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a06:	463b      	mov	r3, r7
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4850      	ldr	r0, [pc, #320]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000a0c:	f003 fbd8 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000a16:	f000 fe83 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a1a:	4b51      	ldr	r3, [pc, #324]	@ (8000b60 <MX_ADC1_Init+0x24c>)
 8000a1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a1e:	2318      	movs	r3, #24
 8000a20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	4619      	mov	r1, r3
 8000a26:	4849      	ldr	r0, [pc, #292]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000a28:	f003 fbca 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a32:	f000 fe75 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a36:	4b4b      	ldr	r3, [pc, #300]	@ (8000b64 <MX_ADC1_Init+0x250>)
 8000a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4841      	ldr	r0, [pc, #260]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000a46:	f003 fbbb 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000a50:	f000 fe66 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a54:	4b44      	ldr	r3, [pc, #272]	@ (8000b68 <MX_ADC1_Init+0x254>)
 8000a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a58:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	483a      	ldr	r0, [pc, #232]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000a64:	f003 fbac 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000a6e:	f000 fe57 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a72:	4b3e      	ldr	r3, [pc, #248]	@ (8000b6c <MX_ADC1_Init+0x258>)
 8000a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a76:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4832      	ldr	r0, [pc, #200]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000a82:	f003 fb9d 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000a8c:	f000 fe48 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a90:	4b37      	ldr	r3, [pc, #220]	@ (8000b70 <MX_ADC1_Init+0x25c>)
 8000a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a94:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000a98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	482b      	ldr	r0, [pc, #172]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000aa0:	f003 fb8e 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000aaa:	f000 fe39 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000aae:	4b31      	ldr	r3, [pc, #196]	@ (8000b74 <MX_ADC1_Init+0x260>)
 8000ab0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000ab2:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000ab6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4823      	ldr	r0, [pc, #140]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000abe:	f003 fb7f 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000ac8:	f000 fe2a 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000acc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b78 <MX_ADC1_Init+0x264>)
 8000ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4619      	mov	r1, r3
 8000ada:	481c      	ldr	r0, [pc, #112]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000adc:	f003 fb70 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000ae6:	f000 fe1b 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000aea:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <MX_ADC1_Init+0x268>)
 8000aec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000aee:	f240 2306 	movw	r3, #518	@ 0x206
 8000af2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4814      	ldr	r0, [pc, #80]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000afa:	f003 fb61 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000b04:	f000 fe0c 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_ADC1_Init+0x26c>)
 8000b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b0c:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000b10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000b18:	f003 fb52 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000b22:	f000 fdfd 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <MX_ADC1_Init+0x270>)
 8000b28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b2a:	f240 2312 	movw	r3, #530	@ 0x212
 8000b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_ADC1_Init+0x238>)
 8000b36:	f003 fb43 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000b40:	f000 fdee 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000048 	.word	0x20000048
 8000b50:	42028000 	.word	0x42028000
 8000b54:	04000002 	.word	0x04000002
 8000b58:	08000004 	.word	0x08000004
 8000b5c:	0c000008 	.word	0x0c000008
 8000b60:	10000010 	.word	0x10000010
 8000b64:	14000020 	.word	0x14000020
 8000b68:	1c000080 	.word	0x1c000080
 8000b6c:	20000100 	.word	0x20000100
 8000b70:	2a000400 	.word	0x2a000400
 8000b74:	2e000800 	.word	0x2e000800
 8000b78:	32001000 	.word	0x32001000
 8000b7c:	3e008000 	.word	0x3e008000
 8000b80:	42010000 	.word	0x42010000
 8000b84:	ce080000 	.word	0xce080000

08000b88 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2220      	movs	r2, #32
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f010 ff98 	bl	8011aca <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000b9c:	4a34      	ldr	r2, [pc, #208]	@ (8000c70 <MX_ADC4_Init+0xe8>)
 8000b9e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ba0:	4b32      	ldr	r3, [pc, #200]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba6:	4b31      	ldr	r3, [pc, #196]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000ba8:	2204      	movs	r2, #4
 8000baa:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bac:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bb4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000bb8:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000bc6:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000bcc:	4b27      	ldr	r3, [pc, #156]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000bd4:	4b25      	ldr	r3, [pc, #148]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bda:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be0:	4b22      	ldr	r3, [pc, #136]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000be6:	4b21      	ldr	r3, [pc, #132]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bf0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000bf4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000c08:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c10:	4816      	ldr	r0, [pc, #88]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000c12:	f002 fba7 	bl	8003364 <HAL_ADC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000c1c:	f000 fd80 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c20:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <MX_ADC4_Init+0xec>)
 8000c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	4619      	mov	r1, r3
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000c3a:	f003 fac1 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000c44:	f000 fd6c 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <MX_ADC4_Init+0xf0>)
 8000c4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c50:	463b      	mov	r3, r7
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_ADC4_Init+0xe4>)
 8000c56:	f003 fab3 	bl	80041c0 <HAL_ADC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000c60:	f000 fd5e 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000d4 	.word	0x200000d4
 8000c70:	46021000 	.word	0x46021000
 8000c74:	1c000080 	.word	0x1c000080
 8000c78:	20000100 	.word	0x20000100

08000c7c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000c82:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf4 <MX_DMA2D_Init+0x78>)
 8000c84:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c92:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000c98:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cc8:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cca:	f005 fa03 	bl	80060d4 <HAL_DMA2D_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000cd4:	f000 fd24 	bl	8001720 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cdc:	f005 fa5c 	bl	8006198 <HAL_DMA2D_ConfigLayer>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 fd1b 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000028c 	.word	0x2000028c
 8000cf4:	4002b000 	.word	0x4002b000

08000cf8 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_GPDMA1_Init+0x6c>)
 8000d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d04:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <MX_GPDMA1_Init+0x6c>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_GPDMA1_Init+0x6c>)
 8000d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	201d      	movs	r0, #29
 8000d22:	f004 fa79 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d26:	201d      	movs	r0, #29
 8000d28:	f004 fa90 	bl	800524c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	201e      	movs	r0, #30
 8000d32:	f004 fa71 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d36:	201e      	movs	r0, #30
 8000d38:	f004 fa88 	bl	800524c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	201f      	movs	r0, #31
 8000d42:	f004 fa69 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d46:	201f      	movs	r0, #31
 8000d48:	f004 fa80 	bl	800524c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2020      	movs	r0, #32
 8000d52:	f004 fa61 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d56:	2020      	movs	r0, #32
 8000d58:	f004 fa78 	bl	800524c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	46020c00 	.word	0x46020c00

08000d68 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <MX_HSPI1_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000d74:	2204      	movs	r2, #4
 8000d76:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000d80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d84:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000d88:	221a      	movs	r2, #26
 8000d8a:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000d92:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000d98:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <MX_HSPI1_Init+0x74>)
 8000dca:	f010 fa17 	bl	80111fc <HAL_XSPI_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f000 fca4 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200002f4 	.word	0x200002f4
 8000de0:	420d3400 	.word	0x420d3400

08000de4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <MX_I2C1_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000df0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <MX_I2C1_Init+0x7c>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df4:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e20:	f006 fd5a 	bl	80078d8 <HAL_I2C_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2a:	f000 fc79 	bl	8001720 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e32:	f007 fee5 	bl	8008c00 <HAL_I2CEx_ConfigAnalogFilter>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e3c:	f000 fc70 	bl	8001720 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e44:	f007 ff27 	bl	8008c96 <HAL_I2CEx_ConfigDigitalFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 fc67 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000354 	.word	0x20000354
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	20a0c4df 	.word	0x20a0c4df

08000e64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000edc <MX_I2C2_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee0 <MX_I2C2_Init+0x7c>)
 8000e72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e9e:	480e      	ldr	r0, [pc, #56]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000ea0:	f006 fd1a 	bl	80078d8 <HAL_I2C_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eaa:	f000 fc39 	bl	8001720 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4809      	ldr	r0, [pc, #36]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000eb2:	f007 fea5 	bl	8008c00 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f000 fc30 	bl	8001720 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000ec4:	f007 fee7 	bl	8008c96 <HAL_I2CEx_ConfigDigitalFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 fc27 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200003a8 	.word	0x200003a8
 8000edc:	40005800 	.word	0x40005800
 8000ee0:	20a0c4df 	.word	0x20a0c4df

08000ee4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f007 ff21 	bl	8008d30 <HAL_ICACHE_ConfigAssociativityMode>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ef4:	f000 fc14 	bl	8001720 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ef8:	f007 ff3a 	bl	8008d70 <HAL_ICACHE_Enable>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f02:	f000 fc0d 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	@ 0x38
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2234      	movs	r2, #52	@ 0x34
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f010 fdd6 	bl	8011aca <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f1e:	4b39      	ldr	r3, [pc, #228]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f20:	4a39      	ldr	r2, [pc, #228]	@ (8001008 <MX_LTDC_Init+0xfc>)
 8000f22:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f24:	4b37      	ldr	r3, [pc, #220]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f2a:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f30:	4b34      	ldr	r3, [pc, #208]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f36:	4b33      	ldr	r3, [pc, #204]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f3c:	4b31      	ldr	r3, [pc, #196]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f3e:	2203      	movs	r2, #3
 8000f40:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f42:	4b30      	ldr	r3, [pc, #192]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f44:	2203      	movs	r2, #3
 8000f46:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000f48:	4b2e      	ldr	r3, [pc, #184]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f4a:	220b      	movs	r2, #11
 8000f4c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f50:	220b      	movs	r2, #11
 8000f52:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000f54:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f56:	f240 322b 	movw	r2, #811	@ 0x32b
 8000f5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f5e:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f66:	f240 3233 	movw	r2, #819	@ 0x333
 8000f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f6e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f7c:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f8c:	481d      	ldr	r0, [pc, #116]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000f8e:	f007 feff 	bl	8008d90 <HAL_LTDC_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f98:	f000 fbc2 	bl	8001720 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000fa0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000fa4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000faa:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000fae:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fb4:	23ff      	movs	r3, #255	@ 0xff
 8000fb6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fbc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fc0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	@ (8001004 <MX_LTDC_Init+0xf8>)
 8000fec:	f008 f862 	bl	80090b4 <HAL_LTDC_ConfigLayer>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000ff6:	f000 fb93 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3738      	adds	r7, #56	@ 0x38
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200003fc 	.word	0x200003fc
 8001008:	40016800 	.word	0x40016800

0800100c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001024:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <MX_RTC_Init+0x94>)
 8001026:	4a1f      	ldr	r2, [pc, #124]	@ (80010a4 <MX_RTC_Init+0x98>)
 8001028:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <MX_RTC_Init+0x94>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <MX_RTC_Init+0x94>)
 8001032:	227f      	movs	r2, #127	@ 0x7f
 8001034:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <MX_RTC_Init+0x94>)
 8001038:	22ff      	movs	r2, #255	@ 0xff
 800103a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800103c:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <MX_RTC_Init+0x94>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001042:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <MX_RTC_Init+0x94>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001048:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <MX_RTC_Init+0x94>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_RTC_Init+0x94>)
 8001050:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001054:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001056:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <MX_RTC_Init+0x94>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800105c:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <MX_RTC_Init+0x94>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001062:	480f      	ldr	r0, [pc, #60]	@ (80010a0 <MX_RTC_Init+0x94>)
 8001064:	f00c feea 	bl	800de3c <HAL_RTC_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800106e:	f000 fb57 	bl	8001720 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	@ (80010a0 <MX_RTC_Init+0x94>)
 8001088:	f00d f806 	bl	800e098 <HAL_RTCEx_PrivilegeModeSet>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001092:	f000 fb45 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200004a4 	.word	0x200004a4
 80010a4:	46007800 	.word	0x46007800

080010a8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010ac:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010ae:	4a31      	ldr	r2, [pc, #196]	@ (8001174 <MX_SAI2_Init+0xcc>)
 80010b0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010be:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010ca:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010d2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80010d6:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010d8:	4b25      	ldr	r3, [pc, #148]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80010de:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010e4:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010e6:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010ec:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <MX_SAI2_Init+0xc8>)
 80010f4:	2210      	movs	r2, #16
 80010f6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80010f8:	2302      	movs	r3, #2
 80010fa:	2202      	movs	r2, #2
 80010fc:	2101      	movs	r1, #1
 80010fe:	481c      	ldr	r0, [pc, #112]	@ (8001170 <MX_SAI2_Init+0xc8>)
 8001100:	f00c fff8 	bl	800e0f4 <HAL_SAI_InitProtocol>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_SAI2_Init+0x66>
  {
    Error_Handler();
 800110a:	f000 fb09 	bl	8001720 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800110e:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <MX_SAI2_Init+0xd0>)
 8001110:	4a1a      	ldr	r2, [pc, #104]	@ (800117c <MX_SAI2_Init+0xd4>)
 8001112:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <MX_SAI2_Init+0xd0>)
 8001116:	2201      	movs	r2, #1
 8001118:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_SAI2_Init+0xd0>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <MX_SAI2_Init+0xd0>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_SAI2_Init+0xd0>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_SAI2_Init+0xd0>)
 800112e:	2202      	movs	r2, #2
 8001130:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_SAI2_Init+0xd0>)
 8001134:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001138:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_SAI2_Init+0xd0>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001140:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <MX_SAI2_Init+0xd0>)
 8001142:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001146:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_SAI2_Init+0xd0>)
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <MX_SAI2_Init+0xd0>)
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001154:	2308      	movs	r3, #8
 8001156:	2202      	movs	r2, #2
 8001158:	2100      	movs	r1, #0
 800115a:	4807      	ldr	r0, [pc, #28]	@ (8001178 <MX_SAI2_Init+0xd0>)
 800115c:	f00c ffca 	bl	800e0f4 <HAL_SAI_InitProtocol>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_SAI2_Init+0xc2>
  {
    Error_Handler();
 8001166:	f000 fadb 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200004d4 	.word	0x200004d4
 8001174:	40015804 	.word	0x40015804
 8001178:	2000056c 	.word	0x2000056c
 800117c:	40015824 	.word	0x40015824

08001180 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a4:	4b25      	ldr	r3, [pc, #148]	@ (800123c <MX_TIM3_Init+0xbc>)
 80011a6:	4a26      	ldr	r2, [pc, #152]	@ (8001240 <MX_TIM3_Init+0xc0>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <MX_TIM3_Init+0xbc>)
 80011ac:	22a0      	movs	r2, #160	@ 0xa0
 80011ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b22      	ldr	r3, [pc, #136]	@ (800123c <MX_TIM3_Init+0xbc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <MX_TIM3_Init+0xbc>)
 80011b8:	2264      	movs	r2, #100	@ 0x64
 80011ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <MX_TIM3_Init+0xbc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_TIM3_Init+0xbc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011c8:	481c      	ldr	r0, [pc, #112]	@ (800123c <MX_TIM3_Init+0xbc>)
 80011ca:	f00d fecd 	bl	800ef68 <HAL_TIM_PWM_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011d4:	f000 faa4 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4815      	ldr	r0, [pc, #84]	@ (800123c <MX_TIM3_Init+0xbc>)
 80011e8:	f00e fea4 	bl	800ff34 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011f2:	f000 fa95 	bl	8001720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f6:	2360      	movs	r3, #96	@ 0x60
 80011f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 80011fa:	234b      	movs	r3, #75	@ 0x4b
 80011fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	220c      	movs	r2, #12
 800120a:	4619      	mov	r1, r3
 800120c:	480b      	ldr	r0, [pc, #44]	@ (800123c <MX_TIM3_Init+0xbc>)
 800120e:	f00d ff03 	bl	800f018 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001218:	f000 fa82 	bl	8001720 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <MX_TIM3_Init+0xbc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	69da      	ldr	r2, [r3, #28]
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_TIM3_Init+0xbc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800122a:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <MX_TIM3_Init+0xbc>)
 800122e:	f001 f825 	bl	800227c <HAL_TIM_MspPostInit>

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	@ 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000076c 	.word	0x2000076c
 8001240:	40000400 	.word	0x40000400

08001244 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <MX_TIM15_Init+0x98>)
 8001264:	4a1e      	ldr	r2, [pc, #120]	@ (80012e0 <MX_TIM15_Init+0x9c>)
 8001266:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001268:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <MX_TIM15_Init+0x98>)
 800126a:	221a      	movs	r2, #26
 800126c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <MX_TIM15_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 8001274:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <MX_TIM15_Init+0x98>)
 8001276:	2231      	movs	r2, #49	@ 0x31
 8001278:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_TIM15_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001280:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <MX_TIM15_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_TIM15_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800128c:	4813      	ldr	r0, [pc, #76]	@ (80012dc <MX_TIM15_Init+0x98>)
 800128e:	f00d fd7c 	bl	800ed8a <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001298:	f000 fa42 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	@ (80012dc <MX_TIM15_Init+0x98>)
 80012aa:	f00d ffc9 	bl	800f240 <HAL_TIM_ConfigClockSource>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80012b4:	f000 fa34 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012b8:	2320      	movs	r3, #32
 80012ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_TIM15_Init+0x98>)
 80012c6:	f00e fe35 	bl	800ff34 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80012d0:	f000 fa26 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200007b8 	.word	0x200007b8
 80012e0:	40014000 	.word	0x40014000

080012e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e8:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 80012ea:	4a23      	ldr	r2, [pc, #140]	@ (8001378 <MX_USART1_UART_Init+0x94>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800132c:	4811      	ldr	r0, [pc, #68]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 800132e:	f00e fec3 	bl	80100b8 <HAL_UART_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001338:	f000 f9f2 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133c:	2100      	movs	r1, #0
 800133e:	480d      	ldr	r0, [pc, #52]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 8001340:	f00f fe91 	bl	8011066 <HAL_UARTEx_SetTxFifoThreshold>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800134a:	f000 f9e9 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	4808      	ldr	r0, [pc, #32]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 8001352:	f00f fec6 	bl	80110e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800135c:	f000 f9e0 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <MX_USART1_UART_Init+0x90>)
 8001362:	f00f fe47 	bl	8010ff4 <HAL_UARTEx_DisableFifoMode>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800136c:	f000 f9d8 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000804 	.word	0x20000804
 8001378:	40013800 	.word	0x40013800

0800137c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001382:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001384:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001386:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001388:	2209      	movs	r2, #9
 800138a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800138c:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800138e:	2200      	movs	r2, #0
 8001390:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001394:	2203      	movs	r2, #3
 8001396:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800139a:	2200      	movs	r2, #0
 800139c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800139e:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013be:	f008 f82a 	bl	8009416 <HAL_PCD_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80013c8:	f000 f9aa 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000898 	.word	0x20000898
 80013d4:	42040000 	.word	0x42040000

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	@ 0x38
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	4b8c      	ldr	r3, [pc, #560]	@ (8001620 <MX_GPIO_Init+0x248>)
 80013f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f4:	4a8a      	ldr	r2, [pc, #552]	@ (8001620 <MX_GPIO_Init+0x248>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013fe:	4b88      	ldr	r3, [pc, #544]	@ (8001620 <MX_GPIO_Init+0x248>)
 8001400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	623b      	str	r3, [r7, #32]
 800140a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140c:	4b84      	ldr	r3, [pc, #528]	@ (8001620 <MX_GPIO_Init+0x248>)
 800140e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001412:	4a83      	ldr	r2, [pc, #524]	@ (8001620 <MX_GPIO_Init+0x248>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800141c:	4b80      	ldr	r3, [pc, #512]	@ (8001620 <MX_GPIO_Init+0x248>)
 800141e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800142a:	4b7d      	ldr	r3, [pc, #500]	@ (8001620 <MX_GPIO_Init+0x248>)
 800142c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001430:	4a7b      	ldr	r2, [pc, #492]	@ (8001620 <MX_GPIO_Init+0x248>)
 8001432:	f043 0320 	orr.w	r3, r3, #32
 8001436:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800143a:	4b79      	ldr	r3, [pc, #484]	@ (8001620 <MX_GPIO_Init+0x248>)
 800143c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001448:	4b75      	ldr	r3, [pc, #468]	@ (8001620 <MX_GPIO_Init+0x248>)
 800144a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800144e:	4a74      	ldr	r2, [pc, #464]	@ (8001620 <MX_GPIO_Init+0x248>)
 8001450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001454:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001458:	4b71      	ldr	r3, [pc, #452]	@ (8001620 <MX_GPIO_Init+0x248>)
 800145a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800145e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b6e      	ldr	r3, [pc, #440]	@ (8001620 <MX_GPIO_Init+0x248>)
 8001468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800146c:	4a6c      	ldr	r2, [pc, #432]	@ (8001620 <MX_GPIO_Init+0x248>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001476:	4b6a      	ldr	r3, [pc, #424]	@ (8001620 <MX_GPIO_Init+0x248>)
 8001478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b66      	ldr	r3, [pc, #408]	@ (8001620 <MX_GPIO_Init+0x248>)
 8001486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148a:	4a65      	ldr	r2, [pc, #404]	@ (8001620 <MX_GPIO_Init+0x248>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001494:	4b62      	ldr	r3, [pc, #392]	@ (8001620 <MX_GPIO_Init+0x248>)
 8001496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001620 <MX_GPIO_Init+0x248>)
 80014a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001620 <MX_GPIO_Init+0x248>)
 80014aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001620 <MX_GPIO_Init+0x248>)
 80014b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c0:	4b57      	ldr	r3, [pc, #348]	@ (8001620 <MX_GPIO_Init+0x248>)
 80014c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c6:	4a56      	ldr	r2, [pc, #344]	@ (8001620 <MX_GPIO_Init+0x248>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014d0:	4b53      	ldr	r3, [pc, #332]	@ (8001620 <MX_GPIO_Init+0x248>)
 80014d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014de:	4b50      	ldr	r3, [pc, #320]	@ (8001620 <MX_GPIO_Init+0x248>)
 80014e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001620 <MX_GPIO_Init+0x248>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001620 <MX_GPIO_Init+0x248>)
 80014f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2104      	movs	r1, #4
 8001500:	4848      	ldr	r0, [pc, #288]	@ (8001624 <MX_GPIO_Init+0x24c>)
 8001502:	f006 f97b 	bl	80077fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2110      	movs	r1, #16
 800150a:	4846      	ldr	r0, [pc, #280]	@ (8001624 <MX_GPIO_Init+0x24c>)
 800150c:	f006 f976 	bl	80077fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2114      	movs	r1, #20
 8001514:	4844      	ldr	r0, [pc, #272]	@ (8001628 <MX_GPIO_Init+0x250>)
 8001516:	f006 f971 	bl	80077fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 800151a:	2314      	movs	r3, #20
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152e:	4619      	mov	r1, r3
 8001530:	483c      	ldr	r0, [pc, #240]	@ (8001624 <MX_GPIO_Init+0x24c>)
 8001532:	f005 ff8b 	bl	800744c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001536:	2320      	movs	r3, #32
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153a:	4b3c      	ldr	r3, [pc, #240]	@ (800162c <MX_GPIO_Init+0x254>)
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	4836      	ldr	r0, [pc, #216]	@ (8001624 <MX_GPIO_Init+0x24c>)
 800154a:	f005 ff7f 	bl	800744c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800154e:	2302      	movs	r3, #2
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001552:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <MX_GPIO_Init+0x258>)
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155e:	4619      	mov	r1, r3
 8001560:	4834      	ldr	r0, [pc, #208]	@ (8001634 <MX_GPIO_Init+0x25c>)
 8001562:	f005 ff73 	bl	800744c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001566:	2310      	movs	r3, #16
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800156a:	4b33      	ldr	r3, [pc, #204]	@ (8001638 <MX_GPIO_Init+0x260>)
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156e:	2301      	movs	r3, #1
 8001570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	482e      	ldr	r0, [pc, #184]	@ (8001634 <MX_GPIO_Init+0x25c>)
 800157a:	f005 ff67 	bl	800744c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 800157e:	2314      	movs	r3, #20
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4824      	ldr	r0, [pc, #144]	@ (8001628 <MX_GPIO_Init+0x250>)
 8001596:	f005 ff59 	bl	800744c <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	481e      	ldr	r0, [pc, #120]	@ (8001628 <MX_GPIO_Init+0x250>)
 80015ae:	f005 ff4d 	bl	800744c <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80015b2:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	481d      	ldr	r0, [pc, #116]	@ (800163c <MX_GPIO_Init+0x264>)
 80015c8:	f005 ff40 	bl	800744c <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80015cc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	4817      	ldr	r0, [pc, #92]	@ (8001640 <MX_GPIO_Init+0x268>)
 80015e2:	f005 ff33 	bl	800744c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200c      	movs	r0, #12
 80015ec:	f003 fe14 	bl	8005218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015f0:	200c      	movs	r0, #12
 80015f2:	f003 fe2b 	bl	800524c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200f      	movs	r0, #15
 80015fc:	f003 fe0c 	bl	8005218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001600:	200f      	movs	r0, #15
 8001602:	f003 fe23 	bl	800524c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2010      	movs	r0, #16
 800160c:	f003 fe04 	bl	8005218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001610:	2010      	movs	r0, #16
 8001612:	f003 fe1b 	bl	800524c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001616:	bf00      	nop
 8001618:	3738      	adds	r7, #56	@ 0x38
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	46020c00 	.word	0x46020c00
 8001624:	42021000 	.word	0x42021000
 8001628:	42020c00 	.word	0x42020c00
 800162c:	10110000 	.word	0x10110000
 8001630:	10310000 	.word	0x10310000
 8001634:	42020000 	.word	0x42020000
 8001638:	10210000 	.word	0x10210000
 800163c:	42021800 	.word	0x42021800
 8001640:	42020400 	.word	0x42020400

08001644 <signExtend24>:

/* USER CODE BEGIN 4 */

static inline int32_t signExtend24(uint32_t value)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
    return (int32_t)((value & (1 << 23)) ? value | 0xFF000000 : value & 0x007FFFFF);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <signExtend24+0x1a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800165c:	e002      	b.n	8001664 <signExtend24+0x20>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	adcReady = true;
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_SAI_RxHalfCpltCallback+0x20>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[0];
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_SAI_RxHalfCpltCallback+0x24>)
 8001680:	4a05      	ldr	r2, [pc, #20]	@ (8001698 <HAL_SAI_RxHalfCpltCallback+0x28>)
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	200046fc 	.word	0x200046fc
 8001694:	20004700 	.word	0x20004700
 8001698:	20000d9c 	.word	0x20000d9c

0800169c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	adcReady = true;
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_SAI_RxCpltCallback+0x20>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[sampleSize * (channelCount / 2)];
 80016aa:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_SAI_RxCpltCallback+0x24>)
 80016ac:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <HAL_SAI_RxCpltCallback+0x28>)
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	200046fc 	.word	0x200046fc
 80016c0:	20004700 	.word	0x20004700
 80016c4:	20001d9c 	.word	0x20001d9c

080016c8 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	dacReady = true;
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <HAL_SAI_TxHalfCpltCallback+0x20>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[0];
 80016d6:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_SAI_TxHalfCpltCallback+0x24>)
 80016d8:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <HAL_SAI_TxHalfCpltCallback+0x28>)
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	200046fd 	.word	0x200046fd
 80016ec:	20004704 	.word	0x20004704
 80016f0:	20002d9c 	.word	0x20002d9c

080016f4 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	dacReady = true;
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <HAL_SAI_TxCpltCallback+0x20>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[sampleSize];
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_SAI_TxCpltCallback+0x24>)
 8001704:	4a05      	ldr	r2, [pc, #20]	@ (800171c <HAL_SAI_TxCpltCallback+0x28>)
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	200046fd 	.word	0x200046fd
 8001718:	20004704 	.word	0x20004704
 800171c:	2000319c 	.word	0x2000319c

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <Error_Handler+0x8>

0800172c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_MspInit+0x30>)
 8001734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001738:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_MspInit+0x30>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_MspInit+0x30>)
 8001744:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001750:	f008 f89e 	bl	8009890 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	46020c00 	.word	0x46020c00

08001760 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0e0      	sub	sp, #384	@ 0x180
 8001764:	af00      	add	r7, sp, #0
 8001766:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800176a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800176e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001780:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001784:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001788:	4618      	mov	r0, r3
 800178a:	23e0      	movs	r3, #224	@ 0xe0
 800178c:	461a      	mov	r2, r3
 800178e:	2100      	movs	r1, #0
 8001790:	f010 f99b 	bl	8011aca <memset>
  if(hadc->Instance==ADC1)
 8001794:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001798:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4aa1      	ldr	r2, [pc, #644]	@ (8001a28 <HAL_ADC_MspInit+0x2c8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	f040 8152 	bne.w	8001a4c <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80017a8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017ac:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80017b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80017bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017c0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017c8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	4618      	mov	r0, r3
 80017d2:	f009 fb37 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80017dc:	f7ff ffa0 	bl	8001720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017e0:	4b92      	ldr	r3, [pc, #584]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 80017e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e6:	4a91      	ldr	r2, [pc, #580]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 80017e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017f0:	4b8e      	ldr	r3, [pc, #568]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 80017f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f6:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80017fa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017fe:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001808:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800180c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	4b87      	ldr	r3, [pc, #540]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 8001810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001814:	4a85      	ldr	r2, [pc, #532]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800181e:	4b83      	ldr	r3, [pc, #524]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 8001820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001824:	f003 0204 	and.w	r2, r3, #4
 8001828:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800182c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001836:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800183a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 800183e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001842:	4a7a      	ldr	r2, [pc, #488]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800184c:	4b77      	ldr	r3, [pc, #476]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 800184e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001852:	f003 0201 	and.w	r2, r3, #1
 8001856:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800185a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001864:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001868:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	4b70      	ldr	r3, [pc, #448]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 800186c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001870:	4a6e      	ldr	r2, [pc, #440]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 8001872:	f043 0302 	orr.w	r3, r3, #2
 8001876:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800187a:	4b6c      	ldr	r3, [pc, #432]	@ (8001a2c <HAL_ADC_MspInit+0x2cc>)
 800187c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001880:	f003 0202 	and.w	r2, r3, #2
 8001884:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001888:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001892:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001896:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8001898:	230f      	movs	r3, #15
 800189a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018aa:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80018ae:	4619      	mov	r1, r3
 80018b0:	485f      	ldr	r0, [pc, #380]	@ (8001a30 <HAL_ADC_MspInit+0x2d0>)
 80018b2:	f005 fdcb 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 80018b6:	23ed      	movs	r3, #237	@ 0xed
 80018b8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018bc:	2303      	movs	r3, #3
 80018be:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80018cc:	4619      	mov	r1, r3
 80018ce:	4859      	ldr	r0, [pc, #356]	@ (8001a34 <HAL_ADC_MspInit+0x2d4>)
 80018d0:	f005 fdbc 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 80018d4:	2303      	movs	r3, #3
 80018d6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018da:	2303      	movs	r3, #3
 80018dc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80018ea:	4619      	mov	r1, r3
 80018ec:	4852      	ldr	r0, [pc, #328]	@ (8001a38 <HAL_ADC_MspInit+0x2d8>)
 80018ee:	f005 fdad 	bl	800744c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80018f2:	2321      	movs	r3, #33	@ 0x21
 80018f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001910:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001914:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001918:	2301      	movs	r3, #1
 800191a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800191e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001922:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 800192c:	2301      	movs	r3, #1
 800192e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001932:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001936:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 800194c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001950:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8001954:	232b      	movs	r3, #43	@ 0x2b
 8001956:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001966:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800196a:	4934      	ldr	r1, [pc, #208]	@ (8001a3c <HAL_ADC_MspInit+0x2dc>)
 800196c:	4618      	mov	r0, r3
 800196e:	f004 fe81 	bl	8006674 <HAL_DMAEx_List_BuildNode>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 8001978:	f7ff fed2 	bl	8001720 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800197c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a3c <HAL_ADC_MspInit+0x2dc>)
 800197e:	2100      	movs	r1, #0
 8001980:	482f      	ldr	r0, [pc, #188]	@ (8001a40 <HAL_ADC_MspInit+0x2e0>)
 8001982:	f004 fea3 	bl	80066cc <HAL_DMAEx_List_InsertNode>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 800198c:	f7ff fec8 	bl	8001720 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001990:	482b      	ldr	r0, [pc, #172]	@ (8001a40 <HAL_ADC_MspInit+0x2e0>)
 8001992:	f004 ff64 	bl	800685e <HAL_DMAEx_List_SetCircularMode>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 800199c:	f7ff fec0 	bl	8001720 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80019a0:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 80019a2:	4a29      	ldr	r2, [pc, #164]	@ (8001a48 <HAL_ADC_MspInit+0x2e8>)
 80019a4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80019a6:	4b27      	ldr	r3, [pc, #156]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80019ac:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80019b2:	4b24      	ldr	r3, [pc, #144]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80019b8:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80019be:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 80019c0:	2281      	movs	r2, #129	@ 0x81
 80019c2:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80019c4:	481f      	ldr	r0, [pc, #124]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 80019c6:	f004 fc95 	bl	80062f4 <HAL_DMAEx_List_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 80019d0:	f7ff fea6 	bl	8001720 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80019d4:	491a      	ldr	r1, [pc, #104]	@ (8001a40 <HAL_ADC_MspInit+0x2e0>)
 80019d6:	481b      	ldr	r0, [pc, #108]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 80019d8:	f004 ffa2 	bl	8006920 <HAL_DMAEx_List_LinkQ>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 80019e2:	f7ff fe9d 	bl	8001720 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 80019e6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019ea:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 80019f2:	671a      	str	r2, [r3, #112]	@ 0x70
 80019f4:	4a13      	ldr	r2, [pc, #76]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 80019f6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019fa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a02:	2110      	movs	r1, #16
 8001a04:	480f      	ldr	r0, [pc, #60]	@ (8001a44 <HAL_ADC_MspInit+0x2e4>)
 8001a06:	f004 f883 	bl	8005b10 <HAL_DMA_ConfigChannelAttributes>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001a10:	f7ff fe86 	bl	8001720 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2025      	movs	r0, #37	@ 0x25
 8001a1a:	f003 fbfd 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a1e:	2025      	movs	r0, #37	@ 0x25
 8001a20:	f003 fc14 	bl	800524c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001a24:	e0c0      	b.n	8001ba8 <HAL_ADC_MspInit+0x448>
 8001a26:	bf00      	nop
 8001a28:	42028000 	.word	0x42028000
 8001a2c:	46020c00 	.word	0x46020c00
 8001a30:	42020800 	.word	0x42020800
 8001a34:	42020000 	.word	0x42020000
 8001a38:	42020400 	.word	0x42020400
 8001a3c:	20000160 	.word	0x20000160
 8001a40:	20000184 	.word	0x20000184
 8001a44:	2000019c 	.word	0x2000019c
 8001a48:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001a4c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a50:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a56      	ldr	r2, [pc, #344]	@ (8001bb4 <HAL_ADC_MspInit+0x454>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	f040 80a4 	bne.w	8001ba8 <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001a60:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a64:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001a68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001a74:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a78:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a80:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a84:	f107 0320 	add.w	r3, r7, #32
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f009 f9db 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001a94:	f7ff fe44 	bl	8001720 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001a98:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <HAL_ADC_MspInit+0x458>)
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a9e:	4a46      	ldr	r2, [pc, #280]	@ (8001bb8 <HAL_ADC_MspInit+0x458>)
 8001aa0:	f043 0320 	orr.w	r3, r3, #32
 8001aa4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001aa8:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <HAL_ADC_MspInit+0x458>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aae:	f003 0220 	and.w	r2, r3, #32
 8001ab2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ab6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ac0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ac4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb8 <HAL_ADC_MspInit+0x458>)
 8001ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001acc:	4a3a      	ldr	r2, [pc, #232]	@ (8001bb8 <HAL_ADC_MspInit+0x458>)
 8001ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ad2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ad6:	4b38      	ldr	r3, [pc, #224]	@ (8001bb8 <HAL_ADC_MspInit+0x458>)
 8001ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001adc:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001ae0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ae4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001aee:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001af2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001af4:	2303      	movs	r3, #3
 8001af6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afa:	2303      	movs	r3, #3
 8001afc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b06:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	482b      	ldr	r0, [pc, #172]	@ (8001bbc <HAL_ADC_MspInit+0x45c>)
 8001b0e:	f005 fc9d 	bl	800744c <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001b12:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b14:	4a2b      	ldr	r2, [pc, #172]	@ (8001bc4 <HAL_ADC_MspInit+0x464>)
 8001b16:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001b18:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b24:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001b2a:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001b30:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b32:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b36:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001b38:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b40:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b44:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001b58:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001b5e:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001b64:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001b6a:	4815      	ldr	r0, [pc, #84]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b6c:	f003 fc30 	bl	80053d0 <HAL_DMA_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8001b76:	f7ff fdd3 	bl	8001720 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001b7a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b7e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b86:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b8a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b8e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b96:	2110      	movs	r1, #16
 8001b98:	4809      	ldr	r0, [pc, #36]	@ (8001bc0 <HAL_ADC_MspInit+0x460>)
 8001b9a:	f003 ffb9 	bl	8005b10 <HAL_DMA_ConfigChannelAttributes>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_ADC_MspInit+0x448>
      Error_Handler();
 8001ba4:	f7ff fdbc 	bl	8001720 <Error_Handler>
}
 8001ba8:	bf00      	nop
 8001baa:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	46021000 	.word	0x46021000
 8001bb8:	46020c00 	.word	0x46020c00
 8001bbc:	42021800 	.word	0x42021800
 8001bc0:	20000214 	.word	0x20000214
 8001bc4:	40020150 	.word	0x40020150

08001bc8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <HAL_DMA2D_MspInit+0x3c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bda:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <HAL_DMA2D_MspInit+0x40>)
 8001bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be0:	4a09      	ldr	r2, [pc, #36]	@ (8001c08 <HAL_DMA2D_MspInit+0x40>)
 8001be2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001bea:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <HAL_DMA2D_MspInit+0x40>)
 8001bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	4002b000 	.word	0x4002b000
 8001c08:	46020c00 	.word	0x46020c00

08001c0c <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2a      	ldr	r2, [pc, #168]	@ (8001cd4 <HAL_XSPI_MspInit+0xc8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d14d      	bne.n	8001cca <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd8 <HAL_XSPI_MspInit+0xcc>)
 8001c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c34:	4a28      	ldr	r2, [pc, #160]	@ (8001cd8 <HAL_XSPI_MspInit+0xcc>)
 8001c36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c3e:	4b26      	ldr	r3, [pc, #152]	@ (8001cd8 <HAL_XSPI_MspInit+0xcc>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4c:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <HAL_XSPI_MspInit+0xcc>)
 8001c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c52:	4a21      	ldr	r2, [pc, #132]	@ (8001cd8 <HAL_XSPI_MspInit+0xcc>)
 8001c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <HAL_XSPI_MspInit+0xcc>)
 8001c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <HAL_XSPI_MspInit+0xcc>)
 8001c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c70:	4a19      	ldr	r2, [pc, #100]	@ (8001cd8 <HAL_XSPI_MspInit+0xcc>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c7a:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <HAL_XSPI_MspInit+0xcc>)
 8001c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001c88:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001c8c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <HAL_XSPI_MspInit+0xd0>)
 8001ca6:	f005 fbd1 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001caa:	230f      	movs	r3, #15
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001cba:	2308      	movs	r3, #8
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4806      	ldr	r0, [pc, #24]	@ (8001ce0 <HAL_XSPI_MspInit+0xd4>)
 8001cc6:	f005 fbc1 	bl	800744c <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	@ 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	420d3400 	.word	0x420d3400
 8001cd8:	46020c00 	.word	0x46020c00
 8001cdc:	42021c00 	.word	0x42021c00
 8001ce0:	42022000 	.word	0x42022000

08001ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0c4      	sub	sp, #272	@ 0x110
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cf2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	22e0      	movs	r2, #224	@ 0xe0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00f fedc 	bl	8011aca <memset>
  if(hi2c->Instance==I2C1)
 8001d12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a63      	ldr	r2, [pc, #396]	@ (8001eac <HAL_I2C_MspInit+0x1c8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d14f      	bne.n	8001dc4 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d24:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d36:	f107 0318 	add.w	r3, r7, #24
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f009 f882 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001d46:	f7ff fceb 	bl	8001720 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d4a:	4b59      	ldr	r3, [pc, #356]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d50:	4a57      	ldr	r2, [pc, #348]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d5a:	4b55      	ldr	r3, [pc, #340]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d68:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d6c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d70:	2312      	movs	r3, #18
 8001d72:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d82:	2304      	movs	r3, #4
 8001d84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d88:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4849      	ldr	r0, [pc, #292]	@ (8001eb4 <HAL_I2C_MspInit+0x1d0>)
 8001d90:	f005 fb5c 	bl	800744c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d94:	4b46      	ldr	r3, [pc, #280]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d9a:	4a45      	ldr	r2, [pc, #276]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001d9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001da0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001da4:	4b42      	ldr	r3, [pc, #264]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001daa:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001dae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001db2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dc0:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dc2:	e06e      	b.n	8001ea2 <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001dc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a39      	ldr	r2, [pc, #228]	@ (8001eb8 <HAL_I2C_MspInit+0x1d4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d165      	bne.n	8001ea2 <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dd6:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001de8:	f107 0318 	add.w	r3, r7, #24
 8001dec:	4618      	mov	r0, r3
 8001dee:	f009 f829 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001df8:	f7ff fc92 	bl	8001720 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e02:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001e04:	f043 0320 	orr.w	r3, r3, #32
 8001e08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e0c:	4b28      	ldr	r3, [pc, #160]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e12:	f003 0220 	and.w	r2, r3, #32
 8001e16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e28:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e30:	2312      	movs	r3, #18
 8001e32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e42:	2304      	movs	r3, #4
 8001e44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e48:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	481b      	ldr	r0, [pc, #108]	@ (8001ebc <HAL_I2C_MspInit+0x1d8>)
 8001e50:	f005 fafc 	bl	800744c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e5a:	4a15      	ldr	r2, [pc, #84]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001e5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e60:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e64:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <HAL_I2C_MspInit+0x1cc>)
 8001e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e6a:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e80:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2039      	movs	r0, #57	@ 0x39
 8001e88:	f003 f9c6 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001e8c:	2039      	movs	r0, #57	@ 0x39
 8001e8e:	f003 f9dd 	bl	800524c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	203a      	movs	r0, #58	@ 0x3a
 8001e98:	f003 f9be 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001e9c:	203a      	movs	r0, #58	@ 0x3a
 8001e9e:	f003 f9d5 	bl	800524c <HAL_NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	46020c00 	.word	0x46020c00
 8001eb4:	42021800 	.word	0x42021800
 8001eb8:	40005800 	.word	0x40005800
 8001ebc:	42021400 	.word	0x42021400

08001ec0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0c6      	sub	sp, #280	@ 0x118
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001eca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ece:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	22e0      	movs	r2, #224	@ 0xe0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f00f fdee 	bl	8011aca <memset>
  if(hltdc->Instance==LTDC)
 8001eee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ef2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a92      	ldr	r2, [pc, #584]	@ (8002144 <HAL_LTDC_MspInit+0x284>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f040 811b 	bne.w	8002138 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0302 	mov.w	r3, #2
 8001f0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001f14:	2303      	movs	r3, #3
 8001f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001f18:	2304      	movs	r3, #4
 8001f1a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001f1c:	2332      	movs	r3, #50	@ 0x32
 8001f1e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001f20:	2302      	movs	r3, #2
 8001f22:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001f24:	2302      	movs	r3, #2
 8001f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001f34:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f3a:	f107 0320 	add.w	r3, r7, #32
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f008 ff80 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001f4a:	f7ff fbe9 	bl	8001720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f4e:	4b7e      	ldr	r3, [pc, #504]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001f50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f54:	4a7c      	ldr	r2, [pc, #496]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001f56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f5a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001f60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6c:	4b76      	ldr	r3, [pc, #472]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f72:	4a75      	ldr	r2, [pc, #468]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f7c:	4b72      	ldr	r3, [pc, #456]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f82:	f003 0202 	and.w	r2, r3, #2
 8001f86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f8a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f94:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f98:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa0:	4a69      	ldr	r2, [pc, #420]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001faa:	4b67      	ldr	r3, [pc, #412]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb0:	f003 0210 	and.w	r2, r3, #16
 8001fb4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fc6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fce:	4a5e      	ldr	r2, [pc, #376]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fde:	f003 0208 	and.w	r2, r3, #8
 8001fe2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ff4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	4b54      	ldr	r3, [pc, #336]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ffc:	4a52      	ldr	r2, [pc, #328]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002006:	4b50      	ldr	r3, [pc, #320]	@ (8002148 <HAL_LTDC_MspInit+0x288>)
 8002008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800200c:	f003 0204 	and.w	r2, r3, #4
 8002010:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002014:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800201e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002022:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002024:	2304      	movs	r3, #4
 8002026:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 800203c:	2308      	movs	r3, #8
 800203e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002046:	4619      	mov	r1, r3
 8002048:	4840      	ldr	r0, [pc, #256]	@ (800214c <HAL_LTDC_MspInit+0x28c>)
 800204a:	f005 f9ff 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800204e:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8002052:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002068:	2308      	movs	r3, #8
 800206a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800206e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002072:	4619      	mov	r1, r3
 8002074:	4836      	ldr	r0, [pc, #216]	@ (8002150 <HAL_LTDC_MspInit+0x290>)
 8002076:	f005 f9e9 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800207a:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 800207e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002094:	2308      	movs	r3, #8
 8002096:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800209a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800209e:	4619      	mov	r1, r3
 80020a0:	482c      	ldr	r0, [pc, #176]	@ (8002154 <HAL_LTDC_MspInit+0x294>)
 80020a2:	f005 f9d3 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a6:	23c0      	movs	r3, #192	@ 0xc0
 80020a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80020be:	2307      	movs	r3, #7
 80020c0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020c8:	4619      	mov	r1, r3
 80020ca:	4823      	ldr	r0, [pc, #140]	@ (8002158 <HAL_LTDC_MspInit+0x298>)
 80020cc:	f005 f9be 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020ea:	2308      	movs	r3, #8
 80020ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020f4:	4619      	mov	r1, r3
 80020f6:	4818      	ldr	r0, [pc, #96]	@ (8002158 <HAL_LTDC_MspInit+0x298>)
 80020f8:	f005 f9a8 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002100:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002116:	2307      	movs	r3, #7
 8002118:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002120:	4619      	mov	r1, r3
 8002122:	480a      	ldr	r0, [pc, #40]	@ (800214c <HAL_LTDC_MspInit+0x28c>)
 8002124:	f005 f992 	bl	800744c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	2100      	movs	r1, #0
 800212c:	2087      	movs	r0, #135	@ 0x87
 800212e:	f003 f873 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002132:	2087      	movs	r0, #135	@ 0x87
 8002134:	f003 f88a 	bl	800524c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002138:	bf00      	nop
 800213a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40016800 	.word	0x40016800
 8002148:	46020c00 	.word	0x46020c00
 800214c:	42020400 	.word	0x42020400
 8002150:	42021000 	.word	0x42021000
 8002154:	42020c00 	.word	0x42020c00
 8002158:	42020800 	.word	0x42020800

0800215c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0bc      	sub	sp, #240	@ 0xf0
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	22e0      	movs	r2, #224	@ 0xe0
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f00f fcac 	bl	8011aca <memset>
  if(hrtc->Instance==RTC)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <HAL_RTC_MspInit+0x90>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d132      	bne.n	80021e2 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800217c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800218c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	4618      	mov	r0, r3
 8002196:	f008 fe55 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80021a0:	f7ff fabe 	bl	8001720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_RTC_MspInit+0x94>)
 80021a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021aa:	4a11      	ldr	r2, [pc, #68]	@ (80021f0 <HAL_RTC_MspInit+0x94>)
 80021ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021b4:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_RTC_MspInit+0x94>)
 80021b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80021ba:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <HAL_RTC_MspInit+0x94>)
 80021bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021c0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_RTC_MspInit+0x94>)
 80021c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <HAL_RTC_MspInit+0x94>)
 80021d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021d8:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <HAL_RTC_MspInit+0x94>)
 80021da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80021e2:	bf00      	nop
 80021e4:	37f0      	adds	r7, #240	@ 0xf0
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	46007800 	.word	0x46007800
 80021f0:	46020c00 	.word	0x46020c00

080021f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <HAL_TIM_PWM_MspInit+0x3c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002206:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_TIM_PWM_MspInit+0x40>)
 8002208:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800220c:	4a09      	ldr	r2, [pc, #36]	@ (8002234 <HAL_TIM_PWM_MspInit+0x40>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <HAL_TIM_PWM_MspInit+0x40>)
 8002218:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40000400 	.word	0x40000400
 8002234:	46020c00 	.word	0x46020c00

08002238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0b      	ldr	r2, [pc, #44]	@ (8002274 <HAL_TIM_Base_MspInit+0x3c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800224a:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_TIM_Base_MspInit+0x40>)
 800224c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002250:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <HAL_TIM_Base_MspInit+0x40>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002256:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800225a:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <HAL_TIM_Base_MspInit+0x40>)
 800225c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40014000 	.word	0x40014000
 8002278:	46020c00 	.word	0x46020c00

0800227c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <HAL_TIM_MspPostInit+0x68>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d11e      	bne.n	80022dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800229e:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_TIM_MspPostInit+0x6c>)
 80022a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a4:	4a10      	ldr	r2, [pc, #64]	@ (80022e8 <HAL_TIM_MspPostInit+0x6c>)
 80022a6:	f043 0310 	orr.w	r3, r3, #16
 80022aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022ae:	4b0e      	ldr	r3, [pc, #56]	@ (80022e8 <HAL_TIM_MspPostInit+0x6c>)
 80022b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 80022bc:	2340      	movs	r3, #64	@ 0x40
 80022be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	4619      	mov	r1, r3
 80022d6:	4805      	ldr	r0, [pc, #20]	@ (80022ec <HAL_TIM_MspPostInit+0x70>)
 80022d8:	f005 f8b8 	bl	800744c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022dc:	bf00      	nop
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40000400 	.word	0x40000400
 80022e8:	46020c00 	.word	0x46020c00
 80022ec:	42021000 	.word	0x42021000

080022f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0c2      	sub	sp, #264	@ 0x108
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80022fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002310:	f107 0310 	add.w	r3, r7, #16
 8002314:	22e0      	movs	r2, #224	@ 0xe0
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f00f fbd6 	bl	8011aca <memset>
  if(huart->Instance==USART1)
 800231e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a2f      	ldr	r2, [pc, #188]	@ (80023e8 <HAL_UART_MspInit+0xf8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d155      	bne.n	80023dc <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002330:	f04f 0201 	mov.w	r2, #1
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800233c:	2300      	movs	r3, #0
 800233e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	4618      	mov	r0, r3
 8002346:	f008 fd7d 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002350:	f7ff f9e6 	bl	8001720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002354:	4b25      	ldr	r3, [pc, #148]	@ (80023ec <HAL_UART_MspInit+0xfc>)
 8002356:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800235a:	4a24      	ldr	r2, [pc, #144]	@ (80023ec <HAL_UART_MspInit+0xfc>)
 800235c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002360:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002364:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <HAL_UART_MspInit+0xfc>)
 8002366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800236a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <HAL_UART_MspInit+0xfc>)
 8002374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002378:	4a1c      	ldr	r2, [pc, #112]	@ (80023ec <HAL_UART_MspInit+0xfc>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002382:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <HAL_UART_MspInit+0xfc>)
 8002384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002388:	f003 0201 	and.w	r2, r3, #1
 800238c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002390:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800239a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800239e:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ba:	2307      	movs	r3, #7
 80023bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80023c4:	4619      	mov	r1, r3
 80023c6:	480a      	ldr	r0, [pc, #40]	@ (80023f0 <HAL_UART_MspInit+0x100>)
 80023c8:	f005 f840 	bl	800744c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	203d      	movs	r0, #61	@ 0x3d
 80023d2:	f002 ff21 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023d6:	203d      	movs	r0, #61	@ 0x3d
 80023d8:	f002 ff38 	bl	800524c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80023dc:	bf00      	nop
 80023de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40013800 	.word	0x40013800
 80023ec:	46020c00 	.word	0x46020c00
 80023f0:	42020000 	.word	0x42020000

080023f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0be      	sub	sp, #248	@ 0xf8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023fc:	f107 0318 	add.w	r3, r7, #24
 8002400:	22e0      	movs	r2, #224	@ 0xe0
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f00f fb60 	bl	8011aca <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a3a      	ldr	r2, [pc, #232]	@ (80024f8 <HAL_PCD_MspInit+0x104>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d16d      	bne.n	80024f0 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002414:	4b39      	ldr	r3, [pc, #228]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 8002416:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800241a:	4a38      	ldr	r2, [pc, #224]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002424:	4b35      	ldr	r3, [pc, #212]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 8002426:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0308 	mov.w	r3, #8
 800243a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 800243e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002442:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002446:	f107 0318 	add.w	r3, r7, #24
 800244a:	4618      	mov	r0, r3
 800244c:	f008 fcfa 	bl	800ae44 <HAL_RCCEx_PeriphCLKConfig>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 8002456:	f7ff f963 	bl	8001720 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 800245a:	200c      	movs	r0, #12
 800245c:	f000 fc1c 	bl	8002c98 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002460:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 8002462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002466:	4a25      	ldr	r2, [pc, #148]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 8002468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800246c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002470:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 8002472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 800247e:	4b1f      	ldr	r3, [pc, #124]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 8002480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002484:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 8002486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800248a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800248e:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 8002490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249c:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11b      	bne.n	80024e2 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 80024ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b0:	4a12      	ldr	r2, [pc, #72]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80024ba:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 80024bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80024c8:	f007 f9c2 	bl	8009850 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80024cc:	f007 f9f0 	bl	80098b0 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d0:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d6:	4a09      	ldr	r2, [pc, #36]	@ (80024fc <HAL_PCD_MspInit+0x108>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80024e0:	e003      	b.n	80024ea <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80024e2:	f007 f9b5 	bl	8009850 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80024e6:	f007 f9e3 	bl	80098b0 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f000 fbc0 	bl	8002c70 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80024f0:	bf00      	nop
 80024f2:	37f8      	adds	r7, #248	@ 0xf8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	42040000 	.word	0x42040000
 80024fc:	46020c00 	.word	0x46020c00

08002500 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0a4      	sub	sp, #144	@ 0x90
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4abb      	ldr	r2, [pc, #748]	@ (80027fc <HAL_SAI_MspInit+0x2fc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	f040 80ca 	bne.w	80026a8 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002514:	4bba      	ldr	r3, [pc, #744]	@ (8002800 <HAL_SAI_MspInit+0x300>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10e      	bne.n	800253a <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800251c:	4bb9      	ldr	r3, [pc, #740]	@ (8002804 <HAL_SAI_MspInit+0x304>)
 800251e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002522:	4ab8      	ldr	r2, [pc, #736]	@ (8002804 <HAL_SAI_MspInit+0x304>)
 8002524:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002528:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800252c:	4bb5      	ldr	r3, [pc, #724]	@ (8002804 <HAL_SAI_MspInit+0x304>)
 800252e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800253a:	4bb1      	ldr	r3, [pc, #708]	@ (8002800 <HAL_SAI_MspInit+0x300>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	4aaf      	ldr	r2, [pc, #700]	@ (8002800 <HAL_SAI_MspInit+0x300>)
 8002542:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002544:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002548:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800255c:	230d      	movs	r3, #13
 800255e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002566:	4619      	mov	r1, r3
 8002568:	48a7      	ldr	r0, [pc, #668]	@ (8002808 <HAL_SAI_MspInit+0x308>)
 800256a:	f004 ff6f 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800256e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002572:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002586:	230d      	movs	r3, #13
 8002588:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002590:	4619      	mov	r1, r3
 8002592:	489d      	ldr	r0, [pc, #628]	@ (8002808 <HAL_SAI_MspInit+0x308>)
 8002594:	f004 ff5a 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800259c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025b0:	230d      	movs	r3, #13
 80025b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025b6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025ba:	4619      	mov	r1, r3
 80025bc:	4893      	ldr	r0, [pc, #588]	@ (800280c <HAL_SAI_MspInit+0x30c>)
 80025be:	f004 ff45 	bl	800744c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80025c2:	2321      	movs	r3, #33	@ 0x21
 80025c4:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 80025c6:	2326      	movs	r3, #38	@ 0x26
 80025c8:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025d2:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80025d4:	2308      	movs	r3, #8
 80025d6:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80025dc:	2302      	movs	r3, #2
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80025e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80025e6:	2301      	movs	r3, #1
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80025f2:	2300      	movs	r3, #0
 80025f4:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80025fa:	2300      	movs	r3, #0
 80025fc:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80025fe:	2300      	movs	r3, #0
 8002600:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002602:	2300      	movs	r3, #0
 8002604:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8002606:	f107 0310 	add.w	r3, r7, #16
 800260a:	4981      	ldr	r1, [pc, #516]	@ (8002810 <HAL_SAI_MspInit+0x310>)
 800260c:	4618      	mov	r0, r3
 800260e:	f004 f831 	bl	8006674 <HAL_DMAEx_List_BuildNode>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8002618:	f7ff f882 	bl	8001720 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 800261c:	4a7c      	ldr	r2, [pc, #496]	@ (8002810 <HAL_SAI_MspInit+0x310>)
 800261e:	2100      	movs	r1, #0
 8002620:	487c      	ldr	r0, [pc, #496]	@ (8002814 <HAL_SAI_MspInit+0x314>)
 8002622:	f004 f853 	bl	80066cc <HAL_DMAEx_List_InsertNode>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 800262c:	f7ff f878 	bl	8001720 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 8002630:	4878      	ldr	r0, [pc, #480]	@ (8002814 <HAL_SAI_MspInit+0x314>)
 8002632:	f004 f914 	bl	800685e <HAL_DMAEx_List_SetCircularMode>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 800263c:	f7ff f870 	bl	8001720 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002640:	4b75      	ldr	r3, [pc, #468]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 8002642:	4a76      	ldr	r2, [pc, #472]	@ (800281c <HAL_SAI_MspInit+0x31c>)
 8002644:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8002646:	4b74      	ldr	r3, [pc, #464]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 8002648:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800264c:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800264e:	4b72      	ldr	r3, [pc, #456]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 8002650:	2200      	movs	r2, #0
 8002652:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002654:	4b70      	ldr	r3, [pc, #448]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 8002656:	2200      	movs	r2, #0
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800265a:	4b6f      	ldr	r3, [pc, #444]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 800265c:	2200      	movs	r2, #0
 800265e:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002660:	4b6d      	ldr	r3, [pc, #436]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 8002662:	2281      	movs	r2, #129	@ 0x81
 8002664:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002666:	486c      	ldr	r0, [pc, #432]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 8002668:	f003 fe44 	bl	80062f4 <HAL_DMAEx_List_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 8002672:	f7ff f855 	bl	8001720 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 8002676:	4967      	ldr	r1, [pc, #412]	@ (8002814 <HAL_SAI_MspInit+0x314>)
 8002678:	4867      	ldr	r0, [pc, #412]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 800267a:	f004 f951 	bl	8006920 <HAL_DMAEx_List_LinkQ>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 8002684:	f7ff f84c 	bl	8001720 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a63      	ldr	r2, [pc, #396]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 800268c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002690:	4a61      	ldr	r2, [pc, #388]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002696:	2110      	movs	r1, #16
 8002698:	485f      	ldr	r0, [pc, #380]	@ (8002818 <HAL_SAI_MspInit+0x318>)
 800269a:	f003 fa39 	bl	8005b10 <HAL_DMA_ConfigChannelAttributes>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 80026a4:	f7ff f83c 	bl	8001720 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5c      	ldr	r2, [pc, #368]	@ (8002820 <HAL_SAI_MspInit+0x320>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	f040 80eb 	bne.w	800288a <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80026b4:	4b52      	ldr	r3, [pc, #328]	@ (8002800 <HAL_SAI_MspInit+0x300>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10e      	bne.n	80026da <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80026bc:	4b51      	ldr	r3, [pc, #324]	@ (8002804 <HAL_SAI_MspInit+0x304>)
 80026be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026c2:	4a50      	ldr	r2, [pc, #320]	@ (8002804 <HAL_SAI_MspInit+0x304>)
 80026c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026c8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80026cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002804 <HAL_SAI_MspInit+0x304>)
 80026ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80026da:	4b49      	ldr	r3, [pc, #292]	@ (8002800 <HAL_SAI_MspInit+0x300>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	4a47      	ldr	r2, [pc, #284]	@ (8002800 <HAL_SAI_MspInit+0x300>)
 80026e2:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80026fc:	230d      	movs	r3, #13
 80026fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002706:	4619      	mov	r1, r3
 8002708:	4846      	ldr	r0, [pc, #280]	@ (8002824 <HAL_SAI_MspInit+0x324>)
 800270a:	f004 fe9f 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800270e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002712:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002726:	230d      	movs	r3, #13
 8002728:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002730:	4619      	mov	r1, r3
 8002732:	483d      	ldr	r0, [pc, #244]	@ (8002828 <HAL_SAI_MspInit+0x328>)
 8002734:	f004 fe8a 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002738:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800273c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002750:	230d      	movs	r3, #13
 8002752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002756:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800275a:	4619      	mov	r1, r3
 800275c:	4832      	ldr	r0, [pc, #200]	@ (8002828 <HAL_SAI_MspInit+0x328>)
 800275e:	f004 fe75 	bl	800744c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002762:	2321      	movs	r3, #33	@ 0x21
 8002764:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8002766:	2327      	movs	r3, #39	@ 0x27
 8002768:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002776:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800277c:	2302      	movs	r3, #2
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002780:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002786:	2301      	movs	r3, #1
 8002788:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800278a:	2301      	movs	r3, #1
 800278c:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800278e:	2300      	movs	r3, #0
 8002790:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002792:	2300      	movs	r3, #0
 8002794:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002796:	2300      	movs	r3, #0
 8002798:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800279a:	2300      	movs	r3, #0
 800279c:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800279e:	2300      	movs	r3, #0
 80027a0:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80027a2:	2300      	movs	r3, #0
 80027a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	4920      	ldr	r1, [pc, #128]	@ (800282c <HAL_SAI_MspInit+0x32c>)
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 ff61 	bl	8006674 <HAL_DMAEx_List_BuildNode>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 80027b8:	f7fe ffb2 	bl	8001720 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80027bc:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <HAL_SAI_MspInit+0x32c>)
 80027be:	2100      	movs	r1, #0
 80027c0:	481b      	ldr	r0, [pc, #108]	@ (8002830 <HAL_SAI_MspInit+0x330>)
 80027c2:	f003 ff83 	bl	80066cc <HAL_DMAEx_List_InsertNode>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 80027cc:	f7fe ffa8 	bl	8001720 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80027d0:	4817      	ldr	r0, [pc, #92]	@ (8002830 <HAL_SAI_MspInit+0x330>)
 80027d2:	f004 f844 	bl	800685e <HAL_DMAEx_List_SetCircularMode>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 80027dc:	f7fe ffa0 	bl	8001720 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80027e0:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <HAL_SAI_MspInit+0x334>)
 80027e2:	4a15      	ldr	r2, [pc, #84]	@ (8002838 <HAL_SAI_MspInit+0x338>)
 80027e4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 80027e6:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <HAL_SAI_MspInit+0x334>)
 80027e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80027ec:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80027ee:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <HAL_SAI_MspInit+0x334>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80027f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002834 <HAL_SAI_MspInit+0x334>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80027fa:	e01f      	b.n	800283c <HAL_SAI_MspInit+0x33c>
 80027fc:	40015804 	.word	0x40015804
 8002800:	20004708 	.word	0x20004708
 8002804:	46020c00 	.word	0x46020c00
 8002808:	42020400 	.word	0x42020400
 800280c:	42021800 	.word	0x42021800
 8002810:	20000604 	.word	0x20000604
 8002814:	20000628 	.word	0x20000628
 8002818:	20000640 	.word	0x20000640
 800281c:	400201d0 	.word	0x400201d0
 8002820:	40015824 	.word	0x40015824
 8002824:	42020000 	.word	0x42020000
 8002828:	42020800 	.word	0x42020800
 800282c:	200006b8 	.word	0x200006b8
 8002830:	200006dc 	.word	0x200006dc
 8002834:	200006f4 	.word	0x200006f4
 8002838:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800283c:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <HAL_SAI_MspInit+0x394>)
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002842:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <HAL_SAI_MspInit+0x394>)
 8002844:	2281      	movs	r2, #129	@ 0x81
 8002846:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002848:	4812      	ldr	r0, [pc, #72]	@ (8002894 <HAL_SAI_MspInit+0x394>)
 800284a:	f003 fd53 	bl	80062f4 <HAL_DMAEx_List_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 8002854:	f7fe ff64 	bl	8001720 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002858:	490f      	ldr	r1, [pc, #60]	@ (8002898 <HAL_SAI_MspInit+0x398>)
 800285a:	480e      	ldr	r0, [pc, #56]	@ (8002894 <HAL_SAI_MspInit+0x394>)
 800285c:	f004 f860 	bl	8006920 <HAL_DMAEx_List_LinkQ>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 8002866:	f7fe ff5b 	bl	8001720 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a09      	ldr	r2, [pc, #36]	@ (8002894 <HAL_SAI_MspInit+0x394>)
 800286e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002872:	4a08      	ldr	r2, [pc, #32]	@ (8002894 <HAL_SAI_MspInit+0x394>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002878:	2110      	movs	r1, #16
 800287a:	4806      	ldr	r0, [pc, #24]	@ (8002894 <HAL_SAI_MspInit+0x394>)
 800287c:	f003 f948 	bl	8005b10 <HAL_DMA_ConfigChannelAttributes>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 8002886:	f7fe ff4b 	bl	8001720 <Error_Handler>
    }

    }
}
 800288a:	bf00      	nop
 800288c:	3790      	adds	r7, #144	@ 0x90
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200006f4 	.word	0x200006f4
 8002898:	200006dc 	.word	0x200006dc

0800289c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <NMI_Handler+0x4>

080028a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <HardFault_Handler+0x4>

080028ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <MemManage_Handler+0x4>

080028b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <BusFault_Handler+0x4>

080028bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <UsageFault_Handler+0x4>

080028c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f2:	f000 f979 	bl	8002be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}

080028fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80028fe:	2002      	movs	r0, #2
 8002900:	f004 ffae 	bl	8007860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}

08002908 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 800290c:	2010      	movs	r0, #16
 800290e:	f004 ffa7 	bl	8007860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}

08002916 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 800291a:	2020      	movs	r0, #32
 800291c:	f004 ffa0 	bl	8007860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <GPDMA1_Channel0_IRQHandler+0x10>)
 800292a:	f002 ff82 	bl	8005832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000019c 	.word	0x2000019c

08002938 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <GPDMA1_Channel1_IRQHandler+0x10>)
 800293e:	f002 ff78 	bl	8005832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200006f4 	.word	0x200006f4

0800294c <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <GPDMA1_Channel2_IRQHandler+0x10>)
 8002952:	f002 ff6e 	bl	8005832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000214 	.word	0x20000214

08002960 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8002964:	4802      	ldr	r0, [pc, #8]	@ (8002970 <GPDMA1_Channel3_IRQHandler+0x10>)
 8002966:	f002 ff64 	bl	8005832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000640 	.word	0x20000640

08002974 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002978:	4802      	ldr	r0, [pc, #8]	@ (8002984 <ADC1_2_IRQHandler+0x10>)
 800297a:	f001 f925 	bl	8003bc8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000048 	.word	0x20000048

08002988 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800298c:	4802      	ldr	r0, [pc, #8]	@ (8002998 <I2C2_EV_IRQHandler+0x10>)
 800298e:	f005 f933 	bl	8007bf8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200003a8 	.word	0x200003a8

0800299c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80029a0:	4802      	ldr	r0, [pc, #8]	@ (80029ac <I2C2_ER_IRQHandler+0x10>)
 80029a2:	f005 f943 	bl	8007c2c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200003a8 	.word	0x200003a8

080029b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029b4:	4802      	ldr	r0, [pc, #8]	@ (80029c0 <USART1_IRQHandler+0x10>)
 80029b6:	f00d fbcf 	bl	8010158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000804 	.word	0x20000804

080029c4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <LTDC_IRQHandler+0x10>)
 80029ca:	f006 fab1 	bl	8008f30 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200003fc 	.word	0x200003fc

080029d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029dc:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <SystemInit+0x68>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <SystemInit+0x68>)
 80029e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80029ec:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <SystemInit+0x6c>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80029f2:	4b14      	ldr	r3, [pc, #80]	@ (8002a44 <SystemInit+0x6c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80029f8:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <SystemInit+0x6c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80029fe:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <SystemInit+0x6c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002a04:	4b0f      	ldr	r3, [pc, #60]	@ (8002a44 <SystemInit+0x6c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0e      	ldr	r2, [pc, #56]	@ (8002a44 <SystemInit+0x6c>)
 8002a0a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002a0e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002a12:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <SystemInit+0x6c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <SystemInit+0x6c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a09      	ldr	r2, [pc, #36]	@ (8002a44 <SystemInit+0x6c>)
 8002a20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002a26:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <SystemInit+0x6c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a2c:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <SystemInit+0x68>)
 8002a2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a32:	609a      	str	r2, [r3, #8]
  #endif
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	46020c00 	.word	0x46020c00

08002a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002a48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a80 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a4c:	f7ff ffc4 	bl	80029d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a52:	e003      	b.n	8002a5c <LoopCopyDataInit>

08002a54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a5a:	3104      	adds	r1, #4

08002a5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a5c:	480a      	ldr	r0, [pc, #40]	@ (8002a88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a64:	d3f6      	bcc.n	8002a54 <CopyDataInit>
	ldr	r2, =_sbss
 8002a66:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a68:	e002      	b.n	8002a70 <LoopFillZerobss>

08002a6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a6c:	f842 3b04 	str.w	r3, [r2], #4

08002a70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <LoopForever+0x16>)
	cmp	r2, r3
 8002a72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a74:	d3f9      	bcc.n	8002a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a76:	f00f f831 	bl	8011adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a7a:	f7fd fda7 	bl	80005cc <main>

08002a7e <LoopForever>:

LoopForever:
    b LoopForever
 8002a7e:	e7fe      	b.n	8002a7e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002a80:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002a84:	08011c4c 	.word	0x08011c4c
	ldr	r0, =_sdata
 8002a88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a8c:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
 8002a90:	2000002c 	.word	0x2000002c
	ldr	r3, = _ebss
 8002a94:	20004710 	.word	0x20004710

08002a98 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a98:	e7fe      	b.n	8002a98 <ADC4_IRQHandler>
	...

08002a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_Init+0x50>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <HAL_Init+0x50>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aac:	2003      	movs	r0, #3
 8002aae:	f002 fba8 	bl	8005202 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ab2:	f007 ffe9 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <HAL_Init+0x54>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	490c      	ldr	r1, [pc, #48]	@ (8002af4 <HAL_Init+0x58>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8002af8 <HAL_Init+0x5c>)
 8002aca:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002acc:	2004      	movs	r0, #4
 8002ace:	f002 fbed 	bl	80052ac <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad2:	200f      	movs	r0, #15
 8002ad4:	f000 f812 	bl	8002afc <HAL_InitTick>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e002      	b.n	8002ae8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae2:	f7fe fe23 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40022000 	.word	0x40022000
 8002af0:	46020c00 	.word	0x46020c00
 8002af4:	08011b3c 	.word	0x08011b3c
 8002af8:	20000020 	.word	0x20000020

08002afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b08:	4b33      	ldr	r3, [pc, #204]	@ (8002bd8 <HAL_InitTick+0xdc>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e05c      	b.n	8002bce <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b14:	4b31      	ldr	r3, [pc, #196]	@ (8002bdc <HAL_InitTick+0xe0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d10c      	bne.n	8002b3a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b20:	4b2f      	ldr	r3, [pc, #188]	@ (8002be0 <HAL_InitTick+0xe4>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd8 <HAL_InitTick+0xdc>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e037      	b.n	8002baa <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002b3a:	f002 fc0f 	bl	800535c <HAL_SYSTICK_GetCLKSourceConfig>
 8002b3e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d023      	beq.n	8002b8e <HAL_InitTick+0x92>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d82d      	bhi.n	8002ba8 <HAL_InitTick+0xac>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_InitTick+0x5e>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d00d      	beq.n	8002b74 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002b58:	e026      	b.n	8002ba8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002b5a:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <HAL_InitTick+0xe4>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd8 <HAL_InitTick+0xdc>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002b68:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	60fb      	str	r3, [r7, #12]
        break;
 8002b72:	e01a      	b.n	8002baa <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002b74:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <HAL_InitTick+0xdc>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b82:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	60fb      	str	r3, [r7, #12]
        break;
 8002b8c:	e00d      	b.n	8002baa <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_InitTick+0xdc>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b9c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
        break;
 8002ba6:	e000      	b.n	8002baa <HAL_InitTick+0xae>
        break;
 8002ba8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f002 fb5c 	bl	8005268 <HAL_SYSTICK_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e009      	b.n	8002bce <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc2:	f002 fb29 	bl	8005218 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002bc6:	4a07      	ldr	r2, [pc, #28]	@ (8002be4 <HAL_InitTick+0xe8>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000028 	.word	0x20000028
 8002bdc:	e000e010 	.word	0xe000e010
 8002be0:	20000020 	.word	0x20000020
 8002be4:	20000024 	.word	0x20000024

08002be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_IncTick+0x20>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_IncTick+0x24>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a04      	ldr	r2, [pc, #16]	@ (8002c0c <HAL_IncTick+0x24>)
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000028 	.word	0x20000028
 8002c0c:	2000470c 	.word	0x2000470c

08002c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return uwTick;
 8002c14:	4b03      	ldr	r3, [pc, #12]	@ (8002c24 <HAL_GetTick+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	2000470c 	.word	0x2000470c

08002c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff ffee 	bl	8002c10 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d005      	beq.n	8002c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <HAL_Delay+0x44>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c4e:	bf00      	nop
 8002c50:	f7ff ffde 	bl	8002c10 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d8f7      	bhi.n	8002c50 <HAL_Delay+0x28>
  {
  }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000028 	.word	0x20000028

08002c70 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7c:	f023 0201 	bic.w	r2, r3, #1
 8002c80:	4904      	ldr	r1, [pc, #16]	@ (8002c94 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	46000400 	.word	0x46000400

08002c98 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002ca0:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca4:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002ca8:	4904      	ldr	r1, [pc, #16]	@ (8002cbc <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	46000400 	.word	0x46000400

08002cc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a0a      	ldr	r2, [pc, #40]	@ (8002d64 <LL_ADC_SetResolution+0x3c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d104      	bne.n	8002d48 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f023 020c 	bic.w	r2, r3, #12
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	60da      	str	r2, [r3, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	46021000 	.word	0x46021000

08002d68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3360      	adds	r3, #96	@ 0x60
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	430b      	orrs	r3, r1
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3360      	adds	r3, #96	@ 0x60
 8002db8:	461a      	mov	r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b087      	sub	sp, #28
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3360      	adds	r3, #96	@ 0x60
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	601a      	str	r2, [r3, #0]
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3360      	adds	r3, #96	@ 0x60
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	601a      	str	r2, [r3, #0]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b087      	sub	sp, #28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3360      	adds	r3, #96	@ 0x60
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e86:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d002      	beq.n	8002eaa <LL_ADC_SetGainCompensation+0x32>
 8002ea4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002ea8:	e000      	b.n	8002eac <LL_ADC_SetGainCompensation+0x34>
 8002eaa:	2200      	movs	r2, #0
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2107      	movs	r1, #7
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	401a      	ands	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	@ 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe0 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d020      	beq.n	8002f7a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3330      	adds	r3, #48	@ 0x30
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	4413      	add	r3, r2
 8002f4a:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	211f      	movs	r1, #31
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	401a      	ands	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	f003 011f 	and.w	r1, r3, #31
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	431a      	orrs	r2, r3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002f78:	e02b      	b.n	8002fd2 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	210f      	movs	r1, #15
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d104      	bne.n	8002fa2 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	e010      	b.n	8002fc4 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	613b      	str	r3, [r7, #16]
  return result;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e003      	b.n	8002fc4 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	f001 011f 	and.w	r1, r1, #31
 8002fca:	408b      	lsls	r3, r1
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	46021000 	.word	0x46021000

08002fe4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d107      	bne.n	8003008 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	0e9b      	lsrs	r3, r3, #26
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2201      	movs	r2, #1
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	e015      	b.n	8003034 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	60fb      	str	r3, [r7, #12]
  return result;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e003      	b.n	800302a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2201      	movs	r2, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800303e:	bf00      	nop
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	0e9b      	lsrs	r3, r3, #26
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	2101      	movs	r1, #1
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	401a      	ands	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0303 	and.w	r3, r3, #3
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030bc:	b480      	push	{r7}
 80030be:	b08b      	sub	sp, #44	@ 0x2c
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003180 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d042      	beq.n	8003156 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <LL_ADC_SetChannelSamplingTime+0x28>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	f003 021f 	and.w	r2, r3, #31
 80030e2:	e011      	b.n	8003108 <LL_ADC_SetChannelSamplingTime+0x4c>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	617b      	str	r3, [r7, #20]
  return result;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80030fa:	2320      	movs	r3, #32
 80030fc:	e003      	b.n	8003106 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	0e5b      	lsrs	r3, r3, #25
 800310c:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003110:	460b      	mov	r3, r1
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	1ad2      	subs	r2, r2, r3
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3314      	adds	r3, #20
 8003126:	461a      	mov	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	0e5b      	lsrs	r3, r3, #25
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	4413      	add	r3, r2
 8003134:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	2107      	movs	r1, #7
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	401a      	ands	r2, r3
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	431a      	orrs	r2, r3
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003154:	e00e      	b.n	8003174 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	43db      	mvns	r3, r3
 8003160:	401a      	ands	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	0219      	lsls	r1, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	400b      	ands	r3, r1
 800316a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800316e:	431a      	orrs	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	615a      	str	r2, [r3, #20]
}
 8003174:	bf00      	nop
 8003176:	372c      	adds	r7, #44	@ 0x2c
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	46021000 	.word	0x46021000

08003184 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800319c:	43db      	mvns	r3, r3
 800319e:	401a      	ands	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f003 0318 	and.w	r3, r3, #24
 80031a6:	4908      	ldr	r1, [pc, #32]	@ (80031c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031a8:	40d9      	lsrs	r1, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	400b      	ands	r3, r1
 80031ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031b2:	431a      	orrs	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	000fffff 	.word	0x000fffff

080031cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 031f 	and.w	r3, r3, #31
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003214:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6093      	str	r3, [r2, #8]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800323c:	d101      	bne.n	8003242 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003260:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003264:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800328c:	d101      	bne.n	8003292 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	609a      	str	r2, [r3, #8]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <LL_ADC_IsEnabled+0x18>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <LL_ADC_IsEnabled+0x1a>
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	609a      	str	r2, [r3, #8]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b04      	cmp	r3, #4
 8003328:	d101      	bne.n	800332e <LL_ADC_REG_IsConversionOngoing+0x18>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d101      	bne.n	8003354 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b08b      	sub	sp, #44	@ 0x2c
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e2ce      	b.n	8003922 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a95      	ldr	r2, [pc, #596]	@ (80035e8 <HAL_ADC_Init+0x284>)
 8003392:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fe f9df 	bl	8001760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff37 	bl	8003228 <LL_ADC_IsDeepPowerDownEnabled>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff1d 	bl	8003204 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ff52 	bl	8003278 <LL_ADC_IsInternalRegulatorEnabled>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d115      	bne.n	8003406 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ff36 	bl	8003250 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033e4:	4b81      	ldr	r3, [pc, #516]	@ (80035ec <HAL_ADC_Init+0x288>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	099b      	lsrs	r3, r3, #6
 80033ea:	4a81      	ldr	r2, [pc, #516]	@ (80035f0 <HAL_ADC_Init+0x28c>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033f8:	e002      	b.n	8003400 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f9      	bne.n	80033fa <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ff34 	bl	8003278 <LL_ADC_IsInternalRegulatorEnabled>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10e      	bne.n	8003434 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800341a:	f043 0210 	orr.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003426:	f043 0201 	orr.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff6c 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 800343e:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 825f 	bne.w	800390c <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b00      	cmp	r3, #0
 8003452:	f040 825b 	bne.w	800390c <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800345a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800345e:	f043 0202 	orr.w	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff2c 	bl	80032c8 <LL_ADC_IsEnabled>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d14f      	bne.n	8003516 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a5b      	ldr	r2, [pc, #364]	@ (80035e8 <HAL_ADC_Init+0x284>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d037      	beq.n	80034f0 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a5b      	ldr	r2, [pc, #364]	@ (80035f4 <HAL_ADC_Init+0x290>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <HAL_ADC_Init+0x130>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a5a      	ldr	r2, [pc, #360]	@ (80035f8 <HAL_ADC_Init+0x294>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10e      	bne.n	80034b2 <HAL_ADC_Init+0x14e>
 8003494:	4857      	ldr	r0, [pc, #348]	@ (80035f4 <HAL_ADC_Init+0x290>)
 8003496:	f7ff ff17 	bl	80032c8 <LL_ADC_IsEnabled>
 800349a:	4604      	mov	r4, r0
 800349c:	4856      	ldr	r0, [pc, #344]	@ (80035f8 <HAL_ADC_Init+0x294>)
 800349e:	f7ff ff13 	bl	80032c8 <LL_ADC_IsEnabled>
 80034a2:	4603      	mov	r3, r0
 80034a4:	4323      	orrs	r3, r4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e008      	b.n	80034c4 <HAL_ADC_Init+0x160>
 80034b2:	484d      	ldr	r0, [pc, #308]	@ (80035e8 <HAL_ADC_Init+0x284>)
 80034b4:	f7ff ff08 	bl	80032c8 <LL_ADC_IsEnabled>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d026      	beq.n	8003516 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a49      	ldr	r2, [pc, #292]	@ (80035f4 <HAL_ADC_Init+0x290>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d004      	beq.n	80034dc <HAL_ADC_Init+0x178>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a48      	ldr	r2, [pc, #288]	@ (80035f8 <HAL_ADC_Init+0x294>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_Init+0x17c>
 80034dc:	4a47      	ldr	r2, [pc, #284]	@ (80035fc <HAL_ADC_Init+0x298>)
 80034de:	e000      	b.n	80034e2 <HAL_ADC_Init+0x17e>
 80034e0:	4a47      	ldr	r2, [pc, #284]	@ (8003600 <HAL_ADC_Init+0x29c>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f7ff fbe9 	bl	8002cc0 <LL_ADC_SetCommonClock>
 80034ee:	e012      	b.n	8003516 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f7ff fc14 	bl	8002d28 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003500:	4b3f      	ldr	r3, [pc, #252]	@ (8003600 <HAL_ADC_Init+0x29c>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003510:	493b      	ldr	r1, [pc, #236]	@ (8003600 <HAL_ADC_Init+0x29c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a33      	ldr	r2, [pc, #204]	@ (80035e8 <HAL_ADC_Init+0x284>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d010      	beq.n	8003542 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003526:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800352c:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003532:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800353a:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800353c:	4313      	orrs	r3, r2
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	e035      	b.n	80035ae <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7f1b      	ldrb	r3, [r3, #28]
 8003546:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800354e:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003550:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003556:	2a00      	cmp	r2, #0
 8003558:	d002      	beq.n	8003560 <HAL_ADC_Init+0x1fc>
 800355a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800355e:	e000      	b.n	8003562 <HAL_ADC_Init+0x1fe>
 8003560:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003562:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003568:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	da04      	bge.n	800357c <HAL_ADC_Init+0x218>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800357a:	e001      	b.n	8003580 <HAL_ADC_Init+0x21c>
 800357c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003580:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	491b      	ldr	r1, [pc, #108]	@ (80035f4 <HAL_ADC_Init+0x290>)
 8003588:	428b      	cmp	r3, r1
 800358a:	d004      	beq.n	8003596 <HAL_ADC_Init+0x232>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4919      	ldr	r1, [pc, #100]	@ (80035f8 <HAL_ADC_Init+0x294>)
 8003592:	428b      	cmp	r3, r1
 8003594:	d103      	bne.n	800359e <HAL_ADC_Init+0x23a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800359c:	e003      	b.n	80035a6 <HAL_ADC_Init+0x242>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035a4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035a6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d131      	bne.n	800361c <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	@ (80035e8 <HAL_ADC_Init+0x284>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	3b01      	subs	r3, #1
 80035c8:	045b      	lsls	r3, r3, #17
 80035ca:	6a3a      	ldr	r2, [r7, #32]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	e024      	b.n	800361c <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d113      	bne.n	8003604 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e2:	623b      	str	r3, [r7, #32]
 80035e4:	e01a      	b.n	800361c <HAL_ADC_Init+0x2b8>
 80035e6:	bf00      	nop
 80035e8:	46021000 	.word	0x46021000
 80035ec:	20000020 	.word	0x20000020
 80035f0:	053e2d63 	.word	0x053e2d63
 80035f4:	42028000 	.word	0x42028000
 80035f8:	42028100 	.word	0x42028100
 80035fc:	42028300 	.word	0x42028300
 8003600:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003614:	f043 0201 	orr.w	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a75      	ldr	r2, [pc, #468]	@ (80037f8 <HAL_ADC_Init+0x494>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003632:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363a:	4313      	orrs	r3, r2
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	4313      	orrs	r3, r2
 8003640:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	4b6c      	ldr	r3, [pc, #432]	@ (80037fc <HAL_ADC_Init+0x498>)
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	6a39      	ldr	r1, [r7, #32]
 8003652:	430b      	orrs	r3, r1
 8003654:	60d3      	str	r3, [r2, #12]
 8003656:	e031      	b.n	80036bc <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365c:	2b00      	cmp	r3, #0
 800365e:	d009      	beq.n	8003674 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003664:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	4313      	orrs	r3, r2
 800366e:	6a3a      	ldr	r2, [r7, #32]
 8003670:	4313      	orrs	r3, r2
 8003672:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	4b61      	ldr	r3, [pc, #388]	@ (8003800 <HAL_ADC_Init+0x49c>)
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	6a39      	ldr	r1, [r7, #32]
 8003684:	430b      	orrs	r3, r1
 8003686:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1a      	ldr	r2, [r3, #32]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a4d      	ldr	r2, [pc, #308]	@ (80037f8 <HAL_ADC_Init+0x494>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	f000 80a4 	beq.w	8003810 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fe22 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 80036d2:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fe2f 	bl	800333c <LL_ADC_INJ_IsConversionOngoing>
 80036de:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d166      	bne.n	80037b4 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d163      	bne.n	80037b4 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7f1b      	ldrb	r3, [r3, #28]
 80036f0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4943      	ldr	r1, [pc, #268]	@ (8003804 <HAL_ADC_Init+0x4a0>)
 80036f8:	428b      	cmp	r3, r1
 80036fa:	d004      	beq.n	8003706 <HAL_ADC_Init+0x3a2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4941      	ldr	r1, [pc, #260]	@ (8003808 <HAL_ADC_Init+0x4a4>)
 8003702:	428b      	cmp	r3, r1
 8003704:	d102      	bne.n	800370c <HAL_ADC_Init+0x3a8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370a:	e002      	b.n	8003712 <HAL_ADC_Init+0x3ae>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003710:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003712:	4313      	orrs	r3, r2
 8003714:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003720:	f023 0303 	bic.w	r3, r3, #3
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	6a39      	ldr	r1, [r7, #32]
 800372a:	430b      	orrs	r3, r1
 800372c:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4619      	mov	r1, r3
 8003740:	4610      	mov	r0, r2
 8003742:	f7ff fb99 	bl	8002e78 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800374c:	2b01      	cmp	r3, #1
 800374e:	d11e      	bne.n	800378e <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003754:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_ADC_Init+0x4a8>)
 800375e:	4013      	ands	r3, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003764:	0411      	lsls	r1, r2, #16
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800376a:	4311      	orrs	r1, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003776:	4311      	orrs	r1, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800377c:	0892      	lsrs	r2, r2, #2
 800377e:	430a      	orrs	r2, r1
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	611a      	str	r2, [r3, #16]
 800378c:	e007      	b.n	800379e <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d10c      	bne.n	80037d6 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	f023 010f 	bic.w	r1, r3, #15
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	1e5a      	subs	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80037d4:	e007      	b.n	80037e6 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 020f 	bic.w	r2, r2, #15
 80037e4:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	f043 0201 	orr.w	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80037f6:	e092      	b.n	800391e <HAL_ADC_Init+0x5ba>
 80037f8:	46021000 	.word	0x46021000
 80037fc:	fff0c013 	.word	0xfff0c013
 8003800:	ffde800d 	.word	0xffde800d
 8003804:	42028000 	.word	0x42028000
 8003808:	42028100 	.word	0x42028100
 800380c:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003816:	2b01      	cmp	r3, #1
 8003818:	d111      	bne.n	800383e <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003822:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003828:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800382e:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	4313      	orrs	r3, r2
 8003834:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	4b39      	ldr	r3, [pc, #228]	@ (800392c <HAL_ADC_Init+0x5c8>)
 8003846:	4013      	ands	r3, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	69f9      	ldr	r1, [r7, #28]
 800384e:	430b      	orrs	r3, r1
 8003850:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385a:	461a      	mov	r2, r3
 800385c:	2100      	movs	r1, #0
 800385e:	f7ff fb2e 	bl	8002ebe <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386a:	461a      	mov	r2, r3
 800386c:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003870:	f7ff fb25 	bl	8002ebe <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f062 020f 	orn	r2, r2, #15
 800388a:	629a      	str	r2, [r3, #40]	@ 0x28
 800388c:	e018      	b.n	80038c0 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003896:	d113      	bne.n	80038c0 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	3b01      	subs	r3, #1
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	f003 031c 	and.w	r3, r3, #28
 80038aa:	f06f 020f 	mvn.w	r2, #15
 80038ae:	fa02 f103 	lsl.w	r1, r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <HAL_ADC_Init+0x5cc>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	6a3a      	ldr	r2, [r7, #32]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d10b      	bne.n	80038e8 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038da:	f023 0303 	bic.w	r3, r3, #3
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80038e6:	e01a      	b.n	800391e <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038ec:	f023 0312 	bic.w	r3, r3, #18
 80038f0:	f043 0210 	orr.w	r2, r3, #16
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038fc:	f043 0201 	orr.w	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800390a:	e008      	b.n	800391e <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003910:	f043 0210 	orr.w	r2, r3, #16
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800391e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003922:	4618      	mov	r0, r3
 8003924:	372c      	adds	r7, #44	@ 0x2c
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}
 800392a:	bf00      	nop
 800392c:	f7fffc02 	.word	0xf7fffc02
 8003930:	833ffff3 	.word	0x833ffff3

08003934 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b0a2      	sub	sp, #136	@ 0x88
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a98      	ldr	r2, [pc, #608]	@ (8003ba8 <HAL_ADC_Start_DMA+0x274>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d004      	beq.n	8003954 <HAL_ADC_Start_DMA+0x20>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a97      	ldr	r2, [pc, #604]	@ (8003bac <HAL_ADC_Start_DMA+0x278>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d101      	bne.n	8003958 <HAL_ADC_Start_DMA+0x24>
 8003954:	4b96      	ldr	r3, [pc, #600]	@ (8003bb0 <HAL_ADC_Start_DMA+0x27c>)
 8003956:	e000      	b.n	800395a <HAL_ADC_Start_DMA+0x26>
 8003958:	4b96      	ldr	r3, [pc, #600]	@ (8003bb4 <HAL_ADC_Start_DMA+0x280>)
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fc36 	bl	80031cc <LL_ADC_GetMultimode>
 8003960:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fcd5 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 8111 	bne.w	8003b96 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_ADC_Start_DMA+0x4e>
 800397e:	2302      	movs	r3, #2
 8003980:	e10e      	b.n	8003ba0 <HAL_ADC_Start_DMA+0x26c>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800398a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003990:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003992:	2b05      	cmp	r3, #5
 8003994:	d003      	beq.n	800399e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003996:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003998:	2b09      	cmp	r3, #9
 800399a:	f040 80f4 	bne.w	8003b86 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f001 fa2c 	bl	8004dfc <ADC_Enable>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80039aa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 80e4 	bne.w	8003b7c <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a7a      	ldr	r2, [pc, #488]	@ (8003bb8 <HAL_ADC_Start_DMA+0x284>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d026      	beq.n	8003a20 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a75      	ldr	r2, [pc, #468]	@ (8003bac <HAL_ADC_Start_DMA+0x278>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d002      	beq.n	80039e2 <HAL_ADC_Start_DMA+0xae>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	e000      	b.n	80039e4 <HAL_ADC_Start_DMA+0xb0>
 80039e2:	4b71      	ldr	r3, [pc, #452]	@ (8003ba8 <HAL_ADC_Start_DMA+0x274>)
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d002      	beq.n	80039f2 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d105      	bne.n	80039fe <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a0e:	f023 0206 	bic.w	r2, r3, #6
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a16:	e006      	b.n	8003a26 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a1e:	e002      	b.n	8003a26 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2a:	4a64      	ldr	r2, [pc, #400]	@ (8003bbc <HAL_ADC_Start_DMA+0x288>)
 8003a2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a32:	4a63      	ldr	r2, [pc, #396]	@ (8003bc0 <HAL_ADC_Start_DMA+0x28c>)
 8003a34:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3a:	4a62      	ldr	r2, [pc, #392]	@ (8003bc4 <HAL_ADC_Start_DMA+0x290>)
 8003a3c:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	221c      	movs	r2, #28
 8003a44:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0210 	orr.w	r2, r2, #16
 8003a5c:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a55      	ldr	r2, [pc, #340]	@ (8003bb8 <HAL_ADC_Start_DMA+0x284>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d107      	bne.n	8003a78 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d04f      	beq.n	8003b26 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d046      	beq.n	8003b1e <HAL_ADC_Start_DMA+0x1ea>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d040      	beq.n	8003b1e <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 fdf8 	bl	80066a0 <HAL_DMAEx_List_GetNodeConfig>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e072      	b.n	8003ba0 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d104      	bne.n	8003aca <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ac8:	e00a      	b.n	8003ae0 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d104      	bne.n	8003ada <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ad8:	e002      	b.n	8003ae0 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003aec:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b10:	4618      	mov	r0, r3
 8003b12:	f002 fd1b 	bl	800654c <HAL_DMAEx_List_Start_IT>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b1c:	e028      	b.n	8003b70 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b24:	e024      	b.n	8003b70 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d104      	bne.n	8003b3a <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b38:	e00c      	b.n	8003b54 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d104      	bne.n	8003b4e <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b4c:	e002      	b.n	8003b54 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3340      	adds	r3, #64	@ 0x40
 8003b5e:	4619      	mov	r1, r3
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b66:	f001 fd5f 	bl	8005628 <HAL_DMA_Start_IT>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff fbba 	bl	80032ee <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b7a:	e00f      	b.n	8003b9c <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003b84:	e00a      	b.n	8003b9c <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003b94:	e002      	b.n	8003b9c <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
 8003b98:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003b9c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3788      	adds	r7, #136	@ 0x88
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	42028000 	.word	0x42028000
 8003bac:	42028100 	.word	0x42028100
 8003bb0:	42028300 	.word	0x42028300
 8003bb4:	46021300 	.word	0x46021300
 8003bb8:	46021000 	.word	0x46021000
 8003bbc:	08004f31 	.word	0x08004f31
 8003bc0:	08005009 	.word	0x08005009
 8003bc4:	08005025 	.word	0x08005025

08003bc8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	@ 0x28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a77      	ldr	r2, [pc, #476]	@ (8003dc8 <HAL_ADC_IRQHandler+0x200>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_ADC_IRQHandler+0x30>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a76      	ldr	r2, [pc, #472]	@ (8003dcc <HAL_ADC_IRQHandler+0x204>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_IRQHandler+0x34>
 8003bf8:	4b75      	ldr	r3, [pc, #468]	@ (8003dd0 <HAL_ADC_IRQHandler+0x208>)
 8003bfa:	e000      	b.n	8003bfe <HAL_ADC_IRQHandler+0x36>
 8003bfc:	4b75      	ldr	r3, [pc, #468]	@ (8003dd4 <HAL_ADC_IRQHandler+0x20c>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fae4 	bl	80031cc <LL_ADC_GetMultimode>
 8003c04:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d017      	beq.n	8003c40 <HAL_ADC_IRQHandler+0x78>
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d012      	beq.n	8003c40 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c2a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f001 fa2e 	bl	8005094 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x8c>
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10b      	bne.n	8003c6c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80d1 	beq.w	8003e02 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80cb 	beq.w	8003e02 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a53      	ldr	r2, [pc, #332]	@ (8003dd8 <HAL_ADC_IRQHandler+0x210>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d06c      	beq.n	8003d68 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff f932 	bl	8002efc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80aa 	beq.w	8003df4 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a49      	ldr	r2, [pc, #292]	@ (8003dcc <HAL_ADC_IRQHandler+0x204>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d002      	beq.n	8003cb0 <HAL_ADC_IRQHandler+0xe8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	e000      	b.n	8003cb2 <HAL_ADC_IRQHandler+0xea>
 8003cb0:	4b45      	ldr	r3, [pc, #276]	@ (8003dc8 <HAL_ADC_IRQHandler+0x200>)
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d008      	beq.n	8003ccc <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d002      	beq.n	8003ccc <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b09      	cmp	r3, #9
 8003cca:	d104      	bne.n	8003cd6 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	623b      	str	r3, [r7, #32]
 8003cd4:	e00c      	b.n	8003cf0 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a3c      	ldr	r2, [pc, #240]	@ (8003dcc <HAL_ADC_IRQHandler+0x204>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d002      	beq.n	8003ce6 <HAL_ADC_IRQHandler+0x11e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	e000      	b.n	8003ce8 <HAL_ADC_IRQHandler+0x120>
 8003ce6:	4b38      	ldr	r3, [pc, #224]	@ (8003dc8 <HAL_ADC_IRQHandler+0x200>)
 8003ce8:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d17c      	bne.n	8003df4 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d175      	bne.n	8003df4 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fb02 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11a      	bne.n	8003d4e <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 020c 	bic.w	r2, r2, #12
 8003d26:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d159      	bne.n	8003df4 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	679a      	str	r2, [r3, #120]	@ 0x78
 8003d4c:	e052      	b.n	8003df4 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d52:	f043 0210 	orr.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003d66:	e045      	b.n	8003df4 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff f8c5 	bl	8002efc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03d      	beq.n	8003df4 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d138      	bne.n	8003df4 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d131      	bne.n	8003df4 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fabe 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d11d      	bne.n	8003ddc <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 020c 	bic.w	r2, r2, #12
 8003dae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	679a      	str	r2, [r3, #120]	@ 0x78
 8003dc4:	e016      	b.n	8003df4 <HAL_ADC_IRQHandler+0x22c>
 8003dc6:	bf00      	nop
 8003dc8:	42028000 	.word	0x42028000
 8003dcc:	42028100 	.word	0x42028100
 8003dd0:	42028300 	.word	0x42028300
 8003dd4:	46021300 	.word	0x46021300
 8003dd8:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f99d 	bl	8004134 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	220c      	movs	r2, #12
 8003e00:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a8c      	ldr	r2, [pc, #560]	@ (8004038 <HAL_ADC_IRQHandler+0x470>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	f000 8095 	beq.w	8003f38 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d004      	beq.n	8003e22 <HAL_ADC_IRQHandler+0x25a>
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8085 	beq.w	8003f38 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d07f      	beq.n	8003f38 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d105      	bne.n	8003e50 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e48:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff f91e 	bl	8003096 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003e5a:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff f84b 	bl	8002efc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e66:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a73      	ldr	r2, [pc, #460]	@ (800403c <HAL_ADC_IRQHandler+0x474>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d002      	beq.n	8003e78 <HAL_ADC_IRQHandler+0x2b0>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	e000      	b.n	8003e7a <HAL_ADC_IRQHandler+0x2b2>
 8003e78:	4b71      	ldr	r3, [pc, #452]	@ (8004040 <HAL_ADC_IRQHandler+0x478>)
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d008      	beq.n	8003e94 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b06      	cmp	r3, #6
 8003e8c:	d002      	beq.n	8003e94 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b07      	cmp	r3, #7
 8003e92:	d104      	bne.n	8003e9e <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	623b      	str	r3, [r7, #32]
 8003e9c:	e00c      	b.n	8003eb8 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a66      	ldr	r2, [pc, #408]	@ (800403c <HAL_ADC_IRQHandler+0x474>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d002      	beq.n	8003eae <HAL_ADC_IRQHandler+0x2e6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	e000      	b.n	8003eb0 <HAL_ADC_IRQHandler+0x2e8>
 8003eae:	4b64      	ldr	r3, [pc, #400]	@ (8004040 <HAL_ADC_IRQHandler+0x478>)
 8003eb0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d035      	beq.n	8003f2a <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <HAL_ADC_IRQHandler+0x310>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d02d      	beq.n	8003f2a <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d128      	bne.n	8003f2a <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee2:	2b40      	cmp	r3, #64	@ 0x40
 8003ee4:	d121      	bne.n	8003f2a <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fa26 	bl	800333c <LL_ADC_INJ_IsConversionOngoing>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d119      	bne.n	8003f2a <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f04:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f22:	f043 0201 	orr.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f001 f894 	bl	8005058 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2260      	movs	r2, #96	@ 0x60
 8003f36:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d011      	beq.n	8003f66 <HAL_ADC_IRQHandler+0x39e>
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00c      	beq.n	8003f66 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f8ff 	bl	800415c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2280      	movs	r2, #128	@ 0x80
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <HAL_ADC_IRQHandler+0x3ce>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f001 f870 	bl	800506c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d012      	beq.n	8003fc6 <HAL_ADC_IRQHandler+0x3fe>
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f001 f862 	bl	8005080 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05d      	beq.n	800408c <HAL_ADC_IRQHandler+0x4c4>
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d058      	beq.n	800408c <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe6:	e03b      	b.n	8004060 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a12      	ldr	r2, [pc, #72]	@ (8004038 <HAL_ADC_IRQHandler+0x470>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d02c      	beq.n	800404c <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a10      	ldr	r2, [pc, #64]	@ (8004040 <HAL_ADC_IRQHandler+0x478>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_ADC_IRQHandler+0x444>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a0d      	ldr	r2, [pc, #52]	@ (800403c <HAL_ADC_IRQHandler+0x474>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_ADC_IRQHandler+0x448>
 800400c:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <HAL_ADC_IRQHandler+0x47c>)
 800400e:	e000      	b.n	8004012 <HAL_ADC_IRQHandler+0x44a>
 8004010:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <HAL_ADC_IRQHandler+0x480>)
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff f8e8 	bl	80031e8 <LL_ADC_GetMultiDMATransfer>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d020      	beq.n	8004060 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800401e:	2301      	movs	r3, #1
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
 8004022:	e01d      	b.n	8004060 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d016      	beq.n	8004060 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004032:	2301      	movs	r3, #1
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
 8004036:	e013      	b.n	8004060 <HAL_ADC_IRQHandler+0x498>
 8004038:	46021000 	.word	0x46021000
 800403c:	42028100 	.word	0x42028100
 8004040:	42028000 	.word	0x42028000
 8004044:	42028300 	.word	0x42028300
 8004048:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff f812 	bl	800307a <LL_ADC_REG_GetDMATransfer>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 800405c:	2301      	movs	r3, #1
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	2b01      	cmp	r3, #1
 8004064:	d10e      	bne.n	8004084 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800406a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004076:	f043 0202 	orr.w	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f876 	bl	8004170 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2210      	movs	r2, #16
 800408a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01b      	beq.n	80040ce <HAL_ADC_IRQHandler+0x506>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d016      	beq.n	80040ce <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d105      	bne.n	80040b8 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b0:	f043 0201 	orr.w	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f877 	bl	80041ac <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a17      	ldr	r2, [pc, #92]	@ (8004130 <HAL_ADC_IRQHandler+0x568>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d126      	bne.n	8004126 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <HAL_ADC_IRQHandler+0x534>
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f849 	bl	8004184 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040fa:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00f      	beq.n	8004126 <HAL_ADC_IRQHandler+0x55e>
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f841 	bl	8004198 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004124:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004126:	bf00      	nop
 8004128:	3728      	adds	r7, #40	@ 0x28
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	46021000 	.word	0x46021000

08004134 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b0b7      	sub	sp, #220	@ 0xdc
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4aa8      	ldr	r2, [pc, #672]	@ (800447c <HAL_ADC_ConfigChannel+0x2bc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d103      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d102      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x36>
 80041f0:	2302      	movs	r3, #2
 80041f2:	f000 bdfe 	b.w	8004df2 <HAL_ADC_ConfigChannel+0xc32>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff f887 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 85c1 	bne.w	8004d92 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a99      	ldr	r2, [pc, #612]	@ (800447c <HAL_ADC_ConfigChannel+0x2bc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	f000 8409 	beq.w	8004a2e <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d108      	bne.n	800423a <HAL_ADC_ConfigChannel+0x7a>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	2201      	movs	r2, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	e01d      	b.n	8004276 <HAL_ADC_ConfigChannel+0xb6>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800424e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004252:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004256:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800425e:	2320      	movs	r3, #32
 8004260:	e004      	b.n	800426c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8004262:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	2201      	movs	r2, #1
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	69d1      	ldr	r1, [r2, #28]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	f7fe fe47 	bl	8002f24 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f83b 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 80042a0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff f847 	bl	800333c <LL_ADC_INJ_IsConversionOngoing>
 80042ae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f040 81df 	bne.w	800467a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f040 81da 	bne.w	800467a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6819      	ldr	r1, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f7fe fef2 	bl	80030bc <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	089b      	lsrs	r3, r3, #2
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d046      	beq.n	8004388 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6919      	ldr	r1, [r3, #16]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800430a:	f7fe fd2d 	bl	8002d68 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6919      	ldr	r1, [r3, #16]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	461a      	mov	r2, r3
 800431c:	f7fe fd5b 	bl	8002dd6 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	7e9b      	ldrb	r3, [r3, #26]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d11e      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <HAL_ADC_ConfigChannel+0x17e>
 8004338:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800433c:	e000      	b.n	8004340 <HAL_ADC_ConfigChannel+0x180>
 800433e:	2300      	movs	r3, #0
 8004340:	461a      	mov	r2, r3
 8004342:	f7fe fd7e 	bl	8002e42 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004352:	2b01      	cmp	r3, #1
 8004354:	d102      	bne.n	800435c <HAL_ADC_ConfigChannel+0x19c>
 8004356:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800435a:	e000      	b.n	800435e <HAL_ADC_ConfigChannel+0x19e>
 800435c:	2300      	movs	r3, #0
 800435e:	461a      	mov	r2, r3
 8004360:	f7fe fd54 	bl	8002e0c <LL_ADC_SetOffsetSignedSaturation>
 8004364:	e189      	b.n	800467a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2200      	movs	r2, #0
 8004370:	4619      	mov	r1, r3
 8004372:	f7fe fd66 	bl	8002e42 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2200      	movs	r2, #0
 8004380:	4619      	mov	r1, r3
 8004382:	f7fe fd43 	bl	8002e0c <LL_ADC_SetOffsetSignedSaturation>
 8004386:	e178      	b.n	800467a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fd0b 	bl	8002daa <LL_ADC_GetOffsetChannel>
 8004394:	4603      	mov	r3, r0
 8004396:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x1f4>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fd00 	bl	8002daa <LL_ADC_GetOffsetChannel>
 80043aa:	4603      	mov	r3, r0
 80043ac:	0e9b      	lsrs	r3, r3, #26
 80043ae:	f003 021f 	and.w	r2, r3, #31
 80043b2:	e01e      	b.n	80043f2 <HAL_ADC_ConfigChannel+0x232>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fcf5 	bl	8002daa <LL_ADC_GetOffsetChannel>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80043d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80043da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80043e2:	2320      	movs	r3, #32
 80043e4:	e004      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80043e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <HAL_ADC_ConfigChannel+0x24a>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	0e9b      	lsrs	r3, r3, #26
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	e018      	b.n	800443c <HAL_ADC_ConfigChannel+0x27c>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800441e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800442e:	2320      	movs	r3, #32
 8004430:	e004      	b.n	800443c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004436:	fab3 f383 	clz	r3, r3
 800443a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800443c:	429a      	cmp	r2, r3
 800443e:	d107      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2300      	movs	r3, #0
 800444a:	2100      	movs	r1, #0
 800444c:	f7fe fc8c 	bl	8002d68 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2101      	movs	r1, #1
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fca7 	bl	8002daa <LL_ADC_GetOffsetChannel>
 800445c:	4603      	mov	r3, r0
 800445e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10c      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x2c0>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2101      	movs	r1, #1
 800446c:	4618      	mov	r0, r3
 800446e:	f7fe fc9c 	bl	8002daa <LL_ADC_GetOffsetChannel>
 8004472:	4603      	mov	r3, r0
 8004474:	0e9b      	lsrs	r3, r3, #26
 8004476:	f003 021f 	and.w	r2, r3, #31
 800447a:	e020      	b.n	80044be <HAL_ADC_ConfigChannel+0x2fe>
 800447c:	46021000 	.word	0x46021000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2101      	movs	r1, #1
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fc8f 	bl	8002daa <LL_ADC_GetOffsetChannel>
 800448c:	4603      	mov	r3, r0
 800448e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004496:	fa93 f3a3 	rbit	r3, r3
 800449a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800449e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80044a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80044ae:	2320      	movs	r3, #32
 80044b0:	e004      	b.n	80044bc <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80044b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044b6:	fab3 f383 	clz	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d105      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x316>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	0e9b      	lsrs	r3, r3, #26
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	e018      	b.n	8004508 <HAL_ADC_ConfigChannel+0x348>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80044ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80044f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80044fa:	2320      	movs	r3, #32
 80044fc:	e004      	b.n	8004508 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80044fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004508:	429a      	cmp	r2, r3
 800450a:	d107      	bne.n	800451c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	2101      	movs	r1, #1
 8004518:	f7fe fc26 	bl	8002d68 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe fc41 	bl	8002daa <LL_ADC_GetOffsetChannel>
 8004528:	4603      	mov	r3, r0
 800452a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x388>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2102      	movs	r1, #2
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe fc36 	bl	8002daa <LL_ADC_GetOffsetChannel>
 800453e:	4603      	mov	r3, r0
 8004540:	0e9b      	lsrs	r3, r3, #26
 8004542:	f003 021f 	and.w	r2, r3, #31
 8004546:	e01a      	b.n	800457e <HAL_ADC_ConfigChannel+0x3be>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2102      	movs	r1, #2
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe fc2b 	bl	8002daa <LL_ADC_GetOffsetChannel>
 8004554:	4603      	mov	r3, r0
 8004556:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004562:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004566:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800456e:	2320      	movs	r3, #32
 8004570:	e004      	b.n	800457c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004572:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d105      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x3d6>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	0e9b      	lsrs	r3, r3, #26
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	e011      	b.n	80045ba <HAL_ADC_ConfigChannel+0x3fa>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80045a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80045a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80045ae:	2320      	movs	r3, #32
 80045b0:	e003      	b.n	80045ba <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80045b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045b4:	fab3 f383 	clz	r3, r3
 80045b8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d107      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	2300      	movs	r3, #0
 80045c8:	2102      	movs	r1, #2
 80045ca:	f7fe fbcd 	bl	8002d68 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2103      	movs	r1, #3
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe fbe8 	bl	8002daa <LL_ADC_GetOffsetChannel>
 80045da:	4603      	mov	r3, r0
 80045dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x43a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2103      	movs	r1, #3
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fbdd 	bl	8002daa <LL_ADC_GetOffsetChannel>
 80045f0:	4603      	mov	r3, r0
 80045f2:	0e9b      	lsrs	r3, r3, #26
 80045f4:	f003 021f 	and.w	r2, r3, #31
 80045f8:	e017      	b.n	800462a <HAL_ADC_ConfigChannel+0x46a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2103      	movs	r1, #3
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe fbd2 	bl	8002daa <LL_ADC_GetOffsetChannel>
 8004606:	4603      	mov	r3, r0
 8004608:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800460c:	fa93 f3a3 	rbit	r3, r3
 8004610:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004612:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004614:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004616:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e003      	b.n	8004628 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x482>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	0e9b      	lsrs	r3, r3, #26
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	e011      	b.n	8004666 <HAL_ADC_ConfigChannel+0x4a6>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800464a:	fa93 f3a3 	rbit	r3, r3
 800464e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004652:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800465a:	2320      	movs	r3, #32
 800465c:	e003      	b.n	8004666 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800465e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004666:	429a      	cmp	r2, r3
 8004668:	d107      	bne.n	800467a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	2300      	movs	r3, #0
 8004674:	2103      	movs	r1, #3
 8004676:	f7fe fb77 	bl	8002d68 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fe22 	bl	80032c8 <LL_ADC_IsEnabled>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	f040 83ad 	bne.w	8004de6 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	461a      	mov	r2, r3
 800469a:	f7fe fd73 	bl	8003184 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046a6:	f040 80d6 	bne.w	8004856 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10b      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x50e>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	0e9b      	lsrs	r3, r3, #26
 80046bc:	3301      	adds	r3, #1
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	2b09      	cmp	r3, #9
 80046c4:	bf94      	ite	ls
 80046c6:	2301      	movls	r3, #1
 80046c8:	2300      	movhi	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	e019      	b.n	8004702 <HAL_ADC_ConfigChannel+0x542>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d6:	fa93 f3a3 	rbit	r3, r3
 80046da:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80046dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046de:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80046e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80046e6:	2320      	movs	r3, #32
 80046e8:	e003      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80046ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ec:	fab3 f383 	clz	r3, r3
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	3301      	adds	r3, #1
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2b09      	cmp	r3, #9
 80046fa:	bf94      	ite	ls
 80046fc:	2301      	movls	r3, #1
 80046fe:	2300      	movhi	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d04d      	beq.n	80047a2 <HAL_ADC_ConfigChannel+0x5e2>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x562>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	0e9b      	lsrs	r3, r3, #26
 8004718:	3301      	adds	r3, #1
 800471a:	069b      	lsls	r3, r3, #26
 800471c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004720:	e015      	b.n	800474e <HAL_ADC_ConfigChannel+0x58e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800472a:	fa93 f3a3 	rbit	r3, r3
 800472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004732:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800473a:	2320      	movs	r3, #32
 800473c:	e003      	b.n	8004746 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800473e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004740:	fab3 f383 	clz	r3, r3
 8004744:	b2db      	uxtb	r3, r3
 8004746:	3301      	adds	r3, #1
 8004748:	069b      	lsls	r3, r3, #26
 800474a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_ADC_ConfigChannel+0x5ae>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	0e9b      	lsrs	r3, r3, #26
 8004760:	3301      	adds	r3, #1
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2101      	movs	r1, #1
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	e017      	b.n	800479e <HAL_ADC_ConfigChannel+0x5de>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004776:	fa93 f3a3 	rbit	r3, r3
 800477a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8004786:	2320      	movs	r3, #32
 8004788:	e003      	b.n	8004792 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800478a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478c:	fab3 f383 	clz	r3, r3
 8004790:	b2db      	uxtb	r3, r3
 8004792:	3301      	adds	r3, #1
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	2101      	movs	r1, #1
 800479a:	fa01 f303 	lsl.w	r3, r1, r3
 800479e:	4313      	orrs	r3, r2
 80047a0:	e04e      	b.n	8004840 <HAL_ADC_ConfigChannel+0x680>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d107      	bne.n	80047be <HAL_ADC_ConfigChannel+0x5fe>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	0e9b      	lsrs	r3, r3, #26
 80047b4:	3301      	adds	r3, #1
 80047b6:	069b      	lsls	r3, r3, #26
 80047b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047bc:	e015      	b.n	80047ea <HAL_ADC_ConfigChannel+0x62a>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c6:	fa93 f3a3 	rbit	r3, r3
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80047d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80047d6:	2320      	movs	r3, #32
 80047d8:	e003      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80047da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047dc:	fab3 f383 	clz	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	069b      	lsls	r3, r3, #26
 80047e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <HAL_ADC_ConfigChannel+0x64a>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	0e9b      	lsrs	r3, r3, #26
 80047fc:	3301      	adds	r3, #1
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2101      	movs	r1, #1
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	e017      	b.n	800483a <HAL_ADC_ConfigChannel+0x67a>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	61bb      	str	r3, [r7, #24]
  return result;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8004822:	2320      	movs	r3, #32
 8004824:	e003      	b.n	800482e <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	fab3 f383 	clz	r3, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	3301      	adds	r3, #1
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	4313      	orrs	r3, r2
 800483c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	461a      	mov	r2, r3
 800484e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004852:	f7fe fc33 	bl	80030bc <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f280 82c3 	bge.w	8004de6 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a92      	ldr	r2, [pc, #584]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x8f0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_ADC_ConfigChannel+0x6b4>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a91      	ldr	r2, [pc, #580]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x8f4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d101      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x6b8>
 8004874:	4b90      	ldr	r3, [pc, #576]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f8>)
 8004876:	e000      	b.n	800487a <HAL_ADC_ConfigChannel+0x6ba>
 8004878:	4b90      	ldr	r3, [pc, #576]	@ (8004abc <HAL_ADC_ConfigChannel+0x8fc>)
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe fa46 	bl	8002d0c <LL_ADC_GetCommonPathInternalCh>
 8004880:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a89      	ldr	r2, [pc, #548]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x8f0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_ADC_ConfigChannel+0x6d8>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a88      	ldr	r2, [pc, #544]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x8f4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d10e      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x6f6>
 8004898:	4885      	ldr	r0, [pc, #532]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x8f0>)
 800489a:	f7fe fd15 	bl	80032c8 <LL_ADC_IsEnabled>
 800489e:	4604      	mov	r4, r0
 80048a0:	4884      	ldr	r0, [pc, #528]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x8f4>)
 80048a2:	f7fe fd11 	bl	80032c8 <LL_ADC_IsEnabled>
 80048a6:	4603      	mov	r3, r0
 80048a8:	4323      	orrs	r3, r4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	e008      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x708>
 80048b6:	4882      	ldr	r0, [pc, #520]	@ (8004ac0 <HAL_ADC_ConfigChannel+0x900>)
 80048b8:	f7fe fd06 	bl	80032c8 <LL_ADC_IsEnabled>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2300      	movne	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80a6 	beq.w	8004a1a <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a7c      	ldr	r2, [pc, #496]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x904>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d13c      	bne.n	8004952 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d136      	bne.n	8004952 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a71      	ldr	r2, [pc, #452]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x8f0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00a      	beq.n	8004904 <HAL_ADC_ConfigChannel+0x744>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a70      	ldr	r2, [pc, #448]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x8f4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d005      	beq.n	8004904 <HAL_ADC_ConfigChannel+0x744>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a70      	ldr	r2, [pc, #448]	@ (8004ac0 <HAL_ADC_ConfigChannel+0x900>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	f040 826e 	bne.w	8004de0 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a69      	ldr	r2, [pc, #420]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x8f0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_ADC_ConfigChannel+0x758>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a68      	ldr	r2, [pc, #416]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x8f4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_ADC_ConfigChannel+0x75c>
 8004918:	4a67      	ldr	r2, [pc, #412]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f8>)
 800491a:	e000      	b.n	800491e <HAL_ADC_ConfigChannel+0x75e>
 800491c:	4a67      	ldr	r2, [pc, #412]	@ (8004abc <HAL_ADC_ConfigChannel+0x8fc>)
 800491e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004922:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fe f9dc 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800492e:	4b66      	ldr	r3, [pc, #408]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x908>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	099b      	lsrs	r3, r3, #6
 8004934:	4a65      	ldr	r2, [pc, #404]	@ (8004acc <HAL_ADC_ConfigChannel+0x90c>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	099b      	lsrs	r3, r3, #6
 800493c:	3301      	adds	r3, #1
 800493e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004940:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004942:	e002      	b.n	800494a <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	3b01      	subs	r3, #1
 8004948:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f9      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004950:	e246      	b.n	8004de0 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a5e      	ldr	r2, [pc, #376]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x910>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d12b      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800495c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004960:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004964:	2b00      	cmp	r3, #0
 8004966:	d125      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a50      	ldr	r2, [pc, #320]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x8f0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00a      	beq.n	8004988 <HAL_ADC_ConfigChannel+0x7c8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a4f      	ldr	r2, [pc, #316]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x8f4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d005      	beq.n	8004988 <HAL_ADC_ConfigChannel+0x7c8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a4f      	ldr	r2, [pc, #316]	@ (8004ac0 <HAL_ADC_ConfigChannel+0x900>)
 8004982:	4293      	cmp	r3, r2
 8004984:	f040 822e 	bne.w	8004de4 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a48      	ldr	r2, [pc, #288]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x8f0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_ADC_ConfigChannel+0x7dc>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a47      	ldr	r2, [pc, #284]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x8f4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d101      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x7e0>
 800499c:	4a46      	ldr	r2, [pc, #280]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f8>)
 800499e:	e000      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x7e2>
 80049a0:	4a46      	ldr	r2, [pc, #280]	@ (8004abc <HAL_ADC_ConfigChannel+0x8fc>)
 80049a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f7fe f99a 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049b2:	e217      	b.n	8004de4 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a46      	ldr	r2, [pc, #280]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x914>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f040 8213 	bne.w	8004de6 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f040 820c 	bne.w	8004de6 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a37      	ldr	r2, [pc, #220]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x8f0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00a      	beq.n	80049ee <HAL_ADC_ConfigChannel+0x82e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a35      	ldr	r2, [pc, #212]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x8f4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d005      	beq.n	80049ee <HAL_ADC_ConfigChannel+0x82e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a36      	ldr	r2, [pc, #216]	@ (8004ac0 <HAL_ADC_ConfigChannel+0x900>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	f040 81fc 	bne.w	8004de6 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x8f0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0x842>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x8f4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x846>
 8004a02:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f8>)
 8004a04:	e000      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x848>
 8004a06:	4a2d      	ldr	r2, [pc, #180]	@ (8004abc <HAL_ADC_ConfigChannel+0x8fc>)
 8004a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f7fe f967 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
 8004a18:	e1e5      	b.n	8004de6 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004a2c:	e1db      	b.n	8004de6 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	f000 811b 	beq.w	8004c76 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a48:	d004      	beq.n	8004a54 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a4e:	4a22      	ldr	r2, [pc, #136]	@ (8004ad8 <HAL_ADC_ConfigChannel+0x918>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d107      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe fac1 	bl	8002fe4 <LL_ADC_REG_SetSequencerChAdd>
 8004a62:	e059      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	210f      	movs	r1, #15
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a80:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x8d4>
 8004a88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a8c:	0e9b      	lsrs	r3, r3, #26
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	e027      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x924>
 8004a94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a98:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	fa93 f3a3 	rbit	r3, r3
 8004aa0:	60fb      	str	r3, [r7, #12]
  return result;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d117      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004aac:	2320      	movs	r3, #32
 8004aae:	e019      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x924>
 8004ab0:	42028000 	.word	0x42028000
 8004ab4:	42028100 	.word	0x42028100
 8004ab8:	42028300 	.word	0x42028300
 8004abc:	46021300 	.word	0x46021300
 8004ac0:	46021000 	.word	0x46021000
 8004ac4:	ce080000 	.word	0xce080000
 8004ac8:	20000020 	.word	0x20000020
 8004acc:	053e2d63 	.word	0x053e2d63
 8004ad0:	ca040000 	.word	0xca040000
 8004ad4:	80000001 	.word	0x80000001
 8004ad8:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fab3 f383 	clz	r3, r3
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	6849      	ldr	r1, [r1, #4]
 8004ae8:	f001 011f 	and.w	r1, r1, #31
 8004aec:	408b      	lsls	r3, r1
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d808      	bhi.n	8004b18 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b12:	4619      	mov	r1, r3
 8004b14:	f7fe fa06 	bl	8002f24 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	461a      	mov	r2, r3
 8004b22:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004b26:	f7fe fac9 	bl	80030bc <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f280 8159 	bge.w	8004de6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a9b      	ldr	r2, [pc, #620]	@ (8004da8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d004      	beq.n	8004b48 <HAL_ADC_ConfigChannel+0x988>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a9a      	ldr	r2, [pc, #616]	@ (8004dac <HAL_ADC_ConfigChannel+0xbec>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d101      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x98c>
 8004b48:	4b99      	ldr	r3, [pc, #612]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b4a:	e000      	b.n	8004b4e <HAL_ADC_ConfigChannel+0x98e>
 8004b4c:	4b99      	ldr	r3, [pc, #612]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe f8dc 	bl	8002d0c <LL_ADC_GetCommonPathInternalCh>
 8004b54:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a96      	ldr	r2, [pc, #600]	@ (8004db8 <HAL_ADC_ConfigChannel+0xbf8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d12b      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d125      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a8d      	ldr	r2, [pc, #564]	@ (8004da8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d004      	beq.n	8004b82 <HAL_ADC_ConfigChannel+0x9c2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a8b      	ldr	r2, [pc, #556]	@ (8004dac <HAL_ADC_ConfigChannel+0xbec>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d101      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x9c6>
 8004b82:	4a8b      	ldr	r2, [pc, #556]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b84:	e000      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x9c8>
 8004b86:	4a8b      	ldr	r2, [pc, #556]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7fe f8a7 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004b98:	4b88      	ldr	r3, [pc, #544]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbfc>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	099b      	lsrs	r3, r3, #6
 8004b9e:	4a88      	ldr	r2, [pc, #544]	@ (8004dc0 <HAL_ADC_ConfigChannel+0xc00>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	099b      	lsrs	r3, r3, #6
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004baa:	e002      	b.n	8004bb2 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f9      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004bb8:	e045      	b.n	8004c46 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a81      	ldr	r2, [pc, #516]	@ (8004dc4 <HAL_ADC_ConfigChannel+0xc04>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d11b      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d115      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a74      	ldr	r2, [pc, #464]	@ (8004da8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_ADC_ConfigChannel+0xa24>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a73      	ldr	r2, [pc, #460]	@ (8004dac <HAL_ADC_ConfigChannel+0xbec>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d101      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0xa28>
 8004be4:	4a72      	ldr	r2, [pc, #456]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004be6:	e000      	b.n	8004bea <HAL_ADC_ConfigChannel+0xa2a>
 8004be8:	4a72      	ldr	r2, [pc, #456]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004bea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	f7fe f876 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
 8004bfa:	e024      	b.n	8004c46 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a71      	ldr	r2, [pc, #452]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xc08>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d11f      	bne.n	8004c46 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d115      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a64      	ldr	r2, [pc, #400]	@ (8004da8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_ADC_ConfigChannel+0xa66>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a62      	ldr	r2, [pc, #392]	@ (8004dac <HAL_ADC_ConfigChannel+0xbec>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d101      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0xa6a>
 8004c26:	4a62      	ldr	r2, [pc, #392]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c28:	e000      	b.n	8004c2c <HAL_ADC_ConfigChannel+0xa6c>
 8004c2a:	4a62      	ldr	r2, [pc, #392]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f7fe f855 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
 8004c3c:	e003      	b.n	8004c46 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a62      	ldr	r2, [pc, #392]	@ (8004dcc <HAL_ADC_ConfigChannel+0xc0c>)
 8004c44:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a61      	ldr	r2, [pc, #388]	@ (8004dd0 <HAL_ADC_ConfigChannel+0xc10>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	f040 80ca 	bne.w	8004de6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 80c3 	bne.w	8004de6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004c74:	e0b7      	b.n	8004de6 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c7e:	d004      	beq.n	8004c8a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004c84:	4a53      	ldr	r2, [pc, #332]	@ (8004dd4 <HAL_ADC_ConfigChannel+0xc14>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d106      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe f9d9 	bl	800304a <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f280 80a2 	bge.w	8004de6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a40      	ldr	r2, [pc, #256]	@ (8004da8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_ADC_ConfigChannel+0xaf6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a3e      	ldr	r2, [pc, #248]	@ (8004dac <HAL_ADC_ConfigChannel+0xbec>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d101      	bne.n	8004cba <HAL_ADC_ConfigChannel+0xafa>
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004cb8:	e000      	b.n	8004cbc <HAL_ADC_ConfigChannel+0xafc>
 8004cba:	4b3e      	ldr	r3, [pc, #248]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe f825 	bl	8002d0c <LL_ADC_GetCommonPathInternalCh>
 8004cc2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a43      	ldr	r2, [pc, #268]	@ (8004dd8 <HAL_ADC_ConfigChannel+0xc18>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d115      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a34      	ldr	r2, [pc, #208]	@ (8004da8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d004      	beq.n	8004ce4 <HAL_ADC_ConfigChannel+0xb24>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a33      	ldr	r2, [pc, #204]	@ (8004dac <HAL_ADC_ConfigChannel+0xbec>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d101      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0xb28>
 8004ce4:	4a32      	ldr	r2, [pc, #200]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004ce6:	e000      	b.n	8004cea <HAL_ADC_ConfigChannel+0xb2a>
 8004ce8:	4a32      	ldr	r2, [pc, #200]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004cea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f7fd fff6 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
 8004cfa:	e034      	b.n	8004d66 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a36      	ldr	r2, [pc, #216]	@ (8004ddc <HAL_ADC_ConfigChannel+0xc1c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d115      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a27      	ldr	r2, [pc, #156]	@ (8004da8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_ADC_ConfigChannel+0xb5a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a25      	ldr	r2, [pc, #148]	@ (8004dac <HAL_ADC_ConfigChannel+0xbec>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d101      	bne.n	8004d1e <HAL_ADC_ConfigChannel+0xb5e>
 8004d1a:	4a25      	ldr	r2, [pc, #148]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d1c:	e000      	b.n	8004d20 <HAL_ADC_ConfigChannel+0xb60>
 8004d1e:	4a25      	ldr	r2, [pc, #148]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f7fd ffdb 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
 8004d30:	e019      	b.n	8004d66 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a24      	ldr	r2, [pc, #144]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xc08>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d114      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a19      	ldr	r2, [pc, #100]	@ (8004da8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <HAL_ADC_ConfigChannel+0xb90>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a18      	ldr	r2, [pc, #96]	@ (8004dac <HAL_ADC_ConfigChannel+0xbec>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0xb94>
 8004d50:	4a17      	ldr	r2, [pc, #92]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d52:	e000      	b.n	8004d56 <HAL_ADC_ConfigChannel+0xb96>
 8004d54:	4a17      	ldr	r2, [pc, #92]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d5a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f7fd ffc0 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a19      	ldr	r2, [pc, #100]	@ (8004dd0 <HAL_ADC_ConfigChannel+0xc10>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d13a      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d134      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004d90:	e029      	b.n	8004de6 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d96:	f043 0220 	orr.w	r2, r3, #32
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004da4:	e01f      	b.n	8004de6 <HAL_ADC_ConfigChannel+0xc26>
 8004da6:	bf00      	nop
 8004da8:	42028000 	.word	0x42028000
 8004dac:	42028100 	.word	0x42028100
 8004db0:	42028300 	.word	0x42028300
 8004db4:	46021300 	.word	0x46021300
 8004db8:	b6002000 	.word	0xb6002000
 8004dbc:	20000020 	.word	0x20000020
 8004dc0:	053e2d63 	.word	0x053e2d63
 8004dc4:	ba004000 	.word	0xba004000
 8004dc8:	80000001 	.word	0x80000001
 8004dcc:	b2001000 	.word	0xb2001000
 8004dd0:	d7200000 	.word	0xd7200000
 8004dd4:	80000010 	.word	0x80000010
 8004dd8:	ce080000 	.word	0xce080000
 8004ddc:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004de0:	bf00      	nop
 8004de2:	e000      	b.n	8004de6 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004de4:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004dee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	37dc      	adds	r7, #220	@ 0xdc
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd90      	pop	{r4, r7, pc}
 8004dfa:	bf00      	nop

08004dfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe fa5d 	bl	80032c8 <LL_ADC_IsEnabled>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d17b      	bne.n	8004f0c <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f18 <ADC_Enable+0x11c>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00d      	beq.n	8004e3e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e26:	f043 0210 	orr.w	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e32:	f043 0201 	orr.w	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e067      	b.n	8004f0e <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fa28 	bl	80032a0 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <ADC_Enable+0x66>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8004f1c <ADC_Enable+0x120>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d054      	beq.n	8004f0c <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004e62:	f7fd fed5 	bl	8002c10 <HAL_GetTick>
 8004e66:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f20 <ADC_Enable+0x124>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <ADC_Enable+0x80>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2b      	ldr	r2, [pc, #172]	@ (8004f24 <ADC_Enable+0x128>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d101      	bne.n	8004e80 <ADC_Enable+0x84>
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004f28 <ADC_Enable+0x12c>)
 8004e7e:	e000      	b.n	8004e82 <ADC_Enable+0x86>
 8004e80:	4b2a      	ldr	r3, [pc, #168]	@ (8004f2c <ADC_Enable+0x130>)
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe f9a2 	bl	80031cc <LL_ADC_GetMultimode>
 8004e88:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a25      	ldr	r2, [pc, #148]	@ (8004f24 <ADC_Enable+0x128>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d002      	beq.n	8004e9a <ADC_Enable+0x9e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	e000      	b.n	8004e9c <ADC_Enable+0xa0>
 8004e9a:	4b21      	ldr	r3, [pc, #132]	@ (8004f20 <ADC_Enable+0x124>)
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d02c      	beq.n	8004efe <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d130      	bne.n	8004f0c <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eaa:	e028      	b.n	8004efe <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe fa09 	bl	80032c8 <LL_ADC_IsEnabled>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fe f9ed 	bl	80032a0 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ec6:	f7fd fea3 	bl	8002c10 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d914      	bls.n	8004efe <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d00d      	beq.n	8004efe <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ee6:	f043 0210 	orr.w	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e007      	b.n	8004f0e <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d1cf      	bne.n	8004eac <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	8000003f 	.word	0x8000003f
 8004f1c:	46021000 	.word	0x46021000
 8004f20:	42028000 	.word	0x42028000
 8004f24:	42028100 	.word	0x42028100
 8004f28:	42028300 	.word	0x42028300
 8004f2c:	46021300 	.word	0x46021300

08004f30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d14b      	bne.n	8004fe2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d021      	beq.n	8004fa8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fd ffc7 	bl	8002efc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d032      	beq.n	8004fda <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d12b      	bne.n	8004fda <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d11f      	bne.n	8004fda <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f9e:	f043 0201 	orr.w	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	679a      	str	r2, [r3, #120]	@ 0x78
 8004fa6:	e018      	b.n	8004fda <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d111      	bne.n	8004fda <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d105      	bne.n	8004fda <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fd2:	f043 0201 	orr.w	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff f8aa 	bl	8004134 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fe0:	e00e      	b.n	8005000 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff f8be 	bl	8004170 <HAL_ADC_ErrorCallback>
}
 8004ff4:	e004      	b.n	8005000 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	4798      	blx	r3
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff f896 	bl	8004148 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005030:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005036:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005042:	f043 0204 	orr.w	r2, r3, #4
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7ff f890 	bl	8004170 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050b8:	4b0c      	ldr	r3, [pc, #48]	@ (80050ec <__NVIC_SetPriorityGrouping+0x44>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050c4:	4013      	ands	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050da:	4a04      	ldr	r2, [pc, #16]	@ (80050ec <__NVIC_SetPriorityGrouping+0x44>)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	60d3      	str	r3, [r2, #12]
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	e000ed00 	.word	0xe000ed00

080050f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050f4:	4b04      	ldr	r3, [pc, #16]	@ (8005108 <__NVIC_GetPriorityGrouping+0x18>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	0a1b      	lsrs	r3, r3, #8
 80050fa:	f003 0307 	and.w	r3, r3, #7
}
 80050fe:	4618      	mov	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	e000ed00 	.word	0xe000ed00

0800510c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800511a:	2b00      	cmp	r3, #0
 800511c:	db0b      	blt.n	8005136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800511e:	88fb      	ldrh	r3, [r7, #6]
 8005120:	f003 021f 	and.w	r2, r3, #31
 8005124:	4907      	ldr	r1, [pc, #28]	@ (8005144 <__NVIC_EnableIRQ+0x38>)
 8005126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	2001      	movs	r0, #1
 800512e:	fa00 f202 	lsl.w	r2, r0, r2
 8005132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	e000e100 	.word	0xe000e100

08005148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	6039      	str	r1, [r7, #0]
 8005152:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005158:	2b00      	cmp	r3, #0
 800515a:	db0a      	blt.n	8005172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	490c      	ldr	r1, [pc, #48]	@ (8005194 <__NVIC_SetPriority+0x4c>)
 8005162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005166:	0112      	lsls	r2, r2, #4
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	440b      	add	r3, r1
 800516c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005170:	e00a      	b.n	8005188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	b2da      	uxtb	r2, r3
 8005176:	4908      	ldr	r1, [pc, #32]	@ (8005198 <__NVIC_SetPriority+0x50>)
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	3b04      	subs	r3, #4
 8005180:	0112      	lsls	r2, r2, #4
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	440b      	add	r3, r1
 8005186:	761a      	strb	r2, [r3, #24]
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	e000e100 	.word	0xe000e100
 8005198:	e000ed00 	.word	0xe000ed00

0800519c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800519c:	b480      	push	{r7}
 800519e:	b089      	sub	sp, #36	@ 0x24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f1c3 0307 	rsb	r3, r3, #7
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	bf28      	it	cs
 80051ba:	2304      	movcs	r3, #4
 80051bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3304      	adds	r3, #4
 80051c2:	2b06      	cmp	r3, #6
 80051c4:	d902      	bls.n	80051cc <NVIC_EncodePriority+0x30>
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3b03      	subs	r3, #3
 80051ca:	e000      	b.n	80051ce <NVIC_EncodePriority+0x32>
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d0:	f04f 32ff 	mov.w	r2, #4294967295
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43da      	mvns	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	401a      	ands	r2, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051e4:	f04f 31ff 	mov.w	r1, #4294967295
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	fa01 f303 	lsl.w	r3, r1, r3
 80051ee:	43d9      	mvns	r1, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f4:	4313      	orrs	r3, r2
         );
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3724      	adds	r7, #36	@ 0x24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff ff4c 	bl	80050a8 <__NVIC_SetPriorityGrouping>
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005226:	f7ff ff63 	bl	80050f0 <__NVIC_GetPriorityGrouping>
 800522a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	6978      	ldr	r0, [r7, #20]
 8005232:	f7ff ffb3 	bl	800519c <NVIC_EncodePriority>
 8005236:	4602      	mov	r2, r0
 8005238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800523c:	4611      	mov	r1, r2
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff ff82 	bl	8005148 <__NVIC_SetPriority>
}
 8005244:	bf00      	nop
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff ff56 	bl	800510c <__NVIC_EnableIRQ>
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3b01      	subs	r3, #1
 8005274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005278:	d301      	bcc.n	800527e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800527a:	2301      	movs	r3, #1
 800527c:	e00d      	b.n	800529a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800527e:	4a0a      	ldr	r2, [pc, #40]	@ (80052a8 <HAL_SYSTICK_Config+0x40>)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3b01      	subs	r3, #1
 8005284:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005286:	4b08      	ldr	r3, [pc, #32]	@ (80052a8 <HAL_SYSTICK_Config+0x40>)
 8005288:	2200      	movs	r2, #0
 800528a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800528c:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <HAL_SYSTICK_Config+0x40>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a05      	ldr	r2, [pc, #20]	@ (80052a8 <HAL_SYSTICK_Config+0x40>)
 8005292:	f043 0303 	orr.w	r3, r3, #3
 8005296:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	e000e010 	.word	0xe000e010

080052ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d844      	bhi.n	8005344 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80052ba:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052e3 	.word	0x080052e3
 80052c4:	08005301 	.word	0x08005301
 80052c8:	08005323 	.word	0x08005323
 80052cc:	08005345 	.word	0x08005345
 80052d0:	080052d5 	.word	0x080052d5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80052d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005354 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005354 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052da:	f043 0304 	orr.w	r3, r3, #4
 80052de:	6013      	str	r3, [r2, #0]
      break;
 80052e0:	e031      	b.n	8005346 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80052e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005354 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005354 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052e8:	f023 0304 	bic.w	r3, r3, #4
 80052ec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80052ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005358 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80052f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052f4:	4a18      	ldr	r2, [pc, #96]	@ (8005358 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80052f6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80052fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80052fe:	e022      	b.n	8005346 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005300:	4b14      	ldr	r3, [pc, #80]	@ (8005354 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a13      	ldr	r2, [pc, #76]	@ (8005354 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005306:	f023 0304 	bic.w	r3, r3, #4
 800530a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800530c:	4b12      	ldr	r3, [pc, #72]	@ (8005358 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800530e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005312:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005316:	4a10      	ldr	r2, [pc, #64]	@ (8005358 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005318:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800531c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005320:	e011      	b.n	8005346 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005322:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a0b      	ldr	r2, [pc, #44]	@ (8005354 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005328:	f023 0304 	bic.w	r3, r3, #4
 800532c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800532e:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005334:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005338:	4a07      	ldr	r2, [pc, #28]	@ (8005358 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800533a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800533e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005342:	e000      	b.n	8005346 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005344:	bf00      	nop
  }
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	e000e010 	.word	0xe000e010
 8005358:	46020c00 	.word	0x46020c00

0800535c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005362:	4b19      	ldr	r3, [pc, #100]	@ (80053c8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800536e:	2304      	movs	r3, #4
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	e021      	b.n	80053b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005374:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8005376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800537a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800537e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005386:	d011      	beq.n	80053ac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800538e:	d810      	bhi.n	80053b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d004      	beq.n	80053a0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800539c:	d003      	beq.n	80053a6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800539e:	e008      	b.n	80053b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80053a0:	2300      	movs	r3, #0
 80053a2:	607b      	str	r3, [r7, #4]
        break;
 80053a4:	e008      	b.n	80053b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80053a6:	2301      	movs	r3, #1
 80053a8:	607b      	str	r3, [r7, #4]
        break;
 80053aa:	e005      	b.n	80053b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80053ac:	2302      	movs	r3, #2
 80053ae:	607b      	str	r3, [r7, #4]
        break;
 80053b0:	e002      	b.n	80053b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80053b2:	2300      	movs	r3, #0
 80053b4:	607b      	str	r3, [r7, #4]
        break;
 80053b6:	bf00      	nop
    }
  }
  return systick_source;
 80053b8:	687b      	ldr	r3, [r7, #4]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	e000e010 	.word	0xe000e010
 80053cc:	46020c00 	.word	0x46020c00

080053d0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80053d8:	f7fd fc1a 	bl	8002c10 <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0db      	b.n	80055a0 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a6e      	ldr	r2, [pc, #440]	@ (80055a8 <HAL_DMA_Init+0x1d8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	f000 809f 	beq.w	8005532 <HAL_DMA_Init+0x162>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a6c      	ldr	r2, [pc, #432]	@ (80055ac <HAL_DMA_Init+0x1dc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	f000 8099 	beq.w	8005532 <HAL_DMA_Init+0x162>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a6a      	ldr	r2, [pc, #424]	@ (80055b0 <HAL_DMA_Init+0x1e0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	f000 8093 	beq.w	8005532 <HAL_DMA_Init+0x162>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a68      	ldr	r2, [pc, #416]	@ (80055b4 <HAL_DMA_Init+0x1e4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	f000 808d 	beq.w	8005532 <HAL_DMA_Init+0x162>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a66      	ldr	r2, [pc, #408]	@ (80055b8 <HAL_DMA_Init+0x1e8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	f000 8087 	beq.w	8005532 <HAL_DMA_Init+0x162>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a64      	ldr	r2, [pc, #400]	@ (80055bc <HAL_DMA_Init+0x1ec>)
 800542a:	4293      	cmp	r3, r2
 800542c:	f000 8081 	beq.w	8005532 <HAL_DMA_Init+0x162>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a62      	ldr	r2, [pc, #392]	@ (80055c0 <HAL_DMA_Init+0x1f0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d07b      	beq.n	8005532 <HAL_DMA_Init+0x162>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a61      	ldr	r2, [pc, #388]	@ (80055c4 <HAL_DMA_Init+0x1f4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d076      	beq.n	8005532 <HAL_DMA_Init+0x162>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a5f      	ldr	r2, [pc, #380]	@ (80055c8 <HAL_DMA_Init+0x1f8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d071      	beq.n	8005532 <HAL_DMA_Init+0x162>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a5e      	ldr	r2, [pc, #376]	@ (80055cc <HAL_DMA_Init+0x1fc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d06c      	beq.n	8005532 <HAL_DMA_Init+0x162>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a5c      	ldr	r2, [pc, #368]	@ (80055d0 <HAL_DMA_Init+0x200>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d067      	beq.n	8005532 <HAL_DMA_Init+0x162>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a5b      	ldr	r2, [pc, #364]	@ (80055d4 <HAL_DMA_Init+0x204>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d062      	beq.n	8005532 <HAL_DMA_Init+0x162>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a59      	ldr	r2, [pc, #356]	@ (80055d8 <HAL_DMA_Init+0x208>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d05d      	beq.n	8005532 <HAL_DMA_Init+0x162>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a58      	ldr	r2, [pc, #352]	@ (80055dc <HAL_DMA_Init+0x20c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d058      	beq.n	8005532 <HAL_DMA_Init+0x162>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a56      	ldr	r2, [pc, #344]	@ (80055e0 <HAL_DMA_Init+0x210>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d053      	beq.n	8005532 <HAL_DMA_Init+0x162>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a55      	ldr	r2, [pc, #340]	@ (80055e4 <HAL_DMA_Init+0x214>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d04e      	beq.n	8005532 <HAL_DMA_Init+0x162>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a53      	ldr	r2, [pc, #332]	@ (80055e8 <HAL_DMA_Init+0x218>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d049      	beq.n	8005532 <HAL_DMA_Init+0x162>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a52      	ldr	r2, [pc, #328]	@ (80055ec <HAL_DMA_Init+0x21c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d044      	beq.n	8005532 <HAL_DMA_Init+0x162>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a50      	ldr	r2, [pc, #320]	@ (80055f0 <HAL_DMA_Init+0x220>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d03f      	beq.n	8005532 <HAL_DMA_Init+0x162>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a4f      	ldr	r2, [pc, #316]	@ (80055f4 <HAL_DMA_Init+0x224>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d03a      	beq.n	8005532 <HAL_DMA_Init+0x162>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a4d      	ldr	r2, [pc, #308]	@ (80055f8 <HAL_DMA_Init+0x228>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d035      	beq.n	8005532 <HAL_DMA_Init+0x162>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a4c      	ldr	r2, [pc, #304]	@ (80055fc <HAL_DMA_Init+0x22c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d030      	beq.n	8005532 <HAL_DMA_Init+0x162>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005600 <HAL_DMA_Init+0x230>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d02b      	beq.n	8005532 <HAL_DMA_Init+0x162>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a49      	ldr	r2, [pc, #292]	@ (8005604 <HAL_DMA_Init+0x234>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d026      	beq.n	8005532 <HAL_DMA_Init+0x162>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a47      	ldr	r2, [pc, #284]	@ (8005608 <HAL_DMA_Init+0x238>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d021      	beq.n	8005532 <HAL_DMA_Init+0x162>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a46      	ldr	r2, [pc, #280]	@ (800560c <HAL_DMA_Init+0x23c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d01c      	beq.n	8005532 <HAL_DMA_Init+0x162>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a44      	ldr	r2, [pc, #272]	@ (8005610 <HAL_DMA_Init+0x240>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d017      	beq.n	8005532 <HAL_DMA_Init+0x162>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a43      	ldr	r2, [pc, #268]	@ (8005614 <HAL_DMA_Init+0x244>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d012      	beq.n	8005532 <HAL_DMA_Init+0x162>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a41      	ldr	r2, [pc, #260]	@ (8005618 <HAL_DMA_Init+0x248>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00d      	beq.n	8005532 <HAL_DMA_Init+0x162>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a40      	ldr	r2, [pc, #256]	@ (800561c <HAL_DMA_Init+0x24c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d008      	beq.n	8005532 <HAL_DMA_Init+0x162>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a3e      	ldr	r2, [pc, #248]	@ (8005620 <HAL_DMA_Init+0x250>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <HAL_DMA_Init+0x162>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a3d      	ldr	r2, [pc, #244]	@ (8005624 <HAL_DMA_Init+0x254>)
 8005530:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0206 	orr.w	r2, r2, #6
 8005550:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005552:	e00f      	b.n	8005574 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005554:	f7fd fb5c 	bl	8002c10 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b05      	cmp	r3, #5
 8005560:	d908      	bls.n	8005574 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2210      	movs	r2, #16
 8005566:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2203      	movs	r2, #3
 800556c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e015      	b.n	80055a0 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e8      	bne.n	8005554 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fb26 	bl	8005bd4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40020050 	.word	0x40020050
 80055ac:	50020050 	.word	0x50020050
 80055b0:	400200d0 	.word	0x400200d0
 80055b4:	500200d0 	.word	0x500200d0
 80055b8:	40020150 	.word	0x40020150
 80055bc:	50020150 	.word	0x50020150
 80055c0:	400201d0 	.word	0x400201d0
 80055c4:	500201d0 	.word	0x500201d0
 80055c8:	40020250 	.word	0x40020250
 80055cc:	50020250 	.word	0x50020250
 80055d0:	400202d0 	.word	0x400202d0
 80055d4:	500202d0 	.word	0x500202d0
 80055d8:	40020350 	.word	0x40020350
 80055dc:	50020350 	.word	0x50020350
 80055e0:	400203d0 	.word	0x400203d0
 80055e4:	500203d0 	.word	0x500203d0
 80055e8:	40020450 	.word	0x40020450
 80055ec:	50020450 	.word	0x50020450
 80055f0:	400204d0 	.word	0x400204d0
 80055f4:	500204d0 	.word	0x500204d0
 80055f8:	40020550 	.word	0x40020550
 80055fc:	50020550 	.word	0x50020550
 8005600:	400205d0 	.word	0x400205d0
 8005604:	500205d0 	.word	0x500205d0
 8005608:	40020650 	.word	0x40020650
 800560c:	50020650 	.word	0x50020650
 8005610:	400206d0 	.word	0x400206d0
 8005614:	500206d0 	.word	0x500206d0
 8005618:	40020750 	.word	0x40020750
 800561c:	50020750 	.word	0x50020750
 8005620:	400207d0 	.word	0x400207d0
 8005624:	500207d0 	.word	0x500207d0

08005628 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e04f      	b.n	80056e0 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_DMA_Start_IT+0x26>
 800564a:	2302      	movs	r3, #2
 800564c:	e048      	b.n	80056e0 <HAL_DMA_Start_IT+0xb8>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b01      	cmp	r3, #1
 8005660:	d136      	bne.n	80056d0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2202      	movs	r2, #2
 8005666:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fa86 	bl	8005b88 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800568a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056a2:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056ba:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e007      	b.n	80056e0 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2240      	movs	r2, #64	@ 0x40
 80056d4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80056f0:	f7fd fa8e 	bl	8002c10 <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e06b      	b.n	80057d8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d008      	beq.n	800571e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e05c      	b.n	80057d8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0204 	orr.w	r2, r2, #4
 800572c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2205      	movs	r2, #5
 8005732:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005736:	e020      	b.n	800577a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005738:	f7fd fa6a 	bl	8002c10 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b05      	cmp	r3, #5
 8005744:	d919      	bls.n	800577a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574a:	f043 0210 	orr.w	r2, r3, #16
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2203      	movs	r2, #3
 8005756:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800575e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800576a:	2201      	movs	r2, #1
 800576c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e02e      	b.n	80057d8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0d7      	beq.n	8005738 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0202 	orr.w	r2, r2, #2
 8005796:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2204      	movs	r2, #4
 800579c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80057a8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c2:	2201      	movs	r2, #1
 80057c4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e019      	b.n	8005826 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d004      	beq.n	8005808 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2220      	movs	r2, #32
 8005802:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e00e      	b.n	8005826 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2204      	movs	r2, #4
 800580c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800581e:	f043 0304 	orr.w	r3, r3, #4
 8005822:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b086      	sub	sp, #24
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005842:	f023 030f 	bic.w	r3, r3, #15
 8005846:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005850:	3b50      	subs	r3, #80	@ 0x50
 8005852:	09db      	lsrs	r3, r3, #7
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	2201      	movs	r2, #1
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4013      	ands	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 813b 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800587c:	2b00      	cmp	r3, #0
 800587e:	d011      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005896:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589c:	f043 0201 	orr.w	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d011      	beq.n	80058d6 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058c8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ce:	f043 0202 	orr.w	r2, r3, #2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d011      	beq.n	8005908 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80058fa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005900:	f043 0204 	orr.w	r2, r3, #4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d011      	beq.n	800593a <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800592c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005932:	f043 0208 	orr.w	r2, r3, #8
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005944:	2b00      	cmp	r3, #0
 8005946:	d013      	beq.n	8005970 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00c      	beq.n	8005970 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800595e:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d04c      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d045      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005994:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d12e      	bne.n	8005a00 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059b0:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695a      	ldr	r2, [r3, #20]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0202 	orr.w	r2, r2, #2
 80059c0:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059da:	2201      	movs	r2, #1
 80059dc:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d07a      	beq.n	8005aec <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4798      	blx	r3
        }

        return;
 80059fe:	e075      	b.n	8005aec <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2205      	movs	r2, #5
 8005a04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d039      	beq.n	8005a9a <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d032      	beq.n	8005a9a <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d012      	beq.n	8005a66 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d116      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d111      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a60:	2201      	movs	r2, #1
 8005a62:	731a      	strb	r2, [r3, #12]
 8005a64:	e008      	b.n	8005a78 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005a80:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d025      	beq.n	8005aee <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0202 	orr.w	r2, r2, #2
 8005ab0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aca:	2201      	movs	r2, #1
 8005acc:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
 8005ae6:	e002      	b.n	8005aee <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005ae8:	bf00      	nop
 8005aea:	e000      	b.n	8005aee <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005aec:	bf00      	nop
    }
  }
}
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b02:	b2db      	uxtb	r3, r3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e02b      	b.n	8005b7c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005b2c:	f023 030f 	bic.w	r3, r3, #15
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3a:	3b50      	subs	r3, #80	@ 0x50
 8005b3c:	09db      	lsrs	r3, r3, #7
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2201      	movs	r2, #1
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d012      	beq.n	8005b7a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	f003 0311 	and.w	r3, r3, #17
 8005b5a:	2b11      	cmp	r3, #17
 8005b5c:	d106      	bne.n	8005b6c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	e006      	b.n	8005b7a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	43db      	mvns	r3, r3
 8005b74:	401a      	ands	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b9c:	0c1b      	lsrs	r3, r3, #16
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	b291      	uxth	r1, r2
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	6812      	ldr	r2, [r2, #0]
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005bb4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a53      	ldr	r2, [pc, #332]	@ (8005d60 <DMA_Init+0x18c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	f000 80a0 	beq.w	8005d5a <DMA_Init+0x186>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a51      	ldr	r2, [pc, #324]	@ (8005d64 <DMA_Init+0x190>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	f000 809a 	beq.w	8005d5a <DMA_Init+0x186>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a4f      	ldr	r2, [pc, #316]	@ (8005d68 <DMA_Init+0x194>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	f000 8094 	beq.w	8005d5a <DMA_Init+0x186>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a4d      	ldr	r2, [pc, #308]	@ (8005d6c <DMA_Init+0x198>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	f000 808e 	beq.w	8005d5a <DMA_Init+0x186>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a4b      	ldr	r2, [pc, #300]	@ (8005d70 <DMA_Init+0x19c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	f000 8088 	beq.w	8005d5a <DMA_Init+0x186>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a49      	ldr	r2, [pc, #292]	@ (8005d74 <DMA_Init+0x1a0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	f000 8082 	beq.w	8005d5a <DMA_Init+0x186>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a47      	ldr	r2, [pc, #284]	@ (8005d78 <DMA_Init+0x1a4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d07c      	beq.n	8005d5a <DMA_Init+0x186>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a45      	ldr	r2, [pc, #276]	@ (8005d7c <DMA_Init+0x1a8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d077      	beq.n	8005d5a <DMA_Init+0x186>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a44      	ldr	r2, [pc, #272]	@ (8005d80 <DMA_Init+0x1ac>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d072      	beq.n	8005d5a <DMA_Init+0x186>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a42      	ldr	r2, [pc, #264]	@ (8005d84 <DMA_Init+0x1b0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d06d      	beq.n	8005d5a <DMA_Init+0x186>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a41      	ldr	r2, [pc, #260]	@ (8005d88 <DMA_Init+0x1b4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d068      	beq.n	8005d5a <DMA_Init+0x186>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8005d8c <DMA_Init+0x1b8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d063      	beq.n	8005d5a <DMA_Init+0x186>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a3e      	ldr	r2, [pc, #248]	@ (8005d90 <DMA_Init+0x1bc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d05e      	beq.n	8005d5a <DMA_Init+0x186>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8005d94 <DMA_Init+0x1c0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d059      	beq.n	8005d5a <DMA_Init+0x186>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a3b      	ldr	r2, [pc, #236]	@ (8005d98 <DMA_Init+0x1c4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d054      	beq.n	8005d5a <DMA_Init+0x186>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a39      	ldr	r2, [pc, #228]	@ (8005d9c <DMA_Init+0x1c8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d04f      	beq.n	8005d5a <DMA_Init+0x186>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a38      	ldr	r2, [pc, #224]	@ (8005da0 <DMA_Init+0x1cc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d04a      	beq.n	8005d5a <DMA_Init+0x186>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a36      	ldr	r2, [pc, #216]	@ (8005da4 <DMA_Init+0x1d0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d045      	beq.n	8005d5a <DMA_Init+0x186>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a35      	ldr	r2, [pc, #212]	@ (8005da8 <DMA_Init+0x1d4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d040      	beq.n	8005d5a <DMA_Init+0x186>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a33      	ldr	r2, [pc, #204]	@ (8005dac <DMA_Init+0x1d8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d03b      	beq.n	8005d5a <DMA_Init+0x186>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a32      	ldr	r2, [pc, #200]	@ (8005db0 <DMA_Init+0x1dc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d036      	beq.n	8005d5a <DMA_Init+0x186>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a30      	ldr	r2, [pc, #192]	@ (8005db4 <DMA_Init+0x1e0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d031      	beq.n	8005d5a <DMA_Init+0x186>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8005db8 <DMA_Init+0x1e4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d02c      	beq.n	8005d5a <DMA_Init+0x186>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a2d      	ldr	r2, [pc, #180]	@ (8005dbc <DMA_Init+0x1e8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d027      	beq.n	8005d5a <DMA_Init+0x186>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005dc0 <DMA_Init+0x1ec>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d022      	beq.n	8005d5a <DMA_Init+0x186>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2a      	ldr	r2, [pc, #168]	@ (8005dc4 <DMA_Init+0x1f0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d01d      	beq.n	8005d5a <DMA_Init+0x186>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a29      	ldr	r2, [pc, #164]	@ (8005dc8 <DMA_Init+0x1f4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d018      	beq.n	8005d5a <DMA_Init+0x186>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a27      	ldr	r2, [pc, #156]	@ (8005dcc <DMA_Init+0x1f8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <DMA_Init+0x186>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a26      	ldr	r2, [pc, #152]	@ (8005dd0 <DMA_Init+0x1fc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00e      	beq.n	8005d5a <DMA_Init+0x186>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a24      	ldr	r2, [pc, #144]	@ (8005dd4 <DMA_Init+0x200>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d009      	beq.n	8005d5a <DMA_Init+0x186>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a23      	ldr	r2, [pc, #140]	@ (8005dd8 <DMA_Init+0x204>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <DMA_Init+0x186>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a21      	ldr	r2, [pc, #132]	@ (8005ddc <DMA_Init+0x208>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d142      	bne.n	8005de0 <DMA_Init+0x20c>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e041      	b.n	8005de2 <DMA_Init+0x20e>
 8005d5e:	bf00      	nop
 8005d60:	40020050 	.word	0x40020050
 8005d64:	50020050 	.word	0x50020050
 8005d68:	400200d0 	.word	0x400200d0
 8005d6c:	500200d0 	.word	0x500200d0
 8005d70:	40020150 	.word	0x40020150
 8005d74:	50020150 	.word	0x50020150
 8005d78:	400201d0 	.word	0x400201d0
 8005d7c:	500201d0 	.word	0x500201d0
 8005d80:	40020250 	.word	0x40020250
 8005d84:	50020250 	.word	0x50020250
 8005d88:	400202d0 	.word	0x400202d0
 8005d8c:	500202d0 	.word	0x500202d0
 8005d90:	40020350 	.word	0x40020350
 8005d94:	50020350 	.word	0x50020350
 8005d98:	400203d0 	.word	0x400203d0
 8005d9c:	500203d0 	.word	0x500203d0
 8005da0:	40020450 	.word	0x40020450
 8005da4:	50020450 	.word	0x50020450
 8005da8:	400204d0 	.word	0x400204d0
 8005dac:	500204d0 	.word	0x500204d0
 8005db0:	40020550 	.word	0x40020550
 8005db4:	50020550 	.word	0x50020550
 8005db8:	400205d0 	.word	0x400205d0
 8005dbc:	500205d0 	.word	0x500205d0
 8005dc0:	40020650 	.word	0x40020650
 8005dc4:	50020650 	.word	0x50020650
 8005dc8:	400206d0 	.word	0x400206d0
 8005dcc:	500206d0 	.word	0x500206d0
 8005dd0:	40020750 	.word	0x40020750
 8005dd4:	50020750 	.word	0x50020750
 8005dd8:	400207d0 	.word	0x400207d0
 8005ddc:	500207d0 	.word	0x500207d0
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d012      	beq.n	8005e0c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dee:	3b01      	subs	r3, #1
 8005df0:	051b      	lsls	r3, r3, #20
 8005df2:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005df6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e04:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e3e:	f040 80b0 	bne.w	8005fa2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a82      	ldr	r2, [pc, #520]	@ (8006050 <DMA_Init+0x47c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	f000 80a0 	beq.w	8005f8e <DMA_Init+0x3ba>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a80      	ldr	r2, [pc, #512]	@ (8006054 <DMA_Init+0x480>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	f000 809a 	beq.w	8005f8e <DMA_Init+0x3ba>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8006058 <DMA_Init+0x484>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	f000 8094 	beq.w	8005f8e <DMA_Init+0x3ba>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a7c      	ldr	r2, [pc, #496]	@ (800605c <DMA_Init+0x488>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	f000 808e 	beq.w	8005f8e <DMA_Init+0x3ba>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a7a      	ldr	r2, [pc, #488]	@ (8006060 <DMA_Init+0x48c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	f000 8088 	beq.w	8005f8e <DMA_Init+0x3ba>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a78      	ldr	r2, [pc, #480]	@ (8006064 <DMA_Init+0x490>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	f000 8082 	beq.w	8005f8e <DMA_Init+0x3ba>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a76      	ldr	r2, [pc, #472]	@ (8006068 <DMA_Init+0x494>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d07c      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a74      	ldr	r2, [pc, #464]	@ (800606c <DMA_Init+0x498>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d077      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a73      	ldr	r2, [pc, #460]	@ (8006070 <DMA_Init+0x49c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d072      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a71      	ldr	r2, [pc, #452]	@ (8006074 <DMA_Init+0x4a0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d06d      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a70      	ldr	r2, [pc, #448]	@ (8006078 <DMA_Init+0x4a4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d068      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a6e      	ldr	r2, [pc, #440]	@ (800607c <DMA_Init+0x4a8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d063      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a6d      	ldr	r2, [pc, #436]	@ (8006080 <DMA_Init+0x4ac>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d05e      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a6b      	ldr	r2, [pc, #428]	@ (8006084 <DMA_Init+0x4b0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d059      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6a      	ldr	r2, [pc, #424]	@ (8006088 <DMA_Init+0x4b4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d054      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a68      	ldr	r2, [pc, #416]	@ (800608c <DMA_Init+0x4b8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d04f      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a67      	ldr	r2, [pc, #412]	@ (8006090 <DMA_Init+0x4bc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d04a      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a65      	ldr	r2, [pc, #404]	@ (8006094 <DMA_Init+0x4c0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d045      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a64      	ldr	r2, [pc, #400]	@ (8006098 <DMA_Init+0x4c4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d040      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a62      	ldr	r2, [pc, #392]	@ (800609c <DMA_Init+0x4c8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d03b      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a61      	ldr	r2, [pc, #388]	@ (80060a0 <DMA_Init+0x4cc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d036      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a5f      	ldr	r2, [pc, #380]	@ (80060a4 <DMA_Init+0x4d0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d031      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a5e      	ldr	r2, [pc, #376]	@ (80060a8 <DMA_Init+0x4d4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d02c      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a5c      	ldr	r2, [pc, #368]	@ (80060ac <DMA_Init+0x4d8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d027      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a5b      	ldr	r2, [pc, #364]	@ (80060b0 <DMA_Init+0x4dc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d022      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a59      	ldr	r2, [pc, #356]	@ (80060b4 <DMA_Init+0x4e0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01d      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a58      	ldr	r2, [pc, #352]	@ (80060b8 <DMA_Init+0x4e4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d018      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a56      	ldr	r2, [pc, #344]	@ (80060bc <DMA_Init+0x4e8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a55      	ldr	r2, [pc, #340]	@ (80060c0 <DMA_Init+0x4ec>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00e      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a53      	ldr	r2, [pc, #332]	@ (80060c4 <DMA_Init+0x4f0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d009      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a52      	ldr	r2, [pc, #328]	@ (80060c8 <DMA_Init+0x4f4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d004      	beq.n	8005f8e <DMA_Init+0x3ba>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a50      	ldr	r2, [pc, #320]	@ (80060cc <DMA_Init+0x4f8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d101      	bne.n	8005f92 <DMA_Init+0x3be>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <DMA_Init+0x3c0>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00d      	beq.n	8005fb4 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e008      	b.n	8005fb4 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005faa:	d103      	bne.n	8005fb4 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fb2:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fba:	4b45      	ldr	r3, [pc, #276]	@ (80060d0 <DMA_Init+0x4fc>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a36      	ldr	r2, [pc, #216]	@ (80060b0 <DMA_Init+0x4dc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d022      	beq.n	8006020 <DMA_Init+0x44c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a35      	ldr	r2, [pc, #212]	@ (80060b4 <DMA_Init+0x4e0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d01d      	beq.n	8006020 <DMA_Init+0x44c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a33      	ldr	r2, [pc, #204]	@ (80060b8 <DMA_Init+0x4e4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d018      	beq.n	8006020 <DMA_Init+0x44c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a32      	ldr	r2, [pc, #200]	@ (80060bc <DMA_Init+0x4e8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <DMA_Init+0x44c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a30      	ldr	r2, [pc, #192]	@ (80060c0 <DMA_Init+0x4ec>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00e      	beq.n	8006020 <DMA_Init+0x44c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2f      	ldr	r2, [pc, #188]	@ (80060c4 <DMA_Init+0x4f0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d009      	beq.n	8006020 <DMA_Init+0x44c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2d      	ldr	r2, [pc, #180]	@ (80060c8 <DMA_Init+0x4f4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <DMA_Init+0x44c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2c      	ldr	r2, [pc, #176]	@ (80060cc <DMA_Init+0x4f8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d101      	bne.n	8006024 <DMA_Init+0x450>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <DMA_Init+0x452>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2200      	movs	r2, #0
 8006030:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2200      	movs	r2, #0
 8006040:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40020050 	.word	0x40020050
 8006054:	50020050 	.word	0x50020050
 8006058:	400200d0 	.word	0x400200d0
 800605c:	500200d0 	.word	0x500200d0
 8006060:	40020150 	.word	0x40020150
 8006064:	50020150 	.word	0x50020150
 8006068:	400201d0 	.word	0x400201d0
 800606c:	500201d0 	.word	0x500201d0
 8006070:	40020250 	.word	0x40020250
 8006074:	50020250 	.word	0x50020250
 8006078:	400202d0 	.word	0x400202d0
 800607c:	500202d0 	.word	0x500202d0
 8006080:	40020350 	.word	0x40020350
 8006084:	50020350 	.word	0x50020350
 8006088:	400203d0 	.word	0x400203d0
 800608c:	500203d0 	.word	0x500203d0
 8006090:	40020450 	.word	0x40020450
 8006094:	50020450 	.word	0x50020450
 8006098:	400204d0 	.word	0x400204d0
 800609c:	500204d0 	.word	0x500204d0
 80060a0:	40020550 	.word	0x40020550
 80060a4:	50020550 	.word	0x50020550
 80060a8:	400205d0 	.word	0x400205d0
 80060ac:	500205d0 	.word	0x500205d0
 80060b0:	40020650 	.word	0x40020650
 80060b4:	50020650 	.word	0x50020650
 80060b8:	400206d0 	.word	0x400206d0
 80060bc:	500206d0 	.word	0x500206d0
 80060c0:	40020750 	.word	0x40020750
 80060c4:	50020750 	.word	0x50020750
 80060c8:	400207d0 	.word	0x400207d0
 80060cc:	500207d0 	.word	0x500207d0
 80060d0:	3c803180 	.word	0x3c803180

080060d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e053      	b.n	800618e <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb fd64 	bl	8001bc8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6851      	ldr	r1, [r2, #4]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	69d2      	ldr	r2, [r2, #28]
 800611e:	4311      	orrs	r1, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	430b      	orrs	r3, r1
 8006126:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612e:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8006132:	f023 0301 	bic.w	r3, r3, #1
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6891      	ldr	r1, [r2, #8]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6992      	ldr	r2, [r2, #24]
 800613e:	4311      	orrs	r1, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	430b      	orrs	r3, r1
 8006146:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	0c1b      	lsrs	r3, r3, #16
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68d1      	ldr	r1, [r2, #12]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	430b      	orrs	r3, r1
 800615c:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006164:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	051a      	lsls	r2, r3, #20
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	055b      	lsls	r3, r3, #21
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_DMA2D_ConfigLayer+0x24>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e092      	b.n	80062e2 <HAL_DMA2D_ConfigLayer+0x14a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	4613      	mov	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	1a9b      	subs	r3, r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	3328      	adds	r3, #40	@ 0x28
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	4413      	add	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	041b      	lsls	r3, r3, #16
 80061e8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80061f0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80061fc:	4b3c      	ldr	r3, [pc, #240]	@ (80062f0 <HAL_DMA2D_ConfigLayer+0x158>)
 80061fe:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b0a      	cmp	r3, #10
 8006206:	d003      	beq.n	8006210 <HAL_DMA2D_ConfigLayer+0x78>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b09      	cmp	r3, #9
 800620e:	d107      	bne.n	8006220 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	e005      	b.n	800622c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	061b      	lsls	r3, r3, #24
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d120      	bne.n	8006274 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	43db      	mvns	r3, r3
 800623c:	ea02 0103 	and.w	r1, r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	430a      	orrs	r2, r1
 8006248:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b0a      	cmp	r3, #10
 800625a:	d003      	beq.n	8006264 <HAL_DMA2D_ConfigLayer+0xcc>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b09      	cmp	r3, #9
 8006262:	d135      	bne.n	80062d0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006270:	629a      	str	r2, [r3, #40]	@ 0x28
 8006272:	e02d      	b.n	80062d0 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b0b      	cmp	r3, #11
 800627a:	d109      	bne.n	8006290 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	049b      	lsls	r3, r3, #18
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800628e:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	43db      	mvns	r3, r3
 800629a:	ea02 0103 	and.w	r1, r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b0a      	cmp	r3, #10
 80062b8:	d003      	beq.n	80062c2 <HAL_DMA2D_ConfigLayer+0x12a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b09      	cmp	r3, #9
 80062c0:	d106      	bne.n	80062d0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80062ce:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	ff33000f 	.word	0xff33000f

080062f4 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80062fc:	f7fc fc88 	bl	8002c10 <HAL_GetTick>
 8006300:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0db      	b.n	80064c4 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a6e      	ldr	r2, [pc, #440]	@ (80064cc <HAL_DMAEx_List_Init+0x1d8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f000 809f 	beq.w	8006456 <HAL_DMAEx_List_Init+0x162>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a6c      	ldr	r2, [pc, #432]	@ (80064d0 <HAL_DMAEx_List_Init+0x1dc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	f000 8099 	beq.w	8006456 <HAL_DMAEx_List_Init+0x162>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a6a      	ldr	r2, [pc, #424]	@ (80064d4 <HAL_DMAEx_List_Init+0x1e0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	f000 8093 	beq.w	8006456 <HAL_DMAEx_List_Init+0x162>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a68      	ldr	r2, [pc, #416]	@ (80064d8 <HAL_DMAEx_List_Init+0x1e4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	f000 808d 	beq.w	8006456 <HAL_DMAEx_List_Init+0x162>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a66      	ldr	r2, [pc, #408]	@ (80064dc <HAL_DMAEx_List_Init+0x1e8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	f000 8087 	beq.w	8006456 <HAL_DMAEx_List_Init+0x162>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a64      	ldr	r2, [pc, #400]	@ (80064e0 <HAL_DMAEx_List_Init+0x1ec>)
 800634e:	4293      	cmp	r3, r2
 8006350:	f000 8081 	beq.w	8006456 <HAL_DMAEx_List_Init+0x162>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a62      	ldr	r2, [pc, #392]	@ (80064e4 <HAL_DMAEx_List_Init+0x1f0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d07b      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a61      	ldr	r2, [pc, #388]	@ (80064e8 <HAL_DMAEx_List_Init+0x1f4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d076      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5f      	ldr	r2, [pc, #380]	@ (80064ec <HAL_DMAEx_List_Init+0x1f8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d071      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a5e      	ldr	r2, [pc, #376]	@ (80064f0 <HAL_DMAEx_List_Init+0x1fc>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d06c      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a5c      	ldr	r2, [pc, #368]	@ (80064f4 <HAL_DMAEx_List_Init+0x200>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d067      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a5b      	ldr	r2, [pc, #364]	@ (80064f8 <HAL_DMAEx_List_Init+0x204>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d062      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a59      	ldr	r2, [pc, #356]	@ (80064fc <HAL_DMAEx_List_Init+0x208>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d05d      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a58      	ldr	r2, [pc, #352]	@ (8006500 <HAL_DMAEx_List_Init+0x20c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d058      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a56      	ldr	r2, [pc, #344]	@ (8006504 <HAL_DMAEx_List_Init+0x210>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d053      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a55      	ldr	r2, [pc, #340]	@ (8006508 <HAL_DMAEx_List_Init+0x214>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d04e      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a53      	ldr	r2, [pc, #332]	@ (800650c <HAL_DMAEx_List_Init+0x218>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d049      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a52      	ldr	r2, [pc, #328]	@ (8006510 <HAL_DMAEx_List_Init+0x21c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d044      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a50      	ldr	r2, [pc, #320]	@ (8006514 <HAL_DMAEx_List_Init+0x220>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d03f      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a4f      	ldr	r2, [pc, #316]	@ (8006518 <HAL_DMAEx_List_Init+0x224>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d03a      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a4d      	ldr	r2, [pc, #308]	@ (800651c <HAL_DMAEx_List_Init+0x228>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d035      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a4c      	ldr	r2, [pc, #304]	@ (8006520 <HAL_DMAEx_List_Init+0x22c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d030      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a4a      	ldr	r2, [pc, #296]	@ (8006524 <HAL_DMAEx_List_Init+0x230>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d02b      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a49      	ldr	r2, [pc, #292]	@ (8006528 <HAL_DMAEx_List_Init+0x234>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d026      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a47      	ldr	r2, [pc, #284]	@ (800652c <HAL_DMAEx_List_Init+0x238>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d021      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a46      	ldr	r2, [pc, #280]	@ (8006530 <HAL_DMAEx_List_Init+0x23c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d01c      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a44      	ldr	r2, [pc, #272]	@ (8006534 <HAL_DMAEx_List_Init+0x240>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d017      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a43      	ldr	r2, [pc, #268]	@ (8006538 <HAL_DMAEx_List_Init+0x244>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d012      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a41      	ldr	r2, [pc, #260]	@ (800653c <HAL_DMAEx_List_Init+0x248>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00d      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a40      	ldr	r2, [pc, #256]	@ (8006540 <HAL_DMAEx_List_Init+0x24c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d008      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a3e      	ldr	r2, [pc, #248]	@ (8006544 <HAL_DMAEx_List_Init+0x250>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d003      	beq.n	8006456 <HAL_DMAEx_List_Init+0x162>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a3d      	ldr	r2, [pc, #244]	@ (8006548 <HAL_DMAEx_List_Init+0x254>)
 8006454:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695a      	ldr	r2, [r3, #20]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0206 	orr.w	r2, r2, #6
 8006474:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006476:	e00f      	b.n	8006498 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006478:	f7fc fbca 	bl	8002c10 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b05      	cmp	r3, #5
 8006484:	d908      	bls.n	8006498 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2210      	movs	r2, #16
 800648a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2203      	movs	r2, #3
 8006490:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e015      	b.n	80064c4 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e8      	bne.n	8006478 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fae0 	bl	8006a6c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40020050 	.word	0x40020050
 80064d0:	50020050 	.word	0x50020050
 80064d4:	400200d0 	.word	0x400200d0
 80064d8:	500200d0 	.word	0x500200d0
 80064dc:	40020150 	.word	0x40020150
 80064e0:	50020150 	.word	0x50020150
 80064e4:	400201d0 	.word	0x400201d0
 80064e8:	500201d0 	.word	0x500201d0
 80064ec:	40020250 	.word	0x40020250
 80064f0:	50020250 	.word	0x50020250
 80064f4:	400202d0 	.word	0x400202d0
 80064f8:	500202d0 	.word	0x500202d0
 80064fc:	40020350 	.word	0x40020350
 8006500:	50020350 	.word	0x50020350
 8006504:	400203d0 	.word	0x400203d0
 8006508:	500203d0 	.word	0x500203d0
 800650c:	40020450 	.word	0x40020450
 8006510:	50020450 	.word	0x50020450
 8006514:	400204d0 	.word	0x400204d0
 8006518:	500204d0 	.word	0x500204d0
 800651c:	40020550 	.word	0x40020550
 8006520:	50020550 	.word	0x50020550
 8006524:	400205d0 	.word	0x400205d0
 8006528:	500205d0 	.word	0x500205d0
 800652c:	40020650 	.word	0x40020650
 8006530:	50020650 	.word	0x50020650
 8006534:	400206d0 	.word	0x400206d0
 8006538:	500206d0 	.word	0x500206d0
 800653c:	40020750 	.word	0x40020750
 8006540:	50020750 	.word	0x50020750
 8006544:	400207d0 	.word	0x400207d0
 8006548:	500207d0 	.word	0x500207d0

0800654c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_DMAEx_List_Start_IT+0x16>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e082      	b.n	800666c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800656c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006578:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d005      	beq.n	800658c <HAL_DMAEx_List_Start_IT+0x40>
 8006580:	7dfb      	ldrb	r3, [r7, #23]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d16a      	bne.n	800665c <HAL_DMAEx_List_Start_IT+0x110>
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d067      	beq.n	800665c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	d157      	bne.n	8006648 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_DMAEx_List_Start_IT+0x5a>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e062      	b.n	800666c <HAL_DMAEx_List_Start_IT+0x120>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2202      	movs	r2, #2
 80065b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ba:	2202      	movs	r2, #2
 80065bc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c8:	2200      	movs	r2, #0
 80065ca:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80065da:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065f2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695a      	ldr	r2, [r3, #20]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800660a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f107 010c 	add.w	r1, r7, #12
 8006616:	2200      	movs	r2, #0
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fe47 	bl	80072ac <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4619      	mov	r1, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	0c0b      	lsrs	r3, r1, #16
 800662c:	041b      	lsls	r3, r3, #16
 800662e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800663c:	4013      	ands	r3, r2
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	430b      	orrs	r3, r1
 8006646:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e007      	b.n	800666c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2240      	movs	r2, #64	@ 0x40
 8006660:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <HAL_DMAEx_List_BuildNode+0x16>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e004      	b.n	8006698 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fb43 	bl	8006d1c <DMA_List_BuildNode>

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <HAL_DMAEx_List_GetNodeConfig+0x16>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e004      	b.n	80066c4 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fc7f 	bl	8006fc0 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08c      	sub	sp, #48	@ 0x30
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_DMAEx_List_InsertNode+0x18>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0b6      	b.n	8006856 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d104      	bne.n	80066fa <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2204      	movs	r2, #4
 80066f4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e0ad      	b.n	8006856 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fd66 	bl	80071d4 <DMA_List_CheckNodesBaseAddresses>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d004      	beq.n	8006718 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2205      	movs	r2, #5
 8006712:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e09e      	b.n	8006856 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fd87 	bl	8007234 <DMA_List_CheckNodesTypes>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d004      	beq.n	8006736 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2204      	movs	r2, #4
 8006730:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e08f      	b.n	8006856 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2202      	movs	r2, #2
 800673a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006742:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006746:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fdad 	bl	80072ac <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d11a      	bne.n	8006790 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	609a      	str	r2, [r3, #8]
 800676c:	e06c      	b.n	8006848 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800677a:	4013      	ands	r3, r2
 800677c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800677e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006780:	4319      	orrs	r1, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2202      	movs	r2, #2
 800678c:	609a      	str	r2, [r3, #8]
 800678e:	e05b      	b.n	8006848 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10f      	bne.n	80067b6 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067a0:	4013      	ands	r3, r2
 80067a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067a6:	4319      	orrs	r1, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e043      	b.n	800683e <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80067b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b8:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80067ba:	f107 0314 	add.w	r3, r7, #20
 80067be:	461a      	mov	r2, r3
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fda2 	bl	800730c <DMA_List_FindNode>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d132      	bne.n	8006834 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d11a      	bne.n	800680e <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	461a      	mov	r2, r3
 80067e6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067ea:	4013      	ands	r3, r2
 80067ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067f0:	4319      	orrs	r1, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067fe:	4013      	ands	r3, r2
 8006800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006804:	4319      	orrs	r1, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800680c:	e017      	b.n	800683e <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800680e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006824:	4013      	ands	r3, r2
 8006826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800682a:	4319      	orrs	r1, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006832:	e004      	b.n	800683e <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2206      	movs	r2, #6
 8006838:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e00b      	b.n	8006856 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3730      	adds	r7, #48	@ 0x30
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b08a      	sub	sp, #40	@ 0x28
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e052      	b.n	8006916 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e049      	b.n	8006916 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00c      	beq.n	80068a4 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d101      	bne.n	800689a <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	e03d      	b.n	8006916 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2204      	movs	r2, #4
 800689e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e038      	b.n	8006916 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d104      	bne.n	80068b6 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2204      	movs	r2, #4
 80068b0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e02f      	b.n	8006916 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2202      	movs	r2, #2
 80068ba:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f107 0220 	add.w	r2, r7, #32
 80068ca:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fcec 	bl	80072ac <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80068d8:	f107 030c 	add.w	r3, r7, #12
 80068dc:	461a      	mov	r2, r3
 80068de:	2100      	movs	r1, #0
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fd13 	bl	800730c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80068f0:	4013      	ands	r3, r2
 80068f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	4610      	mov	r0, r2
 80068f8:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80068fa:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80068fc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3728      	adds	r7, #40	@ 0x28
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_DMAEx_List_LinkQ+0x16>
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e072      	b.n	8006a20 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006940:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d002      	beq.n	8006954 <HAL_DMAEx_List_LinkQ+0x34>
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	2b05      	cmp	r3, #5
 8006952:	d108      	bne.n	8006966 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2240      	movs	r2, #64	@ 0x40
 8006958:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e05c      	b.n	8006a20 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	7b1b      	ldrb	r3, [r3, #12]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d104      	bne.n	800697a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2201      	movs	r2, #1
 8006974:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e052      	b.n	8006a20 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a2b      	ldr	r2, [pc, #172]	@ (8006a2c <HAL_DMAEx_List_LinkQ+0x10c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d022      	beq.n	80069ca <HAL_DMAEx_List_LinkQ+0xaa>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a29      	ldr	r2, [pc, #164]	@ (8006a30 <HAL_DMAEx_List_LinkQ+0x110>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d01d      	beq.n	80069ca <HAL_DMAEx_List_LinkQ+0xaa>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a28      	ldr	r2, [pc, #160]	@ (8006a34 <HAL_DMAEx_List_LinkQ+0x114>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d018      	beq.n	80069ca <HAL_DMAEx_List_LinkQ+0xaa>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a26      	ldr	r2, [pc, #152]	@ (8006a38 <HAL_DMAEx_List_LinkQ+0x118>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <HAL_DMAEx_List_LinkQ+0xaa>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a25      	ldr	r2, [pc, #148]	@ (8006a3c <HAL_DMAEx_List_LinkQ+0x11c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00e      	beq.n	80069ca <HAL_DMAEx_List_LinkQ+0xaa>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a23      	ldr	r2, [pc, #140]	@ (8006a40 <HAL_DMAEx_List_LinkQ+0x120>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <HAL_DMAEx_List_LinkQ+0xaa>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a22      	ldr	r2, [pc, #136]	@ (8006a44 <HAL_DMAEx_List_LinkQ+0x124>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <HAL_DMAEx_List_LinkQ+0xaa>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a20      	ldr	r2, [pc, #128]	@ (8006a48 <HAL_DMAEx_List_LinkQ+0x128>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d101      	bne.n	80069ce <HAL_DMAEx_List_LinkQ+0xae>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <HAL_DMAEx_List_LinkQ+0xb0>
 80069ce:	2300      	movs	r3, #0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10b      	bne.n	80069ec <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2203      	movs	r2, #3
 80069e6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e019      	b.n	8006a20 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f0:	2b81      	cmp	r3, #129	@ 0x81
 80069f2:	d108      	bne.n	8006a06 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10d      	bne.n	8006a18 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2204      	movs	r2, #4
 8006a00:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e00c      	b.n	8006a20 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2204      	movs	r2, #4
 8006a12:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e003      	b.n	8006a20 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	40020650 	.word	0x40020650
 8006a30:	50020650 	.word	0x50020650
 8006a34:	400206d0 	.word	0x400206d0
 8006a38:	500206d0 	.word	0x500206d0
 8006a3c:	40020750 	.word	0x40020750
 8006a40:	50020750 	.word	0x50020750
 8006a44:	400207d0 	.word	0x400207d0
 8006a48:	500207d0 	.word	0x500207d0

08006a4c <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	0c1b      	lsrs	r3, r3, #16
 8006a5c:	b2db      	uxtb	r3, r3
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a85      	ldr	r2, [pc, #532]	@ (8006c9c <DMA_List_Init+0x230>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	f000 80a0 	beq.w	8006bcc <DMA_List_Init+0x160>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a83      	ldr	r2, [pc, #524]	@ (8006ca0 <DMA_List_Init+0x234>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	f000 809a 	beq.w	8006bcc <DMA_List_Init+0x160>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a81      	ldr	r2, [pc, #516]	@ (8006ca4 <DMA_List_Init+0x238>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	f000 8094 	beq.w	8006bcc <DMA_List_Init+0x160>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a7f      	ldr	r2, [pc, #508]	@ (8006ca8 <DMA_List_Init+0x23c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	f000 808e 	beq.w	8006bcc <DMA_List_Init+0x160>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a7d      	ldr	r2, [pc, #500]	@ (8006cac <DMA_List_Init+0x240>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	f000 8088 	beq.w	8006bcc <DMA_List_Init+0x160>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a7b      	ldr	r2, [pc, #492]	@ (8006cb0 <DMA_List_Init+0x244>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	f000 8082 	beq.w	8006bcc <DMA_List_Init+0x160>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a79      	ldr	r2, [pc, #484]	@ (8006cb4 <DMA_List_Init+0x248>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d07c      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a78      	ldr	r2, [pc, #480]	@ (8006cb8 <DMA_List_Init+0x24c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d077      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a76      	ldr	r2, [pc, #472]	@ (8006cbc <DMA_List_Init+0x250>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d072      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a75      	ldr	r2, [pc, #468]	@ (8006cc0 <DMA_List_Init+0x254>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d06d      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a73      	ldr	r2, [pc, #460]	@ (8006cc4 <DMA_List_Init+0x258>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d068      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a72      	ldr	r2, [pc, #456]	@ (8006cc8 <DMA_List_Init+0x25c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d063      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a70      	ldr	r2, [pc, #448]	@ (8006ccc <DMA_List_Init+0x260>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d05e      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a6f      	ldr	r2, [pc, #444]	@ (8006cd0 <DMA_List_Init+0x264>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d059      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a6d      	ldr	r2, [pc, #436]	@ (8006cd4 <DMA_List_Init+0x268>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d054      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a6c      	ldr	r2, [pc, #432]	@ (8006cd8 <DMA_List_Init+0x26c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d04f      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a6a      	ldr	r2, [pc, #424]	@ (8006cdc <DMA_List_Init+0x270>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d04a      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a69      	ldr	r2, [pc, #420]	@ (8006ce0 <DMA_List_Init+0x274>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d045      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a67      	ldr	r2, [pc, #412]	@ (8006ce4 <DMA_List_Init+0x278>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d040      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a66      	ldr	r2, [pc, #408]	@ (8006ce8 <DMA_List_Init+0x27c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d03b      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a64      	ldr	r2, [pc, #400]	@ (8006cec <DMA_List_Init+0x280>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d036      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a63      	ldr	r2, [pc, #396]	@ (8006cf0 <DMA_List_Init+0x284>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d031      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a61      	ldr	r2, [pc, #388]	@ (8006cf4 <DMA_List_Init+0x288>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d02c      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a60      	ldr	r2, [pc, #384]	@ (8006cf8 <DMA_List_Init+0x28c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d027      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a5e      	ldr	r2, [pc, #376]	@ (8006cfc <DMA_List_Init+0x290>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d022      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a5d      	ldr	r2, [pc, #372]	@ (8006d00 <DMA_List_Init+0x294>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d01d      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a5b      	ldr	r2, [pc, #364]	@ (8006d04 <DMA_List_Init+0x298>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d018      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8006d08 <DMA_List_Init+0x29c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d013      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a58      	ldr	r2, [pc, #352]	@ (8006d0c <DMA_List_Init+0x2a0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00e      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a57      	ldr	r2, [pc, #348]	@ (8006d10 <DMA_List_Init+0x2a4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d009      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a55      	ldr	r2, [pc, #340]	@ (8006d14 <DMA_List_Init+0x2a8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d004      	beq.n	8006bcc <DMA_List_Init+0x160>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a54      	ldr	r2, [pc, #336]	@ (8006d18 <DMA_List_Init+0x2ac>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d101      	bne.n	8006bd0 <DMA_List_Init+0x164>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e000      	b.n	8006bd2 <DMA_List_Init+0x166>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c04:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2200      	movs	r2, #0
 8006c14:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a36      	ldr	r2, [pc, #216]	@ (8006cfc <DMA_List_Init+0x290>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d022      	beq.n	8006c6e <DMA_List_Init+0x202>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a34      	ldr	r2, [pc, #208]	@ (8006d00 <DMA_List_Init+0x294>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d01d      	beq.n	8006c6e <DMA_List_Init+0x202>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a33      	ldr	r2, [pc, #204]	@ (8006d04 <DMA_List_Init+0x298>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d018      	beq.n	8006c6e <DMA_List_Init+0x202>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a31      	ldr	r2, [pc, #196]	@ (8006d08 <DMA_List_Init+0x29c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d013      	beq.n	8006c6e <DMA_List_Init+0x202>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a30      	ldr	r2, [pc, #192]	@ (8006d0c <DMA_List_Init+0x2a0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00e      	beq.n	8006c6e <DMA_List_Init+0x202>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a2e      	ldr	r2, [pc, #184]	@ (8006d10 <DMA_List_Init+0x2a4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d009      	beq.n	8006c6e <DMA_List_Init+0x202>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8006d14 <DMA_List_Init+0x2a8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d004      	beq.n	8006c6e <DMA_List_Init+0x202>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a2b      	ldr	r2, [pc, #172]	@ (8006d18 <DMA_List_Init+0x2ac>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d101      	bne.n	8006c72 <DMA_List_Init+0x206>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <DMA_List_Init+0x208>
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2200      	movs	r2, #0
 8006c86:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006c90:	bf00      	nop
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40020050 	.word	0x40020050
 8006ca0:	50020050 	.word	0x50020050
 8006ca4:	400200d0 	.word	0x400200d0
 8006ca8:	500200d0 	.word	0x500200d0
 8006cac:	40020150 	.word	0x40020150
 8006cb0:	50020150 	.word	0x50020150
 8006cb4:	400201d0 	.word	0x400201d0
 8006cb8:	500201d0 	.word	0x500201d0
 8006cbc:	40020250 	.word	0x40020250
 8006cc0:	50020250 	.word	0x50020250
 8006cc4:	400202d0 	.word	0x400202d0
 8006cc8:	500202d0 	.word	0x500202d0
 8006ccc:	40020350 	.word	0x40020350
 8006cd0:	50020350 	.word	0x50020350
 8006cd4:	400203d0 	.word	0x400203d0
 8006cd8:	500203d0 	.word	0x500203d0
 8006cdc:	40020450 	.word	0x40020450
 8006ce0:	50020450 	.word	0x50020450
 8006ce4:	400204d0 	.word	0x400204d0
 8006ce8:	500204d0 	.word	0x500204d0
 8006cec:	40020550 	.word	0x40020550
 8006cf0:	50020550 	.word	0x50020550
 8006cf4:	400205d0 	.word	0x400205d0
 8006cf8:	500205d0 	.word	0x500205d0
 8006cfc:	40020650 	.word	0x40020650
 8006d00:	50020650 	.word	0x50020650
 8006d04:	400206d0 	.word	0x400206d0
 8006d08:	500206d0 	.word	0x500206d0
 8006d0c:	40020750 	.word	0x40020750
 8006d10:	50020750 	.word	0x50020750
 8006d14:	400207d0 	.word	0x400207d0
 8006d18:	500207d0 	.word	0x500207d0

08006d1c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d2e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d34:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d3a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006d40:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d017      	beq.n	8006d82 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	3b01      	subs	r3, #1
 8006d66:	051b      	lsls	r3, r3, #20
 8006d68:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006d6c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	3b01      	subs	r3, #1
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006d7a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6859      	ldr	r1, [r3, #4]
 8006d8a:	f240 237f 	movw	r3, #639	@ 0x27f
 8006d8e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006d90:	431a      	orrs	r2, r3
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d9e:	d10c      	bne.n	8006dba <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d011      	beq.n	8006dd0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	605a      	str	r2, [r3, #4]
 8006db8:	e00a      	b.n	8006dd0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc2:	d105      	bne.n	8006dd0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00f      	beq.n	8006df8 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006df0:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006df2:	431a      	orrs	r2, r3
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d04e      	beq.n	8006eac <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e16:	3b01      	subs	r3, #1
 8006e18:	0419      	lsls	r1, r3, #16
 8006e1a:	4b67      	ldr	r3, [pc, #412]	@ (8006fb8 <DMA_List_BuildNode+0x29c>)
 8006e1c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	da06      	bge.n	8006e3a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	609a      	str	r2, [r3, #8]
 8006e38:	e005      	b.n	8006e46 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	da06      	bge.n	8006e5c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	609a      	str	r2, [r3, #8]
 8006e5a:	e005      	b.n	8006e68 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	da06      	bge.n	8006e7e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	e005      	b.n	8006e8a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da06      	bge.n	8006ea0 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	609a      	str	r2, [r3, #8]
 8006e9e:	e005      	b.n	8006eac <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d059      	beq.n	8006f7c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	da09      	bge.n	8006ee4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed4:	425b      	negs	r3, r3
 8006ed6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	615a      	str	r2, [r3, #20]
 8006ee2:	e005      	b.n	8006ef0 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	da0d      	bge.n	8006f14 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efc:	425b      	negs	r3, r3
 8006efe:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	0419      	lsls	r1, r3, #16
 8006f08:	4b2c      	ldr	r3, [pc, #176]	@ (8006fbc <DMA_List_BuildNode+0x2a0>)
 8006f0a:	400b      	ands	r3, r1
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	615a      	str	r2, [r3, #20]
 8006f12:	e009      	b.n	8006f28 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1c:	0419      	lsls	r1, r3, #16
 8006f1e:	4b27      	ldr	r3, [pc, #156]	@ (8006fbc <DMA_List_BuildNode+0x2a0>)
 8006f20:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f22:	431a      	orrs	r2, r3
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	da08      	bge.n	8006f42 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f34:	425b      	negs	r3, r3
 8006f36:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	619a      	str	r2, [r3, #24]
 8006f40:	e004      	b.n	8006f4c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f46:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da0b      	bge.n	8006f6c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f58:	425b      	negs	r3, r3
 8006f5a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f64:	431a      	orrs	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	619a      	str	r2, [r3, #24]
 8006f6a:	e007      	b.n	8006f7c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f74:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f76:	431a      	orrs	r2, r3
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d006      	beq.n	8006f9e <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006f9c:	e005      	b.n	8006faa <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	07ff0000 	.word	0x07ff0000
 8006fbc:	1fff0000 	.word	0x1fff0000

08006fc0 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0208 	and.w	r2, r3, #8
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0203 	and.w	r2, r3, #3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8007008:	091b      	lsrs	r3, r3, #4
 800700a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800700e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8007018:	0d1b      	lsrs	r3, r3, #20
 800701a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800701e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	4b66      	ldr	r3, [pc, #408]	@ (80071d0 <DMA_List_GetNodeConfig+0x210>)
 8007036:	4013      	ands	r3, r2
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800705a:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007062:	60da      	str	r2, [r3, #12]
 8007064:	e013      	b.n	800708e <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007084:	60da      	str	r2, [r3, #12]
 8007086:	e002      	b.n	800708e <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 80070b6:	0c1b      	lsrs	r3, r3, #16
 80070b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ec:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80070f2:	e002      	b.n	80070fa <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d04a      	beq.n	80071ac <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	b29b      	uxth	r3, r3
 800711c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007120:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8007122:	89fa      	ldrh	r2, [r7, #14]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	0c1b      	lsrs	r3, r3, #16
 800712e:	b29b      	uxth	r3, r3
 8007130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007134:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8007136:	89fa      	ldrh	r2, [r7, #14]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d004      	beq.n	8007152 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800714c:	425a      	negs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007162:	425a      	negs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800716e:	89fa      	ldrh	r2, [r7, #14]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	0c1b      	lsrs	r3, r3, #16
 800717a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 800717c:	89fa      	ldrh	r2, [r7, #14]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007192:	425a      	negs	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	da11      	bge.n	80071c4 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071a4:	425a      	negs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80071aa:	e00b      	b.n	80071c4 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80071c4:	bf00      	nop
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	0c002000 	.word	0x0c002000

080071d4 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	0c1b      	lsrs	r3, r3, #16
 80071ec:	041b      	lsls	r3, r3, #16
 80071ee:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	e00a      	b.n	8007216 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	e004      	b.n	8007216 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	041b      	lsls	r3, r3, #16
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	429a      	cmp	r2, r3
 8007220:	d001      	beq.n	8007226 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d004      	beq.n	8007254 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e00e      	b.n	8007272 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d004      	beq.n	8007264 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	e006      	b.n	8007272 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d007      	beq.n	8007288 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	429a      	cmp	r2, r3
 8007282:	d001      	beq.n	8007288 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007284:	2302      	movs	r3, #2
 8007286:	e00b      	b.n	80072a0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d007      	beq.n	800729e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	429a      	cmp	r2, r3
 8007298:	d001      	beq.n	800729e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800729a:	2303      	movs	r3, #3
 800729c:	e000      	b.n	80072a0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00c      	beq.n	80072de <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007304 <DMA_List_GetCLLRNodeInfo+0x58>)
 80072ce:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00f      	beq.n	80072f6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2207      	movs	r2, #7
 80072da:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80072dc:	e00b      	b.n	80072f6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4a08      	ldr	r2, [pc, #32]	@ (8007308 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80072e8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2205      	movs	r2, #5
 80072f4:	601a      	str	r2, [r3, #0]
}
 80072f6:	bf00      	nop
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	fe010000 	.word	0xfe010000
 8007308:	f8010000 	.word	0xf8010000

0800730c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800730c:	b480      	push	{r7}
 800730e:	b089      	sub	sp, #36	@ 0x24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d142      	bne.n	80073b6 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007330:	e01d      	b.n	800736e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d107      	bne.n	8007348 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007342:	4013      	ands	r3, r2
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	e00f      	b.n	8007368 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	0c1b      	lsrs	r3, r3, #16
 8007352:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4413      	add	r3, r2
 8007358:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007360:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007364:	4013      	ands	r3, r2
 8007366:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	3301      	adds	r3, #1
 800736c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	429a      	cmp	r2, r3
 8007376:	d3dc      	bcc.n	8007332 <DMA_List_FindNode+0x26>
 8007378:	e029      	b.n	80073ce <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d107      	bne.n	8007390 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800738a:	4013      	ands	r3, r2
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	e00f      	b.n	80073b0 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	0c1b      	lsrs	r3, r3, #16
 800739a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	4413      	add	r3, r2
 80073a0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80073a8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073ac:	4013      	ands	r3, r2
 80073ae:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	3301      	adds	r3, #1
 80073b4:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d206      	bcs.n	80073ce <DMA_List_FindNode+0xc2>
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073c6:	4013      	ands	r3, r2
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d1d5      	bne.n	800737a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073da:	4013      	ands	r3, r2
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d001      	beq.n	80073e6 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e02b      	b.n	800743e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	041b      	lsls	r3, r3, #16
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	0c1b      	lsrs	r3, r3, #16
 8007402:	041b      	lsls	r3, r3, #16
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	461a      	mov	r2, r3
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00f      	beq.n	800743c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	461a      	mov	r2, r3
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007428:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800742c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	0c1b      	lsrs	r3, r3, #16
 8007434:	041b      	lsls	r3, r3, #16
 8007436:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3724      	adds	r7, #36	@ 0x24
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
	...

0800744c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800744c:	b480      	push	{r7}
 800744e:	b089      	sub	sp, #36	@ 0x24
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800745e:	e1ba      	b.n	80077d6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	2101      	movs	r1, #1
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	fa01 f303 	lsl.w	r3, r1, r3
 800746c:	4013      	ands	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 81aa 	beq.w	80077d0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a55      	ldr	r2, [pc, #340]	@ (80075d4 <HAL_GPIO_Init+0x188>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d15d      	bne.n	8007540 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800748a:	2201      	movs	r2, #1
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	fa02 f303 	lsl.w	r3, r2, r3
 8007492:	43db      	mvns	r3, r3
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	4013      	ands	r3, r2
 8007498:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f003 0201 	and.w	r2, r3, #1
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80074b4:	4a48      	ldr	r2, [pc, #288]	@ (80075d8 <HAL_GPIO_Init+0x18c>)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074bc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80074be:	4a46      	ldr	r2, [pc, #280]	@ (80075d8 <HAL_GPIO_Init+0x18c>)
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	4413      	add	r3, r2
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	08da      	lsrs	r2, r3, #3
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	3208      	adds	r2, #8
 80074d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	220f      	movs	r2, #15
 80074e2:	fa02 f303 	lsl.w	r3, r2, r3
 80074e6:	43db      	mvns	r3, r3
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	4013      	ands	r3, r2
 80074ec:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	220b      	movs	r2, #11
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	69fa      	ldr	r2, [r7, #28]
 80074fe:	4313      	orrs	r3, r2
 8007500:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	08da      	lsrs	r2, r3, #3
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	3208      	adds	r2, #8
 800750a:	69f9      	ldr	r1, [r7, #28]
 800750c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	2203      	movs	r2, #3
 800751c:	fa02 f303 	lsl.w	r3, r2, r3
 8007520:	43db      	mvns	r3, r3
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	4013      	ands	r3, r2
 8007526:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	2202      	movs	r2, #2
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	4313      	orrs	r3, r2
 8007536:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	e067      	b.n	8007610 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2b02      	cmp	r3, #2
 8007546:	d003      	beq.n	8007550 <HAL_GPIO_Init+0x104>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b12      	cmp	r3, #18
 800754e:	d145      	bne.n	80075dc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	08da      	lsrs	r2, r3, #3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3208      	adds	r2, #8
 8007558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	220f      	movs	r2, #15
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	43db      	mvns	r3, r3
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	4013      	ands	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f003 020f 	and.w	r2, r3, #15
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	fa02 f303 	lsl.w	r3, r2, r3
 8007588:	69fa      	ldr	r2, [r7, #28]
 800758a:	4313      	orrs	r3, r2
 800758c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	08da      	lsrs	r2, r3, #3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3208      	adds	r2, #8
 8007596:	69f9      	ldr	r1, [r7, #28]
 8007598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	2203      	movs	r2, #3
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	43db      	mvns	r3, r3
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	4013      	ands	r3, r2
 80075b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f003 0203 	and.w	r2, r3, #3
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	e01e      	b.n	8007610 <HAL_GPIO_Init+0x1c4>
 80075d2:	bf00      	nop
 80075d4:	46020000 	.word	0x46020000
 80075d8:	08011b94 	.word	0x08011b94
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	2203      	movs	r2, #3
 80075e8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ec:	43db      	mvns	r3, r3
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	4013      	ands	r3, r2
 80075f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f003 0203 	and.w	r2, r3, #3
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	4313      	orrs	r3, r2
 8007608:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d00b      	beq.n	8007630 <HAL_GPIO_Init+0x1e4>
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d007      	beq.n	8007630 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007624:	2b11      	cmp	r3, #17
 8007626:	d003      	beq.n	8007630 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	2b12      	cmp	r3, #18
 800762e:	d130      	bne.n	8007692 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	2203      	movs	r2, #3
 800763c:	fa02 f303 	lsl.w	r3, r2, r3
 8007640:	43db      	mvns	r3, r3
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	4013      	ands	r3, r2
 8007646:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	fa02 f303 	lsl.w	r3, r2, r3
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	4313      	orrs	r3, r2
 8007658:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007666:	2201      	movs	r2, #1
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	fa02 f303 	lsl.w	r3, r2, r3
 800766e:	43db      	mvns	r3, r3
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	4013      	ands	r3, r2
 8007674:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	091b      	lsrs	r3, r3, #4
 800767c:	f003 0201 	and.w	r2, r3, #1
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	fa02 f303 	lsl.w	r3, r2, r3
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	4313      	orrs	r3, r2
 800768a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b03      	cmp	r3, #3
 8007698:	d017      	beq.n	80076ca <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	2203      	movs	r2, #3
 80076a6:	fa02 f303 	lsl.w	r3, r2, r3
 80076aa:	43db      	mvns	r3, r3
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	4013      	ands	r3, r2
 80076b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	689a      	ldr	r2, [r3, #8]
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d07c      	beq.n	80077d0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80076d6:	4a47      	ldr	r2, [pc, #284]	@ (80077f4 <HAL_GPIO_Init+0x3a8>)
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	089b      	lsrs	r3, r3, #2
 80076dc:	3318      	adds	r3, #24
 80076de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	220f      	movs	r2, #15
 80076ee:	fa02 f303 	lsl.w	r3, r2, r3
 80076f2:	43db      	mvns	r3, r3
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	4013      	ands	r3, r2
 80076f8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0a9a      	lsrs	r2, r3, #10
 80076fe:	4b3e      	ldr	r3, [pc, #248]	@ (80077f8 <HAL_GPIO_Init+0x3ac>)
 8007700:	4013      	ands	r3, r2
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	f002 0203 	and.w	r2, r2, #3
 8007708:	00d2      	lsls	r2, r2, #3
 800770a:	4093      	lsls	r3, r2
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	4313      	orrs	r3, r2
 8007710:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007712:	4938      	ldr	r1, [pc, #224]	@ (80077f4 <HAL_GPIO_Init+0x3a8>)
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	089b      	lsrs	r3, r3, #2
 8007718:	3318      	adds	r3, #24
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007720:	4b34      	ldr	r3, [pc, #208]	@ (80077f4 <HAL_GPIO_Init+0x3a8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	43db      	mvns	r3, r3
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	4013      	ands	r3, r2
 800772e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007744:	4a2b      	ldr	r2, [pc, #172]	@ (80077f4 <HAL_GPIO_Init+0x3a8>)
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800774a:	4b2a      	ldr	r3, [pc, #168]	@ (80077f4 <HAL_GPIO_Init+0x3a8>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	43db      	mvns	r3, r3
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	4013      	ands	r3, r2
 8007758:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800776e:	4a21      	ldr	r2, [pc, #132]	@ (80077f4 <HAL_GPIO_Init+0x3a8>)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007774:	4b1f      	ldr	r3, [pc, #124]	@ (80077f4 <HAL_GPIO_Init+0x3a8>)
 8007776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800777a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	43db      	mvns	r3, r3
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	4013      	ands	r3, r2
 8007784:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007792:	69fa      	ldr	r2, [r7, #28]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800779a:	4a16      	ldr	r2, [pc, #88]	@ (80077f4 <HAL_GPIO_Init+0x3a8>)
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80077a2:	4b14      	ldr	r3, [pc, #80]	@ (80077f4 <HAL_GPIO_Init+0x3a8>)
 80077a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	43db      	mvns	r3, r3
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	4013      	ands	r3, r2
 80077b2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80077c8:	4a0a      	ldr	r2, [pc, #40]	@ (80077f4 <HAL_GPIO_Init+0x3a8>)
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	3301      	adds	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	fa22 f303 	lsr.w	r3, r2, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f47f ae3d 	bne.w	8007460 <HAL_GPIO_Init+0x14>
  }
}
 80077e6:	bf00      	nop
 80077e8:	bf00      	nop
 80077ea:	3724      	adds	r7, #36	@ 0x24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	46022000 	.word	0x46022000
 80077f8:	002f7f7f 	.word	0x002f7f7f

080077fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	807b      	strh	r3, [r7, #2]
 8007808:	4613      	mov	r3, r2
 800780a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800780c:	787b      	ldrb	r3, [r7, #1]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007812:	887a      	ldrh	r2, [r7, #2]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007818:	e002      	b.n	8007820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800781a:	887a      	ldrh	r2, [r7, #2]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800783e:	887a      	ldrh	r2, [r7, #2]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4013      	ands	r3, r2
 8007844:	041a      	lsls	r2, r3, #16
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	43d9      	mvns	r1, r3
 800784a:	887b      	ldrh	r3, [r7, #2]
 800784c:	400b      	ands	r3, r1
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	619a      	str	r2, [r3, #24]
}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800786a:	4b0f      	ldr	r3, [pc, #60]	@ (80078a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	4013      	ands	r3, r2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d006      	beq.n	8007884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007876:	4a0c      	ldr	r2, [pc, #48]	@ (80078a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007878:	88fb      	ldrh	r3, [r7, #6]
 800787a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800787c:	88fb      	ldrh	r3, [r7, #6]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f814 	bl	80078ac <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007884:	4b08      	ldr	r3, [pc, #32]	@ (80078a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007886:	691a      	ldr	r2, [r3, #16]
 8007888:	88fb      	ldrh	r3, [r7, #6]
 800788a:	4013      	ands	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d006      	beq.n	800789e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007890:	4a05      	ldr	r2, [pc, #20]	@ (80078a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	4618      	mov	r0, r3
 800789a:	f000 f812 	bl	80078c2 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800789e:	bf00      	nop
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	46022000 	.word	0x46022000

080078ac <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	4603      	mov	r3, r0
 80078ca:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e08d      	b.n	8007a06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fa f9f0 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2224      	movs	r2, #36	@ 0x24
 8007908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0201 	bic.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007928:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007938:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d107      	bne.n	8007952 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800794e:	609a      	str	r2, [r3, #8]
 8007950:	e006      	b.n	8007960 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800795e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b02      	cmp	r3, #2
 8007966:	d108      	bne.n	800797a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007976:	605a      	str	r2, [r3, #4]
 8007978:	e007      	b.n	800798a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007988:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6812      	ldr	r2, [r2, #0]
 8007994:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800799c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691a      	ldr	r2, [r3, #16]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	69d9      	ldr	r1, [r3, #28]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1a      	ldr	r2, [r3, #32]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	607a      	str	r2, [r7, #4]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	817b      	strh	r3, [r7, #10]
 8007a20:	4613      	mov	r3, r2
 8007a22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	f040 80da 	bne.w	8007be6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_I2C_Master_Transmit+0x30>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e0d3      	b.n	8007be8 <HAL_I2C_Master_Transmit+0x1d8>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a48:	f7fb f8e2 	bl	8002c10 <HAL_GetTick>
 8007a4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	2319      	movs	r3, #25
 8007a54:	2201      	movs	r2, #1
 8007a56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 fe7d 	bl	800875a <I2C_WaitOnFlagUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e0be      	b.n	8007be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2221      	movs	r2, #33	@ 0x21
 8007a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2210      	movs	r2, #16
 8007a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	893a      	ldrh	r2, [r7, #8]
 8007a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	2bff      	cmp	r3, #255	@ 0xff
 8007a9a:	d90e      	bls.n	8007aba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	22ff      	movs	r2, #255	@ 0xff
 8007aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	8979      	ldrh	r1, [r7, #10]
 8007aaa:	4b51      	ldr	r3, [pc, #324]	@ (8007bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f001 f814 	bl	8008ae0 <I2C_TransferConfig>
 8007ab8:	e06c      	b.n	8007b94 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	8979      	ldrh	r1, [r7, #10]
 8007acc:	4b48      	ldr	r3, [pc, #288]	@ (8007bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f001 f803 	bl	8008ae0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007ada:	e05b      	b.n	8007b94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	6a39      	ldr	r1, [r7, #32]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fe93 	bl	800880c <I2C_WaitOnTXISFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e07b      	b.n	8007be8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d034      	beq.n	8007b94 <HAL_I2C_Master_Transmit+0x184>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d130      	bne.n	8007b94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2180      	movs	r1, #128	@ 0x80
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 fe0c 	bl	800875a <I2C_WaitOnFlagUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e04d      	b.n	8007be8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2bff      	cmp	r3, #255	@ 0xff
 8007b54:	d90e      	bls.n	8007b74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	22ff      	movs	r2, #255	@ 0xff
 8007b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	8979      	ldrh	r1, [r7, #10]
 8007b64:	2300      	movs	r3, #0
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 ffb7 	bl	8008ae0 <I2C_TransferConfig>
 8007b72:	e00f      	b.n	8007b94 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	8979      	ldrh	r1, [r7, #10]
 8007b86:	2300      	movs	r3, #0
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 ffa6 	bl	8008ae0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d19e      	bne.n	8007adc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	6a39      	ldr	r1, [r7, #32]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fe79 	bl	800889a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e01a      	b.n	8007be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6859      	ldr	r1, [r3, #4]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <HAL_I2C_Master_Transmit+0x1e4>)
 8007bc6:	400b      	ands	r3, r1
 8007bc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e000      	b.n	8007be8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007be6:	2302      	movs	r3, #2
  }
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	80002000 	.word	0x80002000
 8007bf4:	fe00e800 	.word	0xfe00e800

08007bf8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	68f9      	ldr	r1, [r7, #12]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	4798      	blx	r3
  }
}
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00f      	beq.n	8007c6e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c5c:	f043 0201 	orr.w	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c6c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00f      	beq.n	8007c98 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c86:	f043 0208 	orr.w	r2, r3, #8
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c96:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00f      	beq.n	8007cc2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00a      	beq.n	8007cc2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb0:	f043 0202 	orr.w	r2, r3, #2
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cc0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f003 030b 	and.w	r3, r3, #11
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007cd2:	68f9      	ldr	r1, [r7, #12]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fbe7 	bl	80084a8 <I2C_ITError>
  }
}
 8007cda:	bf00      	nop
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70fb      	strb	r3, [r7, #3]
 8007d16:	4613      	mov	r3, r2
 8007d18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b086      	sub	sp, #24
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <I2C_Slave_ISR_IT+0x24>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e0e2      	b.n	8007f4c <I2C_Slave_ISR_IT+0x1ea>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d009      	beq.n	8007dac <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d004      	beq.n	8007dac <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007da2:	6939      	ldr	r1, [r7, #16]
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f9b5 	bl	8008114 <I2C_ITSlaveCplt>
 8007daa:	e0ca      	b.n	8007f42 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f003 0310 	and.w	r3, r3, #16
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d04b      	beq.n	8007e4e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d046      	beq.n	8007e4e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d128      	bne.n	8007e1c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b28      	cmp	r3, #40	@ 0x28
 8007dd4:	d108      	bne.n	8007de8 <I2C_Slave_ISR_IT+0x86>
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ddc:	d104      	bne.n	8007de8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007dde:	6939      	ldr	r1, [r7, #16]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 fb0d 	bl	8008400 <I2C_ITListenCplt>
 8007de6:	e031      	b.n	8007e4c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b29      	cmp	r3, #41	@ 0x29
 8007df2:	d10e      	bne.n	8007e12 <I2C_Slave_ISR_IT+0xb0>
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007dfa:	d00a      	beq.n	8007e12 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2210      	movs	r2, #16
 8007e02:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 fc66 	bl	80086d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 f926 	bl	800805c <I2C_ITSlaveSeqCplt>
 8007e10:	e01c      	b.n	8007e4c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2210      	movs	r2, #16
 8007e18:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007e1a:	e08f      	b.n	8007f3c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2210      	movs	r2, #16
 8007e22:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e28:	f043 0204 	orr.w	r2, r3, #4
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <I2C_Slave_ISR_IT+0xdc>
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e3c:	d17e      	bne.n	8007f3c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e42:	4619      	mov	r1, r3
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fb2f 	bl	80084a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007e4a:	e077      	b.n	8007f3c <I2C_Slave_ISR_IT+0x1da>
 8007e4c:	e076      	b.n	8007f3c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d02f      	beq.n	8007eb8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d02a      	beq.n	8007eb8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d018      	beq.n	8007e9e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3b01      	subs	r3, #1
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d14b      	bne.n	8007f40 <I2C_Slave_ISR_IT+0x1de>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007eae:	d047      	beq.n	8007f40 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f8d3 	bl	800805c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007eb6:	e043      	b.n	8007f40 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f003 0308 	and.w	r3, r3, #8
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d009      	beq.n	8007ed6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007ecc:	6939      	ldr	r1, [r7, #16]
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f840 	bl	8007f54 <I2C_ITAddrCplt>
 8007ed4:	e035      	b.n	8007f42 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d030      	beq.n	8007f42 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d02b      	beq.n	8007f42 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d018      	beq.n	8007f26 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007f24:	e00d      	b.n	8007f42 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f2c:	d002      	beq.n	8007f34 <I2C_Slave_ISR_IT+0x1d2>
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d106      	bne.n	8007f42 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f891 	bl	800805c <I2C_ITSlaveSeqCplt>
 8007f3a:	e002      	b.n	8007f42 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007f3c:	bf00      	nop
 8007f3e:	e000      	b.n	8007f42 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007f40:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f6a:	2b28      	cmp	r3, #40	@ 0x28
 8007f6c:	d16a      	bne.n	8008044 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	0c1b      	lsrs	r3, r3, #16
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007f8c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f9a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007fa8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d138      	bne.n	8008024 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007fb2:	897b      	ldrh	r3, [r7, #10]
 8007fb4:	09db      	lsrs	r3, r3, #7
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	89bb      	ldrh	r3, [r7, #12]
 8007fba:	4053      	eors	r3, r2
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f003 0306 	and.w	r3, r3, #6
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d11c      	bne.n	8008000 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007fc6:	897b      	ldrh	r3, [r7, #10]
 8007fc8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d13b      	bne.n	8008054 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007ff2:	89ba      	ldrh	r2, [r7, #12]
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff fe86 	bl	8007d0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ffe:	e029      	b.n	8008054 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008000:	893b      	ldrh	r3, [r7, #8]
 8008002:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008004:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fd9b 	bl	8008b44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008016:	89ba      	ldrh	r2, [r7, #12]
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff fe74 	bl	8007d0a <HAL_I2C_AddrCallback>
}
 8008022:	e017      	b.n	8008054 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008024:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fd8b 	bl	8008b44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008036:	89ba      	ldrh	r2, [r7, #12]
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff fe64 	bl	8007d0a <HAL_I2C_AddrCallback>
}
 8008042:	e007      	b.n	8008054 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2208      	movs	r2, #8
 800804a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008054:	bf00      	nop
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d008      	beq.n	8008090 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e00c      	b.n	80080aa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d007      	beq.n	80080aa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080a8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b29      	cmp	r3, #41	@ 0x29
 80080b4:	d112      	bne.n	80080dc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2228      	movs	r2, #40	@ 0x28
 80080ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2221      	movs	r2, #33	@ 0x21
 80080c2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80080c4:	2101      	movs	r1, #1
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fd3c 	bl	8008b44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff fe04 	bl	8007ce2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80080da:	e017      	b.n	800810c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080e6:	d111      	bne.n	800810c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2228      	movs	r2, #40	@ 0x28
 80080ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2222      	movs	r2, #34	@ 0x22
 80080f4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80080f6:	2102      	movs	r1, #2
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fd23 	bl	8008b44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff fdf5 	bl	8007cf6 <HAL_I2C_SlaveRxCpltCallback>
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008114:	b590      	push	{r4, r7, lr}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008136:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2220      	movs	r2, #32
 800813e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008140:	7afb      	ldrb	r3, [r7, #11]
 8008142:	2b21      	cmp	r3, #33	@ 0x21
 8008144:	d002      	beq.n	800814c <I2C_ITSlaveCplt+0x38>
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	2b29      	cmp	r3, #41	@ 0x29
 800814a:	d108      	bne.n	800815e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800814c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fcf7 	bl	8008b44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2221      	movs	r2, #33	@ 0x21
 800815a:	631a      	str	r2, [r3, #48]	@ 0x30
 800815c:	e019      	b.n	8008192 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800815e:	7afb      	ldrb	r3, [r7, #11]
 8008160:	2b22      	cmp	r3, #34	@ 0x22
 8008162:	d002      	beq.n	800816a <I2C_ITSlaveCplt+0x56>
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	2b2a      	cmp	r3, #42	@ 0x2a
 8008168:	d108      	bne.n	800817c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800816a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fce8 	bl	8008b44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2222      	movs	r2, #34	@ 0x22
 8008178:	631a      	str	r2, [r3, #48]	@ 0x30
 800817a:	e00a      	b.n	8008192 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	2b28      	cmp	r3, #40	@ 0x28
 8008180:	d107      	bne.n	8008192 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008182:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fcdc 	bl	8008b44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081a0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6859      	ldr	r1, [r3, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	4b92      	ldr	r3, [pc, #584]	@ (80083f8 <I2C_ITSlaveCplt+0x2e4>)
 80081ae:	400b      	ands	r3, r1
 80081b0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fa8f 	bl	80086d6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d01c      	beq.n	80081fc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80081d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d031      	beq.n	800823e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081e2:	b29c      	uxth	r4, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fc2f 	bl	8006a4c <HAL_DMAEx_GetFifoLevel>
 80081ee:	4603      	mov	r3, r0
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	4423      	add	r3, r4
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80081fa:	e020      	b.n	800823e <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d01b      	beq.n	800823e <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008214:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00f      	beq.n	800823e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008226:	b29c      	uxth	r4, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fc0d 	bl	8006a4c <HAL_DMAEx_GetFifoLevel>
 8008232:	4603      	mov	r3, r0
 8008234:	b29b      	uxth	r3, r3
 8008236:	4423      	add	r3, r4
 8008238:	b29a      	uxth	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d020      	beq.n	800828a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f023 0304 	bic.w	r3, r3, #4
 800824e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00c      	beq.n	800828a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008274:	3b01      	subs	r3, #1
 8008276:	b29a      	uxth	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	b29a      	uxth	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008298:	f043 0204 	orr.w	r2, r3, #4
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f003 0310 	and.w	r3, r3, #16
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d049      	beq.n	800833e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d044      	beq.n	800833e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d128      	bne.n	8008310 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b28      	cmp	r3, #40	@ 0x28
 80082c8:	d108      	bne.n	80082dc <I2C_ITSlaveCplt+0x1c8>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082d0:	d104      	bne.n	80082dc <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80082d2:	6979      	ldr	r1, [r7, #20]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f893 	bl	8008400 <I2C_ITListenCplt>
 80082da:	e030      	b.n	800833e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b29      	cmp	r3, #41	@ 0x29
 80082e6:	d10e      	bne.n	8008306 <I2C_ITSlaveCplt+0x1f2>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80082ee:	d00a      	beq.n	8008306 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2210      	movs	r2, #16
 80082f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f9ec 	bl	80086d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff feac 	bl	800805c <I2C_ITSlaveSeqCplt>
 8008304:	e01b      	b.n	800833e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2210      	movs	r2, #16
 800830c:	61da      	str	r2, [r3, #28]
 800830e:	e016      	b.n	800833e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2210      	movs	r2, #16
 8008316:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800831c:	f043 0204 	orr.w	r2, r3, #4
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <I2C_ITSlaveCplt+0x21e>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008330:	d105      	bne.n	800833e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f8b5 	bl	80084a8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008350:	2b00      	cmp	r3, #0
 8008352:	d010      	beq.n	8008376 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f8a4 	bl	80084a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b28      	cmp	r3, #40	@ 0x28
 800836a:	d141      	bne.n	80083f0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800836c:	6979      	ldr	r1, [r7, #20]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f846 	bl	8008400 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008374:	e03c      	b.n	80083f0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800837e:	d014      	beq.n	80083aa <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff fe6b 	bl	800805c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a1c      	ldr	r2, [pc, #112]	@ (80083fc <I2C_ITSlaveCplt+0x2e8>)
 800838a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2220      	movs	r2, #32
 8008390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fcbf 	bl	8007d26 <HAL_I2C_ListenCpltCallback>
}
 80083a8:	e022      	b.n	80083f0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b22      	cmp	r3, #34	@ 0x22
 80083b4:	d10e      	bne.n	80083d4 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff fc92 	bl	8007cf6 <HAL_I2C_SlaveRxCpltCallback>
}
 80083d2:	e00d      	b.n	80083f0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff fc79 	bl	8007ce2 <HAL_I2C_SlaveTxCpltCallback>
}
 80083f0:	bf00      	nop
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd90      	pop	{r4, r7, pc}
 80083f8:	fe00e800 	.word	0xfe00e800
 80083fc:	ffff0000 	.word	0xffff0000

08008400 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a25      	ldr	r2, [pc, #148]	@ (80084a4 <I2C_ITListenCplt+0xa4>)
 800840e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2220      	movs	r2, #32
 800841a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b00      	cmp	r3, #0
 8008434:	d022      	beq.n	800847c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008452:	2b00      	cmp	r3, #0
 8008454:	d012      	beq.n	800847c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800845a:	3b01      	subs	r3, #1
 800845c:	b29a      	uxth	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008466:	b29b      	uxth	r3, r3
 8008468:	3b01      	subs	r3, #1
 800846a:	b29a      	uxth	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008474:	f043 0204 	orr.w	r2, r3, #4
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800847c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fb5f 	bl	8008b44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2210      	movs	r2, #16
 800848c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fc45 	bl	8007d26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	ffff0000 	.word	0xffff0000

080084a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a6d      	ldr	r2, [pc, #436]	@ (800867c <I2C_ITError+0x1d4>)
 80084c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	2b28      	cmp	r3, #40	@ 0x28
 80084de:	d005      	beq.n	80084ec <I2C_ITError+0x44>
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	2b29      	cmp	r3, #41	@ 0x29
 80084e4:	d002      	beq.n	80084ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ea:	d10b      	bne.n	8008504 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80084ec:	2103      	movs	r1, #3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fb28 	bl	8008b44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2228      	movs	r2, #40	@ 0x28
 80084f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a60      	ldr	r2, [pc, #384]	@ (8008680 <I2C_ITError+0x1d8>)
 8008500:	635a      	str	r2, [r3, #52]	@ 0x34
 8008502:	e030      	b.n	8008566 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008504:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fb1b 	bl	8008b44 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f8e1 	bl	80086d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b60      	cmp	r3, #96	@ 0x60
 800851e:	d01f      	beq.n	8008560 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b20      	cmp	r3, #32
 8008534:	d114      	bne.n	8008560 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	2b10      	cmp	r3, #16
 8008542:	d109      	bne.n	8008558 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2210      	movs	r2, #16
 800854a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008550:	f043 0204 	orr.w	r2, r3, #4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2220      	movs	r2, #32
 800855e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800856a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008570:	2b00      	cmp	r3, #0
 8008572:	d039      	beq.n	80085e8 <I2C_ITError+0x140>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b11      	cmp	r3, #17
 8008578:	d002      	beq.n	8008580 <I2C_ITError+0xd8>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b21      	cmp	r3, #33	@ 0x21
 800857e:	d133      	bne.n	80085e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800858a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800858e:	d107      	bne.n	80085a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800859e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fd faa5 	bl	8005af4 <HAL_DMA_GetState>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d017      	beq.n	80085e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b4:	4a33      	ldr	r2, [pc, #204]	@ (8008684 <I2C_ITError+0x1dc>)
 80085b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fd f90b 	bl	80057e0 <HAL_DMA_Abort_IT>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d04d      	beq.n	800866c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80085da:	4610      	mov	r0, r2
 80085dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085de:	e045      	b.n	800866c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f851 	bl	8008688 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085e6:	e041      	b.n	800866c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d039      	beq.n	8008664 <I2C_ITError+0x1bc>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b12      	cmp	r3, #18
 80085f4:	d002      	beq.n	80085fc <I2C_ITError+0x154>
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2b22      	cmp	r3, #34	@ 0x22
 80085fa:	d133      	bne.n	8008664 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800860a:	d107      	bne.n	800861c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800861a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008620:	4618      	mov	r0, r3
 8008622:	f7fd fa67 	bl	8005af4 <HAL_DMA_GetState>
 8008626:	4603      	mov	r3, r0
 8008628:	2b01      	cmp	r3, #1
 800862a:	d017      	beq.n	800865c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008630:	4a14      	ldr	r2, [pc, #80]	@ (8008684 <I2C_ITError+0x1dc>)
 8008632:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008640:	4618      	mov	r0, r3
 8008642:	f7fd f8cd 	bl	80057e0 <HAL_DMA_Abort_IT>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d011      	beq.n	8008670 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008656:	4610      	mov	r0, r2
 8008658:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800865a:	e009      	b.n	8008670 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f813 	bl	8008688 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008662:	e005      	b.n	8008670 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f80f 	bl	8008688 <I2C_TreatErrorCallback>
  }
}
 800866a:	e002      	b.n	8008672 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800866c:	bf00      	nop
 800866e:	e000      	b.n	8008672 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008670:	bf00      	nop
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	ffff0000 	.word	0xffff0000
 8008680:	08007d63 	.word	0x08007d63
 8008684:	0800871f 	.word	0x0800871f

08008688 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b60      	cmp	r3, #96	@ 0x60
 800869a:	d10e      	bne.n	80086ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff fb4b 	bl	8007d4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80086b8:	e009      	b.n	80086ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff fb36 	bl	8007d3a <HAL_I2C_ErrorCallback>
}
 80086ce:	bf00      	nop
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d103      	bne.n	80086f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2200      	movs	r2, #0
 80086f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d007      	beq.n	8008712 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	699a      	ldr	r2, [r3, #24]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f042 0201 	orr.w	r2, r2, #1
 8008710:	619a      	str	r2, [r3, #24]
  }
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800872a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008738:	2200      	movs	r2, #0
 800873a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008740:	2b00      	cmp	r3, #0
 8008742:	d003      	beq.n	800874c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008748:	2200      	movs	r2, #0
 800874a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f7ff ff9b 	bl	8008688 <I2C_TreatErrorCallback>
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	60f8      	str	r0, [r7, #12]
 8008762:	60b9      	str	r1, [r7, #8]
 8008764:	603b      	str	r3, [r7, #0]
 8008766:	4613      	mov	r3, r2
 8008768:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800876a:	e03b      	b.n	80087e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 f8d5 	bl	8008920 <I2C_IsErrorOccurred>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e041      	b.n	8008804 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008786:	d02d      	beq.n	80087e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008788:	f7fa fa42 	bl	8002c10 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	429a      	cmp	r2, r3
 8008796:	d302      	bcc.n	800879e <I2C_WaitOnFlagUntilTimeout+0x44>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d122      	bne.n	80087e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699a      	ldr	r2, [r3, #24]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4013      	ands	r3, r2
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	bf0c      	ite	eq
 80087ae:	2301      	moveq	r3, #1
 80087b0:	2300      	movne	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	461a      	mov	r2, r3
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d113      	bne.n	80087e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c0:	f043 0220 	orr.w	r2, r3, #32
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e00f      	b.n	8008804 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699a      	ldr	r2, [r3, #24]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	4013      	ands	r3, r2
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	bf0c      	ite	eq
 80087f4:	2301      	moveq	r3, #1
 80087f6:	2300      	movne	r3, #0
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	461a      	mov	r2, r3
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d0b4      	beq.n	800876c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008818:	e033      	b.n	8008882 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 f87e 	bl	8008920 <I2C_IsErrorOccurred>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e031      	b.n	8008892 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008834:	d025      	beq.n	8008882 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008836:	f7fa f9eb 	bl	8002c10 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	429a      	cmp	r2, r3
 8008844:	d302      	bcc.n	800884c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11a      	bne.n	8008882 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b02      	cmp	r3, #2
 8008858:	d013      	beq.n	8008882 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885e:	f043 0220 	orr.w	r2, r3, #32
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2220      	movs	r2, #32
 800886a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e007      	b.n	8008892 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b02      	cmp	r3, #2
 800888e:	d1c4      	bne.n	800881a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088a6:	e02f      	b.n	8008908 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 f837 	bl	8008920 <I2C_IsErrorOccurred>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e02d      	b.n	8008918 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088bc:	f7fa f9a8 	bl	8002c10 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d302      	bcc.n	80088d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d11a      	bne.n	8008908 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b20      	cmp	r3, #32
 80088de:	d013      	beq.n	8008908 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088e4:	f043 0220 	orr.w	r2, r3, #32
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2220      	movs	r2, #32
 80088f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e007      	b.n	8008918 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b20      	cmp	r3, #32
 8008914:	d1c8      	bne.n	80088a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08a      	sub	sp, #40	@ 0x28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	f003 0310 	and.w	r3, r3, #16
 8008948:	2b00      	cmp	r3, #0
 800894a:	d068      	beq.n	8008a1e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2210      	movs	r2, #16
 8008952:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008954:	e049      	b.n	80089ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d045      	beq.n	80089ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800895e:	f7fa f957 	bl	8002c10 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	429a      	cmp	r2, r3
 800896c:	d302      	bcc.n	8008974 <I2C_IsErrorOccurred+0x54>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d13a      	bne.n	80089ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800897e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008986:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008996:	d121      	bne.n	80089dc <I2C_IsErrorOccurred+0xbc>
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800899e:	d01d      	beq.n	80089dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80089a0:	7cfb      	ldrb	r3, [r7, #19]
 80089a2:	2b20      	cmp	r3, #32
 80089a4:	d01a      	beq.n	80089dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80089b6:	f7fa f92b 	bl	8002c10 <HAL_GetTick>
 80089ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089bc:	e00e      	b.n	80089dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80089be:	f7fa f927 	bl	8002c10 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b19      	cmp	r3, #25
 80089ca:	d907      	bls.n	80089dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	f043 0320 	orr.w	r3, r3, #32
 80089d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80089da:	e006      	b.n	80089ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d1e9      	bne.n	80089be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	d003      	beq.n	8008a00 <I2C_IsErrorOccurred+0xe0>
 80089f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0aa      	beq.n	8008956 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d103      	bne.n	8008a10 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	f043 0304 	orr.w	r3, r3, #4
 8008a16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00b      	beq.n	8008a6a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	f043 0308 	orr.w	r3, r3, #8
 8008a58:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008a62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00b      	beq.n	8008a8c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	f043 0302 	orr.w	r3, r3, #2
 8008a7a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01c      	beq.n	8008ace <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f7ff fe1e 	bl	80086d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6859      	ldr	r1, [r3, #4]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <I2C_IsErrorOccurred+0x1bc>)
 8008aa6:	400b      	ands	r3, r1
 8008aa8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008ace:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3728      	adds	r7, #40	@ 0x28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	fe00e800 	.word	0xfe00e800

08008ae0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	607b      	str	r3, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	817b      	strh	r3, [r7, #10]
 8008aee:	4613      	mov	r3, r2
 8008af0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008af2:	897b      	ldrh	r3, [r7, #10]
 8008af4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008af8:	7a7b      	ldrb	r3, [r7, #9]
 8008afa:	041b      	lsls	r3, r3, #16
 8008afc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	0d5b      	lsrs	r3, r3, #21
 8008b1a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008b1e:	4b08      	ldr	r3, [pc, #32]	@ (8008b40 <I2C_TransferConfig+0x60>)
 8008b20:	430b      	orrs	r3, r1
 8008b22:	43db      	mvns	r3, r3
 8008b24:	ea02 0103 	and.w	r1, r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b32:	bf00      	nop
 8008b34:	371c      	adds	r7, #28
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	03ff63ff 	.word	0x03ff63ff

08008b44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008b54:	887b      	ldrh	r3, [r7, #2]
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00f      	beq.n	8008b7e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008b64:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008b72:	2b28      	cmp	r3, #40	@ 0x28
 8008b74:	d003      	beq.n	8008b7e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008b7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008b7e:	887b      	ldrh	r3, [r7, #2]
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00f      	beq.n	8008ba8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008b8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008b9c:	2b28      	cmp	r3, #40	@ 0x28
 8008b9e:	d003      	beq.n	8008ba8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008ba6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008ba8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	da03      	bge.n	8008bb8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008bb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008bb8:	887b      	ldrh	r3, [r7, #2]
 8008bba:	2b10      	cmp	r3, #16
 8008bbc:	d103      	bne.n	8008bc6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008bc4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008bc6:	887b      	ldrh	r3, [r7, #2]
 8008bc8:	2b20      	cmp	r3, #32
 8008bca:	d103      	bne.n	8008bd4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f043 0320 	orr.w	r3, r3, #32
 8008bd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008bd4:	887b      	ldrh	r3, [r7, #2]
 8008bd6:	2b40      	cmp	r3, #64	@ 0x40
 8008bd8:	d103      	bne.n	8008be2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008be0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6819      	ldr	r1, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	43da      	mvns	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	400a      	ands	r2, r1
 8008bf2:	601a      	str	r2, [r3, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b20      	cmp	r3, #32
 8008c14:	d138      	bne.n	8008c88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d101      	bne.n	8008c24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c20:	2302      	movs	r3, #2
 8008c22:	e032      	b.n	8008c8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2224      	movs	r2, #36	@ 0x24
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 0201 	bic.w	r2, r2, #1
 8008c42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6819      	ldr	r1, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0201 	orr.w	r2, r2, #1
 8008c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2220      	movs	r2, #32
 8008c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	e000      	b.n	8008c8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c88:	2302      	movs	r3, #2
  }
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b085      	sub	sp, #20
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b20      	cmp	r3, #32
 8008caa:	d139      	bne.n	8008d20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e033      	b.n	8008d22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2224      	movs	r2, #36	@ 0x24
 8008cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f022 0201 	bic.w	r2, r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008ce8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	021b      	lsls	r3, r3, #8
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f042 0201 	orr.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2220      	movs	r2, #32
 8008d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	e000      	b.n	8008d22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d20:	2302      	movs	r3, #2
  }
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
	...

08008d30 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]
 8008d4c:	e007      	b.n	8008d5e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008d4e:	4b07      	ldr	r3, [pc, #28]	@ (8008d6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f023 0204 	bic.w	r2, r3, #4
 8008d56:	4905      	ldr	r1, [pc, #20]	@ (8008d6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	40030400 	.word	0x40030400

08008d70 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008d74:	4b05      	ldr	r3, [pc, #20]	@ (8008d8c <HAL_ICACHE_Enable+0x1c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a04      	ldr	r2, [pc, #16]	@ (8008d8c <HAL_ICACHE_Enable+0x1c>)
 8008d7a:	f043 0301 	orr.w	r3, r3, #1
 8008d7e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	40030400 	.word	0x40030400

08008d90 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e0bf      	b.n	8008f22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7f9 f882 	bl	8001ec0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008dd2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6999      	ldr	r1, [r3, #24]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008de8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6899      	ldr	r1, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	4b4a      	ldr	r3, [pc, #296]	@ (8008f2c <HAL_LTDC_Init+0x19c>)
 8008e04:	400b      	ands	r3, r1
 8008e06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	041b      	lsls	r3, r3, #16
 8008e0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6899      	ldr	r1, [r3, #8]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	699a      	ldr	r2, [r3, #24]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68d9      	ldr	r1, [r3, #12]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	4b3e      	ldr	r3, [pc, #248]	@ (8008f2c <HAL_LTDC_Init+0x19c>)
 8008e32:	400b      	ands	r3, r1
 8008e34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68d9      	ldr	r1, [r3, #12]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a1a      	ldr	r2, [r3, #32]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6919      	ldr	r1, [r3, #16]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	4b33      	ldr	r3, [pc, #204]	@ (8008f2c <HAL_LTDC_Init+0x19c>)
 8008e60:	400b      	ands	r3, r1
 8008e62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e68:	041b      	lsls	r3, r3, #16
 8008e6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6919      	ldr	r1, [r3, #16]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6959      	ldr	r1, [r3, #20]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	4b27      	ldr	r3, [pc, #156]	@ (8008f2c <HAL_LTDC_Init+0x19c>)
 8008e8e:	400b      	ands	r3, r1
 8008e90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e96:	041b      	lsls	r3, r3, #16
 8008e98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6959      	ldr	r1, [r3, #20]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008eb6:	021b      	lsls	r3, r3, #8
 8008eb8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008ec0:	041b      	lsls	r3, r3, #16
 8008ec2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f042 0206 	orr.w	r2, r2, #6
 8008efe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0201 	orr.w	r2, r2, #1
 8008f0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	f000f800 	.word	0xf000f800

08008f30 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f3e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f46:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d023      	beq.n	8008f9a <HAL_LTDC_IRQHandler+0x6a>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d01e      	beq.n	8008f9a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0204 	bic.w	r2, r2, #4
 8008f6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2204      	movs	r2, #4
 8008f72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f7a:	f043 0201 	orr.w	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2204      	movs	r2, #4
 8008f88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f86f 	bl	8009078 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d023      	beq.n	8008fec <HAL_LTDC_IRQHandler+0xbc>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01e      	beq.n	8008fec <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0202 	bic.w	r2, r2, #2
 8008fbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fcc:	f043 0202 	orr.w	r2, r3, #2
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2204      	movs	r2, #4
 8008fda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f846 	bl	8009078 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d01b      	beq.n	800902e <HAL_LTDC_IRQHandler+0xfe>
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d016      	beq.n	800902e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f022 0201 	bic.w	r2, r2, #1
 800900e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2201      	movs	r2, #1
 8009016:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f82f 	bl	800908c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f003 0308 	and.w	r3, r3, #8
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01b      	beq.n	8009070 <HAL_LTDC_IRQHandler+0x140>
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f003 0308 	and.w	r3, r3, #8
 800903e:	2b00      	cmp	r3, #0
 8009040:	d016      	beq.n	8009070 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 0208 	bic.w	r2, r2, #8
 8009050:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2208      	movs	r2, #8
 8009058:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f818 	bl	80090a0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009070:	bf00      	nop
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80090b4:	b5b0      	push	{r4, r5, r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d101      	bne.n	80090ce <HAL_LTDC_ConfigLayer+0x1a>
 80090ca:	2302      	movs	r3, #2
 80090cc:	e02c      	b.n	8009128 <HAL_LTDC_ConfigLayer+0x74>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2202      	movs	r2, #2
 80090da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2134      	movs	r1, #52	@ 0x34
 80090e4:	fb01 f303 	mul.w	r3, r1, r3
 80090e8:	4413      	add	r3, r2
 80090ea:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	4614      	mov	r4, r2
 80090f2:	461d      	mov	r5, r3
 80090f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 f811 	bl	8009130 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2201      	movs	r2, #1
 8009114:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bdb0      	pop	{r4, r5, r7, pc}

08009130 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009130:	b480      	push	{r7}
 8009132:	b089      	sub	sp, #36	@ 0x24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	0c1b      	lsrs	r3, r3, #16
 8009148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800914c:	4413      	add	r3, r2
 800914e:	041b      	lsls	r3, r3, #16
 8009150:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	01db      	lsls	r3, r3, #7
 800915c:	4413      	add	r3, r2
 800915e:	3384      	adds	r3, #132	@ 0x84
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	6812      	ldr	r2, [r2, #0]
 8009166:	4611      	mov	r1, r2
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	01d2      	lsls	r2, r2, #7
 800916c:	440a      	add	r2, r1
 800916e:	3284      	adds	r2, #132	@ 0x84
 8009170:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009174:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	0c1b      	lsrs	r3, r3, #16
 8009182:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009186:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009188:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4619      	mov	r1, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	01db      	lsls	r3, r3, #7
 8009194:	440b      	add	r3, r1
 8009196:	3384      	adds	r3, #132	@ 0x84
 8009198:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800919e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091ae:	4413      	add	r3, r2
 80091b0:	041b      	lsls	r3, r3, #16
 80091b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	01db      	lsls	r3, r3, #7
 80091be:	4413      	add	r3, r2
 80091c0:	3384      	adds	r3, #132	@ 0x84
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	4611      	mov	r1, r2
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	01d2      	lsls	r2, r2, #7
 80091ce:	440a      	add	r2, r1
 80091d0:	3284      	adds	r2, #132	@ 0x84
 80091d2:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80091d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	689a      	ldr	r2, [r3, #8]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091e6:	4413      	add	r3, r2
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4619      	mov	r1, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	01db      	lsls	r3, r3, #7
 80091f4:	440b      	add	r3, r1
 80091f6:	3384      	adds	r3, #132	@ 0x84
 80091f8:	4619      	mov	r1, r3
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	461a      	mov	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	01db      	lsls	r3, r3, #7
 800920a:	4413      	add	r3, r2
 800920c:	3384      	adds	r3, #132	@ 0x84
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	6812      	ldr	r2, [r2, #0]
 8009214:	4611      	mov	r1, r2
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	01d2      	lsls	r2, r2, #7
 800921a:	440a      	add	r2, r1
 800921c:	3284      	adds	r2, #132	@ 0x84
 800921e:	f023 0307 	bic.w	r3, r3, #7
 8009222:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	01db      	lsls	r3, r3, #7
 800922e:	4413      	add	r3, r2
 8009230:	3384      	adds	r3, #132	@ 0x84
 8009232:	461a      	mov	r2, r3
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009240:	021b      	lsls	r3, r3, #8
 8009242:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800924a:	041b      	lsls	r3, r3, #16
 800924c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	061b      	lsls	r3, r3, #24
 8009254:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800925c:	461a      	mov	r2, r3
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	431a      	orrs	r2, r3
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	431a      	orrs	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4619      	mov	r1, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	01db      	lsls	r3, r3, #7
 8009270:	440b      	add	r3, r1
 8009272:	3384      	adds	r3, #132	@ 0x84
 8009274:	4619      	mov	r1, r3
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	4313      	orrs	r3, r2
 800927a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	01db      	lsls	r3, r3, #7
 8009286:	4413      	add	r3, r2
 8009288:	3384      	adds	r3, #132	@ 0x84
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	6812      	ldr	r2, [r2, #0]
 8009290:	4611      	mov	r1, r2
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	01d2      	lsls	r2, r2, #7
 8009296:	440a      	add	r2, r1
 8009298:	3284      	adds	r2, #132	@ 0x84
 800929a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800929e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	01db      	lsls	r3, r3, #7
 80092aa:	4413      	add	r3, r2
 80092ac:	3384      	adds	r3, #132	@ 0x84
 80092ae:	461a      	mov	r2, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	01db      	lsls	r3, r3, #7
 80092c0:	4413      	add	r3, r2
 80092c2:	3384      	adds	r3, #132	@ 0x84
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	6812      	ldr	r2, [r2, #0]
 80092ca:	4611      	mov	r1, r2
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	01d2      	lsls	r2, r2, #7
 80092d0:	440a      	add	r2, r1
 80092d2:	3284      	adds	r2, #132	@ 0x84
 80092d4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80092d8:	f023 0307 	bic.w	r3, r3, #7
 80092dc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	69da      	ldr	r2, [r3, #28]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	6809      	ldr	r1, [r1, #0]
 80092ea:	4608      	mov	r0, r1
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	01c9      	lsls	r1, r1, #7
 80092f0:	4401      	add	r1, r0
 80092f2:	3184      	adds	r1, #132	@ 0x84
 80092f4:	4313      	orrs	r3, r2
 80092f6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	461a      	mov	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	01db      	lsls	r3, r3, #7
 8009302:	4413      	add	r3, r2
 8009304:	3384      	adds	r3, #132	@ 0x84
 8009306:	461a      	mov	r2, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d102      	bne.n	800931c <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8009316:	2304      	movs	r3, #4
 8009318:	61fb      	str	r3, [r7, #28]
 800931a:	e01b      	b.n	8009354 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d102      	bne.n	800932a <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8009324:	2303      	movs	r3, #3
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	e014      	b.n	8009354 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	2b04      	cmp	r3, #4
 8009330:	d00b      	beq.n	800934a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009336:	2b02      	cmp	r3, #2
 8009338:	d007      	beq.n	800934a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800933e:	2b03      	cmp	r3, #3
 8009340:	d003      	beq.n	800934a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009346:	2b07      	cmp	r3, #7
 8009348:	d102      	bne.n	8009350 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 800934a:	2302      	movs	r3, #2
 800934c:	61fb      	str	r3, [r7, #28]
 800934e:	e001      	b.n	8009354 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8009350:	2301      	movs	r3, #1
 8009352:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	01db      	lsls	r3, r3, #7
 800935e:	4413      	add	r3, r2
 8009360:	3384      	adds	r3, #132	@ 0x84
 8009362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	6812      	ldr	r2, [r2, #0]
 8009368:	4611      	mov	r1, r2
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	01d2      	lsls	r2, r2, #7
 800936e:	440a      	add	r2, r1
 8009370:	3284      	adds	r2, #132	@ 0x84
 8009372:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009376:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	fb02 f303 	mul.w	r3, r2, r3
 8009382:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	6859      	ldr	r1, [r3, #4]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	1acb      	subs	r3, r1, r3
 800938e:	69f9      	ldr	r1, [r7, #28]
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009396:	68f9      	ldr	r1, [r7, #12]
 8009398:	6809      	ldr	r1, [r1, #0]
 800939a:	4608      	mov	r0, r1
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	01c9      	lsls	r1, r1, #7
 80093a0:	4401      	add	r1, r0
 80093a2:	3184      	adds	r1, #132	@ 0x84
 80093a4:	4313      	orrs	r3, r2
 80093a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	01db      	lsls	r3, r3, #7
 80093b2:	4413      	add	r3, r2
 80093b4:	3384      	adds	r3, #132	@ 0x84
 80093b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	4611      	mov	r1, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	01d2      	lsls	r2, r2, #7
 80093c2:	440a      	add	r2, r1
 80093c4:	3284      	adds	r2, #132	@ 0x84
 80093c6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80093ca:	f023 0307 	bic.w	r3, r3, #7
 80093ce:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	01db      	lsls	r3, r3, #7
 80093da:	4413      	add	r3, r2
 80093dc:	3384      	adds	r3, #132	@ 0x84
 80093de:	461a      	mov	r2, r3
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	01db      	lsls	r3, r3, #7
 80093f0:	4413      	add	r3, r2
 80093f2:	3384      	adds	r3, #132	@ 0x84
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	6812      	ldr	r2, [r2, #0]
 80093fa:	4611      	mov	r1, r2
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	01d2      	lsls	r2, r2, #7
 8009400:	440a      	add	r2, r1
 8009402:	3284      	adds	r2, #132	@ 0x84
 8009404:	f043 0301 	orr.w	r3, r3, #1
 8009408:	6013      	str	r3, [r2, #0]
}
 800940a:	bf00      	nop
 800940c:	3724      	adds	r7, #36	@ 0x24
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b086      	sub	sp, #24
 800941a:	af02      	add	r7, sp, #8
 800941c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e0fe      	b.n	8009626 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d106      	bne.n	8009442 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7f8 ffd9 	bl	80023f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2203      	movs	r2, #3
 8009446:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4618      	mov	r0, r3
 8009450:	f008 f895 	bl	801157e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6818      	ldr	r0, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	7c1a      	ldrb	r2, [r3, #16]
 800945c:	f88d 2000 	strb.w	r2, [sp]
 8009460:	3304      	adds	r3, #4
 8009462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009464:	f008 f85c 	bl	8011520 <USB_CoreInit>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d005      	beq.n	800947a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2202      	movs	r2, #2
 8009472:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e0d5      	b.n	8009626 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2100      	movs	r1, #0
 8009480:	4618      	mov	r0, r3
 8009482:	f008 f88d 	bl	80115a0 <USB_SetCurrentMode>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d005      	beq.n	8009498 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e0c6      	b.n	8009626 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
 800949c:	e04a      	b.n	8009534 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800949e:	7bfa      	ldrb	r2, [r7, #15]
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	440b      	add	r3, r1
 80094ac:	3315      	adds	r3, #21
 80094ae:	2201      	movs	r2, #1
 80094b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80094b2:	7bfa      	ldrb	r2, [r7, #15]
 80094b4:	6879      	ldr	r1, [r7, #4]
 80094b6:	4613      	mov	r3, r2
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	440b      	add	r3, r1
 80094c0:	3314      	adds	r3, #20
 80094c2:	7bfa      	ldrb	r2, [r7, #15]
 80094c4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80094c6:	7bfa      	ldrb	r2, [r7, #15]
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	b298      	uxth	r0, r3
 80094cc:	6879      	ldr	r1, [r7, #4]
 80094ce:	4613      	mov	r3, r2
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	440b      	add	r3, r1
 80094d8:	332e      	adds	r3, #46	@ 0x2e
 80094da:	4602      	mov	r2, r0
 80094dc:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80094de:	7bfa      	ldrb	r2, [r7, #15]
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	4613      	mov	r3, r2
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	440b      	add	r3, r1
 80094ec:	3318      	adds	r3, #24
 80094ee:	2200      	movs	r2, #0
 80094f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80094f2:	7bfa      	ldrb	r2, [r7, #15]
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	4613      	mov	r3, r2
 80094f8:	00db      	lsls	r3, r3, #3
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	440b      	add	r3, r1
 8009500:	331c      	adds	r3, #28
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009506:	7bfa      	ldrb	r2, [r7, #15]
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4613      	mov	r3, r2
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	440b      	add	r3, r1
 8009514:	3320      	adds	r3, #32
 8009516:	2200      	movs	r2, #0
 8009518:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800951a:	7bfa      	ldrb	r2, [r7, #15]
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	3324      	adds	r3, #36	@ 0x24
 800952a:	2200      	movs	r2, #0
 800952c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	3301      	adds	r3, #1
 8009532:	73fb      	strb	r3, [r7, #15]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	791b      	ldrb	r3, [r3, #4]
 8009538:	7bfa      	ldrb	r2, [r7, #15]
 800953a:	429a      	cmp	r2, r3
 800953c:	d3af      	bcc.n	800949e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
 8009542:	e044      	b.n	80095ce <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009544:	7bfa      	ldrb	r2, [r7, #15]
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4613      	mov	r3, r2
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	440b      	add	r3, r1
 8009552:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800955a:	7bfa      	ldrb	r2, [r7, #15]
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800956c:	7bfa      	ldrb	r2, [r7, #15]
 800956e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009570:	7bfa      	ldrb	r2, [r7, #15]
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	4613      	mov	r3, r2
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009582:	2200      	movs	r2, #0
 8009584:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009586:	7bfa      	ldrb	r2, [r7, #15]
 8009588:	6879      	ldr	r1, [r7, #4]
 800958a:	4613      	mov	r3, r2
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	4413      	add	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	440b      	add	r3, r1
 8009594:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800959c:	7bfa      	ldrb	r2, [r7, #15]
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	4613      	mov	r3, r2
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	440b      	add	r3, r1
 80095aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80095b2:	7bfa      	ldrb	r2, [r7, #15]
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	00db      	lsls	r3, r3, #3
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	3301      	adds	r3, #1
 80095cc:	73fb      	strb	r3, [r7, #15]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	791b      	ldrb	r3, [r3, #4]
 80095d2:	7bfa      	ldrb	r2, [r7, #15]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d3b5      	bcc.n	8009544 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	7c1a      	ldrb	r2, [r3, #16]
 80095e0:	f88d 2000 	strb.w	r2, [sp]
 80095e4:	3304      	adds	r3, #4
 80095e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095e8:	f008 f826 	bl	8011638 <USB_DevInit>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d005      	beq.n	80095fe <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e013      	b.n	8009626 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	7b1b      	ldrb	r3, [r3, #12]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d102      	bne.n	800961a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f80a 	bl	800962e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4618      	mov	r0, r3
 8009620:	f008 f9f3 	bl	8011a0a <USB_DevDisconnect>

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800962e:	b480      	push	{r7}
 8009630:	b085      	sub	sp, #20
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800965c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009660:	f043 0303 	orr.w	r3, r3, #3
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
	...

08009678 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800967c:	4b05      	ldr	r3, [pc, #20]	@ (8009694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800967e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009680:	4a04      	ldr	r2, [pc, #16]	@ (8009694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009682:	f043 0301 	orr.w	r3, r3, #1
 8009686:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8009688:	bf00      	nop
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	46020800 	.word	0x46020800

08009698 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80096a0:	4b39      	ldr	r3, [pc, #228]	@ (8009788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80096a8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d10b      	bne.n	80096ca <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096b8:	d905      	bls.n	80096c6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80096ba:	4b33      	ldr	r3, [pc, #204]	@ (8009788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	4a32      	ldr	r2, [pc, #200]	@ (8009788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096c4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	e057      	b.n	800977a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096d0:	d90a      	bls.n	80096e8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80096d2:	4b2d      	ldr	r3, [pc, #180]	@ (8009788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4313      	orrs	r3, r2
 80096de:	4a2a      	ldr	r2, [pc, #168]	@ (8009788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096e4:	60d3      	str	r3, [r2, #12]
 80096e6:	e007      	b.n	80096f8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80096e8:	4b27      	ldr	r3, [pc, #156]	@ (8009788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80096f0:	4925      	ldr	r1, [pc, #148]	@ (8009788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80096f8:	4b24      	ldr	r3, [pc, #144]	@ (800978c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a24      	ldr	r2, [pc, #144]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80096fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009702:	099b      	lsrs	r3, r3, #6
 8009704:	2232      	movs	r2, #50	@ 0x32
 8009706:	fb02 f303 	mul.w	r3, r2, r3
 800970a:	4a21      	ldr	r2, [pc, #132]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800970c:	fba2 2303 	umull	r2, r3, r2, r3
 8009710:	099b      	lsrs	r3, r3, #6
 8009712:	3301      	adds	r3, #1
 8009714:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009716:	e002      	b.n	800971e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3b01      	subs	r3, #1
 800971c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800971e:	4b1a      	ldr	r3, [pc, #104]	@ (8009788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d102      	bne.n	8009730 <HAL_PWREx_ControlVoltageScaling+0x98>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1f3      	bne.n	8009718 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d01b      	beq.n	800976e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009736:	4b15      	ldr	r3, [pc, #84]	@ (800978c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a15      	ldr	r2, [pc, #84]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800973c:	fba2 2303 	umull	r2, r3, r2, r3
 8009740:	099b      	lsrs	r3, r3, #6
 8009742:	2232      	movs	r2, #50	@ 0x32
 8009744:	fb02 f303 	mul.w	r3, r2, r3
 8009748:	4a11      	ldr	r2, [pc, #68]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800974a:	fba2 2303 	umull	r2, r3, r2, r3
 800974e:	099b      	lsrs	r3, r3, #6
 8009750:	3301      	adds	r3, #1
 8009752:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009754:	e002      	b.n	800975c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3b01      	subs	r3, #1
 800975a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800975c:	4b0a      	ldr	r3, [pc, #40]	@ (8009788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800975e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d102      	bne.n	800976e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1f3      	bne.n	8009756 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e000      	b.n	800977a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	46020800 	.word	0x46020800
 800978c:	20000020 	.word	0x20000020
 8009790:	10624dd3 	.word	0x10624dd3

08009794 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009798:	4b04      	ldr	r3, [pc, #16]	@ (80097ac <HAL_PWREx_GetVoltageRange+0x18>)
 800979a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800979c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	46020800 	.word	0x46020800

080097b0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80097b8:	4b22      	ldr	r3, [pc, #136]	@ (8009844 <HAL_PWREx_ConfigSupply+0x94>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a22      	ldr	r2, [pc, #136]	@ (8009848 <HAL_PWREx_ConfigSupply+0x98>)
 80097be:	fba2 2303 	umull	r2, r3, r2, r3
 80097c2:	099b      	lsrs	r3, r3, #6
 80097c4:	2232      	movs	r2, #50	@ 0x32
 80097c6:	fb02 f303 	mul.w	r3, r2, r3
 80097ca:	4a1f      	ldr	r2, [pc, #124]	@ (8009848 <HAL_PWREx_ConfigSupply+0x98>)
 80097cc:	fba2 2303 	umull	r2, r3, r2, r3
 80097d0:	099b      	lsrs	r3, r3, #6
 80097d2:	3301      	adds	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d113      	bne.n	8009804 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80097dc:	4b1b      	ldr	r3, [pc, #108]	@ (800984c <HAL_PWREx_ConfigSupply+0x9c>)
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	4a1a      	ldr	r2, [pc, #104]	@ (800984c <HAL_PWREx_ConfigSupply+0x9c>)
 80097e2:	f023 0302 	bic.w	r3, r3, #2
 80097e6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80097e8:	e002      	b.n	80097f0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80097f0:	4b16      	ldr	r3, [pc, #88]	@ (800984c <HAL_PWREx_ConfigSupply+0x9c>)
 80097f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f4:	f003 0302 	and.w	r3, r3, #2
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d116      	bne.n	800982a <HAL_PWREx_ConfigSupply+0x7a>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1f3      	bne.n	80097ea <HAL_PWREx_ConfigSupply+0x3a>
 8009802:	e012      	b.n	800982a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009804:	4b11      	ldr	r3, [pc, #68]	@ (800984c <HAL_PWREx_ConfigSupply+0x9c>)
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	4a10      	ldr	r2, [pc, #64]	@ (800984c <HAL_PWREx_ConfigSupply+0x9c>)
 800980a:	f043 0302 	orr.w	r3, r3, #2
 800980e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009810:	e002      	b.n	8009818 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3b01      	subs	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009818:	4b0c      	ldr	r3, [pc, #48]	@ (800984c <HAL_PWREx_ConfigSupply+0x9c>)
 800981a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <HAL_PWREx_ConfigSupply+0x7a>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1f3      	bne.n	8009812 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e000      	b.n	8009836 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	20000020 	.word	0x20000020
 8009848:	10624dd3 	.word	0x10624dd3
 800984c:	46020800 	.word	0x46020800

08009850 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009854:	4b05      	ldr	r3, [pc, #20]	@ (800986c <HAL_PWREx_EnableVddUSB+0x1c>)
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	4a04      	ldr	r2, [pc, #16]	@ (800986c <HAL_PWREx_EnableVddUSB+0x1c>)
 800985a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800985e:	6113      	str	r3, [r2, #16]
}
 8009860:	bf00      	nop
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	46020800 	.word	0x46020800

08009870 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009870:	b480      	push	{r7}
 8009872:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009874:	4b05      	ldr	r3, [pc, #20]	@ (800988c <HAL_PWREx_EnableVddIO2+0x1c>)
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	4a04      	ldr	r2, [pc, #16]	@ (800988c <HAL_PWREx_EnableVddIO2+0x1c>)
 800987a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800987e:	6113      	str	r3, [r2, #16]
}
 8009880:	bf00      	nop
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	46020800 	.word	0x46020800

08009890 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009894:	4b05      	ldr	r3, [pc, #20]	@ (80098ac <HAL_PWREx_EnableVddA+0x1c>)
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	4a04      	ldr	r2, [pc, #16]	@ (80098ac <HAL_PWREx_EnableVddA+0x1c>)
 800989a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800989e:	6113      	str	r3, [r2, #16]
}
 80098a0:	bf00      	nop
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	46020800 	.word	0x46020800

080098b0 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80098b6:	f7ff ff6d 	bl	8009794 <HAL_PWREx_GetVoltageRange>
 80098ba:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098c2:	d003      	beq.n	80098cc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098ca:	d107      	bne.n	80098dc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 80098cc:	4b06      	ldr	r3, [pc, #24]	@ (80098e8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	4a05      	ldr	r2, [pc, #20]	@ (80098e8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80098d2:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80098d6:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	e000      	b.n	80098de <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	46020800 	.word	0x46020800

080098ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08e      	sub	sp, #56	@ 0x38
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d102      	bne.n	8009906 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	f000 bec8 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009906:	4b99      	ldr	r3, [pc, #612]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	f003 030c 	and.w	r3, r3, #12
 800990e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009910:	4b96      	ldr	r3, [pc, #600]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009914:	f003 0303 	and.w	r3, r3, #3
 8009918:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0310 	and.w	r3, r3, #16
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 816c 	beq.w	8009c00 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992a:	2b00      	cmp	r3, #0
 800992c:	d007      	beq.n	800993e <HAL_RCC_OscConfig+0x52>
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	2b0c      	cmp	r3, #12
 8009932:	f040 80de 	bne.w	8009af2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009938:	2b01      	cmp	r3, #1
 800993a:	f040 80da 	bne.w	8009af2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d102      	bne.n	800994c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	f000 bea5 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009950:	4b86      	ldr	r3, [pc, #536]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d004      	beq.n	8009966 <HAL_RCC_OscConfig+0x7a>
 800995c:	4b83      	ldr	r3, [pc, #524]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009964:	e005      	b.n	8009972 <HAL_RCC_OscConfig+0x86>
 8009966:	4b81      	ldr	r3, [pc, #516]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800996c:	041b      	lsls	r3, r3, #16
 800996e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009972:	4293      	cmp	r3, r2
 8009974:	d255      	bcs.n	8009a22 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009980:	4618      	mov	r0, r3
 8009982:	f001 f9d9 	bl	800ad38 <RCC_SetFlashLatencyFromMSIRange>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	f000 be82 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009992:	4b76      	ldr	r3, [pc, #472]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	4a75      	ldr	r2, [pc, #468]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009998:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800999c:	6093      	str	r3, [r2, #8]
 800999e:	4b73      	ldr	r3, [pc, #460]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099aa:	4970      	ldr	r1, [pc, #448]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80099b8:	d309      	bcc.n	80099ce <HAL_RCC_OscConfig+0xe2>
 80099ba:	4b6c      	ldr	r3, [pc, #432]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	f023 021f 	bic.w	r2, r3, #31
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	4969      	ldr	r1, [pc, #420]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 80099c8:	4313      	orrs	r3, r2
 80099ca:	60cb      	str	r3, [r1, #12]
 80099cc:	e07e      	b.n	8009acc <HAL_RCC_OscConfig+0x1e0>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	da0a      	bge.n	80099ec <HAL_RCC_OscConfig+0x100>
 80099d6:	4b65      	ldr	r3, [pc, #404]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	015b      	lsls	r3, r3, #5
 80099e4:	4961      	ldr	r1, [pc, #388]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60cb      	str	r3, [r1, #12]
 80099ea:	e06f      	b.n	8009acc <HAL_RCC_OscConfig+0x1e0>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f4:	d30a      	bcc.n	8009a0c <HAL_RCC_OscConfig+0x120>
 80099f6:	4b5d      	ldr	r3, [pc, #372]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	029b      	lsls	r3, r3, #10
 8009a04:	4959      	ldr	r1, [pc, #356]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	60cb      	str	r3, [r1, #12]
 8009a0a:	e05f      	b.n	8009acc <HAL_RCC_OscConfig+0x1e0>
 8009a0c:	4b57      	ldr	r3, [pc, #348]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	03db      	lsls	r3, r3, #15
 8009a1a:	4954      	ldr	r1, [pc, #336]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	60cb      	str	r3, [r1, #12]
 8009a20:	e054      	b.n	8009acc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009a22:	4b52      	ldr	r3, [pc, #328]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	4a51      	ldr	r2, [pc, #324]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a2c:	6093      	str	r3, [r2, #8]
 8009a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3a:	494c      	ldr	r1, [pc, #304]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a44:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009a48:	d309      	bcc.n	8009a5e <HAL_RCC_OscConfig+0x172>
 8009a4a:	4b48      	ldr	r3, [pc, #288]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f023 021f 	bic.w	r2, r3, #31
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	4945      	ldr	r1, [pc, #276]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60cb      	str	r3, [r1, #12]
 8009a5c:	e028      	b.n	8009ab0 <HAL_RCC_OscConfig+0x1c4>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da0a      	bge.n	8009a7c <HAL_RCC_OscConfig+0x190>
 8009a66:	4b41      	ldr	r3, [pc, #260]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	015b      	lsls	r3, r3, #5
 8009a74:	493d      	ldr	r1, [pc, #244]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60cb      	str	r3, [r1, #12]
 8009a7a:	e019      	b.n	8009ab0 <HAL_RCC_OscConfig+0x1c4>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a84:	d30a      	bcc.n	8009a9c <HAL_RCC_OscConfig+0x1b0>
 8009a86:	4b39      	ldr	r3, [pc, #228]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	029b      	lsls	r3, r3, #10
 8009a94:	4935      	ldr	r1, [pc, #212]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60cb      	str	r3, [r1, #12]
 8009a9a:	e009      	b.n	8009ab0 <HAL_RCC_OscConfig+0x1c4>
 8009a9c:	4b33      	ldr	r3, [pc, #204]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a1b      	ldr	r3, [r3, #32]
 8009aa8:	03db      	lsls	r3, r3, #15
 8009aaa:	4930      	ldr	r1, [pc, #192]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10a      	bne.n	8009acc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 f93c 	bl	800ad38 <RCC_SetFlashLatencyFromMSIRange>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f000 bde5 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009acc:	f001 f8de 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009ad0:	4b27      	ldr	r3, [pc, #156]	@ (8009b70 <HAL_RCC_OscConfig+0x284>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7f9 f811 	bl	8002afc <HAL_InitTick>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 808a 	beq.w	8009bfe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009aea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aee:	f000 bdd2 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d066      	beq.n	8009bc8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009afa:	4b1c      	ldr	r3, [pc, #112]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a1b      	ldr	r2, [pc, #108]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009b06:	f7f9 f883 	bl	8002c10 <HAL_GetTick>
 8009b0a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009b0c:	e009      	b.n	8009b22 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b0e:	f7f9 f87f 	bl	8002c10 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d902      	bls.n	8009b22 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	f000 bdba 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009b22:	4b12      	ldr	r3, [pc, #72]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0304 	and.w	r3, r3, #4
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0ef      	beq.n	8009b0e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	4a0e      	ldr	r2, [pc, #56]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009b34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b38:	6093      	str	r3, [r2, #8]
 8009b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b46:	4909      	ldr	r1, [pc, #36]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b50:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009b54:	d30e      	bcc.n	8009b74 <HAL_RCC_OscConfig+0x288>
 8009b56:	4b05      	ldr	r3, [pc, #20]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	f023 021f 	bic.w	r2, r3, #31
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	4902      	ldr	r1, [pc, #8]	@ (8009b6c <HAL_RCC_OscConfig+0x280>)
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60cb      	str	r3, [r1, #12]
 8009b68:	e04a      	b.n	8009c00 <HAL_RCC_OscConfig+0x314>
 8009b6a:	bf00      	nop
 8009b6c:	46020c00 	.word	0x46020c00
 8009b70:	20000024 	.word	0x20000024
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	da0a      	bge.n	8009b92 <HAL_RCC_OscConfig+0x2a6>
 8009b7c:	4b98      	ldr	r3, [pc, #608]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	015b      	lsls	r3, r3, #5
 8009b8a:	4995      	ldr	r1, [pc, #596]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	60cb      	str	r3, [r1, #12]
 8009b90:	e036      	b.n	8009c00 <HAL_RCC_OscConfig+0x314>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b9a:	d30a      	bcc.n	8009bb2 <HAL_RCC_OscConfig+0x2c6>
 8009b9c:	4b90      	ldr	r3, [pc, #576]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a1b      	ldr	r3, [r3, #32]
 8009ba8:	029b      	lsls	r3, r3, #10
 8009baa:	498d      	ldr	r1, [pc, #564]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	60cb      	str	r3, [r1, #12]
 8009bb0:	e026      	b.n	8009c00 <HAL_RCC_OscConfig+0x314>
 8009bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	03db      	lsls	r3, r3, #15
 8009bc0:	4987      	ldr	r1, [pc, #540]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60cb      	str	r3, [r1, #12]
 8009bc6:	e01b      	b.n	8009c00 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009bc8:	4b85      	ldr	r3, [pc, #532]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a84      	ldr	r2, [pc, #528]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009bce:	f023 0301 	bic.w	r3, r3, #1
 8009bd2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009bd4:	f7f9 f81c 	bl	8002c10 <HAL_GetTick>
 8009bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009bda:	e009      	b.n	8009bf0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009bdc:	f7f9 f818 	bl	8002c10 <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d902      	bls.n	8009bf0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	f000 bd53 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009bf0:	4b7b      	ldr	r3, [pc, #492]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1ef      	bne.n	8009bdc <HAL_RCC_OscConfig+0x2f0>
 8009bfc:	e000      	b.n	8009c00 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009bfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 808b 	beq.w	8009d24 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c10:	2b08      	cmp	r3, #8
 8009c12:	d005      	beq.n	8009c20 <HAL_RCC_OscConfig+0x334>
 8009c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c16:	2b0c      	cmp	r3, #12
 8009c18:	d109      	bne.n	8009c2e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d106      	bne.n	8009c2e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d17d      	bne.n	8009d24 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	f000 bd34 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c36:	d106      	bne.n	8009c46 <HAL_RCC_OscConfig+0x35a>
 8009c38:	4b69      	ldr	r3, [pc, #420]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a68      	ldr	r2, [pc, #416]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	e041      	b.n	8009cca <HAL_RCC_OscConfig+0x3de>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c4e:	d112      	bne.n	8009c76 <HAL_RCC_OscConfig+0x38a>
 8009c50:	4b63      	ldr	r3, [pc, #396]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a62      	ldr	r2, [pc, #392]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	4b60      	ldr	r3, [pc, #384]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a5f      	ldr	r2, [pc, #380]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c62:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	4b5d      	ldr	r3, [pc, #372]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a5c      	ldr	r2, [pc, #368]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c72:	6013      	str	r3, [r2, #0]
 8009c74:	e029      	b.n	8009cca <HAL_RCC_OscConfig+0x3de>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009c7e:	d112      	bne.n	8009ca6 <HAL_RCC_OscConfig+0x3ba>
 8009c80:	4b57      	ldr	r3, [pc, #348]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a56      	ldr	r2, [pc, #344]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	4b54      	ldr	r3, [pc, #336]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a53      	ldr	r2, [pc, #332]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	4b51      	ldr	r3, [pc, #324]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a50      	ldr	r2, [pc, #320]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	e011      	b.n	8009cca <HAL_RCC_OscConfig+0x3de>
 8009ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a4d      	ldr	r2, [pc, #308]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cb0:	6013      	str	r3, [r2, #0]
 8009cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a4a      	ldr	r2, [pc, #296]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009cb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	4b48      	ldr	r3, [pc, #288]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a47      	ldr	r2, [pc, #284]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009cc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009cc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d014      	beq.n	8009cfc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009cd2:	f7f8 ff9d 	bl	8002c10 <HAL_GetTick>
 8009cd6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009cd8:	e009      	b.n	8009cee <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cda:	f7f8 ff99 	bl	8002c10 <HAL_GetTick>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	2b64      	cmp	r3, #100	@ 0x64
 8009ce6:	d902      	bls.n	8009cee <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	f000 bcd4 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009cee:	4b3c      	ldr	r3, [pc, #240]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0ef      	beq.n	8009cda <HAL_RCC_OscConfig+0x3ee>
 8009cfa:	e013      	b.n	8009d24 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009cfc:	f7f8 ff88 	bl	8002c10 <HAL_GetTick>
 8009d00:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d02:	e009      	b.n	8009d18 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d04:	f7f8 ff84 	bl	8002c10 <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	2b64      	cmp	r3, #100	@ 0x64
 8009d10:	d902      	bls.n	8009d18 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	f000 bcbf 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d18:	4b31      	ldr	r3, [pc, #196]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1ef      	bne.n	8009d04 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d05f      	beq.n	8009df0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d005      	beq.n	8009d42 <HAL_RCC_OscConfig+0x456>
 8009d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d38:	2b0c      	cmp	r3, #12
 8009d3a:	d114      	bne.n	8009d66 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d111      	bne.n	8009d66 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f000 bca3 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009d50:	4b23      	ldr	r3, [pc, #140]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	041b      	lsls	r3, r3, #16
 8009d5e:	4920      	ldr	r1, [pc, #128]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009d64:	e044      	b.n	8009df0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d024      	beq.n	8009db8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a1b      	ldr	r2, [pc, #108]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d7a:	f7f8 ff49 	bl	8002c10 <HAL_GetTick>
 8009d7e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d80:	e009      	b.n	8009d96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d82:	f7f8 ff45 	bl	8002c10 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d902      	bls.n	8009d96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	f000 bc80 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d96:	4b12      	ldr	r3, [pc, #72]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0ef      	beq.n	8009d82 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009da2:	4b0f      	ldr	r3, [pc, #60]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	041b      	lsls	r3, r3, #16
 8009db0:	490b      	ldr	r1, [pc, #44]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	610b      	str	r3, [r1, #16]
 8009db6:	e01b      	b.n	8009df0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009db8:	4b09      	ldr	r3, [pc, #36]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a08      	ldr	r2, [pc, #32]	@ (8009de0 <HAL_RCC_OscConfig+0x4f4>)
 8009dbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dc2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009dc4:	f7f8 ff24 	bl	8002c10 <HAL_GetTick>
 8009dc8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009dca:	e00b      	b.n	8009de4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009dcc:	f7f8 ff20 	bl	8002c10 <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d904      	bls.n	8009de4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	f000 bc5b 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
 8009de0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009de4:	4baf      	ldr	r3, [pc, #700]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1ed      	bne.n	8009dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0308 	and.w	r3, r3, #8
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 80c8 	beq.w	8009f8e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e04:	4ba7      	ldr	r3, [pc, #668]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e0a:	f003 0304 	and.w	r3, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d111      	bne.n	8009e36 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e12:	4ba4      	ldr	r3, [pc, #656]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e18:	4aa2      	ldr	r2, [pc, #648]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009e1a:	f043 0304 	orr.w	r3, r3, #4
 8009e1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009e22:	4ba0      	ldr	r3, [pc, #640]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	617b      	str	r3, [r7, #20]
 8009e2e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009e30:	2301      	movs	r3, #1
 8009e32:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e36:	4b9c      	ldr	r3, [pc, #624]	@ (800a0a8 <HAL_RCC_OscConfig+0x7bc>)
 8009e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d119      	bne.n	8009e76 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009e42:	4b99      	ldr	r3, [pc, #612]	@ (800a0a8 <HAL_RCC_OscConfig+0x7bc>)
 8009e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e46:	4a98      	ldr	r2, [pc, #608]	@ (800a0a8 <HAL_RCC_OscConfig+0x7bc>)
 8009e48:	f043 0301 	orr.w	r3, r3, #1
 8009e4c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e4e:	f7f8 fedf 	bl	8002c10 <HAL_GetTick>
 8009e52:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e54:	e009      	b.n	8009e6a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e56:	f7f8 fedb 	bl	8002c10 <HAL_GetTick>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d902      	bls.n	8009e6a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	f000 bc16 	b.w	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e6a:	4b8f      	ldr	r3, [pc, #572]	@ (800a0a8 <HAL_RCC_OscConfig+0x7bc>)
 8009e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0ef      	beq.n	8009e56 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d05f      	beq.n	8009f3e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009e7e:	4b89      	ldr	r3, [pc, #548]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e84:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	699a      	ldr	r2, [r3, #24]
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d037      	beq.n	8009f04 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d006      	beq.n	8009eac <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e3f4      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d01b      	beq.n	8009eee <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009eb6:	4b7b      	ldr	r3, [pc, #492]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ebc:	4a79      	ldr	r2, [pc, #484]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009ebe:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009ec6:	f7f8 fea3 	bl	8002c10 <HAL_GetTick>
 8009eca:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009ecc:	e008      	b.n	8009ee0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ece:	f7f8 fe9f 	bl	8002c10 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b05      	cmp	r3, #5
 8009eda:	d901      	bls.n	8009ee0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e3da      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009ee0:	4b70      	ldr	r3, [pc, #448]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009ee2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ee6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1ef      	bne.n	8009ece <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009eee:	4b6d      	ldr	r3, [pc, #436]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ef4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	4969      	ldr	r1, [pc, #420]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009f04:	4b67      	ldr	r3, [pc, #412]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f0a:	4a66      	ldr	r2, [pc, #408]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009f0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009f14:	f7f8 fe7c 	bl	8002c10 <HAL_GetTick>
 8009f18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009f1a:	e008      	b.n	8009f2e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f1c:	f7f8 fe78 	bl	8002c10 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	2b05      	cmp	r3, #5
 8009f28:	d901      	bls.n	8009f2e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e3b3      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009f2e:	4b5d      	ldr	r3, [pc, #372]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d0ef      	beq.n	8009f1c <HAL_RCC_OscConfig+0x630>
 8009f3c:	e01b      	b.n	8009f76 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009f3e:	4b59      	ldr	r3, [pc, #356]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f44:	4a57      	ldr	r2, [pc, #348]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009f46:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009f4e:	f7f8 fe5f 	bl	8002c10 <HAL_GetTick>
 8009f52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f54:	e008      	b.n	8009f68 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f56:	f7f8 fe5b 	bl	8002c10 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	2b05      	cmp	r3, #5
 8009f62:	d901      	bls.n	8009f68 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e396      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f68:	4b4e      	ldr	r3, [pc, #312]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1ef      	bne.n	8009f56 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d107      	bne.n	8009f8e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f7e:	4b49      	ldr	r3, [pc, #292]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f84:	4a47      	ldr	r2, [pc, #284]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009f86:	f023 0304 	bic.w	r3, r3, #4
 8009f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 8111 	beq.w	800a1be <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fa2:	4b40      	ldr	r3, [pc, #256]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fa8:	f003 0304 	and.w	r3, r3, #4
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d111      	bne.n	8009fd4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fb0:	4b3c      	ldr	r3, [pc, #240]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fb6:	4a3b      	ldr	r2, [pc, #236]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009fb8:	f043 0304 	orr.w	r3, r3, #4
 8009fbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009fc0:	4b38      	ldr	r3, [pc, #224]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 8009fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fc6:	f003 0304 	and.w	r3, r3, #4
 8009fca:	613b      	str	r3, [r7, #16]
 8009fcc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fd4:	4b34      	ldr	r3, [pc, #208]	@ (800a0a8 <HAL_RCC_OscConfig+0x7bc>)
 8009fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d118      	bne.n	800a012 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009fe0:	4b31      	ldr	r3, [pc, #196]	@ (800a0a8 <HAL_RCC_OscConfig+0x7bc>)
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe4:	4a30      	ldr	r2, [pc, #192]	@ (800a0a8 <HAL_RCC_OscConfig+0x7bc>)
 8009fe6:	f043 0301 	orr.w	r3, r3, #1
 8009fea:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fec:	f7f8 fe10 	bl	8002c10 <HAL_GetTick>
 8009ff0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ff2:	e008      	b.n	800a006 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ff4:	f7f8 fe0c 	bl	8002c10 <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d901      	bls.n	800a006 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e347      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a006:	4b28      	ldr	r3, [pc, #160]	@ (800a0a8 <HAL_RCC_OscConfig+0x7bc>)
 800a008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0f0      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d01f      	beq.n	800a05e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f003 0304 	and.w	r3, r3, #4
 800a026:	2b00      	cmp	r3, #0
 800a028:	d010      	beq.n	800a04c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a02a:	4b1e      	ldr	r3, [pc, #120]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 800a02c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a030:	4a1c      	ldr	r2, [pc, #112]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 800a032:	f043 0304 	orr.w	r3, r3, #4
 800a036:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a03a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 800a03c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a040:	4a18      	ldr	r2, [pc, #96]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 800a042:	f043 0301 	orr.w	r3, r3, #1
 800a046:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a04a:	e018      	b.n	800a07e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a04c:	4b15      	ldr	r3, [pc, #84]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 800a04e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a052:	4a14      	ldr	r2, [pc, #80]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 800a054:	f043 0301 	orr.w	r3, r3, #1
 800a058:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a05c:	e00f      	b.n	800a07e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a05e:	4b11      	ldr	r3, [pc, #68]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 800a060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a064:	4a0f      	ldr	r2, [pc, #60]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 800a066:	f023 0301 	bic.w	r3, r3, #1
 800a06a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a06e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 800a070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a074:	4a0b      	ldr	r2, [pc, #44]	@ (800a0a4 <HAL_RCC_OscConfig+0x7b8>)
 800a076:	f023 0304 	bic.w	r3, r3, #4
 800a07a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d057      	beq.n	800a136 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a086:	f7f8 fdc3 	bl	8002c10 <HAL_GetTick>
 800a08a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a08c:	e00e      	b.n	800a0ac <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a08e:	f7f8 fdbf 	bl	8002c10 <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d905      	bls.n	800a0ac <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e2f8      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
 800a0a4:	46020c00 	.word	0x46020c00
 800a0a8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0ac:	4b9c      	ldr	r3, [pc, #624]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a0ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d0e9      	beq.n	800a08e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d01b      	beq.n	800a0fe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a0c6:	4b96      	ldr	r3, [pc, #600]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a0c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0cc:	4a94      	ldr	r2, [pc, #592]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a0ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a0d6:	e00a      	b.n	800a0ee <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0d8:	f7f8 fd9a 	bl	8002c10 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d901      	bls.n	800a0ee <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e2d3      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a0ee:	4b8c      	ldr	r3, [pc, #560]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a0f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0ed      	beq.n	800a0d8 <HAL_RCC_OscConfig+0x7ec>
 800a0fc:	e053      	b.n	800a1a6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a0fe:	4b88      	ldr	r3, [pc, #544]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a104:	4a86      	ldr	r2, [pc, #536]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a10a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a10e:	e00a      	b.n	800a126 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a110:	f7f8 fd7e 	bl	8002c10 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a11e:	4293      	cmp	r3, r2
 800a120:	d901      	bls.n	800a126 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e2b7      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a126:	4b7e      	ldr	r3, [pc, #504]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a12c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1ed      	bne.n	800a110 <HAL_RCC_OscConfig+0x824>
 800a134:	e037      	b.n	800a1a6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a136:	f7f8 fd6b 	bl	8002c10 <HAL_GetTick>
 800a13a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a13c:	e00a      	b.n	800a154 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a13e:	f7f8 fd67 	bl	8002c10 <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d901      	bls.n	800a154 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e2a0      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a154:	4b72      	ldr	r3, [pc, #456]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a15a:	f003 0302 	and.w	r3, r3, #2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1ed      	bne.n	800a13e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a162:	4b6f      	ldr	r3, [pc, #444]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d01a      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a170:	4b6b      	ldr	r3, [pc, #428]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a176:	4a6a      	ldr	r2, [pc, #424]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a17c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a180:	e00a      	b.n	800a198 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a182:	f7f8 fd45 	bl	8002c10 <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a190:	4293      	cmp	r3, r2
 800a192:	d901      	bls.n	800a198 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e27e      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a198:	4b61      	ldr	r3, [pc, #388]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a19a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a19e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1ed      	bne.n	800a182 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a1a6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d107      	bne.n	800a1be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1ae:	4b5c      	ldr	r3, [pc, #368]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a1b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1b4:	4a5a      	ldr	r2, [pc, #360]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a1b6:	f023 0304 	bic.w	r3, r3, #4
 800a1ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0320 	and.w	r3, r3, #32
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d036      	beq.n	800a238 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d019      	beq.n	800a206 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a1d2:	4b53      	ldr	r3, [pc, #332]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a52      	ldr	r2, [pc, #328]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a1d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a1dc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a1de:	f7f8 fd17 	bl	8002c10 <HAL_GetTick>
 800a1e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a1e4:	e008      	b.n	800a1f8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1e6:	f7f8 fd13 	bl	8002c10 <HAL_GetTick>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d901      	bls.n	800a1f8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e24e      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a1f8:	4b49      	ldr	r3, [pc, #292]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0f0      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x8fa>
 800a204:	e018      	b.n	800a238 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a206:	4b46      	ldr	r3, [pc, #280]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a45      	ldr	r2, [pc, #276]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a20c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a210:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a212:	f7f8 fcfd 	bl	8002c10 <HAL_GetTick>
 800a216:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a218:	e008      	b.n	800a22c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a21a:	f7f8 fcf9 	bl	8002c10 <HAL_GetTick>
 800a21e:	4602      	mov	r2, r0
 800a220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	2b02      	cmp	r3, #2
 800a226:	d901      	bls.n	800a22c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e234      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a22c:	4b3c      	ldr	r3, [pc, #240]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1f0      	bne.n	800a21a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a240:	2b00      	cmp	r3, #0
 800a242:	d036      	beq.n	800a2b2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d019      	beq.n	800a280 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a24c:	4b34      	ldr	r3, [pc, #208]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a33      	ldr	r2, [pc, #204]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a256:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a258:	f7f8 fcda 	bl	8002c10 <HAL_GetTick>
 800a25c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a25e:	e008      	b.n	800a272 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a260:	f7f8 fcd6 	bl	8002c10 <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d901      	bls.n	800a272 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e211      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a272:	4b2b      	ldr	r3, [pc, #172]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0f0      	beq.n	800a260 <HAL_RCC_OscConfig+0x974>
 800a27e:	e018      	b.n	800a2b2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a280:	4b27      	ldr	r3, [pc, #156]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a26      	ldr	r2, [pc, #152]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a28a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a28c:	f7f8 fcc0 	bl	8002c10 <HAL_GetTick>
 800a290:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a292:	e008      	b.n	800a2a6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a294:	f7f8 fcbc 	bl	8002c10 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e1f7      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a2a6:	4b1e      	ldr	r3, [pc, #120]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f0      	bne.n	800a294 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d07f      	beq.n	800a3be <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d062      	beq.n	800a38c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a2c6:	4b16      	ldr	r3, [pc, #88]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	4a15      	ldr	r2, [pc, #84]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a2cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a2d0:	6093      	str	r3, [r2, #8]
 800a2d2:	4b13      	ldr	r3, [pc, #76]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2de:	4910      	ldr	r1, [pc, #64]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a2ec:	d309      	bcc.n	800a302 <HAL_RCC_OscConfig+0xa16>
 800a2ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	f023 021f 	bic.w	r2, r3, #31
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	4909      	ldr	r1, [pc, #36]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	60cb      	str	r3, [r1, #12]
 800a300:	e02a      	b.n	800a358 <HAL_RCC_OscConfig+0xa6c>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a306:	2b00      	cmp	r3, #0
 800a308:	da0c      	bge.n	800a324 <HAL_RCC_OscConfig+0xa38>
 800a30a:	4b05      	ldr	r3, [pc, #20]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	015b      	lsls	r3, r3, #5
 800a318:	4901      	ldr	r1, [pc, #4]	@ (800a320 <HAL_RCC_OscConfig+0xa34>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	60cb      	str	r3, [r1, #12]
 800a31e:	e01b      	b.n	800a358 <HAL_RCC_OscConfig+0xa6c>
 800a320:	46020c00 	.word	0x46020c00
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a32c:	d30a      	bcc.n	800a344 <HAL_RCC_OscConfig+0xa58>
 800a32e:	4ba1      	ldr	r3, [pc, #644]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	029b      	lsls	r3, r3, #10
 800a33c:	499d      	ldr	r1, [pc, #628]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	60cb      	str	r3, [r1, #12]
 800a342:	e009      	b.n	800a358 <HAL_RCC_OscConfig+0xa6c>
 800a344:	4b9b      	ldr	r3, [pc, #620]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	03db      	lsls	r3, r3, #15
 800a352:	4998      	ldr	r1, [pc, #608]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a354:	4313      	orrs	r3, r2
 800a356:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a358:	4b96      	ldr	r3, [pc, #600]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a95      	ldr	r2, [pc, #596]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a35e:	f043 0310 	orr.w	r3, r3, #16
 800a362:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a364:	f7f8 fc54 	bl	8002c10 <HAL_GetTick>
 800a368:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a36a:	e008      	b.n	800a37e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a36c:	f7f8 fc50 	bl	8002c10 <HAL_GetTick>
 800a370:	4602      	mov	r2, r0
 800a372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	2b02      	cmp	r3, #2
 800a378:	d901      	bls.n	800a37e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e18b      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a37e:	4b8d      	ldr	r3, [pc, #564]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b00      	cmp	r3, #0
 800a388:	d0f0      	beq.n	800a36c <HAL_RCC_OscConfig+0xa80>
 800a38a:	e018      	b.n	800a3be <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a38c:	4b89      	ldr	r3, [pc, #548]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a88      	ldr	r2, [pc, #544]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a392:	f023 0310 	bic.w	r3, r3, #16
 800a396:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a398:	f7f8 fc3a 	bl	8002c10 <HAL_GetTick>
 800a39c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a39e:	e008      	b.n	800a3b2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a3a0:	f7f8 fc36 	bl	8002c10 <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d901      	bls.n	800a3b2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e171      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a3b2:	4b80      	ldr	r3, [pc, #512]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0320 	and.w	r3, r3, #32
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1f0      	bne.n	800a3a0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 8166 	beq.w	800a694 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a3ce:	4b79      	ldr	r3, [pc, #484]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	f003 030c 	and.w	r3, r3, #12
 800a3d6:	2b0c      	cmp	r3, #12
 800a3d8:	f000 80f2 	beq.w	800a5c0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	f040 80c5 	bne.w	800a570 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a3e6:	4b73      	ldr	r3, [pc, #460]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a72      	ldr	r2, [pc, #456]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a3ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3f0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a3f2:	f7f8 fc0d 	bl	8002c10 <HAL_GetTick>
 800a3f6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a3f8:	e008      	b.n	800a40c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3fa:	f7f8 fc09 	bl	8002c10 <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	d901      	bls.n	800a40c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e144      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a40c:	4b69      	ldr	r3, [pc, #420]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1f0      	bne.n	800a3fa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a418:	4b66      	ldr	r3, [pc, #408]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a41a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a41e:	f003 0304 	and.w	r3, r3, #4
 800a422:	2b00      	cmp	r3, #0
 800a424:	d111      	bne.n	800a44a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a426:	4b63      	ldr	r3, [pc, #396]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a42c:	4a61      	ldr	r2, [pc, #388]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a42e:	f043 0304 	orr.w	r3, r3, #4
 800a432:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a436:	4b5f      	ldr	r3, [pc, #380]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	60fb      	str	r3, [r7, #12]
 800a442:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a444:	2301      	movs	r3, #1
 800a446:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a44a:	4b5b      	ldr	r3, [pc, #364]	@ (800a5b8 <HAL_RCC_OscConfig+0xccc>)
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a452:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a456:	d102      	bne.n	800a45e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a45e:	4b56      	ldr	r3, [pc, #344]	@ (800a5b8 <HAL_RCC_OscConfig+0xccc>)
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	4a55      	ldr	r2, [pc, #340]	@ (800a5b8 <HAL_RCC_OscConfig+0xccc>)
 800a464:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a468:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a46a:	4b52      	ldr	r3, [pc, #328]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a46e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a472:	f023 0303 	bic.w	r3, r3, #3
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a47e:	3a01      	subs	r2, #1
 800a480:	0212      	lsls	r2, r2, #8
 800a482:	4311      	orrs	r1, r2
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a488:	430a      	orrs	r2, r1
 800a48a:	494a      	ldr	r1, [pc, #296]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a48c:	4313      	orrs	r3, r2
 800a48e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a490:	4b48      	ldr	r3, [pc, #288]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a494:	4b49      	ldr	r3, [pc, #292]	@ (800a5bc <HAL_RCC_OscConfig+0xcd0>)
 800a496:	4013      	ands	r3, r2
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a49c:	3a01      	subs	r2, #1
 800a49e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a4a6:	3a01      	subs	r2, #1
 800a4a8:	0252      	lsls	r2, r2, #9
 800a4aa:	b292      	uxth	r2, r2
 800a4ac:	4311      	orrs	r1, r2
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a4b2:	3a01      	subs	r2, #1
 800a4b4:	0412      	lsls	r2, r2, #16
 800a4b6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a4ba:	4311      	orrs	r1, r2
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a4c0:	3a01      	subs	r2, #1
 800a4c2:	0612      	lsls	r2, r2, #24
 800a4c4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	493a      	ldr	r1, [pc, #232]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a4d0:	4b38      	ldr	r3, [pc, #224]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d4:	4a37      	ldr	r2, [pc, #220]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a4d6:	f023 0310 	bic.w	r3, r3, #16
 800a4da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4e0:	4a34      	ldr	r2, [pc, #208]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a4e6:	4b33      	ldr	r3, [pc, #204]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ea:	4a32      	ldr	r2, [pc, #200]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a4ec:	f043 0310 	orr.w	r3, r3, #16
 800a4f0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a4f2:	4b30      	ldr	r3, [pc, #192]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f6:	f023 020c 	bic.w	r2, r3, #12
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4fe:	492d      	ldr	r1, [pc, #180]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a500:	4313      	orrs	r3, r2
 800a502:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a504:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d105      	bne.n	800a518 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a50c:	4b2a      	ldr	r3, [pc, #168]	@ (800a5b8 <HAL_RCC_OscConfig+0xccc>)
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	4a29      	ldr	r2, [pc, #164]	@ (800a5b8 <HAL_RCC_OscConfig+0xccc>)
 800a512:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a516:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a518:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d107      	bne.n	800a530 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a520:	4b24      	ldr	r3, [pc, #144]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a526:	4a23      	ldr	r2, [pc, #140]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a528:	f023 0304 	bic.w	r3, r3, #4
 800a52c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a530:	4b20      	ldr	r3, [pc, #128]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a1f      	ldr	r2, [pc, #124]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a536:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a53a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a53c:	f7f8 fb68 	bl	8002c10 <HAL_GetTick>
 800a540:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a542:	e008      	b.n	800a556 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a544:	f7f8 fb64 	bl	8002c10 <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d901      	bls.n	800a556 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a552:	2303      	movs	r3, #3
 800a554:	e09f      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a556:	4b17      	ldr	r3, [pc, #92]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0f0      	beq.n	800a544 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a562:	4b14      	ldr	r3, [pc, #80]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a566:	4a13      	ldr	r2, [pc, #76]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a56c:	6293      	str	r3, [r2, #40]	@ 0x28
 800a56e:	e091      	b.n	800a694 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a570:	4b10      	ldr	r3, [pc, #64]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a0f      	ldr	r2, [pc, #60]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a576:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a57a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a57c:	f7f8 fb48 	bl	8002c10 <HAL_GetTick>
 800a580:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a582:	e008      	b.n	800a596 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a584:	f7f8 fb44 	bl	8002c10 <HAL_GetTick>
 800a588:	4602      	mov	r2, r0
 800a58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d901      	bls.n	800a596 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e07f      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a596:	4b07      	ldr	r3, [pc, #28]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1f0      	bne.n	800a584 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a5a2:	4b04      	ldr	r3, [pc, #16]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a6:	4a03      	ldr	r2, [pc, #12]	@ (800a5b4 <HAL_RCC_OscConfig+0xcc8>)
 800a5a8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a5ac:	f023 0303 	bic.w	r3, r3, #3
 800a5b0:	6293      	str	r3, [r2, #40]	@ 0x28
 800a5b2:	e06f      	b.n	800a694 <HAL_RCC_OscConfig+0xda8>
 800a5b4:	46020c00 	.word	0x46020c00
 800a5b8:	46020800 	.word	0x46020800
 800a5bc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a5c0:	4b37      	ldr	r3, [pc, #220]	@ (800a6a0 <HAL_RCC_OscConfig+0xdb4>)
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5c6:	4b36      	ldr	r3, [pc, #216]	@ (800a6a0 <HAL_RCC_OscConfig+0xdb4>)
 800a5c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ca:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d039      	beq.n	800a648 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	f003 0203 	and.w	r2, r3, #3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d132      	bne.n	800a648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	0a1b      	lsrs	r3, r3, #8
 800a5e6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ee:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d129      	bne.n	800a648 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d122      	bne.n	800a648 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a60c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a60e:	429a      	cmp	r2, r3
 800a610:	d11a      	bne.n	800a648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	0a5b      	lsrs	r3, r3, #9
 800a616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a61e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a620:	429a      	cmp	r2, r3
 800a622:	d111      	bne.n	800a648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	0c1b      	lsrs	r3, r3, #16
 800a628:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a630:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a632:	429a      	cmp	r2, r3
 800a634:	d108      	bne.n	800a648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	0e1b      	lsrs	r3, r3, #24
 800a63a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a642:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a644:	429a      	cmp	r2, r3
 800a646:	d001      	beq.n	800a64c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e024      	b.n	800a696 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a64c:	4b14      	ldr	r3, [pc, #80]	@ (800a6a0 <HAL_RCC_OscConfig+0xdb4>)
 800a64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a650:	08db      	lsrs	r3, r3, #3
 800a652:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d01a      	beq.n	800a694 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a65e:	4b10      	ldr	r3, [pc, #64]	@ (800a6a0 <HAL_RCC_OscConfig+0xdb4>)
 800a660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a662:	4a0f      	ldr	r2, [pc, #60]	@ (800a6a0 <HAL_RCC_OscConfig+0xdb4>)
 800a664:	f023 0310 	bic.w	r3, r3, #16
 800a668:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a66a:	f7f8 fad1 	bl	8002c10 <HAL_GetTick>
 800a66e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a670:	bf00      	nop
 800a672:	f7f8 facd 	bl	8002c10 <HAL_GetTick>
 800a676:	4602      	mov	r2, r0
 800a678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d0f9      	beq.n	800a672 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a682:	4a07      	ldr	r2, [pc, #28]	@ (800a6a0 <HAL_RCC_OscConfig+0xdb4>)
 800a684:	00db      	lsls	r3, r3, #3
 800a686:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a688:	4b05      	ldr	r3, [pc, #20]	@ (800a6a0 <HAL_RCC_OscConfig+0xdb4>)
 800a68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a68c:	4a04      	ldr	r2, [pc, #16]	@ (800a6a0 <HAL_RCC_OscConfig+0xdb4>)
 800a68e:	f043 0310 	orr.w	r3, r3, #16
 800a692:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3738      	adds	r7, #56	@ 0x38
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	46020c00 	.word	0x46020c00

0800a6a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e1d9      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6b8:	4b9b      	ldr	r3, [pc, #620]	@ (800a928 <HAL_RCC_ClockConfig+0x284>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 030f 	and.w	r3, r3, #15
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d910      	bls.n	800a6e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6c6:	4b98      	ldr	r3, [pc, #608]	@ (800a928 <HAL_RCC_ClockConfig+0x284>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f023 020f 	bic.w	r2, r3, #15
 800a6ce:	4996      	ldr	r1, [pc, #600]	@ (800a928 <HAL_RCC_ClockConfig+0x284>)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6d6:	4b94      	ldr	r3, [pc, #592]	@ (800a928 <HAL_RCC_ClockConfig+0x284>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 030f 	and.w	r3, r3, #15
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d001      	beq.n	800a6e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e1c1      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0310 	and.w	r3, r3, #16
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d010      	beq.n	800a716 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	695a      	ldr	r2, [r3, #20]
 800a6f8:	4b8c      	ldr	r3, [pc, #560]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a700:	429a      	cmp	r2, r3
 800a702:	d908      	bls.n	800a716 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a704:	4b89      	ldr	r3, [pc, #548]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a708:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	4986      	ldr	r1, [pc, #536]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a712:	4313      	orrs	r3, r2
 800a714:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0308 	and.w	r3, r3, #8
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d012      	beq.n	800a748 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	4b81      	ldr	r3, [pc, #516]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	091b      	lsrs	r3, r3, #4
 800a72c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a730:	429a      	cmp	r2, r3
 800a732:	d909      	bls.n	800a748 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a734:	4b7d      	ldr	r3, [pc, #500]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a736:	6a1b      	ldr	r3, [r3, #32]
 800a738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	011b      	lsls	r3, r3, #4
 800a742:	497a      	ldr	r1, [pc, #488]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a744:	4313      	orrs	r3, r2
 800a746:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	d010      	beq.n	800a776 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68da      	ldr	r2, [r3, #12]
 800a758:	4b74      	ldr	r3, [pc, #464]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a760:	429a      	cmp	r2, r3
 800a762:	d908      	bls.n	800a776 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a764:	4b71      	ldr	r3, [pc, #452]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a766:	6a1b      	ldr	r3, [r3, #32]
 800a768:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	496e      	ldr	r1, [pc, #440]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a772:	4313      	orrs	r3, r2
 800a774:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0302 	and.w	r3, r3, #2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d010      	beq.n	800a7a4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	689a      	ldr	r2, [r3, #8]
 800a786:	4b69      	ldr	r3, [pc, #420]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	f003 030f 	and.w	r3, r3, #15
 800a78e:	429a      	cmp	r2, r3
 800a790:	d908      	bls.n	800a7a4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a792:	4b66      	ldr	r3, [pc, #408]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	f023 020f 	bic.w	r2, r3, #15
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	4963      	ldr	r1, [pc, #396]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 80d2 	beq.w	800a956 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d143      	bne.n	800a846 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7be:	4b5b      	ldr	r3, [pc, #364]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a7c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d110      	bne.n	800a7ee <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a7cc:	4b57      	ldr	r3, [pc, #348]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a7ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7d2:	4a56      	ldr	r2, [pc, #344]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a7d4:	f043 0304 	orr.w	r3, r3, #4
 800a7d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a7dc:	4b53      	ldr	r3, [pc, #332]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a7de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	60bb      	str	r3, [r7, #8]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a7ee:	f7f8 fa0f 	bl	8002c10 <HAL_GetTick>
 800a7f2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a7f4:	4b4e      	ldr	r3, [pc, #312]	@ (800a930 <HAL_RCC_ClockConfig+0x28c>)
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00f      	beq.n	800a820 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a800:	e008      	b.n	800a814 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a802:	f7f8 fa05 	bl	8002c10 <HAL_GetTick>
 800a806:	4602      	mov	r2, r0
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d901      	bls.n	800a814 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a810:	2303      	movs	r3, #3
 800a812:	e12b      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a814:	4b46      	ldr	r3, [pc, #280]	@ (800a930 <HAL_RCC_ClockConfig+0x28c>)
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d0f0      	beq.n	800a802 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d107      	bne.n	800a836 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a826:	4b41      	ldr	r3, [pc, #260]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a82c:	4a3f      	ldr	r2, [pc, #252]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a82e:	f023 0304 	bic.w	r3, r3, #4
 800a832:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a836:	4b3d      	ldr	r3, [pc, #244]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d121      	bne.n	800a886 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e112      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d107      	bne.n	800a85e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a84e:	4b37      	ldr	r3, [pc, #220]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d115      	bne.n	800a886 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e106      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d107      	bne.n	800a876 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a866:	4b31      	ldr	r3, [pc, #196]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 0304 	and.w	r3, r3, #4
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d109      	bne.n	800a886 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e0fa      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a876:	4b2d      	ldr	r3, [pc, #180]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e0f2      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a886:	4b29      	ldr	r3, [pc, #164]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	f023 0203 	bic.w	r2, r3, #3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	4926      	ldr	r1, [pc, #152]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a894:	4313      	orrs	r3, r2
 800a896:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a898:	f7f8 f9ba 	bl	8002c10 <HAL_GetTick>
 800a89c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d112      	bne.n	800a8cc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8a6:	e00a      	b.n	800a8be <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8a8:	f7f8 f9b2 	bl	8002c10 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d901      	bls.n	800a8be <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e0d6      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8be:	4b1b      	ldr	r3, [pc, #108]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	f003 030c 	and.w	r3, r3, #12
 800a8c6:	2b0c      	cmp	r3, #12
 800a8c8:	d1ee      	bne.n	800a8a8 <HAL_RCC_ClockConfig+0x204>
 800a8ca:	e044      	b.n	800a956 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d112      	bne.n	800a8fa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8d4:	e00a      	b.n	800a8ec <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8d6:	f7f8 f99b 	bl	8002c10 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d901      	bls.n	800a8ec <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e0bf      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a8ee:	69db      	ldr	r3, [r3, #28]
 800a8f0:	f003 030c 	and.w	r3, r3, #12
 800a8f4:	2b08      	cmp	r3, #8
 800a8f6:	d1ee      	bne.n	800a8d6 <HAL_RCC_ClockConfig+0x232>
 800a8f8:	e02d      	b.n	800a956 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d123      	bne.n	800a94a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a902:	e00a      	b.n	800a91a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a904:	f7f8 f984 	bl	8002c10 <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a912:	4293      	cmp	r3, r2
 800a914:	d901      	bls.n	800a91a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e0a8      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a91a:	4b04      	ldr	r3, [pc, #16]	@ (800a92c <HAL_RCC_ClockConfig+0x288>)
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	f003 030c 	and.w	r3, r3, #12
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1ee      	bne.n	800a904 <HAL_RCC_ClockConfig+0x260>
 800a926:	e016      	b.n	800a956 <HAL_RCC_ClockConfig+0x2b2>
 800a928:	40022000 	.word	0x40022000
 800a92c:	46020c00 	.word	0x46020c00
 800a930:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a934:	f7f8 f96c 	bl	8002c10 <HAL_GetTick>
 800a938:	4602      	mov	r2, r0
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a942:	4293      	cmp	r3, r2
 800a944:	d901      	bls.n	800a94a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e090      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a94a:	4b4a      	ldr	r3, [pc, #296]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	f003 030c 	and.w	r3, r3, #12
 800a952:	2b04      	cmp	r3, #4
 800a954:	d1ee      	bne.n	800a934 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d010      	beq.n	800a984 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689a      	ldr	r2, [r3, #8]
 800a966:	4b43      	ldr	r3, [pc, #268]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	f003 030f 	and.w	r3, r3, #15
 800a96e:	429a      	cmp	r2, r3
 800a970:	d208      	bcs.n	800a984 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a972:	4b40      	ldr	r3, [pc, #256]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	f023 020f 	bic.w	r2, r3, #15
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	493d      	ldr	r1, [pc, #244]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800a980:	4313      	orrs	r3, r2
 800a982:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a984:	4b3c      	ldr	r3, [pc, #240]	@ (800aa78 <HAL_RCC_ClockConfig+0x3d4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 030f 	and.w	r3, r3, #15
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d210      	bcs.n	800a9b4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a992:	4b39      	ldr	r3, [pc, #228]	@ (800aa78 <HAL_RCC_ClockConfig+0x3d4>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f023 020f 	bic.w	r2, r3, #15
 800a99a:	4937      	ldr	r1, [pc, #220]	@ (800aa78 <HAL_RCC_ClockConfig+0x3d4>)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9a2:	4b35      	ldr	r3, [pc, #212]	@ (800aa78 <HAL_RCC_ClockConfig+0x3d4>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 030f 	and.w	r3, r3, #15
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d001      	beq.n	800a9b4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e05b      	b.n	800aa6c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d010      	beq.n	800a9e2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68da      	ldr	r2, [r3, #12]
 800a9c4:	4b2b      	ldr	r3, [pc, #172]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d208      	bcs.n	800a9e2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a9d0:	4b28      	ldr	r3, [pc, #160]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	4925      	ldr	r1, [pc, #148]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 0308 	and.w	r3, r3, #8
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d012      	beq.n	800aa14 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	691a      	ldr	r2, [r3, #16]
 800a9f2:	4b20      	ldr	r3, [pc, #128]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	091b      	lsrs	r3, r3, #4
 800a9f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d209      	bcs.n	800aa14 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800aa00:	4b1c      	ldr	r3, [pc, #112]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	011b      	lsls	r3, r3, #4
 800aa0e:	4919      	ldr	r1, [pc, #100]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800aa10:	4313      	orrs	r3, r2
 800aa12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d010      	beq.n	800aa42 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	695a      	ldr	r2, [r3, #20]
 800aa24:	4b13      	ldr	r3, [pc, #76]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800aa26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d208      	bcs.n	800aa42 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800aa30:	4b10      	ldr	r3, [pc, #64]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800aa32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	490d      	ldr	r1, [pc, #52]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800aa42:	f000 f821 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800aa46:	4602      	mov	r2, r0
 800aa48:	4b0a      	ldr	r3, [pc, #40]	@ (800aa74 <HAL_RCC_ClockConfig+0x3d0>)
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	f003 030f 	and.w	r3, r3, #15
 800aa50:	490a      	ldr	r1, [pc, #40]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d8>)
 800aa52:	5ccb      	ldrb	r3, [r1, r3]
 800aa54:	fa22 f303 	lsr.w	r3, r2, r3
 800aa58:	4a09      	ldr	r2, [pc, #36]	@ (800aa80 <HAL_RCC_ClockConfig+0x3dc>)
 800aa5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aa5c:	4b09      	ldr	r3, [pc, #36]	@ (800aa84 <HAL_RCC_ClockConfig+0x3e0>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7f8 f84b 	bl	8002afc <HAL_InitTick>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73fb      	strb	r3, [r7, #15]

  return status;
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	46020c00 	.word	0x46020c00
 800aa78:	40022000 	.word	0x40022000
 800aa7c:	08011b3c 	.word	0x08011b3c
 800aa80:	20000020 	.word	0x20000020
 800aa84:	20000024 	.word	0x20000024

0800aa88 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b08b      	sub	sp, #44	@ 0x2c
 800aa8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800aa92:	2300      	movs	r3, #0
 800aa94:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa96:	4b78      	ldr	r3, [pc, #480]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	f003 030c 	and.w	r3, r3, #12
 800aa9e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aaa0:	4b75      	ldr	r3, [pc, #468]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aaa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa4:	f003 0303 	and.w	r3, r3, #3
 800aaa8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d005      	beq.n	800aabc <HAL_RCC_GetSysClockFreq+0x34>
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	2b0c      	cmp	r3, #12
 800aab4:	d121      	bne.n	800aafa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d11e      	bne.n	800aafa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800aabc:	4b6e      	ldr	r3, [pc, #440]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d107      	bne.n	800aad8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800aac8:	4b6b      	ldr	r3, [pc, #428]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aaca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aace:	0b1b      	lsrs	r3, r3, #12
 800aad0:	f003 030f 	and.w	r3, r3, #15
 800aad4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aad6:	e005      	b.n	800aae4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800aad8:	4b67      	ldr	r3, [pc, #412]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	0f1b      	lsrs	r3, r3, #28
 800aade:	f003 030f 	and.w	r3, r3, #15
 800aae2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aae4:	4a65      	ldr	r2, [pc, #404]	@ (800ac7c <HAL_RCC_GetSysClockFreq+0x1f4>)
 800aae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaec:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d110      	bne.n	800ab16 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800aaf8:	e00d      	b.n	800ab16 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aafa:	4b5f      	ldr	r3, [pc, #380]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	f003 030c 	and.w	r3, r3, #12
 800ab02:	2b04      	cmp	r3, #4
 800ab04:	d102      	bne.n	800ab0c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ab06:	4b5e      	ldr	r3, [pc, #376]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ab08:	623b      	str	r3, [r7, #32]
 800ab0a:	e004      	b.n	800ab16 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	2b08      	cmp	r3, #8
 800ab10:	d101      	bne.n	800ab16 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab12:	4b5b      	ldr	r3, [pc, #364]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ab14:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	2b0c      	cmp	r3, #12
 800ab1a:	f040 80a5 	bne.w	800ac68 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ab1e:	4b56      	ldr	r3, [pc, #344]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ab28:	4b53      	ldr	r3, [pc, #332]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2c:	0a1b      	lsrs	r3, r3, #8
 800ab2e:	f003 030f 	and.w	r3, r3, #15
 800ab32:	3301      	adds	r3, #1
 800ab34:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ab36:	4b50      	ldr	r3, [pc, #320]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3a:	091b      	lsrs	r3, r3, #4
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ab42:	4b4d      	ldr	r3, [pc, #308]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab46:	08db      	lsrs	r3, r3, #3
 800ab48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	fb02 f303 	mul.w	r3, r2, r3
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d003      	beq.n	800ab6c <HAL_RCC_GetSysClockFreq+0xe4>
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	2b03      	cmp	r3, #3
 800ab68:	d022      	beq.n	800abb0 <HAL_RCC_GetSysClockFreq+0x128>
 800ab6a:	e043      	b.n	800abf4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	ee07 3a90 	vmov	s15, r3
 800ab72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab76:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800ac84 <HAL_RCC_GetSysClockFreq+0x1fc>
 800ab7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab7e:	4b3e      	ldr	r3, [pc, #248]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ab8e:	ed97 6a01 	vldr	s12, [r7, #4]
 800ab92:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800ac88 <HAL_RCC_GetSysClockFreq+0x200>
 800ab96:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ab9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ab9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abae:	e046      	b.n	800ac3e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	ee07 3a90 	vmov	s15, r3
 800abb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abba:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800ac84 <HAL_RCC_GetSysClockFreq+0x1fc>
 800abbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc2:	4b2d      	ldr	r3, [pc, #180]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800abd2:	ed97 6a01 	vldr	s12, [r7, #4]
 800abd6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800ac88 <HAL_RCC_GetSysClockFreq+0x200>
 800abda:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abde:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800abe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abf2:	e024      	b.n	800ac3e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf6:	ee07 3a90 	vmov	s15, r3
 800abfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	ee07 3a90 	vmov	s15, r3
 800ac04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac14:	ee07 3a90 	vmov	s15, r3
 800ac18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac1c:	ed97 6a01 	vldr	s12, [r7, #4]
 800ac20:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800ac88 <HAL_RCC_GetSysClockFreq+0x200>
 800ac24:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac30:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac3c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800ac3e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac42:	0e1b      	lsrs	r3, r3, #24
 800ac44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac48:	3301      	adds	r3, #1
 800ac4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac62:	ee17 3a90 	vmov	r3, s15
 800ac66:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800ac68:	6a3b      	ldr	r3, [r7, #32]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	372c      	adds	r7, #44	@ 0x2c
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	46020c00 	.word	0x46020c00
 800ac7c:	08011b54 	.word	0x08011b54
 800ac80:	00f42400 	.word	0x00f42400
 800ac84:	4b742400 	.word	0x4b742400
 800ac88:	46000000 	.word	0x46000000

0800ac8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ac90:	f7ff fefa 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800ac94:	4602      	mov	r2, r0
 800ac96:	4b07      	ldr	r3, [pc, #28]	@ (800acb4 <HAL_RCC_GetHCLKFreq+0x28>)
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	f003 030f 	and.w	r3, r3, #15
 800ac9e:	4906      	ldr	r1, [pc, #24]	@ (800acb8 <HAL_RCC_GetHCLKFreq+0x2c>)
 800aca0:	5ccb      	ldrb	r3, [r1, r3]
 800aca2:	fa22 f303 	lsr.w	r3, r2, r3
 800aca6:	4a05      	ldr	r2, [pc, #20]	@ (800acbc <HAL_RCC_GetHCLKFreq+0x30>)
 800aca8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800acaa:	4b04      	ldr	r3, [pc, #16]	@ (800acbc <HAL_RCC_GetHCLKFreq+0x30>)
 800acac:	681b      	ldr	r3, [r3, #0]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	46020c00 	.word	0x46020c00
 800acb8:	08011b3c 	.word	0x08011b3c
 800acbc:	20000020 	.word	0x20000020

0800acc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800acc4:	f7ff ffe2 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800acc8:	4602      	mov	r2, r0
 800acca:	4b05      	ldr	r3, [pc, #20]	@ (800ace0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800accc:	6a1b      	ldr	r3, [r3, #32]
 800acce:	091b      	lsrs	r3, r3, #4
 800acd0:	f003 0307 	and.w	r3, r3, #7
 800acd4:	4903      	ldr	r1, [pc, #12]	@ (800ace4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acd6:	5ccb      	ldrb	r3, [r1, r3]
 800acd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acdc:	4618      	mov	r0, r3
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	46020c00 	.word	0x46020c00
 800ace4:	08011b4c 	.word	0x08011b4c

0800ace8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800acec:	f7ff ffce 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800acf0:	4602      	mov	r2, r0
 800acf2:	4b05      	ldr	r3, [pc, #20]	@ (800ad08 <HAL_RCC_GetPCLK2Freq+0x20>)
 800acf4:	6a1b      	ldr	r3, [r3, #32]
 800acf6:	0a1b      	lsrs	r3, r3, #8
 800acf8:	f003 0307 	and.w	r3, r3, #7
 800acfc:	4903      	ldr	r1, [pc, #12]	@ (800ad0c <HAL_RCC_GetPCLK2Freq+0x24>)
 800acfe:	5ccb      	ldrb	r3, [r1, r3]
 800ad00:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	46020c00 	.word	0x46020c00
 800ad0c:	08011b4c 	.word	0x08011b4c

0800ad10 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800ad14:	f7ff ffba 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	4b05      	ldr	r3, [pc, #20]	@ (800ad30 <HAL_RCC_GetPCLK3Freq+0x20>)
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1e:	091b      	lsrs	r3, r3, #4
 800ad20:	f003 0307 	and.w	r3, r3, #7
 800ad24:	4903      	ldr	r1, [pc, #12]	@ (800ad34 <HAL_RCC_GetPCLK3Freq+0x24>)
 800ad26:	5ccb      	ldrb	r3, [r1, r3]
 800ad28:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	46020c00 	.word	0x46020c00
 800ad34:	08011b4c 	.word	0x08011b4c

0800ad38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ad40:	4b3e      	ldr	r3, [pc, #248]	@ (800ae3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad46:	f003 0304 	and.w	r3, r3, #4
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ad4e:	f7fe fd21 	bl	8009794 <HAL_PWREx_GetVoltageRange>
 800ad52:	6178      	str	r0, [r7, #20]
 800ad54:	e019      	b.n	800ad8a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad56:	4b39      	ldr	r3, [pc, #228]	@ (800ae3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad5c:	4a37      	ldr	r2, [pc, #220]	@ (800ae3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad5e:	f043 0304 	orr.w	r3, r3, #4
 800ad62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ad66:	4b35      	ldr	r3, [pc, #212]	@ (800ae3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad6c:	f003 0304 	and.w	r3, r3, #4
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ad74:	f7fe fd0e 	bl	8009794 <HAL_PWREx_GetVoltageRange>
 800ad78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ad7a:	4b30      	ldr	r3, [pc, #192]	@ (800ae3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad80:	4a2e      	ldr	r2, [pc, #184]	@ (800ae3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad82:	f023 0304 	bic.w	r3, r3, #4
 800ad86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad90:	d003      	beq.n	800ad9a <RCC_SetFlashLatencyFromMSIRange+0x62>
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad98:	d109      	bne.n	800adae <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ada0:	d202      	bcs.n	800ada8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800ada2:	2301      	movs	r3, #1
 800ada4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ada6:	e033      	b.n	800ae10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800ada8:	2300      	movs	r3, #0
 800adaa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800adac:	e030      	b.n	800ae10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adb4:	d208      	bcs.n	800adc8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adbc:	d102      	bne.n	800adc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800adbe:	2303      	movs	r3, #3
 800adc0:	613b      	str	r3, [r7, #16]
 800adc2:	e025      	b.n	800ae10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	e035      	b.n	800ae34 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adce:	d90f      	bls.n	800adf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d109      	bne.n	800adea <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800addc:	d902      	bls.n	800ade4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800adde:	2300      	movs	r3, #0
 800ade0:	613b      	str	r3, [r7, #16]
 800ade2:	e015      	b.n	800ae10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800ade4:	2301      	movs	r3, #1
 800ade6:	613b      	str	r3, [r7, #16]
 800ade8:	e012      	b.n	800ae10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800adea:	2300      	movs	r3, #0
 800adec:	613b      	str	r3, [r7, #16]
 800adee:	e00f      	b.n	800ae10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adf6:	d109      	bne.n	800ae0c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adfe:	d102      	bne.n	800ae06 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800ae00:	2301      	movs	r3, #1
 800ae02:	613b      	str	r3, [r7, #16]
 800ae04:	e004      	b.n	800ae10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800ae06:	2302      	movs	r3, #2
 800ae08:	613b      	str	r3, [r7, #16]
 800ae0a:	e001      	b.n	800ae10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ae10:	4b0b      	ldr	r3, [pc, #44]	@ (800ae40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f023 020f 	bic.w	r2, r3, #15
 800ae18:	4909      	ldr	r1, [pc, #36]	@ (800ae40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800ae20:	4b07      	ldr	r3, [pc, #28]	@ (800ae40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 030f 	and.w	r3, r3, #15
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d001      	beq.n	800ae32 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e000      	b.n	800ae34 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	46020c00 	.word	0x46020c00
 800ae40:	40022000 	.word	0x40022000

0800ae44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800ae44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae48:	b0c8      	sub	sp, #288	@ 0x120
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae50:	2300      	movs	r3, #0
 800ae52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae56:	2300      	movs	r3, #0
 800ae58:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ae5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	f002 0401 	and.w	r4, r2, #1
 800ae68:	2500      	movs	r5, #0
 800ae6a:	ea54 0305 	orrs.w	r3, r4, r5
 800ae6e:	d00b      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800ae70:	4bd5      	ldr	r3, [pc, #852]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae76:	f023 0103 	bic.w	r1, r3, #3
 800ae7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae80:	4ad1      	ldr	r2, [pc, #836]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae82:	430b      	orrs	r3, r1
 800ae84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ae88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae90:	f002 0802 	and.w	r8, r2, #2
 800ae94:	f04f 0900 	mov.w	r9, #0
 800ae98:	ea58 0309 	orrs.w	r3, r8, r9
 800ae9c:	d00b      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800ae9e:	4bca      	ldr	r3, [pc, #808]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aea4:	f023 010c 	bic.w	r1, r3, #12
 800aea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeae:	4ac6      	ldr	r2, [pc, #792]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aeb0:	430b      	orrs	r3, r1
 800aeb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aeb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	f002 0a04 	and.w	sl, r2, #4
 800aec2:	f04f 0b00 	mov.w	fp, #0
 800aec6:	ea5a 030b 	orrs.w	r3, sl, fp
 800aeca:	d00b      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800aecc:	4bbe      	ldr	r3, [pc, #760]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aed2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800aed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aedc:	4aba      	ldr	r2, [pc, #744]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aede:	430b      	orrs	r3, r1
 800aee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f002 0308 	and.w	r3, r2, #8
 800aef0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aef4:	2300      	movs	r3, #0
 800aef6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800aefa:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800aefe:	460b      	mov	r3, r1
 800af00:	4313      	orrs	r3, r2
 800af02:	d00b      	beq.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800af04:	4bb0      	ldr	r3, [pc, #704]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800af0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af14:	4aac      	ldr	r2, [pc, #688]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af16:	430b      	orrs	r3, r1
 800af18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800af1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f002 0310 	and.w	r3, r2, #16
 800af28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af2c:	2300      	movs	r3, #0
 800af2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800af32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800af36:	460b      	mov	r3, r1
 800af38:	4313      	orrs	r3, r2
 800af3a:	d00b      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800af3c:	4ba2      	ldr	r3, [pc, #648]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800af46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af4c:	4a9e      	ldr	r2, [pc, #632]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af4e:	430b      	orrs	r3, r1
 800af50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800af54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800af60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800af64:	2300      	movs	r3, #0
 800af66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800af6a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800af6e:	460b      	mov	r3, r1
 800af70:	4313      	orrs	r3, r2
 800af72:	d00b      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800af74:	4b94      	ldr	r3, [pc, #592]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800af7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af84:	4a90      	ldr	r2, [pc, #576]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af86:	430b      	orrs	r3, r1
 800af88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	f002 0320 	and.w	r3, r2, #32
 800af98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800af9c:	2300      	movs	r3, #0
 800af9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800afa2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800afa6:	460b      	mov	r3, r1
 800afa8:	4313      	orrs	r3, r2
 800afaa:	d00b      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800afac:	4b86      	ldr	r3, [pc, #536]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800afb2:	f023 0107 	bic.w	r1, r3, #7
 800afb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afbc:	4a82      	ldr	r2, [pc, #520]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afbe:	430b      	orrs	r3, r1
 800afc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800afc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800afd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800afd4:	2300      	movs	r3, #0
 800afd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800afda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800afde:	460b      	mov	r3, r1
 800afe0:	4313      	orrs	r3, r2
 800afe2:	d00b      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800afe4:	4b78      	ldr	r3, [pc, #480]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afea:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800afee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aff4:	4a74      	ldr	r2, [pc, #464]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aff6:	430b      	orrs	r3, r1
 800aff8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800affc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b008:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b00c:	2300      	movs	r3, #0
 800b00e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b016:	460b      	mov	r3, r1
 800b018:	4313      	orrs	r3, r2
 800b01a:	d00b      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b01c:	4b6a      	ldr	r3, [pc, #424]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b01e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b022:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b02a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b02c:	4a66      	ldr	r2, [pc, #408]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b02e:	430b      	orrs	r3, r1
 800b030:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b040:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b044:	2300      	movs	r3, #0
 800b046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b04a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b04e:	460b      	mov	r3, r1
 800b050:	4313      	orrs	r3, r2
 800b052:	d00b      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b054:	4b5c      	ldr	r3, [pc, #368]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b05a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b05e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b064:	4a58      	ldr	r2, [pc, #352]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b066:	430b      	orrs	r3, r1
 800b068:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b06c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b078:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b07c:	2300      	movs	r3, #0
 800b07e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b082:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b086:	460b      	mov	r3, r1
 800b088:	4313      	orrs	r3, r2
 800b08a:	d00b      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b08c:	4b4e      	ldr	r3, [pc, #312]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b08e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b092:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b096:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b09a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b09c:	4a4a      	ldr	r2, [pc, #296]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b09e:	430b      	orrs	r3, r1
 800b0a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b0a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ac:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b0b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b0ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	d00b      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b0c4:	4b40      	ldr	r3, [pc, #256]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0ca:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0d4:	4a3c      	ldr	r2, [pc, #240]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0d6:	430b      	orrs	r3, r1
 800b0d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b0dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b0e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b0f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	d00c      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b0fc:	4b32      	ldr	r3, [pc, #200]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b102:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b10e:	4a2e      	ldr	r2, [pc, #184]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b110:	430b      	orrs	r3, r1
 800b112:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b126:	2300      	movs	r3, #0
 800b128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b12c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b130:	460b      	mov	r3, r1
 800b132:	4313      	orrs	r3, r2
 800b134:	d00c      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b136:	4b24      	ldr	r3, [pc, #144]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b13c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b148:	4a1f      	ldr	r2, [pc, #124]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b14a:	430b      	orrs	r3, r1
 800b14c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b15c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b160:	2300      	movs	r3, #0
 800b162:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b166:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b16a:	460b      	mov	r3, r1
 800b16c:	4313      	orrs	r3, r2
 800b16e:	d00c      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b170:	4b15      	ldr	r3, [pc, #84]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b176:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b17a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b182:	4a11      	ldr	r2, [pc, #68]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b184:	430b      	orrs	r3, r1
 800b186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b192:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b19a:	2300      	movs	r3, #0
 800b19c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b1a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	d010      	beq.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b1aa:	4b07      	ldr	r3, [pc, #28]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b1b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1bc:	4a02      	ldr	r2, [pc, #8]	@ (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1be:	430b      	orrs	r3, r1
 800b1c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b1c4:	e002      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b1c6:	bf00      	nop
 800b1c8:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b1cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b1d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b1e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	d04c      	beq.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b1ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b1f4:	2b80      	cmp	r3, #128	@ 0x80
 800b1f6:	d02d      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b1f8:	2b80      	cmp	r3, #128	@ 0x80
 800b1fa:	d827      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b1fc:	2b60      	cmp	r3, #96	@ 0x60
 800b1fe:	d02b      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b200:	2b60      	cmp	r3, #96	@ 0x60
 800b202:	d823      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b204:	2b40      	cmp	r3, #64	@ 0x40
 800b206:	d006      	beq.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b208:	2b40      	cmp	r3, #64	@ 0x40
 800b20a:	d81f      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d009      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b210:	2b20      	cmp	r3, #32
 800b212:	d011      	beq.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b214:	e01a      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b216:	4bc0      	ldr	r3, [pc, #768]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b21a:	4abf      	ldr	r2, [pc, #764]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b21c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b220:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b222:	e01a      	b.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b228:	3308      	adds	r3, #8
 800b22a:	4618      	mov	r0, r3
 800b22c:	f002 fcd6 	bl	800dbdc <RCCEx_PLL2_Config>
 800b230:	4603      	mov	r3, r0
 800b232:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b236:	e010      	b.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b23c:	332c      	adds	r3, #44	@ 0x2c
 800b23e:	4618      	mov	r0, r3
 800b240:	f002 fd64 	bl	800dd0c <RCCEx_PLL3_Config>
 800b244:	4603      	mov	r3, r0
 800b246:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b24a:	e006      	b.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b252:	e002      	b.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b254:	bf00      	nop
 800b256:	e000      	b.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b25a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10d      	bne.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b262:	4bad      	ldr	r3, [pc, #692]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b264:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b268:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b26c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b270:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b274:	4aa8      	ldr	r2, [pc, #672]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b276:	430b      	orrs	r3, r1
 800b278:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b27c:	e003      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b27e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b282:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b296:	2300      	movs	r3, #0
 800b298:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b29c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	d053      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b2a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2b2:	d033      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b2b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2b8:	d82c      	bhi.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b2ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2be:	d02f      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b2c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2c4:	d826      	bhi.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b2c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2ca:	d008      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b2cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2d0:	d820      	bhi.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00a      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b2d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2da:	d011      	beq.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b2dc:	e01a      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b2de:	4b8e      	ldr	r3, [pc, #568]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e2:	4a8d      	ldr	r2, [pc, #564]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b2ea:	e01a      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b2ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f002 fc72 	bl	800dbdc <RCCEx_PLL2_Config>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b2fe:	e010      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b304:	332c      	adds	r3, #44	@ 0x2c
 800b306:	4618      	mov	r0, r3
 800b308:	f002 fd00 	bl	800dd0c <RCCEx_PLL3_Config>
 800b30c:	4603      	mov	r3, r0
 800b30e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b312:	e006      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b31a:	e002      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b31c:	bf00      	nop
 800b31e:	e000      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b320:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b322:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10d      	bne.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b32a:	4b7b      	ldr	r3, [pc, #492]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b32c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b330:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b334:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b33c:	4a76      	ldr	r2, [pc, #472]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b33e:	430b      	orrs	r3, r1
 800b340:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b344:	e003      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b346:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b34a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b35a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b35e:	2300      	movs	r3, #0
 800b360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b364:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b368:	460b      	mov	r3, r1
 800b36a:	4313      	orrs	r3, r2
 800b36c:	d046      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b36e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b376:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b37a:	d028      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b37c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b380:	d821      	bhi.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b386:	d022      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b38c:	d81b      	bhi.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b38e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b392:	d01c      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b394:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b398:	d815      	bhi.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b39a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b39e:	d008      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b3a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3a4:	d80f      	bhi.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d011      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3ae:	d00e      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3b0:	e009      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f002 fc0f 	bl	800dbdc <RCCEx_PLL2_Config>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b3c4:	e004      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b3cc:	e000      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b3ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3d0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10d      	bne.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b3d8:	4b4f      	ldr	r3, [pc, #316]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b3de:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b3e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b3ea:	4a4b      	ldr	r2, [pc, #300]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3ec:	430b      	orrs	r3, r1
 800b3ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b3f2:	e003      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3f4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3f8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b3fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b408:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b40c:	2300      	movs	r3, #0
 800b40e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b412:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b416:	460b      	mov	r3, r1
 800b418:	4313      	orrs	r3, r2
 800b41a:	d03f      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b41c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b424:	2b04      	cmp	r3, #4
 800b426:	d81e      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b428:	a201      	add	r2, pc, #4	@ (adr r2, 800b430 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42e:	bf00      	nop
 800b430:	0800b46f 	.word	0x0800b46f
 800b434:	0800b445 	.word	0x0800b445
 800b438:	0800b453 	.word	0x0800b453
 800b43c:	0800b46f 	.word	0x0800b46f
 800b440:	0800b46f 	.word	0x0800b46f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b444:	4b34      	ldr	r3, [pc, #208]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b448:	4a33      	ldr	r2, [pc, #204]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b44a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b44e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b450:	e00e      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b456:	332c      	adds	r3, #44	@ 0x2c
 800b458:	4618      	mov	r0, r3
 800b45a:	f002 fc57 	bl	800dd0c <RCCEx_PLL3_Config>
 800b45e:	4603      	mov	r3, r0
 800b460:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b464:	e004      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b46c:	e000      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b46e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b470:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10d      	bne.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b478:	4b27      	ldr	r3, [pc, #156]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b47a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b47e:	f023 0107 	bic.w	r1, r3, #7
 800b482:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b48a:	4a23      	ldr	r2, [pc, #140]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b48c:	430b      	orrs	r3, r1
 800b48e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b492:	e003      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b494:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b498:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b4a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b4ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	d04c      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b4b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b4c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4c4:	d02a      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b4c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4ca:	d821      	bhi.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b4cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b4d0:	d026      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b4d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b4d6:	d81b      	bhi.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b4d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4dc:	d00e      	beq.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b4de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4e2:	d815      	bhi.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d01d      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4ec:	d110      	bne.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f2:	4a09      	ldr	r2, [pc, #36]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4f8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b4fa:	e014      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b4fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b500:	332c      	adds	r3, #44	@ 0x2c
 800b502:	4618      	mov	r0, r3
 800b504:	f002 fc02 	bl	800dd0c <RCCEx_PLL3_Config>
 800b508:	4603      	mov	r3, r0
 800b50a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b50e:	e00a      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b516:	e006      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b518:	46020c00 	.word	0x46020c00
        break;
 800b51c:	bf00      	nop
 800b51e:	e002      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b520:	bf00      	nop
 800b522:	e000      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b524:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b526:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10d      	bne.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b52e:	4baf      	ldr	r3, [pc, #700]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b534:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b53c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b540:	4aaa      	ldr	r2, [pc, #680]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b542:	430b      	orrs	r3, r1
 800b544:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b548:	e003      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b54e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b55e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b560:	2300      	movs	r3, #0
 800b562:	677b      	str	r3, [r7, #116]	@ 0x74
 800b564:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b568:	460b      	mov	r3, r1
 800b56a:	4313      	orrs	r3, r2
 800b56c:	f000 80b5 	beq.w	800b6da <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b570:	2300      	movs	r3, #0
 800b572:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b576:	4b9d      	ldr	r3, [pc, #628]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b57c:	f003 0304 	and.w	r3, r3, #4
 800b580:	2b00      	cmp	r3, #0
 800b582:	d113      	bne.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b584:	4b99      	ldr	r3, [pc, #612]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b58a:	4a98      	ldr	r2, [pc, #608]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b58c:	f043 0304 	orr.w	r3, r3, #4
 800b590:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b594:	4b95      	ldr	r3, [pc, #596]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b59a:	f003 0304 	and.w	r3, r3, #4
 800b59e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b5a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b5ac:	4b90      	ldr	r3, [pc, #576]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b0:	4a8f      	ldr	r2, [pc, #572]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b5b2:	f043 0301 	orr.w	r3, r3, #1
 800b5b6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b5b8:	f7f7 fb2a 	bl	8002c10 <HAL_GetTick>
 800b5bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b5c0:	e00b      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5c2:	f7f7 fb25 	bl	8002c10 <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	d903      	bls.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5d8:	e005      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b5da:	4b85      	ldr	r3, [pc, #532]	@ (800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d0ed      	beq.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b5e6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d165      	bne.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b5ee:	4b7f      	ldr	r3, [pc, #508]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b5fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d023      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b608:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b60c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b610:	4293      	cmp	r3, r2
 800b612:	d01b      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b614:	4b75      	ldr	r3, [pc, #468]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b61a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b61e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b622:	4b72      	ldr	r3, [pc, #456]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b628:	4a70      	ldr	r2, [pc, #448]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b62a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b62e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b632:	4b6e      	ldr	r3, [pc, #440]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b638:	4a6c      	ldr	r2, [pc, #432]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b63a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b63e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b642:	4a6a      	ldr	r2, [pc, #424]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b648:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b64c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b650:	f003 0301 	and.w	r3, r3, #1
 800b654:	2b00      	cmp	r3, #0
 800b656:	d019      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b658:	f7f7 fada 	bl	8002c10 <HAL_GetTick>
 800b65c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b660:	e00d      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b662:	f7f7 fad5 	bl	8002c10 <HAL_GetTick>
 800b666:	4602      	mov	r2, r0
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b66c:	1ad2      	subs	r2, r2, r3
 800b66e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b672:	429a      	cmp	r2, r3
 800b674:	d903      	bls.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b67c:	e006      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b67e:	4b5b      	ldr	r3, [pc, #364]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b684:	f003 0302 	and.w	r3, r3, #2
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d0ea      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b68c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10d      	bne.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b694:	4b55      	ldr	r3, [pc, #340]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b69a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b69e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b6a6:	4a51      	ldr	r2, [pc, #324]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6a8:	430b      	orrs	r3, r1
 800b6aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b6ae:	e008      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b6b0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6b4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b6b8:	e003      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6be:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b6c2:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d107      	bne.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6ca:	4b48      	ldr	r3, [pc, #288]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6d0:	4a46      	ldr	r2, [pc, #280]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6d2:	f023 0304 	bic.w	r3, r3, #4
 800b6d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b6da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b6e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b6ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	d042      	beq.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b6f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b6fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b702:	d022      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b704:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b708:	d81b      	bhi.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b70a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b70e:	d011      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b714:	d815      	bhi.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b716:	2b00      	cmp	r3, #0
 800b718:	d019      	beq.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b71a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b71e:	d110      	bne.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b724:	3308      	adds	r3, #8
 800b726:	4618      	mov	r0, r3
 800b728:	f002 fa58 	bl	800dbdc <RCCEx_PLL2_Config>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b732:	e00d      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b734:	4b2d      	ldr	r3, [pc, #180]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b738:	4a2c      	ldr	r2, [pc, #176]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b73a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b73e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b740:	e006      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b748:	e002      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b74a:	bf00      	nop
 800b74c:	e000      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b74e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b750:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10d      	bne.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b758:	4b24      	ldr	r3, [pc, #144]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b75a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b75e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b766:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b76a:	4a20      	ldr	r2, [pc, #128]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b76c:	430b      	orrs	r3, r1
 800b76e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b772:	e003      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b774:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b778:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b77c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b788:	663b      	str	r3, [r7, #96]	@ 0x60
 800b78a:	2300      	movs	r3, #0
 800b78c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b78e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b792:	460b      	mov	r3, r1
 800b794:	4313      	orrs	r3, r2
 800b796:	d031      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b79c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7a4:	d00b      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b7a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7aa:	d804      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d008      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b7b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7b4:	d007      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b7bc:	e004      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b7be:	bf00      	nop
 800b7c0:	e002      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b7c2:	bf00      	nop
 800b7c4:	e000      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b7c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b7c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d111      	bne.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b7d0:	4b06      	ldr	r3, [pc, #24]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7e2:	4a02      	ldr	r2, [pc, #8]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7e4:	430b      	orrs	r3, r1
 800b7e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b7ea:	e007      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b7ec:	46020c00 	.word	0x46020c00
 800b7f0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7f8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b7fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b808:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b80a:	2300      	movs	r3, #0
 800b80c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b80e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b812:	460b      	mov	r3, r1
 800b814:	4313      	orrs	r3, r2
 800b816:	d00c      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b818:	4bb2      	ldr	r3, [pc, #712]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b81a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b81e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b826:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b82a:	4aae      	ldr	r2, [pc, #696]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b82c:	430b      	orrs	r3, r1
 800b82e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b83e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b840:	2300      	movs	r3, #0
 800b842:	657b      	str	r3, [r7, #84]	@ 0x54
 800b844:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b848:	460b      	mov	r3, r1
 800b84a:	4313      	orrs	r3, r2
 800b84c:	d019      	beq.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b84e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b856:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b85a:	d105      	bne.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b85c:	4ba1      	ldr	r3, [pc, #644]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b860:	4aa0      	ldr	r2, [pc, #640]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b866:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b868:	4b9e      	ldr	r3, [pc, #632]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b86a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b86e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b876:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b87a:	4a9a      	ldr	r2, [pc, #616]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b87c:	430b      	orrs	r3, r1
 800b87e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b88e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b890:	2300      	movs	r3, #0
 800b892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b894:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b898:	460b      	mov	r3, r1
 800b89a:	4313      	orrs	r3, r2
 800b89c:	d00c      	beq.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b89e:	4b91      	ldr	r3, [pc, #580]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8a4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b8a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b8b0:	4a8c      	ldr	r2, [pc, #560]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8b2:	430b      	orrs	r3, r1
 800b8b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b8b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b8c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	d00c      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b8d4:	4b83      	ldr	r3, [pc, #524]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b8de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b8e6:	4a7f      	ldr	r2, [pc, #508]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8e8:	430b      	orrs	r3, r1
 800b8ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b8ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b8fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b900:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b904:	460b      	mov	r3, r1
 800b906:	4313      	orrs	r3, r2
 800b908:	d00c      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b90a:	4b76      	ldr	r3, [pc, #472]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b90c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b910:	f023 0118 	bic.w	r1, r3, #24
 800b914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b918:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b91c:	4a71      	ldr	r2, [pc, #452]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b91e:	430b      	orrs	r3, r1
 800b920:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b930:	633b      	str	r3, [r7, #48]	@ 0x30
 800b932:	2300      	movs	r3, #0
 800b934:	637b      	str	r3, [r7, #52]	@ 0x34
 800b936:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b93a:	460b      	mov	r3, r1
 800b93c:	4313      	orrs	r3, r2
 800b93e:	d032      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b944:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b948:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b94c:	d105      	bne.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b94e:	4b65      	ldr	r3, [pc, #404]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b952:	4a64      	ldr	r2, [pc, #400]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b958:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b95a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b95e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b962:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b966:	d108      	bne.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b96c:	3308      	adds	r3, #8
 800b96e:	4618      	mov	r0, r3
 800b970:	f002 f934 	bl	800dbdc <RCCEx_PLL2_Config>
 800b974:	4603      	mov	r3, r0
 800b976:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b97a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10d      	bne.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b982:	4b58      	ldr	r3, [pc, #352]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b984:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b988:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b98c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b990:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b994:	4a53      	ldr	r2, [pc, #332]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b996:	430b      	orrs	r3, r1
 800b998:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b99c:	e003      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b99e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9a2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b9a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	d04a      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800b9c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b9ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b9ce:	d01e      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800b9d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b9d4:	d825      	bhi.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b9d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9da:	d00e      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800b9dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9e0:	d81f      	bhi.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d021      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800b9e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9ea:	d11a      	bne.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ec:	4b3d      	ldr	r3, [pc, #244]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f0:	4a3c      	ldr	r2, [pc, #240]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9f6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b9f8:	e018      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b9fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9fe:	3308      	adds	r3, #8
 800ba00:	4618      	mov	r0, r3
 800ba02:	f002 f8eb 	bl	800dbdc <RCCEx_PLL2_Config>
 800ba06:	4603      	mov	r3, r0
 800ba08:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba0c:	e00e      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba12:	332c      	adds	r3, #44	@ 0x2c
 800ba14:	4618      	mov	r0, r3
 800ba16:	f002 f979 	bl	800dd0c <RCCEx_PLL3_Config>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba20:	e004      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ba28:	e000      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800ba2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba2c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10d      	bne.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800ba34:	4b2b      	ldr	r3, [pc, #172]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ba3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ba46:	4927      	ldr	r1, [pc, #156]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800ba4e:	e003      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba50:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba54:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800ba58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800ba64:	623b      	str	r3, [r7, #32]
 800ba66:	2300      	movs	r3, #0
 800ba68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4313      	orrs	r3, r2
 800ba72:	d03d      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800ba74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba80:	d00e      	beq.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800ba82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba86:	d815      	bhi.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d017      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ba8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba90:	d110      	bne.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba92:	4b14      	ldr	r3, [pc, #80]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba96:	4a13      	ldr	r2, [pc, #76]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba9c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800ba9e:	e00e      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800baa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa4:	3308      	adds	r3, #8
 800baa6:	4618      	mov	r0, r3
 800baa8:	f002 f898 	bl	800dbdc <RCCEx_PLL2_Config>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bab2:	e004      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800baba:	e000      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800babc:	bf00      	nop
    }
    if (ret == HAL_OK)
 800babe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d110      	bne.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800bac6:	4b07      	ldr	r3, [pc, #28]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bacc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bad8:	4902      	ldr	r1, [pc, #8]	@ (800bae4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bada:	4313      	orrs	r3, r2
 800badc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bae0:	e006      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bae2:	bf00      	nop
 800bae4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800baec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800baf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bafc:	61bb      	str	r3, [r7, #24]
 800bafe:	2300      	movs	r3, #0
 800bb00:	61fb      	str	r3, [r7, #28]
 800bb02:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb06:	460b      	mov	r3, r1
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	d00c      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bb0c:	4b68      	ldr	r3, [pc, #416]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb12:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bb16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bb1e:	4964      	ldr	r1, [pc, #400]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb20:	4313      	orrs	r3, r2
 800bb22:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	2100      	movs	r1, #0
 800bb30:	6139      	str	r1, [r7, #16]
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	617b      	str	r3, [r7, #20]
 800bb38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	d036      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800bb42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00c      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bb4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb52:	d113      	bne.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb58:	3308      	adds	r3, #8
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f002 f83e 	bl	800dbdc <RCCEx_PLL2_Config>
 800bb60:	4603      	mov	r3, r0
 800bb62:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bb66:	e00d      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bb68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb6c:	332c      	adds	r3, #44	@ 0x2c
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f002 f8cc 	bl	800dd0c <RCCEx_PLL3_Config>
 800bb74:	4603      	mov	r3, r0
 800bb76:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bb7a:	e003      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb84:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10d      	bne.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800bb8c:	4b48      	ldr	r3, [pc, #288]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb92:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800bb96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bb9e:	4944      	ldr	r1, [pc, #272]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bba0:	4313      	orrs	r3, r2
 800bba2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bba6:	e003      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bba8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbac:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bbb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb8:	2100      	movs	r1, #0
 800bbba:	60b9      	str	r1, [r7, #8]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	60fb      	str	r3, [r7, #12]
 800bbc2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	d024      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d108      	bne.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bbd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbdc:	332c      	adds	r3, #44	@ 0x2c
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f002 f894 	bl	800dd0c <RCCEx_PLL3_Config>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800bbea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10d      	bne.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800bbf2:	4b2f      	ldr	r3, [pc, #188]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bbf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbf8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bbfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc04:	492a      	ldr	r1, [pc, #168]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc0c:	e003      	b.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc12:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800bc16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	2100      	movs	r1, #0
 800bc20:	6039      	str	r1, [r7, #0]
 800bc22:	f003 0308 	and.w	r3, r3, #8
 800bc26:	607b      	str	r3, [r7, #4]
 800bc28:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	d036      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800bc32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bc3a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bc3e:	d00d      	beq.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800bc40:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bc44:	d811      	bhi.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bc46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc4a:	d012      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bc4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc50:	d80b      	bhi.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00d      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bc56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc5a:	d106      	bne.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc5c:	4b14      	ldr	r3, [pc, #80]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc60:	4a13      	ldr	r2, [pc, #76]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc66:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800bc68:	e004      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bc70:	e000      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800bc72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc74:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10d      	bne.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800bc7c:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc82:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bc86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bc8e:	4908      	ldr	r1, [pc, #32]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc90:	4313      	orrs	r3, r2
 800bc92:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc96:	e003      	b.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc98:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc9c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800bca0:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcb0:	46020c00 	.word	0x46020c00

0800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b089      	sub	sp, #36	@ 0x24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bcbc:	4ba6      	ldr	r3, [pc, #664]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bcbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bcc6:	4ba4      	ldr	r3, [pc, #656]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bcc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcca:	f003 0303 	and.w	r3, r3, #3
 800bcce:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800bcd0:	4ba1      	ldr	r3, [pc, #644]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd4:	0a1b      	lsrs	r3, r3, #8
 800bcd6:	f003 030f 	and.w	r3, r3, #15
 800bcda:	3301      	adds	r3, #1
 800bcdc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bcde:	4b9e      	ldr	r3, [pc, #632]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce2:	091b      	lsrs	r3, r3, #4
 800bce4:	f003 0301 	and.w	r3, r3, #1
 800bce8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bcea:	4b9b      	ldr	r3, [pc, #620]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bcec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcee:	08db      	lsrs	r3, r3, #3
 800bcf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	fb02 f303 	mul.w	r3, r2, r3
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd02:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2b03      	cmp	r3, #3
 800bd0a:	d062      	beq.n	800bdd2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	f200 8081 	bhi.w	800be16 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d024      	beq.n	800bd64 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d17a      	bne.n	800be16 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	ee07 3a90 	vmov	s15, r3
 800bd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd2a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bf5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bd2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd32:	4b89      	ldr	r3, [pc, #548]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd3a:	ee07 3a90 	vmov	s15, r3
 800bd3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd42:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd46:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bd4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd62:	e08f      	b.n	800be84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bd64:	4b7c      	ldr	r3, [pc, #496]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800bd70:	4b79      	ldr	r3, [pc, #484]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	0f1b      	lsrs	r3, r3, #28
 800bd76:	f003 030f 	and.w	r3, r3, #15
 800bd7a:	e006      	b.n	800bd8a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800bd7c:	4b76      	ldr	r3, [pc, #472]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd82:	041b      	lsls	r3, r3, #16
 800bd84:	0f1b      	lsrs	r3, r3, #28
 800bd86:	f003 030f 	and.w	r3, r3, #15
 800bd8a:	4a76      	ldr	r2, [pc, #472]	@ (800bf64 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bd8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd90:	ee07 3a90 	vmov	s15, r3
 800bd94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	ee07 3a90 	vmov	s15, r3
 800bd9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	ee07 3a90 	vmov	s15, r3
 800bdac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb0:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdb4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bdb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bdc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd0:	e058      	b.n	800be84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	ee07 3a90 	vmov	s15, r3
 800bdd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bddc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bde0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde4:	4b5c      	ldr	r3, [pc, #368]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bde6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bde8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdec:	ee07 3a90 	vmov	s15, r3
 800bdf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdf4:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdf8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bdfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800be04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be14:	e036      	b.n	800be84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be16:	4b50      	ldr	r3, [pc, #320]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d005      	beq.n	800be2e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800be22:	4b4d      	ldr	r3, [pc, #308]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	0f1b      	lsrs	r3, r3, #28
 800be28:	f003 030f 	and.w	r3, r3, #15
 800be2c:	e006      	b.n	800be3c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800be2e:	4b4a      	ldr	r3, [pc, #296]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be34:	041b      	lsls	r3, r3, #16
 800be36:	0f1b      	lsrs	r3, r3, #28
 800be38:	f003 030f 	and.w	r3, r3, #15
 800be3c:	4a49      	ldr	r2, [pc, #292]	@ (800bf64 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800be3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be42:	ee07 3a90 	vmov	s15, r3
 800be46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	ee07 3a90 	vmov	s15, r3
 800be50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	ee07 3a90 	vmov	s15, r3
 800be5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be62:	ed97 6a02 	vldr	s12, [r7, #8]
 800be66:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be76:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be82:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800be84:	4b34      	ldr	r3, [pc, #208]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d017      	beq.n	800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800be90:	4b31      	ldr	r3, [pc, #196]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be94:	0a5b      	lsrs	r3, r3, #9
 800be96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be9a:	ee07 3a90 	vmov	s15, r3
 800be9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800bea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bea6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800beaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800beae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb6:	ee17 2a90 	vmov	r2, s15
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	601a      	str	r2, [r3, #0]
 800bebe:	e002      	b.n	800bec6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800bec6:	4b24      	ldr	r3, [pc, #144]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d017      	beq.n	800bf02 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bed2:	4b21      	ldr	r3, [pc, #132]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bed6:	0c1b      	lsrs	r3, r3, #16
 800bed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bedc:	ee07 3a90 	vmov	s15, r3
 800bee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800bee4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bee8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800beec:	edd7 6a07 	vldr	s13, [r7, #28]
 800bef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bef8:	ee17 2a90 	vmov	r2, s15
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	605a      	str	r2, [r3, #4]
 800bf00:	e002      	b.n	800bf08 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800bf08:	4b13      	ldr	r3, [pc, #76]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d017      	beq.n	800bf44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf14:	4b10      	ldr	r3, [pc, #64]	@ (800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf18:	0e1b      	lsrs	r3, r3, #24
 800bf1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf1e:	ee07 3a90 	vmov	s15, r3
 800bf22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800bf26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf2a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf3a:	ee17 2a90 	vmov	r2, s15
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bf42:	e002      	b.n	800bf4a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	609a      	str	r2, [r3, #8]
}
 800bf4a:	bf00      	nop
 800bf4c:	3724      	adds	r7, #36	@ 0x24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	46020c00 	.word	0x46020c00
 800bf5c:	4b742400 	.word	0x4b742400
 800bf60:	46000000 	.word	0x46000000
 800bf64:	08011b54 	.word	0x08011b54

0800bf68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b089      	sub	sp, #36	@ 0x24
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800bf70:	4ba6      	ldr	r3, [pc, #664]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf78:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800bf7a:	4ba4      	ldr	r3, [pc, #656]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf7e:	f003 0303 	and.w	r3, r3, #3
 800bf82:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800bf84:	4ba1      	ldr	r3, [pc, #644]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf88:	0a1b      	lsrs	r3, r3, #8
 800bf8a:	f003 030f 	and.w	r3, r3, #15
 800bf8e:	3301      	adds	r3, #1
 800bf90:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800bf92:	4b9e      	ldr	r3, [pc, #632]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf96:	091b      	lsrs	r3, r3, #4
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800bf9e:	4b9b      	ldr	r3, [pc, #620]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfa2:	08db      	lsrs	r3, r3, #3
 800bfa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	fb02 f303 	mul.w	r3, r2, r3
 800bfae:	ee07 3a90 	vmov	s15, r3
 800bfb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2b03      	cmp	r3, #3
 800bfbe:	d062      	beq.n	800c086 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	f200 8081 	bhi.w	800c0ca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d024      	beq.n	800c018 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d17a      	bne.n	800c0ca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfde:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800bfe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe6:	4b89      	ldr	r3, [pc, #548]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bff6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bffa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c002:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c016:	e08f      	b.n	800c138 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c018:	4b7c      	ldr	r3, [pc, #496]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d005      	beq.n	800c030 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c024:	4b79      	ldr	r3, [pc, #484]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	0f1b      	lsrs	r3, r3, #28
 800c02a:	f003 030f 	and.w	r3, r3, #15
 800c02e:	e006      	b.n	800c03e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c030:	4b76      	ldr	r3, [pc, #472]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c036:	041b      	lsls	r3, r3, #16
 800c038:	0f1b      	lsrs	r3, r3, #28
 800c03a:	f003 030f 	and.w	r3, r3, #15
 800c03e:	4a76      	ldr	r2, [pc, #472]	@ (800c218 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c044:	ee07 3a90 	vmov	s15, r3
 800c048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	ee07 3a90 	vmov	s15, r3
 800c052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	ee07 3a90 	vmov	s15, r3
 800c060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c064:	ed97 6a02 	vldr	s12, [r7, #8]
 800c068:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c06c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c074:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c078:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c07c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c080:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c084:	e058      	b.n	800c138 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	ee07 3a90 	vmov	s15, r3
 800c08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c090:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c098:	4b5c      	ldr	r3, [pc, #368]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c09c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a0:	ee07 3a90 	vmov	s15, r3
 800c0a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0a8:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0ac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c0b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c0b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c0c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0c8:	e036      	b.n	800c138 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c0ca:	4b50      	ldr	r3, [pc, #320]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d005      	beq.n	800c0e2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c0d6:	4b4d      	ldr	r3, [pc, #308]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	0f1b      	lsrs	r3, r3, #28
 800c0dc:	f003 030f 	and.w	r3, r3, #15
 800c0e0:	e006      	b.n	800c0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c0e2:	4b4a      	ldr	r3, [pc, #296]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c0e8:	041b      	lsls	r3, r3, #16
 800c0ea:	0f1b      	lsrs	r3, r3, #28
 800c0ec:	f003 030f 	and.w	r3, r3, #15
 800c0f0:	4a49      	ldr	r2, [pc, #292]	@ (800c218 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	ee07 3a90 	vmov	s15, r3
 800c104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c116:	ed97 6a02 	vldr	s12, [r7, #8]
 800c11a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c136:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c138:	4b34      	ldr	r3, [pc, #208]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c13c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d017      	beq.n	800c174 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c144:	4b31      	ldr	r3, [pc, #196]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c148:	0a5b      	lsrs	r3, r3, #9
 800c14a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c14e:	ee07 3a90 	vmov	s15, r3
 800c152:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c156:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c15a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c16a:	ee17 2a90 	vmov	r2, s15
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	601a      	str	r2, [r3, #0]
 800c172:	e002      	b.n	800c17a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c17a:	4b24      	ldr	r3, [pc, #144]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c17e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c182:	2b00      	cmp	r3, #0
 800c184:	d017      	beq.n	800c1b6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c186:	4b21      	ldr	r3, [pc, #132]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c18a:	0c1b      	lsrs	r3, r3, #16
 800c18c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c190:	ee07 3a90 	vmov	s15, r3
 800c194:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c19c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ac:	ee17 2a90 	vmov	r2, s15
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	605a      	str	r2, [r3, #4]
 800c1b4:	e002      	b.n	800c1bc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c1bc:	4b13      	ldr	r3, [pc, #76]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d017      	beq.n	800c1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1c8:	4b10      	ldr	r3, [pc, #64]	@ (800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1cc:	0e1b      	lsrs	r3, r3, #24
 800c1ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1d2:	ee07 3a90 	vmov	s15, r3
 800c1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c1da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ee:	ee17 2a90 	vmov	r2, s15
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c1f6:	e002      	b.n	800c1fe <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	609a      	str	r2, [r3, #8]
}
 800c1fe:	bf00      	nop
 800c200:	3724      	adds	r7, #36	@ 0x24
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	46020c00 	.word	0x46020c00
 800c210:	4b742400 	.word	0x4b742400
 800c214:	46000000 	.word	0x46000000
 800c218:	08011b54 	.word	0x08011b54

0800c21c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b089      	sub	sp, #36	@ 0x24
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c224:	4ba6      	ldr	r3, [pc, #664]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c22c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c22e:	4ba4      	ldr	r3, [pc, #656]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c232:	f003 0303 	and.w	r3, r3, #3
 800c236:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c238:	4ba1      	ldr	r3, [pc, #644]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c23a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c23c:	0a1b      	lsrs	r3, r3, #8
 800c23e:	f003 030f 	and.w	r3, r3, #15
 800c242:	3301      	adds	r3, #1
 800c244:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c246:	4b9e      	ldr	r3, [pc, #632]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c24a:	091b      	lsrs	r3, r3, #4
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c252:	4b9b      	ldr	r3, [pc, #620]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c256:	08db      	lsrs	r3, r3, #3
 800c258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	fb02 f303 	mul.w	r3, r2, r3
 800c262:	ee07 3a90 	vmov	s15, r3
 800c266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2b03      	cmp	r3, #3
 800c272:	d062      	beq.n	800c33a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	2b03      	cmp	r3, #3
 800c278:	f200 8081 	bhi.w	800c37e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d024      	beq.n	800c2cc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	2b02      	cmp	r3, #2
 800c286:	d17a      	bne.n	800c37e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	ee07 3a90 	vmov	s15, r3
 800c28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c292:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c29a:	4b89      	ldr	r3, [pc, #548]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c29c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a2:	ee07 3a90 	vmov	s15, r3
 800c2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2ae:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c2ca:	e08f      	b.n	800c3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c2cc:	4b7c      	ldr	r3, [pc, #496]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d005      	beq.n	800c2e4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c2d8:	4b79      	ldr	r3, [pc, #484]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	0f1b      	lsrs	r3, r3, #28
 800c2de:	f003 030f 	and.w	r3, r3, #15
 800c2e2:	e006      	b.n	800c2f2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c2e4:	4b76      	ldr	r3, [pc, #472]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c2ea:	041b      	lsls	r3, r3, #16
 800c2ec:	0f1b      	lsrs	r3, r3, #28
 800c2ee:	f003 030f 	and.w	r3, r3, #15
 800c2f2:	4a76      	ldr	r2, [pc, #472]	@ (800c4cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2f8:	ee07 3a90 	vmov	s15, r3
 800c2fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	ee07 3a90 	vmov	s15, r3
 800c306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	ee07 3a90 	vmov	s15, r3
 800c314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c318:	ed97 6a02 	vldr	s12, [r7, #8]
 800c31c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c32c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c330:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c334:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c338:	e058      	b.n	800c3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	ee07 3a90 	vmov	s15, r3
 800c340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c344:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c34c:	4b5c      	ldr	r3, [pc, #368]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c34e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c354:	ee07 3a90 	vmov	s15, r3
 800c358:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c35c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c360:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c364:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c368:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c36c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c370:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c374:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c378:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c37c:	e036      	b.n	800c3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c37e:	4b50      	ldr	r3, [pc, #320]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c386:	2b00      	cmp	r3, #0
 800c388:	d005      	beq.n	800c396 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c38a:	4b4d      	ldr	r3, [pc, #308]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	0f1b      	lsrs	r3, r3, #28
 800c390:	f003 030f 	and.w	r3, r3, #15
 800c394:	e006      	b.n	800c3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c396:	4b4a      	ldr	r3, [pc, #296]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c39c:	041b      	lsls	r3, r3, #16
 800c39e:	0f1b      	lsrs	r3, r3, #28
 800c3a0:	f003 030f 	and.w	r3, r3, #15
 800c3a4:	4a49      	ldr	r2, [pc, #292]	@ (800c4cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3aa:	ee07 3a90 	vmov	s15, r3
 800c3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	ee07 3a90 	vmov	s15, r3
 800c3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3ce:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c3d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3ea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c3ec:	4b34      	ldr	r3, [pc, #208]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d017      	beq.n	800c428 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c3f8:	4b31      	ldr	r3, [pc, #196]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3fc:	0a5b      	lsrs	r3, r3, #9
 800c3fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c402:	ee07 3a90 	vmov	s15, r3
 800c406:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c40a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c40e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c412:	edd7 6a07 	vldr	s13, [r7, #28]
 800c416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c41a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c41e:	ee17 2a90 	vmov	r2, s15
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	601a      	str	r2, [r3, #0]
 800c426:	e002      	b.n	800c42e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c42e:	4b24      	ldr	r3, [pc, #144]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d017      	beq.n	800c46a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c43a:	4b21      	ldr	r3, [pc, #132]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c43c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c43e:	0c1b      	lsrs	r3, r3, #16
 800c440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c444:	ee07 3a90 	vmov	s15, r3
 800c448:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c44c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c450:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c454:	edd7 6a07 	vldr	s13, [r7, #28]
 800c458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c45c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c460:	ee17 2a90 	vmov	r2, s15
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	605a      	str	r2, [r3, #4]
 800c468:	e002      	b.n	800c470 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c470:	4b13      	ldr	r3, [pc, #76]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d017      	beq.n	800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c47c:	4b10      	ldr	r3, [pc, #64]	@ (800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c47e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c480:	0e1b      	lsrs	r3, r3, #24
 800c482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c486:	ee07 3a90 	vmov	s15, r3
 800c48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c48e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c492:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c496:	edd7 6a07 	vldr	s13, [r7, #28]
 800c49a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c49e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4a2:	ee17 2a90 	vmov	r2, s15
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c4aa:	e002      	b.n	800c4b2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	609a      	str	r2, [r3, #8]
}
 800c4b2:	bf00      	nop
 800c4b4:	3724      	adds	r7, #36	@ 0x24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	46020c00 	.word	0x46020c00
 800c4c4:	4b742400 	.word	0x4b742400
 800c4c8:	46000000 	.word	0x46000000
 800c4cc:	08011b54 	.word	0x08011b54

0800c4d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b08e      	sub	sp, #56	@ 0x38
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c4da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4de:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c4e2:	430b      	orrs	r3, r1
 800c4e4:	d145      	bne.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c4e6:	4ba7      	ldr	r3, [pc, #668]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c4e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4f0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c4f2:	4ba4      	ldr	r3, [pc, #656]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c4f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4f8:	f003 0302 	and.w	r3, r3, #2
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d108      	bne.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c506:	d104      	bne.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c50c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c50e:	f001 bb5a 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c512:	4b9c      	ldr	r3, [pc, #624]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c51c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c520:	d114      	bne.n	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c528:	d110      	bne.n	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c52a:	4b96      	ldr	r3, [pc, #600]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c52c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c538:	d103      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c53a:	23fa      	movs	r3, #250	@ 0xfa
 800c53c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c53e:	f001 bb42 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c542:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c546:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c548:	f001 bb3d 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c54c:	4b8d      	ldr	r3, [pc, #564]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c558:	d107      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c560:	d103      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c562:	4b89      	ldr	r3, [pc, #548]	@ (800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c564:	637b      	str	r3, [r7, #52]	@ 0x34
 800c566:	f001 bb2e 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c56a:	2300      	movs	r3, #0
 800c56c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c56e:	f001 bb2a 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c572:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c576:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c57a:	430b      	orrs	r3, r1
 800c57c:	d151      	bne.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c57e:	4b81      	ldr	r3, [pc, #516]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c580:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c584:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c588:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58c:	2b80      	cmp	r3, #128	@ 0x80
 800c58e:	d035      	beq.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c592:	2b80      	cmp	r3, #128	@ 0x80
 800c594:	d841      	bhi.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c598:	2b60      	cmp	r3, #96	@ 0x60
 800c59a:	d02a      	beq.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59e:	2b60      	cmp	r3, #96	@ 0x60
 800c5a0:	d83b      	bhi.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a4:	2b40      	cmp	r3, #64	@ 0x40
 800c5a6:	d009      	beq.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5aa:	2b40      	cmp	r3, #64	@ 0x40
 800c5ac:	d835      	bhi.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00c      	beq.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b6:	2b20      	cmp	r3, #32
 800c5b8:	d012      	beq.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c5ba:	e02e      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7ff fb77 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5ca:	f001 bafc 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ce:	f107 0318 	add.w	r3, r7, #24
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7ff fcc8 	bl	800bf68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5dc:	f001 baf3 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5e0:	f107 030c 	add.w	r3, r7, #12
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff fe19 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5ee:	f001 baea 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c5f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c5f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5f8:	f001 bae5 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5fc:	4b61      	ldr	r3, [pc, #388]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c608:	d103      	bne.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c60a:	4b60      	ldr	r3, [pc, #384]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c60c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c60e:	f001 bada 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c612:	2300      	movs	r3, #0
 800c614:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c616:	f001 bad6 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c61a:	2300      	movs	r3, #0
 800c61c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c61e:	f001 bad2 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c622:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c626:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c62a:	430b      	orrs	r3, r1
 800c62c:	d158      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c62e:	4b55      	ldr	r3, [pc, #340]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c630:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c634:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c638:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c640:	d03b      	beq.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c648:	d846      	bhi.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c650:	d02e      	beq.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c658:	d83e      	bhi.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c660:	d00b      	beq.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c668:	d836      	bhi.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00d      	beq.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c676:	d012      	beq.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c678:	e02e      	b.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c67a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c67e:	4618      	mov	r0, r3
 800c680:	f7ff fb18 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c688:	f001 ba9d 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c68c:	f107 0318 	add.w	r3, r7, #24
 800c690:	4618      	mov	r0, r3
 800c692:	f7ff fc69 	bl	800bf68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c69a:	f001 ba94 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c69e:	f107 030c 	add.w	r3, r7, #12
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7ff fdba 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6ac:	f001 ba8b 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c6b0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c6b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6b6:	f001 ba86 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6ba:	4b32      	ldr	r3, [pc, #200]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6c6:	d103      	bne.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c6c8:	4b30      	ldr	r3, [pc, #192]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c6ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c6cc:	f001 ba7b 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6d4:	f001 ba77 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6dc:	f001 ba73 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6e4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c6e8:	430b      	orrs	r3, r1
 800c6ea:	d126      	bne.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c6ec:	4b25      	ldr	r3, [pc, #148]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c6f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c6f8:	4b22      	ldr	r3, [pc, #136]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c704:	d106      	bne.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d103      	bne.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c70c:	4b1f      	ldr	r3, [pc, #124]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c70e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c710:	f001 ba59 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c714:	4b1b      	ldr	r3, [pc, #108]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c71c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c720:	d107      	bne.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c728:	d103      	bne.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c72a:	4b19      	ldr	r3, [pc, #100]	@ (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c72c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c72e:	f001 ba4a 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c732:	2300      	movs	r3, #0
 800c734:	637b      	str	r3, [r7, #52]	@ 0x34
 800c736:	f001 ba46 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c73a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c73e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c742:	430b      	orrs	r3, r1
 800c744:	d16e      	bne.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c746:	4b0f      	ldr	r3, [pc, #60]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c74c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c750:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c754:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c758:	d03d      	beq.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c760:	d85c      	bhi.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c768:	d014      	beq.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c770:	d854      	bhi.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01f      	beq.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c77a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c77e:	d012      	beq.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c780:	e04c      	b.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c782:	bf00      	nop
 800c784:	46020c00 	.word	0x46020c00
 800c788:	0007a120 	.word	0x0007a120
 800c78c:	00f42400 	.word	0x00f42400
 800c790:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c798:	4618      	mov	r0, r3
 800c79a:	f7ff fa8b 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7a2:	f001 ba10 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7a6:	f107 0318 	add.w	r3, r7, #24
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7ff fbdc 	bl	800bf68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7b4:	f001 ba07 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c7b8:	4ba7      	ldr	r3, [pc, #668]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7c4:	d103      	bne.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c7c6:	4ba5      	ldr	r3, [pc, #660]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c7c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c7ca:	f001 b9fc 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7d2:	f001 b9f8 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c7d6:	4ba0      	ldr	r3, [pc, #640]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f003 0320 	and.w	r3, r3, #32
 800c7de:	2b20      	cmp	r3, #32
 800c7e0:	d118      	bne.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c7e2:	4b9d      	ldr	r3, [pc, #628]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d005      	beq.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c7ee:	4b9a      	ldr	r3, [pc, #616]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	0e1b      	lsrs	r3, r3, #24
 800c7f4:	f003 030f 	and.w	r3, r3, #15
 800c7f8:	e006      	b.n	800c808 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c7fa:	4b97      	ldr	r3, [pc, #604]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c800:	041b      	lsls	r3, r3, #16
 800c802:	0e1b      	lsrs	r3, r3, #24
 800c804:	f003 030f 	and.w	r3, r3, #15
 800c808:	4a95      	ldr	r2, [pc, #596]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c80e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c810:	f001 b9d9 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c814:	2300      	movs	r3, #0
 800c816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c818:	f001 b9d5 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c81c:	2300      	movs	r3, #0
 800c81e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c820:	f001 b9d1 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c824:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c828:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c82c:	430b      	orrs	r3, r1
 800c82e:	d17f      	bne.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c830:	4b89      	ldr	r3, [pc, #548]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c832:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c83a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d165      	bne.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c842:	4b85      	ldr	r3, [pc, #532]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c848:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c84c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c850:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c854:	d034      	beq.n	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c858:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c85c:	d853      	bhi.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c864:	d00b      	beq.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c86c:	d84b      	bhi.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c870:	2b00      	cmp	r3, #0
 800c872:	d016      	beq.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c876:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c87a:	d009      	beq.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c87c:	e043      	b.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c87e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff fa16 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c88c:	f001 b99b 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c890:	f107 0318 	add.w	r3, r7, #24
 800c894:	4618      	mov	r0, r3
 800c896:	f7ff fb67 	bl	800bf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c89e:	f001 b992 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c8a2:	4b6d      	ldr	r3, [pc, #436]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c8aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8ae:	d103      	bne.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c8b0:	4b6a      	ldr	r3, [pc, #424]	@ (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c8b2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c8b4:	f001 b987 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c8bc:	f001 b983 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c8c0:	4b65      	ldr	r3, [pc, #404]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 0320 	and.w	r3, r3, #32
 800c8c8:	2b20      	cmp	r3, #32
 800c8ca:	d118      	bne.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c8cc:	4b62      	ldr	r3, [pc, #392]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c8d8:	4b5f      	ldr	r3, [pc, #380]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	0e1b      	lsrs	r3, r3, #24
 800c8de:	f003 030f 	and.w	r3, r3, #15
 800c8e2:	e006      	b.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c8e4:	4b5c      	ldr	r3, [pc, #368]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c8ea:	041b      	lsls	r3, r3, #16
 800c8ec:	0e1b      	lsrs	r3, r3, #24
 800c8ee:	f003 030f 	and.w	r3, r3, #15
 800c8f2:	4a5b      	ldr	r2, [pc, #364]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8f8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c8fa:	f001 b964 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c8fe:	2300      	movs	r3, #0
 800c900:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c902:	f001 b960 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c906:	2300      	movs	r3, #0
 800c908:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c90a:	f001 b95c 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c914:	d108      	bne.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff f9ca 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c922:	637b      	str	r3, [r7, #52]	@ 0x34
 800c924:	f001 b94f 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c928:	2300      	movs	r3, #0
 800c92a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c92c:	f001 b94b 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c930:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c934:	1e51      	subs	r1, r2, #1
 800c936:	430b      	orrs	r3, r1
 800c938:	d136      	bne.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c93a:	4b47      	ldr	r3, [pc, #284]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c93c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c940:	f003 0303 	and.w	r3, r3, #3
 800c944:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d104      	bne.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c94c:	f7fe f9cc 	bl	800ace8 <HAL_RCC_GetPCLK2Freq>
 800c950:	6378      	str	r0, [r7, #52]	@ 0x34
 800c952:	f001 b938 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d104      	bne.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c95c:	f7fe f894 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800c960:	6378      	str	r0, [r7, #52]	@ 0x34
 800c962:	f001 b930 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c966:	4b3c      	ldr	r3, [pc, #240]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c96e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c972:	d106      	bne.n	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c976:	2b02      	cmp	r3, #2
 800c978:	d103      	bne.n	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c97a:	4b3a      	ldr	r3, [pc, #232]	@ (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c97c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c97e:	f001 b922 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c982:	4b35      	ldr	r3, [pc, #212]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c988:	f003 0302 	and.w	r3, r3, #2
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d107      	bne.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c992:	2b03      	cmp	r3, #3
 800c994:	d104      	bne.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c99a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c99c:	f001 b913 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9a4:	f001 b90f 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ac:	1e91      	subs	r1, r2, #2
 800c9ae:	430b      	orrs	r3, r1
 800c9b0:	d136      	bne.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c9b2:	4b29      	ldr	r3, [pc, #164]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9b8:	f003 030c 	and.w	r3, r3, #12
 800c9bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d104      	bne.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c9c4:	f7fe f97c 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800c9c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9ca:	f001 b8fc 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d0:	2b04      	cmp	r3, #4
 800c9d2:	d104      	bne.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c9d4:	f7fe f858 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800c9d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9da:	f001 b8f4 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c9de:	4b1e      	ldr	r3, [pc, #120]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9ea:	d106      	bne.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ee:	2b08      	cmp	r3, #8
 800c9f0:	d103      	bne.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c9f2:	4b1c      	ldr	r3, [pc, #112]	@ (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9f6:	f001 b8e6 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c9fa:	4b17      	ldr	r3, [pc, #92]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca00:	f003 0302 	and.w	r3, r3, #2
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d107      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ca08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca0a:	2b0c      	cmp	r3, #12
 800ca0c:	d104      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ca0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca14:	f001 b8d7 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca1c:	f001 b8d3 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800ca20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca24:	1f11      	subs	r1, r2, #4
 800ca26:	430b      	orrs	r3, r1
 800ca28:	d13f      	bne.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ca2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ca34:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ca36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d104      	bne.n	800ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca3c:	f7fe f940 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800ca40:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca42:	f001 b8c0 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ca46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca48:	2b10      	cmp	r3, #16
 800ca4a:	d10d      	bne.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca4c:	f7fe f81c 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800ca50:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca52:	f001 b8b8 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ca56:	bf00      	nop
 800ca58:	46020c00 	.word	0x46020c00
 800ca5c:	02dc6c00 	.word	0x02dc6c00
 800ca60:	08011b54 	.word	0x08011b54
 800ca64:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ca68:	4ba8      	ldr	r3, [pc, #672]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca74:	d106      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800ca76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca78:	2b20      	cmp	r3, #32
 800ca7a:	d103      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ca7c:	4ba4      	ldr	r3, [pc, #656]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ca7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca80:	f001 b8a1 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ca84:	4ba1      	ldr	r3, [pc, #644]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ca86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca8a:	f003 0302 	and.w	r3, r3, #2
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d107      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ca92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca94:	2b30      	cmp	r3, #48	@ 0x30
 800ca96:	d104      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800ca98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca9e:	f001 b892 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800caa2:	2300      	movs	r3, #0
 800caa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800caa6:	f001 b88e 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800caaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caae:	f1a2 0108 	sub.w	r1, r2, #8
 800cab2:	430b      	orrs	r3, r1
 800cab4:	d136      	bne.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800cab6:	4b95      	ldr	r3, [pc, #596]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cabc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cac0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800cac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d104      	bne.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cac8:	f7fe f8fa 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800cacc:	6378      	str	r0, [r7, #52]	@ 0x34
 800cace:	f001 b87a 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800cad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad4:	2b40      	cmp	r3, #64	@ 0x40
 800cad6:	d104      	bne.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cad8:	f7fd ffd6 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800cadc:	6378      	str	r0, [r7, #52]	@ 0x34
 800cade:	f001 b872 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800cae2:	4b8a      	ldr	r3, [pc, #552]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800caea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caee:	d106      	bne.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800caf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf2:	2b80      	cmp	r3, #128	@ 0x80
 800caf4:	d103      	bne.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800caf6:	4b86      	ldr	r3, [pc, #536]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800caf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cafa:	f001 b864 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cafe:	4b83      	ldr	r3, [pc, #524]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb04:	f003 0302 	and.w	r3, r3, #2
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d107      	bne.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0e:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb10:	d104      	bne.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800cb12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb16:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb18:	f001 b855 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb20:	f001 b851 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cb24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb28:	f1a2 0110 	sub.w	r1, r2, #16
 800cb2c:	430b      	orrs	r3, r1
 800cb2e:	d139      	bne.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800cb30:	4b76      	ldr	r3, [pc, #472]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb3a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d104      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb42:	f7fe f8bd 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800cb46:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb48:	f001 b83d 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb52:	d104      	bne.n	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb54:	f7fd ff98 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800cb58:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb5a:	f001 b834 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800cb5e:	4b6b      	ldr	r3, [pc, #428]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb6a:	d107      	bne.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb72:	d103      	bne.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800cb74:	4b66      	ldr	r3, [pc, #408]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cb76:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb78:	f001 b825 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800cb7c:	4b63      	ldr	r3, [pc, #396]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb82:	f003 0302 	and.w	r3, r3, #2
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d108      	bne.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb90:	d104      	bne.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800cb92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb96:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb98:	f001 b815 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cba0:	f001 b811 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800cba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cba8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cbac:	430b      	orrs	r3, r1
 800cbae:	d139      	bne.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800cbb0:	4b56      	ldr	r3, [pc, #344]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cbb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cbba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d104      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cbc2:	f7fe f87d 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800cbc6:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbc8:	f000 bffd 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbd2:	d104      	bne.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cbd4:	f7fd ff58 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800cbd8:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbda:	f000 bff4 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800cbde:	4b4b      	ldr	r3, [pc, #300]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbea:	d107      	bne.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbf2:	d103      	bne.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800cbf4:	4b46      	ldr	r3, [pc, #280]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cbf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbf8:	f000 bfe5 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800cbfc:	4b43      	ldr	r3, [pc, #268]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d108      	bne.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cc10:	d104      	bne.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800cc12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc16:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc18:	f000 bfd5 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc20:	f000 bfd1 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800cc24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc28:	f1a2 0120 	sub.w	r1, r2, #32
 800cc2c:	430b      	orrs	r3, r1
 800cc2e:	d158      	bne.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800cc30:	4b36      	ldr	r3, [pc, #216]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d104      	bne.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800cc42:	f7fe f865 	bl	800ad10 <HAL_RCC_GetPCLK3Freq>
 800cc46:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc48:	f000 bfbd 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800cc4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d104      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc52:	f7fd ff19 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800cc56:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc58:	f000 bfb5 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800cc5c:	4b2b      	ldr	r3, [pc, #172]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc68:	d106      	bne.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d103      	bne.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800cc70:	4b27      	ldr	r3, [pc, #156]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc72:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc74:	f000 bfa7 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800cc78:	4b24      	ldr	r3, [pc, #144]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc7e:	f003 0302 	and.w	r3, r3, #2
 800cc82:	2b02      	cmp	r3, #2
 800cc84:	d107      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800cc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc88:	2b03      	cmp	r3, #3
 800cc8a:	d104      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800cc8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc90:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc92:	f000 bf98 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800cc96:	4b1d      	ldr	r3, [pc, #116]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f003 0320 	and.w	r3, r3, #32
 800cc9e:	2b20      	cmp	r3, #32
 800cca0:	d11b      	bne.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800cca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca4:	2b04      	cmp	r3, #4
 800cca6:	d118      	bne.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cca8:	4b18      	ldr	r3, [pc, #96]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800ccb4:	4b15      	ldr	r3, [pc, #84]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	0e1b      	lsrs	r3, r3, #24
 800ccba:	f003 030f 	and.w	r3, r3, #15
 800ccbe:	e006      	b.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800ccc0:	4b12      	ldr	r3, [pc, #72]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ccc6:	041b      	lsls	r3, r3, #16
 800ccc8:	0e1b      	lsrs	r3, r3, #24
 800ccca:	f003 030f 	and.w	r3, r3, #15
 800ccce:	4a11      	ldr	r2, [pc, #68]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ccd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccd6:	f000 bf76 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccde:	f000 bf72 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800cce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cce6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ccea:	430b      	orrs	r3, r1
 800ccec:	d172      	bne.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ccee:	4b07      	ldr	r3, [pc, #28]	@ (800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ccf4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ccf8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd00:	d10a      	bne.n	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd02:	f7fd fec1 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800cd06:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd08:	f000 bf5d 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cd0c:	46020c00 	.word	0x46020c00
 800cd10:	00f42400 	.word	0x00f42400
 800cd14:	08011b54 	.word	0x08011b54
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800cd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd1e:	d108      	bne.n	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd20:	f107 0318 	add.w	r3, r7, #24
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7ff f91f 	bl	800bf68 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd2e:	f000 bf4a 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800cd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d104      	bne.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800cd38:	f7fd ffa8 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800cd3c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd3e:	f000 bf42 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800cd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd44:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cd48:	d122      	bne.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cd4a:	4bb0      	ldr	r3, [pc, #704]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 0320 	and.w	r3, r3, #32
 800cd52:	2b20      	cmp	r3, #32
 800cd54:	d118      	bne.n	800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd56:	4bad      	ldr	r3, [pc, #692]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d005      	beq.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800cd62:	4baa      	ldr	r3, [pc, #680]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	0e1b      	lsrs	r3, r3, #24
 800cd68:	f003 030f 	and.w	r3, r3, #15
 800cd6c:	e006      	b.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800cd6e:	4ba7      	ldr	r3, [pc, #668]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd74:	041b      	lsls	r3, r3, #16
 800cd76:	0e1b      	lsrs	r3, r3, #24
 800cd78:	f003 030f 	and.w	r3, r3, #15
 800cd7c:	4aa4      	ldr	r2, [pc, #656]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd82:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd84:	f000 bf1f 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd8c:	f000 bf1b 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800cd90:	4b9e      	ldr	r3, [pc, #632]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd9c:	d107      	bne.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cda4:	d103      	bne.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800cda6:	4b9b      	ldr	r3, [pc, #620]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cda8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdaa:	f000 bf0c 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800cdae:	4b97      	ldr	r3, [pc, #604]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdba:	d107      	bne.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cdc2:	d103      	bne.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800cdc4:	4b93      	ldr	r3, [pc, #588]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cdc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdc8:	f000 befd 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdd0:	f000 bef9 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800cdd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdd8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cddc:	430b      	orrs	r3, r1
 800cdde:	d158      	bne.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800cde0:	4b8a      	ldr	r3, [pc, #552]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cde2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cde6:	f003 0307 	and.w	r3, r3, #7
 800cdea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdee:	2b04      	cmp	r3, #4
 800cdf0:	d84b      	bhi.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800cdf2:	a201      	add	r2, pc, #4	@ (adr r2, 800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf8:	0800ce31 	.word	0x0800ce31
 800cdfc:	0800ce0d 	.word	0x0800ce0d
 800ce00:	0800ce1f 	.word	0x0800ce1f
 800ce04:	0800ce3b 	.word	0x0800ce3b
 800ce08:	0800ce45 	.word	0x0800ce45
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fe ff4f 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce1a:	f000 bed4 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce1e:	f107 030c 	add.w	r3, r7, #12
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7ff f9fa 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce2c:	f000 becb 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ce30:	f7fd ff2c 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800ce34:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ce36:	f000 bec6 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ce3a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ce3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce40:	f000 bec1 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ce44:	4b71      	ldr	r3, [pc, #452]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f003 0320 	and.w	r3, r3, #32
 800ce4c:	2b20      	cmp	r3, #32
 800ce4e:	d118      	bne.n	800ce82 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce50:	4b6e      	ldr	r3, [pc, #440]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d005      	beq.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800ce5c:	4b6b      	ldr	r3, [pc, #428]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	0e1b      	lsrs	r3, r3, #24
 800ce62:	f003 030f 	and.w	r3, r3, #15
 800ce66:	e006      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800ce68:	4b68      	ldr	r3, [pc, #416]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce6e:	041b      	lsls	r3, r3, #16
 800ce70:	0e1b      	lsrs	r3, r3, #24
 800ce72:	f003 030f 	and.w	r3, r3, #15
 800ce76:	4a66      	ldr	r2, [pc, #408]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ce78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ce7e:	f000 bea2 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ce82:	2300      	movs	r3, #0
 800ce84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce86:	f000 be9e 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce8e:	f000 be9a 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ce92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce96:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800ce9a:	430b      	orrs	r3, r1
 800ce9c:	d167      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ce9e:	4b5b      	ldr	r3, [pc, #364]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cea4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cea8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ceaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ceb0:	d036      	beq.n	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ceb8:	d855      	bhi.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ceba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cebc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cec0:	d029      	beq.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800cec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cec8:	d84d      	bhi.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ceca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cecc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ced0:	d013      	beq.n	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800ced2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ced8:	d845      	bhi.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ceda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d015      	beq.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800cee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cee6:	d13e      	bne.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fe fee1 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cef6:	f000 be66 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cefa:	f107 030c 	add.w	r3, r7, #12
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7ff f98c 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf08:	f000 be5d 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cf0c:	f7fd febe 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800cf10:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cf12:	f000 be58 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cf16:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cf1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf1c:	f000 be53 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cf20:	4b3a      	ldr	r3, [pc, #232]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 0320 	and.w	r3, r3, #32
 800cf28:	2b20      	cmp	r3, #32
 800cf2a:	d118      	bne.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf2c:	4b37      	ldr	r3, [pc, #220]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d005      	beq.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800cf38:	4b34      	ldr	r3, [pc, #208]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	0e1b      	lsrs	r3, r3, #24
 800cf3e:	f003 030f 	and.w	r3, r3, #15
 800cf42:	e006      	b.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cf44:	4b31      	ldr	r3, [pc, #196]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cf4a:	041b      	lsls	r3, r3, #16
 800cf4c:	0e1b      	lsrs	r3, r3, #24
 800cf4e:	f003 030f 	and.w	r3, r3, #15
 800cf52:	4a2f      	ldr	r2, [pc, #188]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cf54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf58:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cf5a:	f000 be34 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf62:	f000 be30 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cf66:	2300      	movs	r3, #0
 800cf68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf6a:	f000 be2c 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800cf6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf72:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800cf76:	430b      	orrs	r3, r1
 800cf78:	d152      	bne.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800cf7a:	4b24      	ldr	r3, [pc, #144]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cf84:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800cf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d104      	bne.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cf8c:	f7fd fe98 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800cf90:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf92:	f000 be18 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800cf96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf9c:	d104      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cf9e:	f7fd fd73 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800cfa2:	6378      	str	r0, [r7, #52]	@ 0x34
 800cfa4:	f000 be0f 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800cfa8:	4b18      	ldr	r3, [pc, #96]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfb4:	d107      	bne.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfbc:	d103      	bne.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800cfbe:	4b15      	ldr	r3, [pc, #84]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cfc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfc2:	f000 be00 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800cfc6:	4b11      	ldr	r3, [pc, #68]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f003 0320 	and.w	r3, r3, #32
 800cfce:	2b20      	cmp	r3, #32
 800cfd0:	d122      	bne.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cfd8:	d11e      	bne.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cfda:	4b0c      	ldr	r3, [pc, #48]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d005      	beq.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800cfe6:	4b09      	ldr	r3, [pc, #36]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	0e1b      	lsrs	r3, r3, #24
 800cfec:	f003 030f 	and.w	r3, r3, #15
 800cff0:	e006      	b.n	800d000 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800cff2:	4b06      	ldr	r3, [pc, #24]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cff8:	041b      	lsls	r3, r3, #16
 800cffa:	0e1b      	lsrs	r3, r3, #24
 800cffc:	f003 030f 	and.w	r3, r3, #15
 800d000:	4a03      	ldr	r2, [pc, #12]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d006:	637b      	str	r3, [r7, #52]	@ 0x34
 800d008:	f000 bddd 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d00c:	46020c00 	.word	0x46020c00
 800d010:	08011b54 	.word	0x08011b54
 800d014:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d018:	2300      	movs	r3, #0
 800d01a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d01c:	f000 bdd3 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d020:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d024:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d028:	430b      	orrs	r3, r1
 800d02a:	d14c      	bne.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d02c:	4ba8      	ldr	r3, [pc, #672]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d02e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d032:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d036:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d104      	bne.n	800d048 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d03e:	f7fd fe3f 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800d042:	6378      	str	r0, [r7, #52]	@ 0x34
 800d044:	f000 bdbf 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d04a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d04e:	d104      	bne.n	800d05a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d050:	f7fd fd1a 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800d054:	6378      	str	r0, [r7, #52]	@ 0x34
 800d056:	f000 bdb6 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d05a:	4b9d      	ldr	r3, [pc, #628]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d066:	d107      	bne.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d06e:	d103      	bne.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d070:	4b98      	ldr	r3, [pc, #608]	@ (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d072:	637b      	str	r3, [r7, #52]	@ 0x34
 800d074:	f000 bda7 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d078:	4b95      	ldr	r3, [pc, #596]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0320 	and.w	r3, r3, #32
 800d080:	2b20      	cmp	r3, #32
 800d082:	d11c      	bne.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d086:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d08a:	d118      	bne.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d08c:	4b90      	ldr	r3, [pc, #576]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d094:	2b00      	cmp	r3, #0
 800d096:	d005      	beq.n	800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d098:	4b8d      	ldr	r3, [pc, #564]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	0e1b      	lsrs	r3, r3, #24
 800d09e:	f003 030f 	and.w	r3, r3, #15
 800d0a2:	e006      	b.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d0a4:	4b8a      	ldr	r3, [pc, #552]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d0aa:	041b      	lsls	r3, r3, #16
 800d0ac:	0e1b      	lsrs	r3, r3, #24
 800d0ae:	f003 030f 	and.w	r3, r3, #15
 800d0b2:	4a89      	ldr	r2, [pc, #548]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0ba:	f000 bd84 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0c2:	f000 bd80 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d0ce:	430b      	orrs	r3, r1
 800d0d0:	d158      	bne.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d0d2:	4b7f      	ldr	r3, [pc, #508]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d0d8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d0dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e0:	2bc0      	cmp	r3, #192	@ 0xc0
 800d0e2:	d028      	beq.n	800d136 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d0e8:	d848      	bhi.n	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ec:	2b80      	cmp	r3, #128	@ 0x80
 800d0ee:	d00e      	beq.n	800d10e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f2:	2b80      	cmp	r3, #128	@ 0x80
 800d0f4:	d842      	bhi.n	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d003      	beq.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0fe:	2b40      	cmp	r3, #64	@ 0x40
 800d100:	d014      	beq.n	800d12c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d102:	e03b      	b.n	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d104:	f7fd fe04 	bl	800ad10 <HAL_RCC_GetPCLK3Freq>
 800d108:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d10a:	f000 bd5c 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d10e:	4b70      	ldr	r3, [pc, #448]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d11a:	d103      	bne.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d11c:	4b6d      	ldr	r3, [pc, #436]	@ (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d11e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d120:	f000 bd51 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d124:	2300      	movs	r3, #0
 800d126:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d128:	f000 bd4d 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d12c:	f7fd fcac 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800d130:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d132:	f000 bd48 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d136:	4b66      	ldr	r3, [pc, #408]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f003 0320 	and.w	r3, r3, #32
 800d13e:	2b20      	cmp	r3, #32
 800d140:	d118      	bne.n	800d174 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d142:	4b63      	ldr	r3, [pc, #396]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d005      	beq.n	800d15a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d14e:	4b60      	ldr	r3, [pc, #384]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	0e1b      	lsrs	r3, r3, #24
 800d154:	f003 030f 	and.w	r3, r3, #15
 800d158:	e006      	b.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d15a:	4b5d      	ldr	r3, [pc, #372]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d15c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d160:	041b      	lsls	r3, r3, #16
 800d162:	0e1b      	lsrs	r3, r3, #24
 800d164:	f003 030f 	and.w	r3, r3, #15
 800d168:	4a5b      	ldr	r2, [pc, #364]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d16a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d16e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d170:	f000 bd29 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d174:	2300      	movs	r3, #0
 800d176:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d178:	f000 bd25 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d17c:	2300      	movs	r3, #0
 800d17e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d180:	f000 bd21 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d184:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d188:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d18c:	430b      	orrs	r3, r1
 800d18e:	d14c      	bne.n	800d22a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d190:	4b4f      	ldr	r3, [pc, #316]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d196:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d19a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d104      	bne.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d1a2:	f7fd fd8d 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800d1a6:	6378      	str	r0, [r7, #52]	@ 0x34
 800d1a8:	f000 bd0d 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d1b2:	d104      	bne.n	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d1b4:	f7fd fc68 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800d1b8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d1ba:	f000 bd04 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d1be:	4b44      	ldr	r3, [pc, #272]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1ca:	d107      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1d2:	d103      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d1d4:	4b3f      	ldr	r3, [pc, #252]	@ (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d1d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1d8:	f000 bcf5 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d1dc:	4b3c      	ldr	r3, [pc, #240]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 0320 	and.w	r3, r3, #32
 800d1e4:	2b20      	cmp	r3, #32
 800d1e6:	d11c      	bne.n	800d222 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d1ee:	d118      	bne.n	800d222 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1f0:	4b37      	ldr	r3, [pc, #220]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d005      	beq.n	800d208 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d1fc:	4b34      	ldr	r3, [pc, #208]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	0e1b      	lsrs	r3, r3, #24
 800d202:	f003 030f 	and.w	r3, r3, #15
 800d206:	e006      	b.n	800d216 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d208:	4b31      	ldr	r3, [pc, #196]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d20a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d20e:	041b      	lsls	r3, r3, #16
 800d210:	0e1b      	lsrs	r3, r3, #24
 800d212:	f003 030f 	and.w	r3, r3, #15
 800d216:	4a30      	ldr	r2, [pc, #192]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d21c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d21e:	f000 bcd2 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d222:	2300      	movs	r3, #0
 800d224:	637b      	str	r3, [r7, #52]	@ 0x34
 800d226:	f000 bcce 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d22a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d22e:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d232:	430b      	orrs	r3, r1
 800d234:	d152      	bne.n	800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d236:	4b26      	ldr	r3, [pc, #152]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d238:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d23c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d240:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d244:	2b00      	cmp	r3, #0
 800d246:	d104      	bne.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d248:	f7fd fd3a 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800d24c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d24e:	f000 bcba 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d258:	d104      	bne.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d25a:	f7fd fc15 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800d25e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d260:	f000 bcb1 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d264:	4b1a      	ldr	r3, [pc, #104]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d26c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d270:	d107      	bne.n	800d282 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d274:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d278:	d103      	bne.n	800d282 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d27a:	4b16      	ldr	r3, [pc, #88]	@ (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d27c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d27e:	f000 bca2 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d282:	4b13      	ldr	r3, [pc, #76]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0320 	and.w	r3, r3, #32
 800d28a:	2b20      	cmp	r3, #32
 800d28c:	d11c      	bne.n	800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d294:	d118      	bne.n	800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d296:	4b0e      	ldr	r3, [pc, #56]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d005      	beq.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d2a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	0e1b      	lsrs	r3, r3, #24
 800d2a8:	f003 030f 	and.w	r3, r3, #15
 800d2ac:	e006      	b.n	800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d2ae:	4b08      	ldr	r3, [pc, #32]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2b4:	041b      	lsls	r3, r3, #16
 800d2b6:	0e1b      	lsrs	r3, r3, #24
 800d2b8:	f003 030f 	and.w	r3, r3, #15
 800d2bc:	4a06      	ldr	r2, [pc, #24]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2c4:	f000 bc7f 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2cc:	f000 bc7b 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d2d0:	46020c00 	.word	0x46020c00
 800d2d4:	00f42400 	.word	0x00f42400
 800d2d8:	08011b54 	.word	0x08011b54
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d2dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2e0:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d2e4:	430b      	orrs	r3, r1
 800d2e6:	d14c      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d2e8:	4ba6      	ldr	r3, [pc, #664]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d2ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2ee:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d2f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d104      	bne.n	800d304 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d2fa:	f7fd fce1 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800d2fe:	6378      	str	r0, [r7, #52]	@ 0x34
 800d300:	f000 bc61 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d306:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d30a:	d104      	bne.n	800d316 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d30c:	f7fd fbbc 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800d310:	6378      	str	r0, [r7, #52]	@ 0x34
 800d312:	f000 bc58 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d316:	4b9b      	ldr	r3, [pc, #620]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d31e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d322:	d107      	bne.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d32a:	d103      	bne.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d32c:	4b96      	ldr	r3, [pc, #600]	@ (800d588 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d32e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d330:	f000 bc49 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d334:	4b93      	ldr	r3, [pc, #588]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 0320 	and.w	r3, r3, #32
 800d33c:	2b20      	cmp	r3, #32
 800d33e:	d11c      	bne.n	800d37a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d342:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d346:	d118      	bne.n	800d37a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d348:	4b8e      	ldr	r3, [pc, #568]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d354:	4b8b      	ldr	r3, [pc, #556]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	0e1b      	lsrs	r3, r3, #24
 800d35a:	f003 030f 	and.w	r3, r3, #15
 800d35e:	e006      	b.n	800d36e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d360:	4b88      	ldr	r3, [pc, #544]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d366:	041b      	lsls	r3, r3, #16
 800d368:	0e1b      	lsrs	r3, r3, #24
 800d36a:	f003 030f 	and.w	r3, r3, #15
 800d36e:	4a87      	ldr	r2, [pc, #540]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d374:	637b      	str	r3, [r7, #52]	@ 0x34
 800d376:	f000 bc26 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d37a:	2300      	movs	r3, #0
 800d37c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d37e:	f000 bc22 	b.w	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d382:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d386:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d38a:	430b      	orrs	r3, r1
 800d38c:	d164      	bne.n	800d458 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d38e:	4b7d      	ldr	r3, [pc, #500]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d398:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d120      	bne.n	800d3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d3a0:	4b78      	ldr	r3, [pc, #480]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f003 0320 	and.w	r3, r3, #32
 800d3a8:	2b20      	cmp	r3, #32
 800d3aa:	d117      	bne.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3ac:	4b75      	ldr	r3, [pc, #468]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d005      	beq.n	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d3b8:	4b72      	ldr	r3, [pc, #456]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	0e1b      	lsrs	r3, r3, #24
 800d3be:	f003 030f 	and.w	r3, r3, #15
 800d3c2:	e006      	b.n	800d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d3c4:	4b6f      	ldr	r3, [pc, #444]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3ca:	041b      	lsls	r3, r3, #16
 800d3cc:	0e1b      	lsrs	r3, r3, #24
 800d3ce:	f003 030f 	and.w	r3, r3, #15
 800d3d2:	4a6e      	ldr	r2, [pc, #440]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3da:	e3f4      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3e0:	e3f1      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d3e2:	4b68      	ldr	r3, [pc, #416]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d3e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3f0:	d112      	bne.n	800d418 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3f8:	d10e      	bne.n	800d418 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d3fa:	4b62      	ldr	r3, [pc, #392]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d408:	d102      	bne.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d40a:	23fa      	movs	r3, #250	@ 0xfa
 800d40c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d40e:	e3da      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d410:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d414:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d416:	e3d6      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d418:	4b5a      	ldr	r3, [pc, #360]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d424:	d106      	bne.n	800d434 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d42c:	d102      	bne.n	800d434 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d42e:	4b56      	ldr	r3, [pc, #344]	@ (800d588 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d430:	637b      	str	r3, [r7, #52]	@ 0x34
 800d432:	e3c8      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d434:	4b53      	ldr	r3, [pc, #332]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d43a:	f003 0302 	and.w	r3, r3, #2
 800d43e:	2b02      	cmp	r3, #2
 800d440:	d107      	bne.n	800d452 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d444:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d448:	d103      	bne.n	800d452 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d44a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d44e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d450:	e3b9      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d452:	2300      	movs	r3, #0
 800d454:	637b      	str	r3, [r7, #52]	@ 0x34
 800d456:	e3b6      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d45c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d460:	430b      	orrs	r3, r1
 800d462:	d164      	bne.n	800d52e <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d464:	4b47      	ldr	r3, [pc, #284]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d46a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d46e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d472:	2b00      	cmp	r3, #0
 800d474:	d120      	bne.n	800d4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d476:	4b43      	ldr	r3, [pc, #268]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f003 0320 	and.w	r3, r3, #32
 800d47e:	2b20      	cmp	r3, #32
 800d480:	d117      	bne.n	800d4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d482:	4b40      	ldr	r3, [pc, #256]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d005      	beq.n	800d49a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d48e:	4b3d      	ldr	r3, [pc, #244]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	0e1b      	lsrs	r3, r3, #24
 800d494:	f003 030f 	and.w	r3, r3, #15
 800d498:	e006      	b.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d49a:	4b3a      	ldr	r3, [pc, #232]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d49c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d4a0:	041b      	lsls	r3, r3, #16
 800d4a2:	0e1b      	lsrs	r3, r3, #24
 800d4a4:	f003 030f 	and.w	r3, r3, #15
 800d4a8:	4a38      	ldr	r2, [pc, #224]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4b0:	e389      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4b6:	e386      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d4b8:	4b32      	ldr	r3, [pc, #200]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4c6:	d112      	bne.n	800d4ee <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4ce:	d10e      	bne.n	800d4ee <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4d0:	4b2c      	ldr	r3, [pc, #176]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4de:	d102      	bne.n	800d4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d4e0:	23fa      	movs	r3, #250	@ 0xfa
 800d4e2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4e4:	e36f      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d4e6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d4ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4ec:	e36b      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d4ee:	4b25      	ldr	r3, [pc, #148]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4fa:	d106      	bne.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d502:	d102      	bne.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d504:	4b20      	ldr	r3, [pc, #128]	@ (800d588 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d506:	637b      	str	r3, [r7, #52]	@ 0x34
 800d508:	e35d      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d50a:	4b1e      	ldr	r3, [pc, #120]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d50c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d510:	f003 0302 	and.w	r3, r3, #2
 800d514:	2b02      	cmp	r3, #2
 800d516:	d107      	bne.n	800d528 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d51e:	d103      	bne.n	800d528 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d520:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d524:	637b      	str	r3, [r7, #52]	@ 0x34
 800d526:	e34e      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d528:	2300      	movs	r3, #0
 800d52a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d52c:	e34b      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d52e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d532:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d536:	430b      	orrs	r3, r1
 800d538:	d14e      	bne.n	800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d53a:	4b12      	ldr	r3, [pc, #72]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d53c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d540:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d544:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d103      	bne.n	800d554 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d54c:	f7fd fbb8 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800d550:	6378      	str	r0, [r7, #52]	@ 0x34
 800d552:	e338      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d554:	4b0b      	ldr	r3, [pc, #44]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d55a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d55e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d562:	d119      	bne.n	800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d56a:	d115      	bne.n	800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d56c:	4b05      	ldr	r3, [pc, #20]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d56e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d576:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d57a:	d109      	bne.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d57c:	23fa      	movs	r3, #250	@ 0xfa
 800d57e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d580:	e321      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d582:	bf00      	nop
 800d584:	46020c00 	.word	0x46020c00
 800d588:	00f42400 	.word	0x00f42400
 800d58c:	08011b54 	.word	0x08011b54
      }
      else
      {
        frequency = LSI_VALUE;
 800d590:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d594:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d596:	e316      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d598:	4ba8      	ldr	r3, [pc, #672]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5a4:	d106      	bne.n	800d5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d5ac:	d102      	bne.n	800d5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d5ae:	4ba4      	ldr	r3, [pc, #656]	@ (800d840 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d5b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5b2:	e308      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d5b4:	4ba1      	ldr	r3, [pc, #644]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5ba:	f003 0302 	and.w	r3, r3, #2
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	d107      	bne.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d5c8:	d103      	bne.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d5ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5d0:	e2f9      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5d6:	e2f6      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d5d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5dc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d5e0:	430b      	orrs	r3, r1
 800d5e2:	d12d      	bne.n	800d640 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d5e4:	4b95      	ldr	r3, [pc, #596]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5ea:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d5ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d5f0:	4b92      	ldr	r3, [pc, #584]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5fc:	d105      	bne.n	800d60a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d600:	2b00      	cmp	r3, #0
 800d602:	d102      	bne.n	800d60a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d604:	4b8e      	ldr	r3, [pc, #568]	@ (800d840 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d606:	637b      	str	r3, [r7, #52]	@ 0x34
 800d608:	e2dd      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d610:	d107      	bne.n	800d622 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fb4c 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d620:	e2d1      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d628:	d107      	bne.n	800d63a <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d62a:	f107 0318 	add.w	r3, r7, #24
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fe fc9a 	bl	800bf68 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	637b      	str	r3, [r7, #52]	@ 0x34
 800d638:	e2c5      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d63a:	2300      	movs	r3, #0
 800d63c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d63e:	e2c2      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d640:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d644:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d648:	430b      	orrs	r3, r1
 800d64a:	d156      	bne.n	800d6fa <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d64c:	4b7b      	ldr	r3, [pc, #492]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d64e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d652:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d656:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d65e:	d028      	beq.n	800d6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d662:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d666:	d845      	bhi.n	800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d66e:	d013      	beq.n	800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d676:	d83d      	bhi.n	800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d004      	beq.n	800d688 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d684:	d004      	beq.n	800d690 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d686:	e035      	b.n	800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d688:	f7fd fb2e 	bl	800ace8 <HAL_RCC_GetPCLK2Freq>
 800d68c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d68e:	e29a      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d690:	f7fd f9fa 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800d694:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d696:	e296      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d698:	4b68      	ldr	r3, [pc, #416]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6a4:	d102      	bne.n	800d6ac <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d6a6:	4b66      	ldr	r3, [pc, #408]	@ (800d840 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d6a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d6aa:	e28c      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6b0:	e289      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d6b2:	4b62      	ldr	r3, [pc, #392]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f003 0320 	and.w	r3, r3, #32
 800d6ba:	2b20      	cmp	r3, #32
 800d6bc:	d117      	bne.n	800d6ee <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d6be:	4b5f      	ldr	r3, [pc, #380]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d005      	beq.n	800d6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d6ca:	4b5c      	ldr	r3, [pc, #368]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	0e1b      	lsrs	r3, r3, #24
 800d6d0:	f003 030f 	and.w	r3, r3, #15
 800d6d4:	e006      	b.n	800d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d6d6:	4b59      	ldr	r3, [pc, #356]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d6dc:	041b      	lsls	r3, r3, #16
 800d6de:	0e1b      	lsrs	r3, r3, #24
 800d6e0:	f003 030f 	and.w	r3, r3, #15
 800d6e4:	4a57      	ldr	r2, [pc, #348]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d6ec:	e26b      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6f2:	e268      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6f8:	e265      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d6fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6fe:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d702:	430b      	orrs	r3, r1
 800d704:	d156      	bne.n	800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d706:	4b4d      	ldr	r3, [pc, #308]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d70c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d710:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d714:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d718:	d028      	beq.n	800d76c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d71c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d720:	d845      	bhi.n	800d7ae <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d724:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d728:	d013      	beq.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d72c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d730:	d83d      	bhi.n	800d7ae <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d734:	2b00      	cmp	r3, #0
 800d736:	d004      	beq.n	800d742 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d73e:	d004      	beq.n	800d74a <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d740:	e035      	b.n	800d7ae <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d742:	f7fd fabd 	bl	800acc0 <HAL_RCC_GetPCLK1Freq>
 800d746:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d748:	e23d      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d74a:	f7fd f99d 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800d74e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d750:	e239      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d752:	4b3a      	ldr	r3, [pc, #232]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d75a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d75e:	d102      	bne.n	800d766 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d760:	4b37      	ldr	r3, [pc, #220]	@ (800d840 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d762:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d764:	e22f      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d766:	2300      	movs	r3, #0
 800d768:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d76a:	e22c      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d76c:	4b33      	ldr	r3, [pc, #204]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f003 0320 	and.w	r3, r3, #32
 800d774:	2b20      	cmp	r3, #32
 800d776:	d117      	bne.n	800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d778:	4b30      	ldr	r3, [pc, #192]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d780:	2b00      	cmp	r3, #0
 800d782:	d005      	beq.n	800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d784:	4b2d      	ldr	r3, [pc, #180]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	0e1b      	lsrs	r3, r3, #24
 800d78a:	f003 030f 	and.w	r3, r3, #15
 800d78e:	e006      	b.n	800d79e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d790:	4b2a      	ldr	r3, [pc, #168]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d792:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d796:	041b      	lsls	r3, r3, #16
 800d798:	0e1b      	lsrs	r3, r3, #24
 800d79a:	f003 030f 	and.w	r3, r3, #15
 800d79e:	4a29      	ldr	r2, [pc, #164]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7a4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d7a6:	e20e      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7ac:	e20b      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7b2:	e208      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7b8:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d7bc:	430b      	orrs	r3, r1
 800d7be:	d17c      	bne.n	800d8ba <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d7c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d7c6:	f003 0318 	and.w	r3, r3, #24
 800d7ca:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ce:	2b18      	cmp	r3, #24
 800d7d0:	d870      	bhi.n	800d8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d7d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d8:	0800d849 	.word	0x0800d849
 800d7dc:	0800d8b5 	.word	0x0800d8b5
 800d7e0:	0800d8b5 	.word	0x0800d8b5
 800d7e4:	0800d8b5 	.word	0x0800d8b5
 800d7e8:	0800d8b5 	.word	0x0800d8b5
 800d7ec:	0800d8b5 	.word	0x0800d8b5
 800d7f0:	0800d8b5 	.word	0x0800d8b5
 800d7f4:	0800d8b5 	.word	0x0800d8b5
 800d7f8:	0800d851 	.word	0x0800d851
 800d7fc:	0800d8b5 	.word	0x0800d8b5
 800d800:	0800d8b5 	.word	0x0800d8b5
 800d804:	0800d8b5 	.word	0x0800d8b5
 800d808:	0800d8b5 	.word	0x0800d8b5
 800d80c:	0800d8b5 	.word	0x0800d8b5
 800d810:	0800d8b5 	.word	0x0800d8b5
 800d814:	0800d8b5 	.word	0x0800d8b5
 800d818:	0800d859 	.word	0x0800d859
 800d81c:	0800d8b5 	.word	0x0800d8b5
 800d820:	0800d8b5 	.word	0x0800d8b5
 800d824:	0800d8b5 	.word	0x0800d8b5
 800d828:	0800d8b5 	.word	0x0800d8b5
 800d82c:	0800d8b5 	.word	0x0800d8b5
 800d830:	0800d8b5 	.word	0x0800d8b5
 800d834:	0800d8b5 	.word	0x0800d8b5
 800d838:	0800d873 	.word	0x0800d873
 800d83c:	46020c00 	.word	0x46020c00
 800d840:	00f42400 	.word	0x00f42400
 800d844:	08011b54 	.word	0x08011b54
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d848:	f7fd fa62 	bl	800ad10 <HAL_RCC_GetPCLK3Freq>
 800d84c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d84e:	e1ba      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d850:	f7fd f91a 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800d854:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d856:	e1b6      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d858:	4b9f      	ldr	r3, [pc, #636]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d864:	d102      	bne.n	800d86c <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d866:	4b9d      	ldr	r3, [pc, #628]	@ (800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d868:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d86a:	e1ac      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d86c:	2300      	movs	r3, #0
 800d86e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d870:	e1a9      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d872:	4b99      	ldr	r3, [pc, #612]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f003 0320 	and.w	r3, r3, #32
 800d87a:	2b20      	cmp	r3, #32
 800d87c:	d117      	bne.n	800d8ae <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d87e:	4b96      	ldr	r3, [pc, #600]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d886:	2b00      	cmp	r3, #0
 800d888:	d005      	beq.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d88a:	4b93      	ldr	r3, [pc, #588]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	0e1b      	lsrs	r3, r3, #24
 800d890:	f003 030f 	and.w	r3, r3, #15
 800d894:	e006      	b.n	800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d896:	4b90      	ldr	r3, [pc, #576]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d89c:	041b      	lsls	r3, r3, #16
 800d89e:	0e1b      	lsrs	r3, r3, #24
 800d8a0:	f003 030f 	and.w	r3, r3, #15
 800d8a4:	4a8e      	ldr	r2, [pc, #568]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8ac:	e18b      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8b2:	e188      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8b8:	e185      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d8ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8be:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d8c2:	430b      	orrs	r3, r1
 800d8c4:	d155      	bne.n	800d972 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d8c6:	4b84      	ldr	r3, [pc, #528]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d8cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d8d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d8d8:	d013      	beq.n	800d902 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d8e0:	d844      	bhi.n	800d96c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d8e8:	d013      	beq.n	800d912 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d8f0:	d83c      	bhi.n	800d96c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d014      	beq.n	800d922 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d8fe:	d014      	beq.n	800d92a <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d900:	e034      	b.n	800d96c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d902:	f107 0318 	add.w	r3, r7, #24
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe fb2e 	bl	800bf68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d910:	e159      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d916:	4618      	mov	r0, r3
 800d918:	f7fe f9cc 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d920:	e151      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d922:	f7fd f8b1 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800d926:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d928:	e14d      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d92a:	4b6b      	ldr	r3, [pc, #428]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f003 0320 	and.w	r3, r3, #32
 800d932:	2b20      	cmp	r3, #32
 800d934:	d117      	bne.n	800d966 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d936:	4b68      	ldr	r3, [pc, #416]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d005      	beq.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d942:	4b65      	ldr	r3, [pc, #404]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	0e1b      	lsrs	r3, r3, #24
 800d948:	f003 030f 	and.w	r3, r3, #15
 800d94c:	e006      	b.n	800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d94e:	4b62      	ldr	r3, [pc, #392]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d954:	041b      	lsls	r3, r3, #16
 800d956:	0e1b      	lsrs	r3, r3, #24
 800d958:	f003 030f 	and.w	r3, r3, #15
 800d95c:	4a60      	ldr	r2, [pc, #384]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d962:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d964:	e12f      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d966:	2300      	movs	r3, #0
 800d968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d96a:	e12c      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d96c:	2300      	movs	r3, #0
 800d96e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d970:	e129      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d972:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d976:	1e59      	subs	r1, r3, #1
 800d978:	ea52 0301 	orrs.w	r3, r2, r1
 800d97c:	d13c      	bne.n	800d9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d97e:	4b56      	ldr	r3, [pc, #344]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d980:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d984:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d988:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d990:	d027      	beq.n	800d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d994:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d998:	d82b      	bhi.n	800d9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d9a0:	d017      	beq.n	800d9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d9a8:	d823      	bhi.n	800d9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d004      	beq.n	800d9ba <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d9b6:	d004      	beq.n	800d9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800d9b8:	e01b      	b.n	800d9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d9ba:	f7fd f865 	bl	800aa88 <HAL_RCC_GetSysClockFreq>
 800d9be:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d9c0:	e101      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d9c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fe f974 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9d0:	e0f9      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9d2:	f107 0318 	add.w	r3, r7, #24
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fe fac6 	bl	800bf68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9e0:	e0f1      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9e2:	f107 030c 	add.w	r3, r7, #12
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fe fc18 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9f0:	e0e9      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9f6:	e0e6      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800d9f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9fc:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800da00:	430b      	orrs	r3, r1
 800da02:	d131      	bne.n	800da68 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800da04:	4b34      	ldr	r3, [pc, #208]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da0e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800da10:	4b31      	ldr	r3, [pc, #196]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da16:	f003 0302 	and.w	r3, r3, #2
 800da1a:	2b02      	cmp	r3, #2
 800da1c:	d106      	bne.n	800da2c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800da1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da20:	2b00      	cmp	r3, #0
 800da22:	d103      	bne.n	800da2c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800da24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da28:	637b      	str	r3, [r7, #52]	@ 0x34
 800da2a:	e0cc      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800da2c:	4b2a      	ldr	r3, [pc, #168]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da3a:	d112      	bne.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800da3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da42:	d10e      	bne.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800da44:	4b24      	ldr	r3, [pc, #144]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da52:	d102      	bne.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800da54:	23fa      	movs	r3, #250	@ 0xfa
 800da56:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800da58:	e0b5      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800da5a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800da5e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800da60:	e0b1      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800da62:	2300      	movs	r3, #0
 800da64:	637b      	str	r3, [r7, #52]	@ 0x34
 800da66:	e0ae      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800da68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da6c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800da70:	430b      	orrs	r3, r1
 800da72:	d13b      	bne.n	800daec <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800da74:	4b18      	ldr	r3, [pc, #96]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800da7a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800da7e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800da80:	4b15      	ldr	r3, [pc, #84]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da8c:	d105      	bne.n	800da9a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800da8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da90:	2b00      	cmp	r3, #0
 800da92:	d102      	bne.n	800da9a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800da94:	4b13      	ldr	r3, [pc, #76]	@ (800dae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800da96:	637b      	str	r3, [r7, #52]	@ 0x34
 800da98:	e095      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800da9a:	4b0f      	ldr	r3, [pc, #60]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800daa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800daa6:	d106      	bne.n	800dab6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800daa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800daae:	d102      	bne.n	800dab6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800dab0:	4b0d      	ldr	r3, [pc, #52]	@ (800dae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800dab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dab4:	e087      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800dab6:	4b08      	ldr	r3, [pc, #32]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dabe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dac2:	d106      	bne.n	800dad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800dac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800daca:	d102      	bne.n	800dad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800dacc:	4b03      	ldr	r3, [pc, #12]	@ (800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800dace:	637b      	str	r3, [r7, #52]	@ 0x34
 800dad0:	e079      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800dad2:	2300      	movs	r3, #0
 800dad4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dad6:	e076      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800dad8:	46020c00 	.word	0x46020c00
 800dadc:	00f42400 	.word	0x00f42400
 800dae0:	08011b54 	.word	0x08011b54
 800dae4:	02dc6c00 	.word	0x02dc6c00
 800dae8:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800daec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daf0:	1e99      	subs	r1, r3, #2
 800daf2:	ea52 0301 	orrs.w	r3, r2, r1
 800daf6:	d120      	bne.n	800db3a <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800daf8:	4b35      	ldr	r3, [pc, #212]	@ (800dbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dafa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dafe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800db02:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800db04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db06:	2b00      	cmp	r3, #0
 800db08:	d004      	beq.n	800db14 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800db0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800db10:	d008      	beq.n	800db24 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800db12:	e00f      	b.n	800db34 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db14:	f107 030c 	add.w	r3, r7, #12
 800db18:	4618      	mov	r0, r3
 800db1a:	f7fe fb7f 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db22:	e050      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db24:	f107 0318 	add.w	r3, r7, #24
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fe fa1d 	bl	800bf68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db32:	e048      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800db34:	2300      	movs	r3, #0
 800db36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db38:	e045      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800db3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db3e:	f1a3 0108 	sub.w	r1, r3, #8
 800db42:	ea52 0301 	orrs.w	r3, r2, r1
 800db46:	d13c      	bne.n	800dbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800db48:	4b21      	ldr	r3, [pc, #132]	@ (800dbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db4e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800db52:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800db54:	4b1e      	ldr	r3, [pc, #120]	@ (800dbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db60:	d105      	bne.n	800db6e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800db62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db64:	2b00      	cmp	r3, #0
 800db66:	d102      	bne.n	800db6e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800db68:	4b1a      	ldr	r3, [pc, #104]	@ (800dbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800db6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800db6c:	e02b      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800db6e:	4b18      	ldr	r3, [pc, #96]	@ (800dbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db7a:	d106      	bne.n	800db8a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800db7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db82:	d102      	bne.n	800db8a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800db84:	4b14      	ldr	r3, [pc, #80]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800db86:	637b      	str	r3, [r7, #52]	@ 0x34
 800db88:	e01d      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800db8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db90:	d107      	bne.n	800dba2 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db96:	4618      	mov	r0, r3
 800db98:	f7fe f88c 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800db9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dba0:	e011      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800dba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800dba8:	d108      	bne.n	800dbbc <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fe f880 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb6:	085b      	lsrs	r3, r3, #1
 800dbb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbba:	e004      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbc0:	e001      	b.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800dbc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3738      	adds	r7, #56	@ 0x38
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	46020c00 	.word	0x46020c00
 800dbd4:	00f42400 	.word	0x00f42400
 800dbd8:	007a1200 	.word	0x007a1200

0800dbdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800dbe4:	4b47      	ldr	r3, [pc, #284]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a46      	ldr	r2, [pc, #280]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dbea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dbee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dbf0:	f7f5 f80e 	bl	8002c10 <HAL_GetTick>
 800dbf4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dbf6:	e008      	b.n	800dc0a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dbf8:	f7f5 f80a 	bl	8002c10 <HAL_GetTick>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d901      	bls.n	800dc0a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dc06:	2303      	movs	r3, #3
 800dc08:	e077      	b.n	800dcfa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc0a:	4b3e      	ldr	r3, [pc, #248]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d1f0      	bne.n	800dbf8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800dc16:	4b3b      	ldr	r3, [pc, #236]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dc1e:	f023 0303 	bic.w	r3, r3, #3
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	6811      	ldr	r1, [r2, #0]
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	6852      	ldr	r2, [r2, #4]
 800dc2a:	3a01      	subs	r2, #1
 800dc2c:	0212      	lsls	r2, r2, #8
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	4934      	ldr	r1, [pc, #208]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc32:	4313      	orrs	r3, r2
 800dc34:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800dc36:	4b33      	ldr	r3, [pc, #204]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc3a:	4b33      	ldr	r3, [pc, #204]	@ (800dd08 <RCCEx_PLL2_Config+0x12c>)
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	6892      	ldr	r2, [r2, #8]
 800dc42:	3a01      	subs	r2, #1
 800dc44:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	68d2      	ldr	r2, [r2, #12]
 800dc4c:	3a01      	subs	r2, #1
 800dc4e:	0252      	lsls	r2, r2, #9
 800dc50:	b292      	uxth	r2, r2
 800dc52:	4311      	orrs	r1, r2
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	6912      	ldr	r2, [r2, #16]
 800dc58:	3a01      	subs	r2, #1
 800dc5a:	0412      	lsls	r2, r2, #16
 800dc5c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dc60:	4311      	orrs	r1, r2
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	6952      	ldr	r2, [r2, #20]
 800dc66:	3a01      	subs	r2, #1
 800dc68:	0612      	lsls	r2, r2, #24
 800dc6a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dc6e:	430a      	orrs	r2, r1
 800dc70:	4924      	ldr	r1, [pc, #144]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc72:	4313      	orrs	r3, r2
 800dc74:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800dc76:	4b23      	ldr	r3, [pc, #140]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7a:	f023 020c 	bic.w	r2, r3, #12
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	699b      	ldr	r3, [r3, #24]
 800dc82:	4920      	ldr	r1, [pc, #128]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc84:	4313      	orrs	r3, r2
 800dc86:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800dc88:	4b1e      	ldr	r3, [pc, #120]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a1b      	ldr	r3, [r3, #32]
 800dc90:	491c      	ldr	r1, [pc, #112]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc92:	4313      	orrs	r3, r2
 800dc94:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800dc96:	4b1b      	ldr	r3, [pc, #108]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc9a:	4a1a      	ldr	r2, [pc, #104]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dc9c:	f023 0310 	bic.w	r3, r3, #16
 800dca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dca2:	4b18      	ldr	r3, [pc, #96]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dcaa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	69d2      	ldr	r2, [r2, #28]
 800dcb2:	00d2      	lsls	r2, r2, #3
 800dcb4:	4913      	ldr	r1, [pc, #76]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800dcba:	4b12      	ldr	r3, [pc, #72]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dcbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcbe:	4a11      	ldr	r2, [pc, #68]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dcc0:	f043 0310 	orr.w	r3, r3, #16
 800dcc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800dcc6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a0e      	ldr	r2, [pc, #56]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dccc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dcd0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dcd2:	f7f4 ff9d 	bl	8002c10 <HAL_GetTick>
 800dcd6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dcd8:	e008      	b.n	800dcec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dcda:	f7f4 ff99 	bl	8002c10 <HAL_GetTick>
 800dcde:	4602      	mov	r2, r0
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	2b02      	cmp	r3, #2
 800dce6:	d901      	bls.n	800dcec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800dce8:	2303      	movs	r3, #3
 800dcea:	e006      	b.n	800dcfa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dcec:	4b05      	ldr	r3, [pc, #20]	@ (800dd04 <RCCEx_PLL2_Config+0x128>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d0f0      	beq.n	800dcda <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800dcf8:	2300      	movs	r3, #0

}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	46020c00 	.word	0x46020c00
 800dd08:	80800000 	.word	0x80800000

0800dd0c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800dd14:	4b47      	ldr	r3, [pc, #284]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4a46      	ldr	r2, [pc, #280]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800dd1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd1e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd20:	f7f4 ff76 	bl	8002c10 <HAL_GetTick>
 800dd24:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd26:	e008      	b.n	800dd3a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd28:	f7f4 ff72 	bl	8002c10 <HAL_GetTick>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	2b02      	cmp	r3, #2
 800dd34:	d901      	bls.n	800dd3a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dd36:	2303      	movs	r3, #3
 800dd38:	e077      	b.n	800de2a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd3a:	4b3e      	ldr	r3, [pc, #248]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1f0      	bne.n	800dd28 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800dd46:	4b3b      	ldr	r3, [pc, #236]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800dd48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dd4e:	f023 0303 	bic.w	r3, r3, #3
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	6811      	ldr	r1, [r2, #0]
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	6852      	ldr	r2, [r2, #4]
 800dd5a:	3a01      	subs	r2, #1
 800dd5c:	0212      	lsls	r2, r2, #8
 800dd5e:	430a      	orrs	r2, r1
 800dd60:	4934      	ldr	r1, [pc, #208]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800dd62:	4313      	orrs	r3, r2
 800dd64:	630b      	str	r3, [r1, #48]	@ 0x30
 800dd66:	4b33      	ldr	r3, [pc, #204]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800dd68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd6a:	4b33      	ldr	r3, [pc, #204]	@ (800de38 <RCCEx_PLL3_Config+0x12c>)
 800dd6c:	4013      	ands	r3, r2
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	6892      	ldr	r2, [r2, #8]
 800dd72:	3a01      	subs	r2, #1
 800dd74:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	68d2      	ldr	r2, [r2, #12]
 800dd7c:	3a01      	subs	r2, #1
 800dd7e:	0252      	lsls	r2, r2, #9
 800dd80:	b292      	uxth	r2, r2
 800dd82:	4311      	orrs	r1, r2
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	6912      	ldr	r2, [r2, #16]
 800dd88:	3a01      	subs	r2, #1
 800dd8a:	0412      	lsls	r2, r2, #16
 800dd8c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dd90:	4311      	orrs	r1, r2
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	6952      	ldr	r2, [r2, #20]
 800dd96:	3a01      	subs	r2, #1
 800dd98:	0612      	lsls	r2, r2, #24
 800dd9a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dd9e:	430a      	orrs	r2, r1
 800dda0:	4924      	ldr	r1, [pc, #144]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800dda2:	4313      	orrs	r3, r2
 800dda4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800dda6:	4b23      	ldr	r3, [pc, #140]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800dda8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddaa:	f023 020c 	bic.w	r2, r3, #12
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	4920      	ldr	r1, [pc, #128]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ddb8:	4b1e      	ldr	r3, [pc, #120]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800ddba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6a1b      	ldr	r3, [r3, #32]
 800ddc0:	491c      	ldr	r1, [pc, #112]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ddc6:	4b1b      	ldr	r3, [pc, #108]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800ddc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddca:	4a1a      	ldr	r2, [pc, #104]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800ddcc:	f023 0310 	bic.w	r3, r3, #16
 800ddd0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ddd2:	4b18      	ldr	r3, [pc, #96]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800ddd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ddda:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	69d2      	ldr	r2, [r2, #28]
 800dde2:	00d2      	lsls	r2, r2, #3
 800dde4:	4913      	ldr	r1, [pc, #76]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800dde6:	4313      	orrs	r3, r2
 800dde8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800ddea:	4b12      	ldr	r3, [pc, #72]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800ddec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddee:	4a11      	ldr	r2, [pc, #68]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800ddf0:	f043 0310 	orr.w	r3, r3, #16
 800ddf4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800ddf6:	4b0f      	ldr	r3, [pc, #60]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a0e      	ldr	r2, [pc, #56]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800ddfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de00:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de02:	f7f4 ff05 	bl	8002c10 <HAL_GetTick>
 800de06:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de08:	e008      	b.n	800de1c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de0a:	f7f4 ff01 	bl	8002c10 <HAL_GetTick>
 800de0e:	4602      	mov	r2, r0
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	2b02      	cmp	r3, #2
 800de16:	d901      	bls.n	800de1c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800de18:	2303      	movs	r3, #3
 800de1a:	e006      	b.n	800de2a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de1c:	4b05      	ldr	r3, [pc, #20]	@ (800de34 <RCCEx_PLL3_Config+0x128>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de24:	2b00      	cmp	r3, #0
 800de26:	d0f0      	beq.n	800de0a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	46020c00 	.word	0x46020c00
 800de38:	80800000 	.word	0x80800000

0800de3c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800de44:	2301      	movs	r3, #1
 800de46:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d071      	beq.n	800df32 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b00      	cmp	r3, #0
 800de58:	d106      	bne.n	800de68 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7f4 f97a 	bl	800215c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2202      	movs	r2, #2
 800de6c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800de70:	4b32      	ldr	r3, [pc, #200]	@ (800df3c <HAL_RTC_Init+0x100>)
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	f003 0310 	and.w	r3, r3, #16
 800de78:	2b10      	cmp	r3, #16
 800de7a:	d051      	beq.n	800df20 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de7c:	4b2f      	ldr	r3, [pc, #188]	@ (800df3c <HAL_RTC_Init+0x100>)
 800de7e:	22ca      	movs	r2, #202	@ 0xca
 800de80:	625a      	str	r2, [r3, #36]	@ 0x24
 800de82:	4b2e      	ldr	r3, [pc, #184]	@ (800df3c <HAL_RTC_Init+0x100>)
 800de84:	2253      	movs	r2, #83	@ 0x53
 800de86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f88b 	bl	800dfa4 <RTC_EnterInitMode>
 800de8e:	4603      	mov	r3, r0
 800de90:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800de92:	7bfb      	ldrb	r3, [r7, #15]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d13f      	bne.n	800df18 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800de98:	4b28      	ldr	r3, [pc, #160]	@ (800df3c <HAL_RTC_Init+0x100>)
 800de9a:	699b      	ldr	r3, [r3, #24]
 800de9c:	4a27      	ldr	r2, [pc, #156]	@ (800df3c <HAL_RTC_Init+0x100>)
 800de9e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800dea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dea6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800dea8:	4b24      	ldr	r3, [pc, #144]	@ (800df3c <HAL_RTC_Init+0x100>)
 800deaa:	699a      	ldr	r2, [r3, #24]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6859      	ldr	r1, [r3, #4]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	4319      	orrs	r1, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	699b      	ldr	r3, [r3, #24]
 800deba:	430b      	orrs	r3, r1
 800debc:	491f      	ldr	r1, [pc, #124]	@ (800df3c <HAL_RTC_Init+0x100>)
 800debe:	4313      	orrs	r3, r2
 800dec0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	68da      	ldr	r2, [r3, #12]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	689b      	ldr	r3, [r3, #8]
 800deca:	041b      	lsls	r3, r3, #16
 800decc:	491b      	ldr	r1, [pc, #108]	@ (800df3c <HAL_RTC_Init+0x100>)
 800dece:	4313      	orrs	r3, r2
 800ded0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800ded2:	4b1a      	ldr	r3, [pc, #104]	@ (800df3c <HAL_RTC_Init+0x100>)
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dee2:	430b      	orrs	r3, r1
 800dee4:	4915      	ldr	r1, [pc, #84]	@ (800df3c <HAL_RTC_Init+0x100>)
 800dee6:	4313      	orrs	r3, r2
 800dee8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 f896 	bl	800e01c <RTC_ExitInitMode>
 800def0:	4603      	mov	r3, r0
 800def2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800def4:	7bfb      	ldrb	r3, [r7, #15]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10e      	bne.n	800df18 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800defa:	4b10      	ldr	r3, [pc, #64]	@ (800df3c <HAL_RTC_Init+0x100>)
 800defc:	699b      	ldr	r3, [r3, #24]
 800defe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a19      	ldr	r1, [r3, #32]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	69db      	ldr	r3, [r3, #28]
 800df0a:	4319      	orrs	r1, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	430b      	orrs	r3, r1
 800df12:	490a      	ldr	r1, [pc, #40]	@ (800df3c <HAL_RTC_Init+0x100>)
 800df14:	4313      	orrs	r3, r2
 800df16:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df18:	4b08      	ldr	r3, [pc, #32]	@ (800df3c <HAL_RTC_Init+0x100>)
 800df1a:	22ff      	movs	r2, #255	@ 0xff
 800df1c:	625a      	str	r2, [r3, #36]	@ 0x24
 800df1e:	e001      	b.n	800df24 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800df20:	2300      	movs	r3, #0
 800df22:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800df24:	7bfb      	ldrb	r3, [r7, #15]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d103      	bne.n	800df32 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2201      	movs	r2, #1
 800df2e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800df32:	7bfb      	ldrb	r3, [r7, #15]
}
 800df34:	4618      	mov	r0, r3
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	46007800 	.word	0x46007800

0800df40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800df48:	4b15      	ldr	r3, [pc, #84]	@ (800dfa0 <HAL_RTC_WaitForSynchro+0x60>)
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	4a14      	ldr	r2, [pc, #80]	@ (800dfa0 <HAL_RTC_WaitForSynchro+0x60>)
 800df4e:	f023 0320 	bic.w	r3, r3, #32
 800df52:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800df54:	f7f4 fe5c 	bl	8002c10 <HAL_GetTick>
 800df58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800df5a:	e013      	b.n	800df84 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800df5c:	f7f4 fe58 	bl	8002c10 <HAL_GetTick>
 800df60:	4602      	mov	r2, r0
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800df6a:	d90b      	bls.n	800df84 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800df6c:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa0 <HAL_RTC_WaitForSynchro+0x60>)
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	f003 0320 	and.w	r3, r3, #32
 800df74:	2b00      	cmp	r3, #0
 800df76:	d10c      	bne.n	800df92 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2203      	movs	r2, #3
 800df7c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800df80:	2303      	movs	r3, #3
 800df82:	e008      	b.n	800df96 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800df84:	4b06      	ldr	r3, [pc, #24]	@ (800dfa0 <HAL_RTC_WaitForSynchro+0x60>)
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	f003 0320 	and.w	r3, r3, #32
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d0e5      	beq.n	800df5c <HAL_RTC_WaitForSynchro+0x1c>
 800df90:	e000      	b.n	800df94 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800df92:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	46007800 	.word	0x46007800

0800dfa4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dfb0:	4b19      	ldr	r3, [pc, #100]	@ (800e018 <RTC_EnterInitMode+0x74>)
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d128      	bne.n	800e00e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dfbc:	4b16      	ldr	r3, [pc, #88]	@ (800e018 <RTC_EnterInitMode+0x74>)
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	4a15      	ldr	r2, [pc, #84]	@ (800e018 <RTC_EnterInitMode+0x74>)
 800dfc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfc6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800dfc8:	f7f4 fe22 	bl	8002c10 <HAL_GetTick>
 800dfcc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfce:	e013      	b.n	800dff8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dfd0:	f7f4 fe1e 	bl	8002c10 <HAL_GetTick>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	1ad3      	subs	r3, r2, r3
 800dfda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dfde:	d90b      	bls.n	800dff8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dfe0:	4b0d      	ldr	r3, [pc, #52]	@ (800e018 <RTC_EnterInitMode+0x74>)
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d10f      	bne.n	800e00c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800dfec:	2303      	movs	r3, #3
 800dfee:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2203      	movs	r2, #3
 800dff4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dff8:	4b07      	ldr	r3, [pc, #28]	@ (800e018 <RTC_EnterInitMode+0x74>)
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e000:	2b00      	cmp	r3, #0
 800e002:	d104      	bne.n	800e00e <RTC_EnterInitMode+0x6a>
 800e004:	7bfb      	ldrb	r3, [r7, #15]
 800e006:	2b03      	cmp	r3, #3
 800e008:	d1e2      	bne.n	800dfd0 <RTC_EnterInitMode+0x2c>
 800e00a:	e000      	b.n	800e00e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e00c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	46007800 	.word	0x46007800

0800e01c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e028:	4b1a      	ldr	r3, [pc, #104]	@ (800e094 <RTC_ExitInitMode+0x78>)
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	4a19      	ldr	r2, [pc, #100]	@ (800e094 <RTC_ExitInitMode+0x78>)
 800e02e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e032:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e034:	4b17      	ldr	r3, [pc, #92]	@ (800e094 <RTC_ExitInitMode+0x78>)
 800e036:	699b      	ldr	r3, [r3, #24]
 800e038:	f003 0320 	and.w	r3, r3, #32
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10c      	bne.n	800e05a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7ff ff7d 	bl	800df40 <HAL_RTC_WaitForSynchro>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d01e      	beq.n	800e08a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2203      	movs	r2, #3
 800e050:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e054:	2303      	movs	r3, #3
 800e056:	73fb      	strb	r3, [r7, #15]
 800e058:	e017      	b.n	800e08a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e05a:	4b0e      	ldr	r3, [pc, #56]	@ (800e094 <RTC_ExitInitMode+0x78>)
 800e05c:	699b      	ldr	r3, [r3, #24]
 800e05e:	4a0d      	ldr	r2, [pc, #52]	@ (800e094 <RTC_ExitInitMode+0x78>)
 800e060:	f023 0320 	bic.w	r3, r3, #32
 800e064:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7ff ff6a 	bl	800df40 <HAL_RTC_WaitForSynchro>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d005      	beq.n	800e07e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2203      	movs	r2, #3
 800e076:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e07a:	2303      	movs	r3, #3
 800e07c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e07e:	4b05      	ldr	r3, [pc, #20]	@ (800e094 <RTC_ExitInitMode+0x78>)
 800e080:	699b      	ldr	r3, [r3, #24]
 800e082:	4a04      	ldr	r2, [pc, #16]	@ (800e094 <RTC_ExitInitMode+0x78>)
 800e084:	f043 0320 	orr.w	r3, r3, #32
 800e088:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	46007800 	.word	0x46007800

0800e098 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	4910      	ldr	r1, [pc, #64]	@ (800e0ec <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	689a      	ldr	r2, [r3, #8]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	431a      	orrs	r2, r3
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	699b      	ldr	r3, [r3, #24]
 800e0be:	490c      	ldr	r1, [pc, #48]	@ (800e0f0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e0c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e0f0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e0c6:	6a1b      	ldr	r3, [r3, #32]
 800e0c8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	6919      	ldr	r1, [r3, #16]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	695b      	ldr	r3, [r3, #20]
 800e0d4:	041b      	lsls	r3, r3, #16
 800e0d6:	430b      	orrs	r3, r1
 800e0d8:	4905      	ldr	r1, [pc, #20]	@ (800e0f0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr
 800e0ec:	46007800 	.word	0x46007800
 800e0f0:	46007c00 	.word	0x46007c00

0800e0f4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	2b02      	cmp	r3, #2
 800e106:	d904      	bls.n	800e112 <HAL_SAI_InitProtocol+0x1e>
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	3b03      	subs	r3, #3
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d812      	bhi.n	800e136 <HAL_SAI_InitProtocol+0x42>
 800e110:	e008      	b.n	800e124 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	68b9      	ldr	r1, [r7, #8]
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	f000 fbed 	bl	800e8f8 <SAI_InitI2S>
 800e11e:	4603      	mov	r3, r0
 800e120:	75fb      	strb	r3, [r7, #23]
      break;
 800e122:	e00b      	b.n	800e13c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f000 fc96 	bl	800ea5c <SAI_InitPCM>
 800e130:	4603      	mov	r3, r0
 800e132:	75fb      	strb	r3, [r7, #23]
      break;
 800e134:	e002      	b.n	800e13c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e136:	2301      	movs	r3, #1
 800e138:	75fb      	strb	r3, [r7, #23]
      break;
 800e13a:	bf00      	nop
  }

  if (status == HAL_OK)
 800e13c:	7dfb      	ldrb	r3, [r7, #23]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d104      	bne.n	800e14c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f000 f808 	bl	800e158 <HAL_SAI_Init>
 800e148:	4603      	mov	r3, r0
 800e14a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3718      	adds	r7, #24
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
	...

0800e158 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b08a      	sub	sp, #40	@ 0x28
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d101      	bne.n	800e16a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e166:	2301      	movs	r3, #1
 800e168:	e1ce      	b.n	800e508 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e170:	2b01      	cmp	r3, #1
 800e172:	d10e      	bne.n	800e192 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a83      	ldr	r2, [pc, #524]	@ (800e388 <HAL_SAI_Init+0x230>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d107      	bne.n	800e18e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e182:	2b01      	cmp	r3, #1
 800e184:	d103      	bne.n	800e18e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d001      	beq.n	800e192 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e18e:	2301      	movs	r3, #1
 800e190:	e1ba      	b.n	800e508 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d106      	bne.n	800e1ac <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7f4 f9aa 	bl	8002500 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 fd0f 	bl	800ebd0 <SAI_Disable>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d001      	beq.n	800e1bc <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e1a5      	b.n	800e508 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2202      	movs	r2, #2
 800e1c0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	2b02      	cmp	r3, #2
 800e1ca:	d00c      	beq.n	800e1e6 <HAL_SAI_Init+0x8e>
 800e1cc:	2b02      	cmp	r3, #2
 800e1ce:	d80d      	bhi.n	800e1ec <HAL_SAI_Init+0x94>
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d002      	beq.n	800e1da <HAL_SAI_Init+0x82>
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d003      	beq.n	800e1e0 <HAL_SAI_Init+0x88>
 800e1d8:	e008      	b.n	800e1ec <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1de:	e008      	b.n	800e1f2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e1e0:	2310      	movs	r3, #16
 800e1e2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1e4:	e005      	b.n	800e1f2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e1e6:	2320      	movs	r3, #32
 800e1e8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1ea:	e002      	b.n	800e1f2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1f0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	2b03      	cmp	r3, #3
 800e1f8:	d81d      	bhi.n	800e236 <HAL_SAI_Init+0xde>
 800e1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800e200 <HAL_SAI_Init+0xa8>)
 800e1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e200:	0800e211 	.word	0x0800e211
 800e204:	0800e217 	.word	0x0800e217
 800e208:	0800e21f 	.word	0x0800e21f
 800e20c:	0800e227 	.word	0x0800e227
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e210:	2300      	movs	r3, #0
 800e212:	61fb      	str	r3, [r7, #28]
      break;
 800e214:	e012      	b.n	800e23c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e21a:	61fb      	str	r3, [r7, #28]
      break;
 800e21c:	e00e      	b.n	800e23c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e21e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e222:	61fb      	str	r3, [r7, #28]
      break;
 800e224:	e00a      	b.n	800e23c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e226:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e22a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22e:	f043 0301 	orr.w	r3, r3, #1
 800e232:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e234:	e002      	b.n	800e23c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e236:	2300      	movs	r3, #0
 800e238:	61fb      	str	r3, [r7, #28]
      break;
 800e23a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a51      	ldr	r2, [pc, #324]	@ (800e388 <HAL_SAI_Init+0x230>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d004      	beq.n	800e250 <HAL_SAI_Init+0xf8>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a50      	ldr	r2, [pc, #320]	@ (800e38c <HAL_SAI_Init+0x234>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d103      	bne.n	800e258 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e250:	4a4f      	ldr	r2, [pc, #316]	@ (800e390 <HAL_SAI_Init+0x238>)
 800e252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e254:	6013      	str	r3, [r2, #0]
 800e256:	e002      	b.n	800e25e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e258:	4a4e      	ldr	r2, [pc, #312]	@ (800e394 <HAL_SAI_Init+0x23c>)
 800e25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25c:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6a1b      	ldr	r3, [r3, #32]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d077      	beq.n	800e356 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a47      	ldr	r2, [pc, #284]	@ (800e388 <HAL_SAI_Init+0x230>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d004      	beq.n	800e27a <HAL_SAI_Init+0x122>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a45      	ldr	r2, [pc, #276]	@ (800e38c <HAL_SAI_Init+0x234>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d107      	bne.n	800e28a <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e27a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e27e:	f04f 0100 	mov.w	r1, #0
 800e282:	f7fe f925 	bl	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e286:	61b8      	str	r0, [r7, #24]
 800e288:	e006      	b.n	800e298 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e28a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e28e:	f04f 0100 	mov.w	r1, #0
 800e292:	f7fe f91d 	bl	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e296:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	699b      	ldr	r3, [r3, #24]
 800e29c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e2a0:	d120      	bne.n	800e2e4 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2a6:	2b04      	cmp	r3, #4
 800e2a8:	d102      	bne.n	800e2b0 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e2aa:	2340      	movs	r3, #64	@ 0x40
 800e2ac:	613b      	str	r3, [r7, #16]
 800e2ae:	e00a      	b.n	800e2c6 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2b4:	2b08      	cmp	r3, #8
 800e2b6:	d103      	bne.n	800e2c0 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e2b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e2bc:	613b      	str	r3, [r7, #16]
 800e2be:	e002      	b.n	800e2c6 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2c4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e2c6:	69ba      	ldr	r2, [r7, #24]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	4413      	add	r3, r2
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6a1b      	ldr	r3, [r3, #32]
 800e2d6:	693a      	ldr	r2, [r7, #16]
 800e2d8:	fb02 f303 	mul.w	r3, r2, r3
 800e2dc:	fbb1 f3f3 	udiv	r3, r1, r3
 800e2e0:	617b      	str	r3, [r7, #20]
 800e2e2:	e017      	b.n	800e314 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e2ec:	d101      	bne.n	800e2f2 <HAL_SAI_Init+0x19a>
 800e2ee:	2302      	movs	r3, #2
 800e2f0:	e000      	b.n	800e2f4 <HAL_SAI_Init+0x19c>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e2f6:	69ba      	ldr	r2, [r7, #24]
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4413      	add	r3, r2
 800e2fe:	005b      	lsls	r3, r3, #1
 800e300:	4619      	mov	r1, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6a1b      	ldr	r3, [r3, #32]
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	fb02 f303 	mul.w	r3, r2, r3
 800e30c:	021b      	lsls	r3, r3, #8
 800e30e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e312:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	4a20      	ldr	r2, [pc, #128]	@ (800e398 <HAL_SAI_Init+0x240>)
 800e318:	fba2 2303 	umull	r2, r3, r2, r3
 800e31c:	08da      	lsrs	r2, r3, #3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e322:	6979      	ldr	r1, [r7, #20]
 800e324:	4b1c      	ldr	r3, [pc, #112]	@ (800e398 <HAL_SAI_Init+0x240>)
 800e326:	fba3 2301 	umull	r2, r3, r3, r1
 800e32a:	08da      	lsrs	r2, r3, #3
 800e32c:	4613      	mov	r3, r2
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	1aca      	subs	r2, r1, r3
 800e336:	2a08      	cmp	r2, #8
 800e338:	d904      	bls.n	800e344 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e33e:	1c5a      	adds	r2, r3, #1
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e348:	2b04      	cmp	r3, #4
 800e34a:	d104      	bne.n	800e356 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e350:	085a      	lsrs	r2, r3, #1
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d003      	beq.n	800e366 <HAL_SAI_Init+0x20e>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	2b02      	cmp	r3, #2
 800e364:	d109      	bne.n	800e37a <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d101      	bne.n	800e372 <HAL_SAI_Init+0x21a>
 800e36e:	2300      	movs	r3, #0
 800e370:	e001      	b.n	800e376 <HAL_SAI_Init+0x21e>
 800e372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e376:	623b      	str	r3, [r7, #32]
 800e378:	e012      	b.n	800e3a0 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d10c      	bne.n	800e39c <HAL_SAI_Init+0x244>
 800e382:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e386:	e00a      	b.n	800e39e <HAL_SAI_Init+0x246>
 800e388:	40015404 	.word	0x40015404
 800e38c:	40015424 	.word	0x40015424
 800e390:	40015400 	.word	0x40015400
 800e394:	40015800 	.word	0x40015800
 800e398:	cccccccd 	.word	0xcccccccd
 800e39c:	2300      	movs	r3, #0
 800e39e:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	6819      	ldr	r1, [r3, #0]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	4b59      	ldr	r3, [pc, #356]	@ (800e510 <HAL_SAI_Init+0x3b8>)
 800e3ac:	400b      	ands	r3, r1
 800e3ae:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	6819      	ldr	r1, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685a      	ldr	r2, [r3, #4]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3be:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e3c4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3ca:	431a      	orrs	r2, r3
 800e3cc:	6a3b      	ldr	r3, [r7, #32]
 800e3ce:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e3d8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	695b      	ldr	r3, [r3, #20]
 800e3de:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e3e4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ea:	051b      	lsls	r3, r3, #20
 800e3ec:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e3f2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	691b      	ldr	r3, [r3, #16]
 800e3f8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	430a      	orrs	r2, r1
 800e400:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	6812      	ldr	r2, [r2, #0]
 800e40c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e410:	f023 030f 	bic.w	r3, r3, #15
 800e414:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	6859      	ldr	r1, [r3, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	69da      	ldr	r2, [r3, #28]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e424:	431a      	orrs	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e42a:	431a      	orrs	r2, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	430a      	orrs	r2, r1
 800e432:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	6899      	ldr	r1, [r3, #8]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	4b35      	ldr	r3, [pc, #212]	@ (800e514 <HAL_SAI_Init+0x3bc>)
 800e440:	400b      	ands	r3, r1
 800e442:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	6899      	ldr	r1, [r3, #8]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e44e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e454:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e45a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e460:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e466:	3b01      	subs	r3, #1
 800e468:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e46a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	430a      	orrs	r2, r1
 800e472:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	68d9      	ldr	r1, [r3, #12]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e482:	400b      	ands	r3, r1
 800e484:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	68d9      	ldr	r1, [r3, #12]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e494:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e49a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e49c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4a2:	3b01      	subs	r3, #1
 800e4a4:	021b      	lsls	r3, r3, #8
 800e4a6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	430a      	orrs	r2, r1
 800e4ae:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a18      	ldr	r2, [pc, #96]	@ (800e518 <HAL_SAI_Init+0x3c0>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d119      	bne.n	800e4ee <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e4ba:	4b18      	ldr	r3, [pc, #96]	@ (800e51c <HAL_SAI_Init+0x3c4>)
 800e4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4be:	4a17      	ldr	r2, [pc, #92]	@ (800e51c <HAL_SAI_Init+0x3c4>)
 800e4c0:	f023 0301 	bic.w	r3, r3, #1
 800e4c4:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d10e      	bne.n	800e4ee <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e4dc:	490f      	ldr	r1, [pc, #60]	@ (800e51c <HAL_SAI_Init+0x3c4>)
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e4e2:	4b0e      	ldr	r3, [pc, #56]	@ (800e51c <HAL_SAI_Init+0x3c4>)
 800e4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4e6:	4a0d      	ldr	r2, [pc, #52]	@ (800e51c <HAL_SAI_Init+0x3c4>)
 800e4e8:	f043 0301 	orr.w	r3, r3, #1
 800e4ec:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3728      	adds	r7, #40	@ 0x28
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	f005c010 	.word	0xf005c010
 800e514:	fff88000 	.word	0xfff88000
 800e518:	40015404 	.word	0x40015404
 800e51c:	40015400 	.word	0x40015400

0800e520 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b088      	sub	sp, #32
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	4613      	mov	r3, r2
 800e52c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e52e:	f7f4 fb6f 	bl	8002c10 <HAL_GetTick>
 800e532:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d002      	beq.n	800e540 <HAL_SAI_Transmit_DMA+0x20>
 800e53a:	88fb      	ldrh	r3, [r7, #6]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d101      	bne.n	800e544 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800e540:	2301      	movs	r3, #1
 800e542:	e0e4      	b.n	800e70e <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	f040 80dd 	bne.w	800e70c <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d101      	bne.n	800e560 <HAL_SAI_Transmit_DMA+0x40>
 800e55c:	2302      	movs	r3, #2
 800e55e:	e0d6      	b.n	800e70e <HAL_SAI_Transmit_DMA+0x1ee>
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2201      	movs	r2, #1
 800e564:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	88fa      	ldrh	r2, [r7, #6]
 800e572:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	88fa      	ldrh	r2, [r7, #6]
 800e57a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2200      	movs	r2, #0
 800e582:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2212      	movs	r2, #18
 800e58a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e594:	4a60      	ldr	r2, [pc, #384]	@ (800e718 <HAL_SAI_Transmit_DMA+0x1f8>)
 800e596:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e59e:	4a5f      	ldr	r2, [pc, #380]	@ (800e71c <HAL_SAI_Transmit_DMA+0x1fc>)
 800e5a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5a8:	4a5d      	ldr	r2, [pc, #372]	@ (800e720 <HAL_SAI_Transmit_DMA+0x200>)
 800e5aa:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5ba:	2b40      	cmp	r3, #64	@ 0x40
 800e5bc:	d106      	bne.n	800e5cc <HAL_SAI_Transmit_DMA+0xac>
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d102      	bne.n	800e5cc <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800e5c6:	88fb      	ldrh	r3, [r7, #6]
 800e5c8:	61bb      	str	r3, [r7, #24]
 800e5ca:	e00a      	b.n	800e5e2 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5d0:	2b80      	cmp	r3, #128	@ 0x80
 800e5d2:	d803      	bhi.n	800e5dc <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e5d4:	88fb      	ldrh	r3, [r7, #6]
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	61bb      	str	r3, [r7, #24]
 800e5da:	e002      	b.n	800e5e2 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e5dc:	88fb      	ldrh	r3, [r7, #6]
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d02d      	beq.n	800e64e <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d021      	beq.n	800e642 <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	69ba      	ldr	r2, [r7, #24]
 800e60a:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f103 021c 	add.w	r2, r3, #28
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e62a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e636:	4618      	mov	r0, r3
 800e638:	f7f7 ff88 	bl	800654c <HAL_DMAEx_List_Start_IT>
 800e63c:	4603      	mov	r3, r0
 800e63e:	77fb      	strb	r3, [r7, #31]
 800e640:	e014      	b.n	800e66c <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2200      	movs	r2, #0
 800e646:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e64a:	2301      	movs	r3, #1
 800e64c:	e05f      	b.n	800e70e <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e658:	4619      	mov	r1, r3
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	331c      	adds	r3, #28
 800e660:	461a      	mov	r2, r3
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	f7f6 ffe0 	bl	8005628 <HAL_DMA_Start_IT>
 800e668:	4603      	mov	r3, r0
 800e66a:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800e66c:	7ffb      	ldrb	r3, [r7, #31]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d005      	beq.n	800e67e <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	e047      	b.n	800e70e <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e67e:	2100      	movs	r1, #0
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f000 fa6d 	bl	800eb60 <SAI_InterruptFlag>
 800e686:	4601      	mov	r1, r0
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	691a      	ldr	r2, [r3, #16]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	430a      	orrs	r2, r1
 800e694:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e6a4:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e6a6:	e015      	b.n	800e6d4 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e6a8:	f7f4 fab2 	bl	8002c10 <HAL_GetTick>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	1ad3      	subs	r3, r2, r3
 800e6b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e6b6:	d90d      	bls.n	800e6d4 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e6be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800e6d0:	2303      	movs	r3, #3
 800e6d2:	e01c      	b.n	800e70e <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	695b      	ldr	r3, [r3, #20]
 800e6da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d0e2      	beq.n	800e6a8 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d107      	bne.n	800e700 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e6fe:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2200      	movs	r2, #0
 800e704:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	e000      	b.n	800e70e <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800e70c:	2302      	movs	r3, #2
  }
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3720      	adds	r7, #32
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	0800eca3 	.word	0x0800eca3
 800e71c:	0800ec45 	.word	0x0800ec45
 800e720:	0800ed39 	.word	0x0800ed39

0800e724 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	4613      	mov	r3, r2
 800e730:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <HAL_SAI_Receive_DMA+0x1a>
 800e738:	88fb      	ldrh	r3, [r7, #6]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d101      	bne.n	800e742 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e73e:	2301      	movs	r3, #1
 800e740:	e0c6      	b.n	800e8d0 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	f040 80bf 	bne.w	800e8ce <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e756:	2b01      	cmp	r3, #1
 800e758:	d101      	bne.n	800e75e <HAL_SAI_Receive_DMA+0x3a>
 800e75a:	2302      	movs	r3, #2
 800e75c:	e0b8      	b.n	800e8d0 <HAL_SAI_Receive_DMA+0x1ac>
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2201      	movs	r2, #1
 800e762:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	88fa      	ldrh	r2, [r7, #6]
 800e770:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	88fa      	ldrh	r2, [r7, #6]
 800e778:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2200      	movs	r2, #0
 800e780:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2222      	movs	r2, #34	@ 0x22
 800e788:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e792:	4a51      	ldr	r2, [pc, #324]	@ (800e8d8 <HAL_SAI_Receive_DMA+0x1b4>)
 800e794:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e79c:	4a4f      	ldr	r2, [pc, #316]	@ (800e8dc <HAL_SAI_Receive_DMA+0x1b8>)
 800e79e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7a6:	4a4e      	ldr	r2, [pc, #312]	@ (800e8e0 <HAL_SAI_Receive_DMA+0x1bc>)
 800e7a8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7b8:	2b40      	cmp	r3, #64	@ 0x40
 800e7ba:	d106      	bne.n	800e7ca <HAL_SAI_Receive_DMA+0xa6>
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d102      	bne.n	800e7ca <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e7c4:	88fb      	ldrh	r3, [r7, #6]
 800e7c6:	613b      	str	r3, [r7, #16]
 800e7c8:	e00a      	b.n	800e7e0 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7ce:	2b80      	cmp	r3, #128	@ 0x80
 800e7d0:	d803      	bhi.n	800e7da <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e7d2:	88fb      	ldrh	r3, [r7, #6]
 800e7d4:	005b      	lsls	r3, r3, #1
 800e7d6:	613b      	str	r3, [r7, #16]
 800e7d8:	e002      	b.n	800e7e0 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e7da:	88fb      	ldrh	r3, [r7, #6]
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d02d      	beq.n	800e84c <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d021      	beq.n	800e840 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	693a      	ldr	r2, [r7, #16]
 800e808:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f103 021c 	add.w	r2, r3, #28
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e834:	4618      	mov	r0, r3
 800e836:	f7f7 fe89 	bl	800654c <HAL_DMAEx_List_Start_IT>
 800e83a:	4603      	mov	r3, r0
 800e83c:	75fb      	strb	r3, [r7, #23]
 800e83e:	e014      	b.n	800e86a <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2200      	movs	r2, #0
 800e844:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	e041      	b.n	800e8d0 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	331c      	adds	r3, #28
 800e858:	4619      	mov	r1, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e85e:	461a      	mov	r2, r3
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	f7f6 fee1 	bl	8005628 <HAL_DMA_Start_IT>
 800e866:	4603      	mov	r3, r0
 800e868:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e86a:	7dfb      	ldrb	r3, [r7, #23]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d005      	beq.n	800e87c <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2200      	movs	r2, #0
 800e874:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e878:	2301      	movs	r3, #1
 800e87a:	e029      	b.n	800e8d0 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e87c:	2100      	movs	r1, #0
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f000 f96e 	bl	800eb60 <SAI_InterruptFlag>
 800e884:	4601      	mov	r1, r0
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	691a      	ldr	r2, [r3, #16]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	430a      	orrs	r2, r1
 800e892:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e8a2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d107      	bne.n	800e8c2 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e8c0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	e000      	b.n	800e8d0 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e8ce:	2302      	movs	r3, #2
  }
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3718      	adds	r7, #24
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	0800ed1d 	.word	0x0800ed1d
 800e8dc:	0800ecbf 	.word	0x0800ecbf
 800e8e0:	0800ed39 	.word	0x0800ed39

0800e8e4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b087      	sub	sp, #28
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
 800e904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e906:	2300      	movs	r3, #0
 800e908:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2200      	movs	r2, #0
 800e90e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2200      	movs	r2, #0
 800e914:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d003      	beq.n	800e926 <SAI_InitI2S+0x2e>
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	2b02      	cmp	r3, #2
 800e924:	d103      	bne.n	800e92e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	651a      	str	r2, [r3, #80]	@ 0x50
 800e92c:	e002      	b.n	800e934 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2201      	movs	r2, #1
 800e932:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e93a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e942:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2200      	movs	r2, #0
 800e948:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	683a      	ldr	r2, [r7, #0]
 800e94e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	2b00      	cmp	r3, #0
 800e958:	d001      	beq.n	800e95e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	e077      	b.n	800ea4e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d107      	bne.n	800e974 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2200      	movs	r2, #0
 800e968:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e970:	665a      	str	r2, [r3, #100]	@ 0x64
 800e972:	e006      	b.n	800e982 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e97a:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2200      	movs	r2, #0
 800e980:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2b03      	cmp	r3, #3
 800e986:	d84f      	bhi.n	800ea28 <SAI_InitI2S+0x130>
 800e988:	a201      	add	r2, pc, #4	@ (adr r2, 800e990 <SAI_InitI2S+0x98>)
 800e98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e98e:	bf00      	nop
 800e990:	0800e9a1 	.word	0x0800e9a1
 800e994:	0800e9c3 	.word	0x0800e9c3
 800e998:	0800e9e5 	.word	0x0800e9e5
 800e99c:	0800ea07 	.word	0x0800ea07
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2280      	movs	r2, #128	@ 0x80
 800e9a4:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	085b      	lsrs	r3, r3, #1
 800e9aa:	015a      	lsls	r2, r3, #5
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	085b      	lsrs	r3, r3, #1
 800e9b4:	011a      	lsls	r2, r3, #4
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2240      	movs	r2, #64	@ 0x40
 800e9be:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e9c0:	e035      	b.n	800ea2e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2280      	movs	r2, #128	@ 0x80
 800e9c6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	085b      	lsrs	r3, r3, #1
 800e9cc:	019a      	lsls	r2, r3, #6
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	085b      	lsrs	r3, r3, #1
 800e9d6:	015a      	lsls	r2, r3, #5
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2280      	movs	r2, #128	@ 0x80
 800e9e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e9e2:	e024      	b.n	800ea2e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	22c0      	movs	r2, #192	@ 0xc0
 800e9e8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	085b      	lsrs	r3, r3, #1
 800e9ee:	019a      	lsls	r2, r3, #6
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	085b      	lsrs	r3, r3, #1
 800e9f8:	015a      	lsls	r2, r3, #5
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2280      	movs	r2, #128	@ 0x80
 800ea02:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea04:	e013      	b.n	800ea2e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	22e0      	movs	r2, #224	@ 0xe0
 800ea0a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	085b      	lsrs	r3, r3, #1
 800ea10:	019a      	lsls	r2, r3, #6
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	085b      	lsrs	r3, r3, #1
 800ea1a:	015a      	lsls	r2, r3, #5
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2280      	movs	r2, #128	@ 0x80
 800ea24:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea26:	e002      	b.n	800ea2e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ea2c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	2b02      	cmp	r3, #2
 800ea32:	d10b      	bne.n	800ea4c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	d102      	bne.n	800ea40 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2210      	movs	r2, #16
 800ea3e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b02      	cmp	r3, #2
 800ea44:	d102      	bne.n	800ea4c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2208      	movs	r2, #8
 800ea4a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800ea4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	371c      	adds	r7, #28
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr
 800ea5a:	bf00      	nop

0800ea5c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b087      	sub	sp, #28
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	60b9      	str	r1, [r7, #8]
 800ea66:	607a      	str	r2, [r7, #4]
 800ea68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2200      	movs	r2, #0
 800ea72:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2200      	movs	r2, #0
 800ea78:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d003      	beq.n	800ea8a <SAI_InitPCM+0x2e>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d103      	bne.n	800ea92 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	651a      	str	r2, [r3, #80]	@ 0x50
 800ea90:	e002      	b.n	800ea98 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2200      	movs	r2, #0
 800ea96:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800eaa4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800eaac:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	683a      	ldr	r2, [r7, #0]
 800eab8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eac0:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	2b04      	cmp	r3, #4
 800eac6:	d103      	bne.n	800ead0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2201      	movs	r2, #1
 800eacc:	659a      	str	r2, [r3, #88]	@ 0x58
 800eace:	e002      	b.n	800ead6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	220d      	movs	r2, #13
 800ead4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2b03      	cmp	r3, #3
 800eada:	d837      	bhi.n	800eb4c <SAI_InitPCM+0xf0>
 800eadc:	a201      	add	r2, pc, #4	@ (adr r2, 800eae4 <SAI_InitPCM+0x88>)
 800eade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae2:	bf00      	nop
 800eae4:	0800eaf5 	.word	0x0800eaf5
 800eae8:	0800eb0b 	.word	0x0800eb0b
 800eaec:	0800eb21 	.word	0x0800eb21
 800eaf0:	0800eb37 	.word	0x0800eb37
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2280      	movs	r2, #128	@ 0x80
 800eaf8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	011a      	lsls	r2, r3, #4
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2240      	movs	r2, #64	@ 0x40
 800eb06:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb08:	e023      	b.n	800eb52 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2280      	movs	r2, #128	@ 0x80
 800eb0e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	015a      	lsls	r2, r3, #5
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2280      	movs	r2, #128	@ 0x80
 800eb1c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb1e:	e018      	b.n	800eb52 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	22c0      	movs	r2, #192	@ 0xc0
 800eb24:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	015a      	lsls	r2, r3, #5
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2280      	movs	r2, #128	@ 0x80
 800eb32:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb34:	e00d      	b.n	800eb52 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	22e0      	movs	r2, #224	@ 0xe0
 800eb3a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	015a      	lsls	r2, r3, #5
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2280      	movs	r2, #128	@ 0x80
 800eb48:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb4a:	e002      	b.n	800eb52 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	75fb      	strb	r3, [r7, #23]
      break;
 800eb50:	bf00      	nop
  }

  return status;
 800eb52:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	371c      	adds	r7, #28
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	460b      	mov	r3, r1
 800eb6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800eb70:	78fb      	ldrb	r3, [r7, #3]
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d103      	bne.n	800eb7e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f043 0308 	orr.w	r3, r3, #8
 800eb7c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb82:	2b08      	cmp	r3, #8
 800eb84:	d10b      	bne.n	800eb9e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800eb8a:	2b03      	cmp	r3, #3
 800eb8c:	d003      	beq.n	800eb96 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d103      	bne.n	800eb9e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f043 0310 	orr.w	r3, r3, #16
 800eb9c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	2b03      	cmp	r3, #3
 800eba4:	d003      	beq.n	800ebae <SAI_InterruptFlag+0x4e>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	2b02      	cmp	r3, #2
 800ebac:	d104      	bne.n	800ebb8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ebb4:	60fb      	str	r3, [r7, #12]
 800ebb6:	e003      	b.n	800ebc0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f043 0304 	orr.w	r3, r3, #4
 800ebbe:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3714      	adds	r7, #20
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
	...

0800ebd0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ebd8:	4b18      	ldr	r3, [pc, #96]	@ (800ec3c <SAI_Disable+0x6c>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a18      	ldr	r2, [pc, #96]	@ (800ec40 <SAI_Disable+0x70>)
 800ebde:	fba2 2303 	umull	r2, r3, r2, r3
 800ebe2:	0b1b      	lsrs	r3, r3, #12
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ebfa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d10a      	bne.n	800ec18 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ec12:	2303      	movs	r3, #3
 800ec14:	72fb      	strb	r3, [r7, #11]
      break;
 800ec16:	e009      	b.n	800ec2c <SAI_Disable+0x5c>
    }
    count--;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1e7      	bne.n	800ebfc <SAI_Disable+0x2c>

  return status;
 800ec2c:	7afb      	ldrb	r3, [r7, #11]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3714      	adds	r7, #20
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	20000020 	.word	0x20000020
 800ec40:	95cbec1b 	.word	0x95cbec1b

0800ec44 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec50:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec56:	2b81      	cmp	r3, #129	@ 0x81
 800ec58:	d01c      	beq.n	800ec94 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ec70:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ec72:	2100      	movs	r1, #0
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f7ff ff73 	bl	800eb60 <SAI_InterruptFlag>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	43d9      	mvns	r1, r3
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	691a      	ldr	r2, [r3, #16]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	400a      	ands	r2, r1
 800ec8a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	f7f2 fd2d 	bl	80016f4 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ec9a:	bf00      	nop
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b084      	sub	sp, #16
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ecae:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f7f2 fd09 	bl	80016c8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ecb6:	bf00      	nop
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b084      	sub	sp, #16
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ecca:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecd0:	2b81      	cmp	r3, #129	@ 0x81
 800ecd2:	d01c      	beq.n	800ed0e <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ece2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2200      	movs	r2, #0
 800ece8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ecec:	2100      	movs	r1, #0
 800ecee:	68f8      	ldr	r0, [r7, #12]
 800ecf0:	f7ff ff36 	bl	800eb60 <SAI_InterruptFlag>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	43d9      	mvns	r1, r3
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	691a      	ldr	r2, [r3, #16]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	400a      	ands	r2, r1
 800ed04:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2201      	movs	r2, #1
 800ed0a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800ed0e:	68f8      	ldr	r0, [r7, #12]
 800ed10:	f7f2 fcc4 	bl	800169c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed14:	bf00      	nop
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed28:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f7f2 fca0 	bl	8001670 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed30:	bf00      	nop
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed44:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed4c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ed64:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f7ff ff32 	bl	800ebd0 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2201      	movs	r2, #1
 800ed70:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	f7ff fdb1 	bl	800e8e4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed82:	bf00      	nop
 800ed84:	3710      	adds	r7, #16
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b082      	sub	sp, #8
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d101      	bne.n	800ed9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e049      	b.n	800ee30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d106      	bne.n	800edb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f7f3 fa41 	bl	8002238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2202      	movs	r2, #2
 800edba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	3304      	adds	r3, #4
 800edc6:	4619      	mov	r1, r3
 800edc8:	4610      	mov	r0, r2
 800edca:	f000 fb3b 	bl	800f444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2201      	movs	r2, #1
 800edd2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2201      	movs	r2, #1
 800edda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2201      	movs	r2, #1
 800ede2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2201      	movs	r2, #1
 800edea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2201      	movs	r2, #1
 800edf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2201      	movs	r2, #1
 800edfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2201      	movs	r2, #1
 800ee02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2201      	movs	r2, #1
 800ee12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2201      	movs	r2, #1
 800ee22:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ee2e:	2300      	movs	r3, #0
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b085      	sub	sp, #20
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d001      	beq.n	800ee50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e06a      	b.n	800ef26 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2202      	movs	r2, #2
 800ee54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a35      	ldr	r2, [pc, #212]	@ (800ef34 <HAL_TIM_Base_Start+0xfc>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d040      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a34      	ldr	r2, [pc, #208]	@ (800ef38 <HAL_TIM_Base_Start+0x100>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d03b      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee74:	d036      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ee7e:	d031      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4a2d      	ldr	r2, [pc, #180]	@ (800ef3c <HAL_TIM_Base_Start+0x104>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d02c      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a2c      	ldr	r2, [pc, #176]	@ (800ef40 <HAL_TIM_Base_Start+0x108>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d027      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a2a      	ldr	r2, [pc, #168]	@ (800ef44 <HAL_TIM_Base_Start+0x10c>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d022      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a29      	ldr	r2, [pc, #164]	@ (800ef48 <HAL_TIM_Base_Start+0x110>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d01d      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a27      	ldr	r2, [pc, #156]	@ (800ef4c <HAL_TIM_Base_Start+0x114>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d018      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a26      	ldr	r2, [pc, #152]	@ (800ef50 <HAL_TIM_Base_Start+0x118>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d013      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a24      	ldr	r2, [pc, #144]	@ (800ef54 <HAL_TIM_Base_Start+0x11c>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d00e      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4a23      	ldr	r2, [pc, #140]	@ (800ef58 <HAL_TIM_Base_Start+0x120>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d009      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a21      	ldr	r2, [pc, #132]	@ (800ef5c <HAL_TIM_Base_Start+0x124>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d004      	beq.n	800eee4 <HAL_TIM_Base_Start+0xac>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4a20      	ldr	r2, [pc, #128]	@ (800ef60 <HAL_TIM_Base_Start+0x128>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d115      	bne.n	800ef10 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	689a      	ldr	r2, [r3, #8]
 800eeea:	4b1e      	ldr	r3, [pc, #120]	@ (800ef64 <HAL_TIM_Base_Start+0x12c>)
 800eeec:	4013      	ands	r3, r2
 800eeee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2b06      	cmp	r3, #6
 800eef4:	d015      	beq.n	800ef22 <HAL_TIM_Base_Start+0xea>
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eefc:	d011      	beq.n	800ef22 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f042 0201 	orr.w	r2, r2, #1
 800ef0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef0e:	e008      	b.n	800ef22 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f042 0201 	orr.w	r2, r2, #1
 800ef1e:	601a      	str	r2, [r3, #0]
 800ef20:	e000      	b.n	800ef24 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef24:	2300      	movs	r3, #0
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	40012c00 	.word	0x40012c00
 800ef38:	50012c00 	.word	0x50012c00
 800ef3c:	40000400 	.word	0x40000400
 800ef40:	50000400 	.word	0x50000400
 800ef44:	40000800 	.word	0x40000800
 800ef48:	50000800 	.word	0x50000800
 800ef4c:	40000c00 	.word	0x40000c00
 800ef50:	50000c00 	.word	0x50000c00
 800ef54:	40013400 	.word	0x40013400
 800ef58:	50013400 	.word	0x50013400
 800ef5c:	40014000 	.word	0x40014000
 800ef60:	50014000 	.word	0x50014000
 800ef64:	00010007 	.word	0x00010007

0800ef68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d101      	bne.n	800ef7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ef76:	2301      	movs	r3, #1
 800ef78:	e049      	b.n	800f00e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d106      	bne.n	800ef94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7f3 f930 	bl	80021f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2202      	movs	r2, #2
 800ef98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	3304      	adds	r3, #4
 800efa4:	4619      	mov	r1, r3
 800efa6:	4610      	mov	r0, r2
 800efa8:	f000 fa4c 	bl	800f444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2201      	movs	r2, #1
 800efb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2201      	movs	r2, #1
 800efc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2201      	movs	r2, #1
 800efd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2201      	movs	r2, #1
 800efd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2201      	movs	r2, #1
 800efe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2201      	movs	r2, #1
 800efe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2201      	movs	r2, #1
 800f000:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
	...

0800f018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b086      	sub	sp, #24
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d101      	bne.n	800f036 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f032:	2302      	movs	r3, #2
 800f034:	e0ff      	b.n	800f236 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2201      	movs	r2, #1
 800f03a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b14      	cmp	r3, #20
 800f042:	f200 80f0 	bhi.w	800f226 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f046:	a201      	add	r2, pc, #4	@ (adr r2, 800f04c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04c:	0800f0a1 	.word	0x0800f0a1
 800f050:	0800f227 	.word	0x0800f227
 800f054:	0800f227 	.word	0x0800f227
 800f058:	0800f227 	.word	0x0800f227
 800f05c:	0800f0e1 	.word	0x0800f0e1
 800f060:	0800f227 	.word	0x0800f227
 800f064:	0800f227 	.word	0x0800f227
 800f068:	0800f227 	.word	0x0800f227
 800f06c:	0800f123 	.word	0x0800f123
 800f070:	0800f227 	.word	0x0800f227
 800f074:	0800f227 	.word	0x0800f227
 800f078:	0800f227 	.word	0x0800f227
 800f07c:	0800f163 	.word	0x0800f163
 800f080:	0800f227 	.word	0x0800f227
 800f084:	0800f227 	.word	0x0800f227
 800f088:	0800f227 	.word	0x0800f227
 800f08c:	0800f1a5 	.word	0x0800f1a5
 800f090:	0800f227 	.word	0x0800f227
 800f094:	0800f227 	.word	0x0800f227
 800f098:	0800f227 	.word	0x0800f227
 800f09c:	0800f1e5 	.word	0x0800f1e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	68b9      	ldr	r1, [r7, #8]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f000 fad2 	bl	800f650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	699a      	ldr	r2, [r3, #24]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f042 0208 	orr.w	r2, r2, #8
 800f0ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	699a      	ldr	r2, [r3, #24]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f022 0204 	bic.w	r2, r2, #4
 800f0ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	6999      	ldr	r1, [r3, #24]
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	691a      	ldr	r2, [r3, #16]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	430a      	orrs	r2, r1
 800f0dc:	619a      	str	r2, [r3, #24]
      break;
 800f0de:	e0a5      	b.n	800f22c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	68b9      	ldr	r1, [r7, #8]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f000 fb74 	bl	800f7d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	699a      	ldr	r2, [r3, #24]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f0fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	699a      	ldr	r2, [r3, #24]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f10a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	6999      	ldr	r1, [r3, #24]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	021a      	lsls	r2, r3, #8
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	430a      	orrs	r2, r1
 800f11e:	619a      	str	r2, [r3, #24]
      break;
 800f120:	e084      	b.n	800f22c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	68b9      	ldr	r1, [r7, #8]
 800f128:	4618      	mov	r0, r3
 800f12a:	f000 fc03 	bl	800f934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	69da      	ldr	r2, [r3, #28]
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f042 0208 	orr.w	r2, r2, #8
 800f13c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	69da      	ldr	r2, [r3, #28]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f022 0204 	bic.w	r2, r2, #4
 800f14c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	69d9      	ldr	r1, [r3, #28]
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	691a      	ldr	r2, [r3, #16]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	430a      	orrs	r2, r1
 800f15e:	61da      	str	r2, [r3, #28]
      break;
 800f160:	e064      	b.n	800f22c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	68b9      	ldr	r1, [r7, #8]
 800f168:	4618      	mov	r0, r3
 800f16a:	f000 fc91 	bl	800fa90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	69da      	ldr	r2, [r3, #28]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f17c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	69da      	ldr	r2, [r3, #28]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f18c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	69d9      	ldr	r1, [r3, #28]
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	691b      	ldr	r3, [r3, #16]
 800f198:	021a      	lsls	r2, r3, #8
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	430a      	orrs	r2, r1
 800f1a0:	61da      	str	r2, [r3, #28]
      break;
 800f1a2:	e043      	b.n	800f22c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	68b9      	ldr	r1, [r7, #8]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f000 fd20 	bl	800fbf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f042 0208 	orr.w	r2, r2, #8
 800f1be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f022 0204 	bic.w	r2, r2, #4
 800f1ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	691a      	ldr	r2, [r3, #16]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	430a      	orrs	r2, r1
 800f1e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f1e2:	e023      	b.n	800f22c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	68b9      	ldr	r1, [r7, #8]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 fd82 	bl	800fcf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f20e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	691b      	ldr	r3, [r3, #16]
 800f21a:	021a      	lsls	r2, r3, #8
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	430a      	orrs	r2, r1
 800f222:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f224:	e002      	b.n	800f22c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f226:	2301      	movs	r3, #1
 800f228:	75fb      	strb	r3, [r7, #23]
      break;
 800f22a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2200      	movs	r2, #0
 800f230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f234:	7dfb      	ldrb	r3, [r7, #23]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3718      	adds	r7, #24
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop

0800f240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f24a:	2300      	movs	r3, #0
 800f24c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f254:	2b01      	cmp	r3, #1
 800f256:	d101      	bne.n	800f25c <HAL_TIM_ConfigClockSource+0x1c>
 800f258:	2302      	movs	r3, #2
 800f25a:	e0e6      	b.n	800f42a <HAL_TIM_ConfigClockSource+0x1ea>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2201      	movs	r2, #1
 800f260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2202      	movs	r2, #2
 800f268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f27a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f27e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	68ba      	ldr	r2, [r7, #8]
 800f28e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a67      	ldr	r2, [pc, #412]	@ (800f434 <HAL_TIM_ConfigClockSource+0x1f4>)
 800f296:	4293      	cmp	r3, r2
 800f298:	f000 80b1 	beq.w	800f3fe <HAL_TIM_ConfigClockSource+0x1be>
 800f29c:	4a65      	ldr	r2, [pc, #404]	@ (800f434 <HAL_TIM_ConfigClockSource+0x1f4>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	f200 80b6 	bhi.w	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2a4:	4a64      	ldr	r2, [pc, #400]	@ (800f438 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	f000 80a9 	beq.w	800f3fe <HAL_TIM_ConfigClockSource+0x1be>
 800f2ac:	4a62      	ldr	r2, [pc, #392]	@ (800f438 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	f200 80ae 	bhi.w	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2b4:	4a61      	ldr	r2, [pc, #388]	@ (800f43c <HAL_TIM_ConfigClockSource+0x1fc>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	f000 80a1 	beq.w	800f3fe <HAL_TIM_ConfigClockSource+0x1be>
 800f2bc:	4a5f      	ldr	r2, [pc, #380]	@ (800f43c <HAL_TIM_ConfigClockSource+0x1fc>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	f200 80a6 	bhi.w	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2c4:	4a5e      	ldr	r2, [pc, #376]	@ (800f440 <HAL_TIM_ConfigClockSource+0x200>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	f000 8099 	beq.w	800f3fe <HAL_TIM_ConfigClockSource+0x1be>
 800f2cc:	4a5c      	ldr	r2, [pc, #368]	@ (800f440 <HAL_TIM_ConfigClockSource+0x200>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	f200 809e 	bhi.w	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f2d8:	f000 8091 	beq.w	800f3fe <HAL_TIM_ConfigClockSource+0x1be>
 800f2dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f2e0:	f200 8096 	bhi.w	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f2e8:	f000 8089 	beq.w	800f3fe <HAL_TIM_ConfigClockSource+0x1be>
 800f2ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f2f0:	f200 808e 	bhi.w	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2f8:	d03e      	beq.n	800f378 <HAL_TIM_ConfigClockSource+0x138>
 800f2fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2fe:	f200 8087 	bhi.w	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f306:	f000 8086 	beq.w	800f416 <HAL_TIM_ConfigClockSource+0x1d6>
 800f30a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f30e:	d87f      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f310:	2b70      	cmp	r3, #112	@ 0x70
 800f312:	d01a      	beq.n	800f34a <HAL_TIM_ConfigClockSource+0x10a>
 800f314:	2b70      	cmp	r3, #112	@ 0x70
 800f316:	d87b      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f318:	2b60      	cmp	r3, #96	@ 0x60
 800f31a:	d050      	beq.n	800f3be <HAL_TIM_ConfigClockSource+0x17e>
 800f31c:	2b60      	cmp	r3, #96	@ 0x60
 800f31e:	d877      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f320:	2b50      	cmp	r3, #80	@ 0x50
 800f322:	d03c      	beq.n	800f39e <HAL_TIM_ConfigClockSource+0x15e>
 800f324:	2b50      	cmp	r3, #80	@ 0x50
 800f326:	d873      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f328:	2b40      	cmp	r3, #64	@ 0x40
 800f32a:	d058      	beq.n	800f3de <HAL_TIM_ConfigClockSource+0x19e>
 800f32c:	2b40      	cmp	r3, #64	@ 0x40
 800f32e:	d86f      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f330:	2b30      	cmp	r3, #48	@ 0x30
 800f332:	d064      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x1be>
 800f334:	2b30      	cmp	r3, #48	@ 0x30
 800f336:	d86b      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f338:	2b20      	cmp	r3, #32
 800f33a:	d060      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x1be>
 800f33c:	2b20      	cmp	r3, #32
 800f33e:	d867      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
 800f340:	2b00      	cmp	r3, #0
 800f342:	d05c      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x1be>
 800f344:	2b10      	cmp	r3, #16
 800f346:	d05a      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x1be>
 800f348:	e062      	b.n	800f410 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f35a:	f000 fdcb 	bl	800fef4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f36c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	68ba      	ldr	r2, [r7, #8]
 800f374:	609a      	str	r2, [r3, #8]
      break;
 800f376:	e04f      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f388:	f000 fdb4 	bl	800fef4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	689a      	ldr	r2, [r3, #8]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f39a:	609a      	str	r2, [r3, #8]
      break;
 800f39c:	e03c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	f000 fd26 	bl	800fdfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2150      	movs	r1, #80	@ 0x50
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f000 fd7f 	bl	800feba <TIM_ITRx_SetConfig>
      break;
 800f3bc:	e02c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	f000 fd45 	bl	800fe5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2160      	movs	r1, #96	@ 0x60
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 fd6f 	bl	800feba <TIM_ITRx_SetConfig>
      break;
 800f3dc:	e01c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	f000 fd06 	bl	800fdfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2140      	movs	r1, #64	@ 0x40
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f000 fd5f 	bl	800feba <TIM_ITRx_SetConfig>
      break;
 800f3fc:	e00c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4619      	mov	r1, r3
 800f408:	4610      	mov	r0, r2
 800f40a:	f000 fd56 	bl	800feba <TIM_ITRx_SetConfig>
      break;
 800f40e:	e003      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800f410:	2301      	movs	r3, #1
 800f412:	73fb      	strb	r3, [r7, #15]
      break;
 800f414:	e000      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800f416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f428:	7bfb      	ldrb	r3, [r7, #15]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3710      	adds	r7, #16
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	00100070 	.word	0x00100070
 800f438:	00100040 	.word	0x00100040
 800f43c:	00100030 	.word	0x00100030
 800f440:	00100020 	.word	0x00100020

0800f444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f444:	b480      	push	{r7}
 800f446:	b085      	sub	sp, #20
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4a6e      	ldr	r2, [pc, #440]	@ (800f610 <TIM_Base_SetConfig+0x1cc>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d02b      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4a6d      	ldr	r2, [pc, #436]	@ (800f614 <TIM_Base_SetConfig+0x1d0>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d027      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f46a:	d023      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f472:	d01f      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4a68      	ldr	r2, [pc, #416]	@ (800f618 <TIM_Base_SetConfig+0x1d4>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d01b      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	4a67      	ldr	r2, [pc, #412]	@ (800f61c <TIM_Base_SetConfig+0x1d8>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d017      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4a66      	ldr	r2, [pc, #408]	@ (800f620 <TIM_Base_SetConfig+0x1dc>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d013      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a65      	ldr	r2, [pc, #404]	@ (800f624 <TIM_Base_SetConfig+0x1e0>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d00f      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a64      	ldr	r2, [pc, #400]	@ (800f628 <TIM_Base_SetConfig+0x1e4>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d00b      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4a63      	ldr	r2, [pc, #396]	@ (800f62c <TIM_Base_SetConfig+0x1e8>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d007      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a62      	ldr	r2, [pc, #392]	@ (800f630 <TIM_Base_SetConfig+0x1ec>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d003      	beq.n	800f4b4 <TIM_Base_SetConfig+0x70>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4a61      	ldr	r2, [pc, #388]	@ (800f634 <TIM_Base_SetConfig+0x1f0>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d108      	bne.n	800f4c6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4a51      	ldr	r2, [pc, #324]	@ (800f610 <TIM_Base_SetConfig+0x1cc>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d043      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4a50      	ldr	r2, [pc, #320]	@ (800f614 <TIM_Base_SetConfig+0x1d0>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d03f      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4dc:	d03b      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4e4:	d037      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4a4b      	ldr	r2, [pc, #300]	@ (800f618 <TIM_Base_SetConfig+0x1d4>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d033      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4a4a      	ldr	r2, [pc, #296]	@ (800f61c <TIM_Base_SetConfig+0x1d8>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d02f      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	4a49      	ldr	r2, [pc, #292]	@ (800f620 <TIM_Base_SetConfig+0x1dc>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d02b      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4a48      	ldr	r2, [pc, #288]	@ (800f624 <TIM_Base_SetConfig+0x1e0>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d027      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4a47      	ldr	r2, [pc, #284]	@ (800f628 <TIM_Base_SetConfig+0x1e4>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d023      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4a46      	ldr	r2, [pc, #280]	@ (800f62c <TIM_Base_SetConfig+0x1e8>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d01f      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4a45      	ldr	r2, [pc, #276]	@ (800f630 <TIM_Base_SetConfig+0x1ec>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d01b      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4a44      	ldr	r2, [pc, #272]	@ (800f634 <TIM_Base_SetConfig+0x1f0>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d017      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a43      	ldr	r2, [pc, #268]	@ (800f638 <TIM_Base_SetConfig+0x1f4>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d013      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a42      	ldr	r2, [pc, #264]	@ (800f63c <TIM_Base_SetConfig+0x1f8>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d00f      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4a41      	ldr	r2, [pc, #260]	@ (800f640 <TIM_Base_SetConfig+0x1fc>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d00b      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a40      	ldr	r2, [pc, #256]	@ (800f644 <TIM_Base_SetConfig+0x200>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d007      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a3f      	ldr	r2, [pc, #252]	@ (800f648 <TIM_Base_SetConfig+0x204>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d003      	beq.n	800f556 <TIM_Base_SetConfig+0x112>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a3e      	ldr	r2, [pc, #248]	@ (800f64c <TIM_Base_SetConfig+0x208>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d108      	bne.n	800f568 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f55c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	68db      	ldr	r3, [r3, #12]
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	4313      	orrs	r3, r2
 800f566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	695b      	ldr	r3, [r3, #20]
 800f572:	4313      	orrs	r3, r2
 800f574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	689a      	ldr	r2, [r3, #8]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	681a      	ldr	r2, [r3, #0]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	4a20      	ldr	r2, [pc, #128]	@ (800f610 <TIM_Base_SetConfig+0x1cc>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d023      	beq.n	800f5dc <TIM_Base_SetConfig+0x198>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4a1f      	ldr	r2, [pc, #124]	@ (800f614 <TIM_Base_SetConfig+0x1d0>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d01f      	beq.n	800f5dc <TIM_Base_SetConfig+0x198>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4a24      	ldr	r2, [pc, #144]	@ (800f630 <TIM_Base_SetConfig+0x1ec>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d01b      	beq.n	800f5dc <TIM_Base_SetConfig+0x198>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4a23      	ldr	r2, [pc, #140]	@ (800f634 <TIM_Base_SetConfig+0x1f0>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d017      	beq.n	800f5dc <TIM_Base_SetConfig+0x198>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4a22      	ldr	r2, [pc, #136]	@ (800f638 <TIM_Base_SetConfig+0x1f4>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d013      	beq.n	800f5dc <TIM_Base_SetConfig+0x198>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4a21      	ldr	r2, [pc, #132]	@ (800f63c <TIM_Base_SetConfig+0x1f8>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d00f      	beq.n	800f5dc <TIM_Base_SetConfig+0x198>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a20      	ldr	r2, [pc, #128]	@ (800f640 <TIM_Base_SetConfig+0x1fc>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d00b      	beq.n	800f5dc <TIM_Base_SetConfig+0x198>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4a1f      	ldr	r2, [pc, #124]	@ (800f644 <TIM_Base_SetConfig+0x200>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d007      	beq.n	800f5dc <TIM_Base_SetConfig+0x198>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a1e      	ldr	r2, [pc, #120]	@ (800f648 <TIM_Base_SetConfig+0x204>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d003      	beq.n	800f5dc <TIM_Base_SetConfig+0x198>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4a1d      	ldr	r2, [pc, #116]	@ (800f64c <TIM_Base_SetConfig+0x208>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d103      	bne.n	800f5e4 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	691a      	ldr	r2, [r3, #16]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	691b      	ldr	r3, [r3, #16]
 800f5ee:	f003 0301 	and.w	r3, r3, #1
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	d105      	bne.n	800f602 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	691b      	ldr	r3, [r3, #16]
 800f5fa:	f023 0201 	bic.w	r2, r3, #1
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	611a      	str	r2, [r3, #16]
  }
}
 800f602:	bf00      	nop
 800f604:	3714      	adds	r7, #20
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop
 800f610:	40012c00 	.word	0x40012c00
 800f614:	50012c00 	.word	0x50012c00
 800f618:	40000400 	.word	0x40000400
 800f61c:	50000400 	.word	0x50000400
 800f620:	40000800 	.word	0x40000800
 800f624:	50000800 	.word	0x50000800
 800f628:	40000c00 	.word	0x40000c00
 800f62c:	50000c00 	.word	0x50000c00
 800f630:	40013400 	.word	0x40013400
 800f634:	50013400 	.word	0x50013400
 800f638:	40014000 	.word	0x40014000
 800f63c:	50014000 	.word	0x50014000
 800f640:	40014400 	.word	0x40014400
 800f644:	50014400 	.word	0x50014400
 800f648:	40014800 	.word	0x40014800
 800f64c:	50014800 	.word	0x50014800

0800f650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f650:	b480      	push	{r7}
 800f652:	b087      	sub	sp, #28
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6a1b      	ldr	r3, [r3, #32]
 800f65e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6a1b      	ldr	r3, [r3, #32]
 800f664:	f023 0201 	bic.w	r2, r3, #1
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	699b      	ldr	r3, [r3, #24]
 800f676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f67e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f023 0303 	bic.w	r3, r3, #3
 800f68a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	4313      	orrs	r3, r2
 800f694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	f023 0302 	bic.w	r3, r3, #2
 800f69c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	689b      	ldr	r3, [r3, #8]
 800f6a2:	697a      	ldr	r2, [r7, #20]
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4a40      	ldr	r2, [pc, #256]	@ (800f7ac <TIM_OC1_SetConfig+0x15c>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d023      	beq.n	800f6f8 <TIM_OC1_SetConfig+0xa8>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4a3f      	ldr	r2, [pc, #252]	@ (800f7b0 <TIM_OC1_SetConfig+0x160>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d01f      	beq.n	800f6f8 <TIM_OC1_SetConfig+0xa8>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4a3e      	ldr	r2, [pc, #248]	@ (800f7b4 <TIM_OC1_SetConfig+0x164>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d01b      	beq.n	800f6f8 <TIM_OC1_SetConfig+0xa8>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4a3d      	ldr	r2, [pc, #244]	@ (800f7b8 <TIM_OC1_SetConfig+0x168>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d017      	beq.n	800f6f8 <TIM_OC1_SetConfig+0xa8>
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	4a3c      	ldr	r2, [pc, #240]	@ (800f7bc <TIM_OC1_SetConfig+0x16c>)
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d013      	beq.n	800f6f8 <TIM_OC1_SetConfig+0xa8>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4a3b      	ldr	r2, [pc, #236]	@ (800f7c0 <TIM_OC1_SetConfig+0x170>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d00f      	beq.n	800f6f8 <TIM_OC1_SetConfig+0xa8>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	4a3a      	ldr	r2, [pc, #232]	@ (800f7c4 <TIM_OC1_SetConfig+0x174>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d00b      	beq.n	800f6f8 <TIM_OC1_SetConfig+0xa8>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	4a39      	ldr	r2, [pc, #228]	@ (800f7c8 <TIM_OC1_SetConfig+0x178>)
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d007      	beq.n	800f6f8 <TIM_OC1_SetConfig+0xa8>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	4a38      	ldr	r2, [pc, #224]	@ (800f7cc <TIM_OC1_SetConfig+0x17c>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d003      	beq.n	800f6f8 <TIM_OC1_SetConfig+0xa8>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	4a37      	ldr	r2, [pc, #220]	@ (800f7d0 <TIM_OC1_SetConfig+0x180>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d10c      	bne.n	800f712 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	f023 0308 	bic.w	r3, r3, #8
 800f6fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	697a      	ldr	r2, [r7, #20]
 800f706:	4313      	orrs	r3, r2
 800f708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	f023 0304 	bic.w	r3, r3, #4
 800f710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4a25      	ldr	r2, [pc, #148]	@ (800f7ac <TIM_OC1_SetConfig+0x15c>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d023      	beq.n	800f762 <TIM_OC1_SetConfig+0x112>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4a24      	ldr	r2, [pc, #144]	@ (800f7b0 <TIM_OC1_SetConfig+0x160>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d01f      	beq.n	800f762 <TIM_OC1_SetConfig+0x112>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4a23      	ldr	r2, [pc, #140]	@ (800f7b4 <TIM_OC1_SetConfig+0x164>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d01b      	beq.n	800f762 <TIM_OC1_SetConfig+0x112>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4a22      	ldr	r2, [pc, #136]	@ (800f7b8 <TIM_OC1_SetConfig+0x168>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d017      	beq.n	800f762 <TIM_OC1_SetConfig+0x112>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	4a21      	ldr	r2, [pc, #132]	@ (800f7bc <TIM_OC1_SetConfig+0x16c>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d013      	beq.n	800f762 <TIM_OC1_SetConfig+0x112>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a20      	ldr	r2, [pc, #128]	@ (800f7c0 <TIM_OC1_SetConfig+0x170>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d00f      	beq.n	800f762 <TIM_OC1_SetConfig+0x112>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a1f      	ldr	r2, [pc, #124]	@ (800f7c4 <TIM_OC1_SetConfig+0x174>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d00b      	beq.n	800f762 <TIM_OC1_SetConfig+0x112>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4a1e      	ldr	r2, [pc, #120]	@ (800f7c8 <TIM_OC1_SetConfig+0x178>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d007      	beq.n	800f762 <TIM_OC1_SetConfig+0x112>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a1d      	ldr	r2, [pc, #116]	@ (800f7cc <TIM_OC1_SetConfig+0x17c>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d003      	beq.n	800f762 <TIM_OC1_SetConfig+0x112>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a1c      	ldr	r2, [pc, #112]	@ (800f7d0 <TIM_OC1_SetConfig+0x180>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d111      	bne.n	800f786 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	695b      	ldr	r3, [r3, #20]
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	4313      	orrs	r3, r2
 800f77a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	699b      	ldr	r3, [r3, #24]
 800f780:	693a      	ldr	r2, [r7, #16]
 800f782:	4313      	orrs	r3, r2
 800f784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	685a      	ldr	r2, [r3, #4]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	697a      	ldr	r2, [r7, #20]
 800f79e:	621a      	str	r2, [r3, #32]
}
 800f7a0:	bf00      	nop
 800f7a2:	371c      	adds	r7, #28
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr
 800f7ac:	40012c00 	.word	0x40012c00
 800f7b0:	50012c00 	.word	0x50012c00
 800f7b4:	40013400 	.word	0x40013400
 800f7b8:	50013400 	.word	0x50013400
 800f7bc:	40014000 	.word	0x40014000
 800f7c0:	50014000 	.word	0x50014000
 800f7c4:	40014400 	.word	0x40014400
 800f7c8:	50014400 	.word	0x50014400
 800f7cc:	40014800 	.word	0x40014800
 800f7d0:	50014800 	.word	0x50014800

0800f7d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b087      	sub	sp, #28
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6a1b      	ldr	r3, [r3, #32]
 800f7e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6a1b      	ldr	r3, [r3, #32]
 800f7e8:	f023 0210 	bic.w	r2, r3, #16
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	699b      	ldr	r3, [r3, #24]
 800f7fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f80e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	021b      	lsls	r3, r3, #8
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	4313      	orrs	r3, r2
 800f81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	f023 0320 	bic.w	r3, r3, #32
 800f822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	011b      	lsls	r3, r3, #4
 800f82a:	697a      	ldr	r2, [r7, #20]
 800f82c:	4313      	orrs	r3, r2
 800f82e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	4a36      	ldr	r2, [pc, #216]	@ (800f90c <TIM_OC2_SetConfig+0x138>)
 800f834:	4293      	cmp	r3, r2
 800f836:	d00b      	beq.n	800f850 <TIM_OC2_SetConfig+0x7c>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4a35      	ldr	r2, [pc, #212]	@ (800f910 <TIM_OC2_SetConfig+0x13c>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d007      	beq.n	800f850 <TIM_OC2_SetConfig+0x7c>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4a34      	ldr	r2, [pc, #208]	@ (800f914 <TIM_OC2_SetConfig+0x140>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d003      	beq.n	800f850 <TIM_OC2_SetConfig+0x7c>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4a33      	ldr	r2, [pc, #204]	@ (800f918 <TIM_OC2_SetConfig+0x144>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d10d      	bne.n	800f86c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	011b      	lsls	r3, r3, #4
 800f85e:	697a      	ldr	r2, [r7, #20]
 800f860:	4313      	orrs	r3, r2
 800f862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f86a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a27      	ldr	r2, [pc, #156]	@ (800f90c <TIM_OC2_SetConfig+0x138>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d023      	beq.n	800f8bc <TIM_OC2_SetConfig+0xe8>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a26      	ldr	r2, [pc, #152]	@ (800f910 <TIM_OC2_SetConfig+0x13c>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d01f      	beq.n	800f8bc <TIM_OC2_SetConfig+0xe8>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a25      	ldr	r2, [pc, #148]	@ (800f914 <TIM_OC2_SetConfig+0x140>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d01b      	beq.n	800f8bc <TIM_OC2_SetConfig+0xe8>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a24      	ldr	r2, [pc, #144]	@ (800f918 <TIM_OC2_SetConfig+0x144>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d017      	beq.n	800f8bc <TIM_OC2_SetConfig+0xe8>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4a23      	ldr	r2, [pc, #140]	@ (800f91c <TIM_OC2_SetConfig+0x148>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d013      	beq.n	800f8bc <TIM_OC2_SetConfig+0xe8>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a22      	ldr	r2, [pc, #136]	@ (800f920 <TIM_OC2_SetConfig+0x14c>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d00f      	beq.n	800f8bc <TIM_OC2_SetConfig+0xe8>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4a21      	ldr	r2, [pc, #132]	@ (800f924 <TIM_OC2_SetConfig+0x150>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d00b      	beq.n	800f8bc <TIM_OC2_SetConfig+0xe8>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4a20      	ldr	r2, [pc, #128]	@ (800f928 <TIM_OC2_SetConfig+0x154>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d007      	beq.n	800f8bc <TIM_OC2_SetConfig+0xe8>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a1f      	ldr	r2, [pc, #124]	@ (800f92c <TIM_OC2_SetConfig+0x158>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d003      	beq.n	800f8bc <TIM_OC2_SetConfig+0xe8>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4a1e      	ldr	r2, [pc, #120]	@ (800f930 <TIM_OC2_SetConfig+0x15c>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d113      	bne.n	800f8e4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f8c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f8ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	695b      	ldr	r3, [r3, #20]
 800f8d0:	009b      	lsls	r3, r3, #2
 800f8d2:	693a      	ldr	r2, [r7, #16]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	699b      	ldr	r3, [r3, #24]
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	693a      	ldr	r2, [r7, #16]
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	693a      	ldr	r2, [r7, #16]
 800f8e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	685a      	ldr	r2, [r3, #4]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	697a      	ldr	r2, [r7, #20]
 800f8fc:	621a      	str	r2, [r3, #32]
}
 800f8fe:	bf00      	nop
 800f900:	371c      	adds	r7, #28
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop
 800f90c:	40012c00 	.word	0x40012c00
 800f910:	50012c00 	.word	0x50012c00
 800f914:	40013400 	.word	0x40013400
 800f918:	50013400 	.word	0x50013400
 800f91c:	40014000 	.word	0x40014000
 800f920:	50014000 	.word	0x50014000
 800f924:	40014400 	.word	0x40014400
 800f928:	50014400 	.word	0x50014400
 800f92c:	40014800 	.word	0x40014800
 800f930:	50014800 	.word	0x50014800

0800f934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f934:	b480      	push	{r7}
 800f936:	b087      	sub	sp, #28
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6a1b      	ldr	r3, [r3, #32]
 800f942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6a1b      	ldr	r3, [r3, #32]
 800f948:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	69db      	ldr	r3, [r3, #28]
 800f95a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f023 0303 	bic.w	r3, r3, #3
 800f96e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	4313      	orrs	r3, r2
 800f978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	689b      	ldr	r3, [r3, #8]
 800f986:	021b      	lsls	r3, r3, #8
 800f988:	697a      	ldr	r2, [r7, #20]
 800f98a:	4313      	orrs	r3, r2
 800f98c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a35      	ldr	r2, [pc, #212]	@ (800fa68 <TIM_OC3_SetConfig+0x134>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d00b      	beq.n	800f9ae <TIM_OC3_SetConfig+0x7a>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4a34      	ldr	r2, [pc, #208]	@ (800fa6c <TIM_OC3_SetConfig+0x138>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d007      	beq.n	800f9ae <TIM_OC3_SetConfig+0x7a>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	4a33      	ldr	r2, [pc, #204]	@ (800fa70 <TIM_OC3_SetConfig+0x13c>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d003      	beq.n	800f9ae <TIM_OC3_SetConfig+0x7a>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4a32      	ldr	r2, [pc, #200]	@ (800fa74 <TIM_OC3_SetConfig+0x140>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d10d      	bne.n	800f9ca <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f9b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	021b      	lsls	r3, r3, #8
 800f9bc:	697a      	ldr	r2, [r7, #20]
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f9c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4a26      	ldr	r2, [pc, #152]	@ (800fa68 <TIM_OC3_SetConfig+0x134>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d023      	beq.n	800fa1a <TIM_OC3_SetConfig+0xe6>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4a25      	ldr	r2, [pc, #148]	@ (800fa6c <TIM_OC3_SetConfig+0x138>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d01f      	beq.n	800fa1a <TIM_OC3_SetConfig+0xe6>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a24      	ldr	r2, [pc, #144]	@ (800fa70 <TIM_OC3_SetConfig+0x13c>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d01b      	beq.n	800fa1a <TIM_OC3_SetConfig+0xe6>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4a23      	ldr	r2, [pc, #140]	@ (800fa74 <TIM_OC3_SetConfig+0x140>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d017      	beq.n	800fa1a <TIM_OC3_SetConfig+0xe6>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4a22      	ldr	r2, [pc, #136]	@ (800fa78 <TIM_OC3_SetConfig+0x144>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d013      	beq.n	800fa1a <TIM_OC3_SetConfig+0xe6>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4a21      	ldr	r2, [pc, #132]	@ (800fa7c <TIM_OC3_SetConfig+0x148>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d00f      	beq.n	800fa1a <TIM_OC3_SetConfig+0xe6>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a20      	ldr	r2, [pc, #128]	@ (800fa80 <TIM_OC3_SetConfig+0x14c>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d00b      	beq.n	800fa1a <TIM_OC3_SetConfig+0xe6>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4a1f      	ldr	r2, [pc, #124]	@ (800fa84 <TIM_OC3_SetConfig+0x150>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d007      	beq.n	800fa1a <TIM_OC3_SetConfig+0xe6>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4a1e      	ldr	r2, [pc, #120]	@ (800fa88 <TIM_OC3_SetConfig+0x154>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d003      	beq.n	800fa1a <TIM_OC3_SetConfig+0xe6>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4a1d      	ldr	r2, [pc, #116]	@ (800fa8c <TIM_OC3_SetConfig+0x158>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d113      	bne.n	800fa42 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fa28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	695b      	ldr	r3, [r3, #20]
 800fa2e:	011b      	lsls	r3, r3, #4
 800fa30:	693a      	ldr	r2, [r7, #16]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	699b      	ldr	r3, [r3, #24]
 800fa3a:	011b      	lsls	r3, r3, #4
 800fa3c:	693a      	ldr	r2, [r7, #16]
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	693a      	ldr	r2, [r7, #16]
 800fa46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	685a      	ldr	r2, [r3, #4]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	697a      	ldr	r2, [r7, #20]
 800fa5a:	621a      	str	r2, [r3, #32]
}
 800fa5c:	bf00      	nop
 800fa5e:	371c      	adds	r7, #28
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr
 800fa68:	40012c00 	.word	0x40012c00
 800fa6c:	50012c00 	.word	0x50012c00
 800fa70:	40013400 	.word	0x40013400
 800fa74:	50013400 	.word	0x50013400
 800fa78:	40014000 	.word	0x40014000
 800fa7c:	50014000 	.word	0x50014000
 800fa80:	40014400 	.word	0x40014400
 800fa84:	50014400 	.word	0x50014400
 800fa88:	40014800 	.word	0x40014800
 800fa8c:	50014800 	.word	0x50014800

0800fa90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b087      	sub	sp, #28
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a1b      	ldr	r3, [r3, #32]
 800faa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	69db      	ldr	r3, [r3, #28]
 800fab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fabe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800faca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	021b      	lsls	r3, r3, #8
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	689b      	ldr	r3, [r3, #8]
 800fae4:	031b      	lsls	r3, r3, #12
 800fae6:	697a      	ldr	r2, [r7, #20]
 800fae8:	4313      	orrs	r3, r2
 800faea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	4a36      	ldr	r2, [pc, #216]	@ (800fbc8 <TIM_OC4_SetConfig+0x138>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d00b      	beq.n	800fb0c <TIM_OC4_SetConfig+0x7c>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4a35      	ldr	r2, [pc, #212]	@ (800fbcc <TIM_OC4_SetConfig+0x13c>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d007      	beq.n	800fb0c <TIM_OC4_SetConfig+0x7c>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4a34      	ldr	r2, [pc, #208]	@ (800fbd0 <TIM_OC4_SetConfig+0x140>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d003      	beq.n	800fb0c <TIM_OC4_SetConfig+0x7c>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4a33      	ldr	r2, [pc, #204]	@ (800fbd4 <TIM_OC4_SetConfig+0x144>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d10d      	bne.n	800fb28 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fb12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	031b      	lsls	r3, r3, #12
 800fb1a:	697a      	ldr	r2, [r7, #20]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fb26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a27      	ldr	r2, [pc, #156]	@ (800fbc8 <TIM_OC4_SetConfig+0x138>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d023      	beq.n	800fb78 <TIM_OC4_SetConfig+0xe8>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a26      	ldr	r2, [pc, #152]	@ (800fbcc <TIM_OC4_SetConfig+0x13c>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d01f      	beq.n	800fb78 <TIM_OC4_SetConfig+0xe8>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a25      	ldr	r2, [pc, #148]	@ (800fbd0 <TIM_OC4_SetConfig+0x140>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d01b      	beq.n	800fb78 <TIM_OC4_SetConfig+0xe8>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4a24      	ldr	r2, [pc, #144]	@ (800fbd4 <TIM_OC4_SetConfig+0x144>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d017      	beq.n	800fb78 <TIM_OC4_SetConfig+0xe8>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4a23      	ldr	r2, [pc, #140]	@ (800fbd8 <TIM_OC4_SetConfig+0x148>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d013      	beq.n	800fb78 <TIM_OC4_SetConfig+0xe8>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4a22      	ldr	r2, [pc, #136]	@ (800fbdc <TIM_OC4_SetConfig+0x14c>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d00f      	beq.n	800fb78 <TIM_OC4_SetConfig+0xe8>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a21      	ldr	r2, [pc, #132]	@ (800fbe0 <TIM_OC4_SetConfig+0x150>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d00b      	beq.n	800fb78 <TIM_OC4_SetConfig+0xe8>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4a20      	ldr	r2, [pc, #128]	@ (800fbe4 <TIM_OC4_SetConfig+0x154>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d007      	beq.n	800fb78 <TIM_OC4_SetConfig+0xe8>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4a1f      	ldr	r2, [pc, #124]	@ (800fbe8 <TIM_OC4_SetConfig+0x158>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d003      	beq.n	800fb78 <TIM_OC4_SetConfig+0xe8>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4a1e      	ldr	r2, [pc, #120]	@ (800fbec <TIM_OC4_SetConfig+0x15c>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d113      	bne.n	800fba0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fb7e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fb86:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	695b      	ldr	r3, [r3, #20]
 800fb8c:	019b      	lsls	r3, r3, #6
 800fb8e:	693a      	ldr	r2, [r7, #16]
 800fb90:	4313      	orrs	r3, r2
 800fb92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	699b      	ldr	r3, [r3, #24]
 800fb98:	019b      	lsls	r3, r3, #6
 800fb9a:	693a      	ldr	r2, [r7, #16]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	68fa      	ldr	r2, [r7, #12]
 800fbaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	685a      	ldr	r2, [r3, #4]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	697a      	ldr	r2, [r7, #20]
 800fbb8:	621a      	str	r2, [r3, #32]
}
 800fbba:	bf00      	nop
 800fbbc:	371c      	adds	r7, #28
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	40012c00 	.word	0x40012c00
 800fbcc:	50012c00 	.word	0x50012c00
 800fbd0:	40013400 	.word	0x40013400
 800fbd4:	50013400 	.word	0x50013400
 800fbd8:	40014000 	.word	0x40014000
 800fbdc:	50014000 	.word	0x50014000
 800fbe0:	40014400 	.word	0x40014400
 800fbe4:	50014400 	.word	0x50014400
 800fbe8:	40014800 	.word	0x40014800
 800fbec:	50014800 	.word	0x50014800

0800fbf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b087      	sub	sp, #28
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6a1b      	ldr	r3, [r3, #32]
 800fbfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6a1b      	ldr	r3, [r3, #32]
 800fc04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fc1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	68fa      	ldr	r2, [r7, #12]
 800fc2a:	4313      	orrs	r3, r2
 800fc2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fc34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	689b      	ldr	r3, [r3, #8]
 800fc3a:	041b      	lsls	r3, r3, #16
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	4a21      	ldr	r2, [pc, #132]	@ (800fccc <TIM_OC5_SetConfig+0xdc>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d023      	beq.n	800fc92 <TIM_OC5_SetConfig+0xa2>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4a20      	ldr	r2, [pc, #128]	@ (800fcd0 <TIM_OC5_SetConfig+0xe0>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d01f      	beq.n	800fc92 <TIM_OC5_SetConfig+0xa2>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	4a1f      	ldr	r2, [pc, #124]	@ (800fcd4 <TIM_OC5_SetConfig+0xe4>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d01b      	beq.n	800fc92 <TIM_OC5_SetConfig+0xa2>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	4a1e      	ldr	r2, [pc, #120]	@ (800fcd8 <TIM_OC5_SetConfig+0xe8>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d017      	beq.n	800fc92 <TIM_OC5_SetConfig+0xa2>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4a1d      	ldr	r2, [pc, #116]	@ (800fcdc <TIM_OC5_SetConfig+0xec>)
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d013      	beq.n	800fc92 <TIM_OC5_SetConfig+0xa2>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4a1c      	ldr	r2, [pc, #112]	@ (800fce0 <TIM_OC5_SetConfig+0xf0>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d00f      	beq.n	800fc92 <TIM_OC5_SetConfig+0xa2>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4a1b      	ldr	r2, [pc, #108]	@ (800fce4 <TIM_OC5_SetConfig+0xf4>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d00b      	beq.n	800fc92 <TIM_OC5_SetConfig+0xa2>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4a1a      	ldr	r2, [pc, #104]	@ (800fce8 <TIM_OC5_SetConfig+0xf8>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d007      	beq.n	800fc92 <TIM_OC5_SetConfig+0xa2>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4a19      	ldr	r2, [pc, #100]	@ (800fcec <TIM_OC5_SetConfig+0xfc>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d003      	beq.n	800fc92 <TIM_OC5_SetConfig+0xa2>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a18      	ldr	r2, [pc, #96]	@ (800fcf0 <TIM_OC5_SetConfig+0x100>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d109      	bne.n	800fca6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fc98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	695b      	ldr	r3, [r3, #20]
 800fc9e:	021b      	lsls	r3, r3, #8
 800fca0:	697a      	ldr	r2, [r7, #20]
 800fca2:	4313      	orrs	r3, r2
 800fca4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	697a      	ldr	r2, [r7, #20]
 800fcaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	685a      	ldr	r2, [r3, #4]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	693a      	ldr	r2, [r7, #16]
 800fcbe:	621a      	str	r2, [r3, #32]
}
 800fcc0:	bf00      	nop
 800fcc2:	371c      	adds	r7, #28
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr
 800fccc:	40012c00 	.word	0x40012c00
 800fcd0:	50012c00 	.word	0x50012c00
 800fcd4:	40013400 	.word	0x40013400
 800fcd8:	50013400 	.word	0x50013400
 800fcdc:	40014000 	.word	0x40014000
 800fce0:	50014000 	.word	0x50014000
 800fce4:	40014400 	.word	0x40014400
 800fce8:	50014400 	.word	0x50014400
 800fcec:	40014800 	.word	0x40014800
 800fcf0:	50014800 	.word	0x50014800

0800fcf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b087      	sub	sp, #28
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6a1b      	ldr	r3, [r3, #32]
 800fd02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6a1b      	ldr	r3, [r3, #32]
 800fd08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fd22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	021b      	lsls	r3, r3, #8
 800fd2e:	68fa      	ldr	r2, [r7, #12]
 800fd30:	4313      	orrs	r3, r2
 800fd32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fd3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	689b      	ldr	r3, [r3, #8]
 800fd40:	051b      	lsls	r3, r3, #20
 800fd42:	693a      	ldr	r2, [r7, #16]
 800fd44:	4313      	orrs	r3, r2
 800fd46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	4a22      	ldr	r2, [pc, #136]	@ (800fdd4 <TIM_OC6_SetConfig+0xe0>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d023      	beq.n	800fd98 <TIM_OC6_SetConfig+0xa4>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4a21      	ldr	r2, [pc, #132]	@ (800fdd8 <TIM_OC6_SetConfig+0xe4>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d01f      	beq.n	800fd98 <TIM_OC6_SetConfig+0xa4>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4a20      	ldr	r2, [pc, #128]	@ (800fddc <TIM_OC6_SetConfig+0xe8>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d01b      	beq.n	800fd98 <TIM_OC6_SetConfig+0xa4>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4a1f      	ldr	r2, [pc, #124]	@ (800fde0 <TIM_OC6_SetConfig+0xec>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d017      	beq.n	800fd98 <TIM_OC6_SetConfig+0xa4>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	4a1e      	ldr	r2, [pc, #120]	@ (800fde4 <TIM_OC6_SetConfig+0xf0>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d013      	beq.n	800fd98 <TIM_OC6_SetConfig+0xa4>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4a1d      	ldr	r2, [pc, #116]	@ (800fde8 <TIM_OC6_SetConfig+0xf4>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d00f      	beq.n	800fd98 <TIM_OC6_SetConfig+0xa4>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4a1c      	ldr	r2, [pc, #112]	@ (800fdec <TIM_OC6_SetConfig+0xf8>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d00b      	beq.n	800fd98 <TIM_OC6_SetConfig+0xa4>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	4a1b      	ldr	r2, [pc, #108]	@ (800fdf0 <TIM_OC6_SetConfig+0xfc>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d007      	beq.n	800fd98 <TIM_OC6_SetConfig+0xa4>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4a1a      	ldr	r2, [pc, #104]	@ (800fdf4 <TIM_OC6_SetConfig+0x100>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d003      	beq.n	800fd98 <TIM_OC6_SetConfig+0xa4>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	4a19      	ldr	r2, [pc, #100]	@ (800fdf8 <TIM_OC6_SetConfig+0x104>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d109      	bne.n	800fdac <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fd9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	695b      	ldr	r3, [r3, #20]
 800fda4:	029b      	lsls	r3, r3, #10
 800fda6:	697a      	ldr	r2, [r7, #20]
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	697a      	ldr	r2, [r7, #20]
 800fdb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	685a      	ldr	r2, [r3, #4]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	693a      	ldr	r2, [r7, #16]
 800fdc4:	621a      	str	r2, [r3, #32]
}
 800fdc6:	bf00      	nop
 800fdc8:	371c      	adds	r7, #28
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	40012c00 	.word	0x40012c00
 800fdd8:	50012c00 	.word	0x50012c00
 800fddc:	40013400 	.word	0x40013400
 800fde0:	50013400 	.word	0x50013400
 800fde4:	40014000 	.word	0x40014000
 800fde8:	50014000 	.word	0x50014000
 800fdec:	40014400 	.word	0x40014400
 800fdf0:	50014400 	.word	0x50014400
 800fdf4:	40014800 	.word	0x40014800
 800fdf8:	50014800 	.word	0x50014800

0800fdfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b087      	sub	sp, #28
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	6a1b      	ldr	r3, [r3, #32]
 800fe0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	6a1b      	ldr	r3, [r3, #32]
 800fe12:	f023 0201 	bic.w	r2, r3, #1
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	699b      	ldr	r3, [r3, #24]
 800fe1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fe26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	011b      	lsls	r3, r3, #4
 800fe2c:	693a      	ldr	r2, [r7, #16]
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	f023 030a 	bic.w	r3, r3, #10
 800fe38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe3a:	697a      	ldr	r2, [r7, #20]
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	693a      	ldr	r2, [r7, #16]
 800fe46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	697a      	ldr	r2, [r7, #20]
 800fe4c:	621a      	str	r2, [r3, #32]
}
 800fe4e:	bf00      	nop
 800fe50:	371c      	adds	r7, #28
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr

0800fe5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe5a:	b480      	push	{r7}
 800fe5c:	b087      	sub	sp, #28
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	60f8      	str	r0, [r7, #12]
 800fe62:	60b9      	str	r1, [r7, #8]
 800fe64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6a1b      	ldr	r3, [r3, #32]
 800fe6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	6a1b      	ldr	r3, [r3, #32]
 800fe70:	f023 0210 	bic.w	r2, r3, #16
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	699b      	ldr	r3, [r3, #24]
 800fe7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fe84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	031b      	lsls	r3, r3, #12
 800fe8a:	693a      	ldr	r2, [r7, #16]
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fe96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	011b      	lsls	r3, r3, #4
 800fe9c:	697a      	ldr	r2, [r7, #20]
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	693a      	ldr	r2, [r7, #16]
 800fea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	697a      	ldr	r2, [r7, #20]
 800feac:	621a      	str	r2, [r3, #32]
}
 800feae:	bf00      	nop
 800feb0:	371c      	adds	r7, #28
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr

0800feba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800feba:	b480      	push	{r7}
 800febc:	b085      	sub	sp, #20
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
 800fec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800fed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fed6:	683a      	ldr	r2, [r7, #0]
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	4313      	orrs	r3, r2
 800fedc:	f043 0307 	orr.w	r3, r3, #7
 800fee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	68fa      	ldr	r2, [r7, #12]
 800fee6:	609a      	str	r2, [r3, #8]
}
 800fee8:	bf00      	nop
 800feea:	3714      	adds	r7, #20
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b087      	sub	sp, #28
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
 800ff00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ff0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	021a      	lsls	r2, r3, #8
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	431a      	orrs	r2, r3
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	697a      	ldr	r2, [r7, #20]
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	697a      	ldr	r2, [r7, #20]
 800ff26:	609a      	str	r2, [r3, #8]
}
 800ff28:	bf00      	nop
 800ff2a:	371c      	adds	r7, #28
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b085      	sub	sp, #20
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d101      	bne.n	800ff4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff48:	2302      	movs	r3, #2
 800ff4a:	e097      	b.n	801007c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2201      	movs	r2, #1
 800ff50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2202      	movs	r2, #2
 800ff58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	689b      	ldr	r3, [r3, #8]
 800ff6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a45      	ldr	r2, [pc, #276]	@ (8010088 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d00e      	beq.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4a44      	ldr	r2, [pc, #272]	@ (801008c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d009      	beq.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4a42      	ldr	r2, [pc, #264]	@ (8010090 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d004      	beq.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	4a41      	ldr	r2, [pc, #260]	@ (8010094 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d108      	bne.n	800ffa6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ff9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ffac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	68fa      	ldr	r2, [r7, #12]
 800ffc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4a2f      	ldr	r2, [pc, #188]	@ (8010088 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d040      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	4a2e      	ldr	r2, [pc, #184]	@ (801008c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d03b      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffe0:	d036      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ffea:	d031      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4a29      	ldr	r2, [pc, #164]	@ (8010098 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d02c      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4a28      	ldr	r2, [pc, #160]	@ (801009c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d027      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4a26      	ldr	r2, [pc, #152]	@ (80100a0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8010006:	4293      	cmp	r3, r2
 8010008:	d022      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4a25      	ldr	r2, [pc, #148]	@ (80100a4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010010:	4293      	cmp	r3, r2
 8010012:	d01d      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a23      	ldr	r2, [pc, #140]	@ (80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d018      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a22      	ldr	r2, [pc, #136]	@ (80100ac <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d013      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a18      	ldr	r2, [pc, #96]	@ (8010090 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d00e      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a17      	ldr	r2, [pc, #92]	@ (8010094 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010038:	4293      	cmp	r3, r2
 801003a:	d009      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4a1b      	ldr	r2, [pc, #108]	@ (80100b0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d004      	beq.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a1a      	ldr	r2, [pc, #104]	@ (80100b4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d10c      	bne.n	801006a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010056:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	689b      	ldr	r3, [r3, #8]
 801005c:	68ba      	ldr	r2, [r7, #8]
 801005e:	4313      	orrs	r3, r2
 8010060:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	68ba      	ldr	r2, [r7, #8]
 8010068:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2201      	movs	r2, #1
 801006e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801007a:	2300      	movs	r3, #0
}
 801007c:	4618      	mov	r0, r3
 801007e:	3714      	adds	r7, #20
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr
 8010088:	40012c00 	.word	0x40012c00
 801008c:	50012c00 	.word	0x50012c00
 8010090:	40013400 	.word	0x40013400
 8010094:	50013400 	.word	0x50013400
 8010098:	40000400 	.word	0x40000400
 801009c:	50000400 	.word	0x50000400
 80100a0:	40000800 	.word	0x40000800
 80100a4:	50000800 	.word	0x50000800
 80100a8:	40000c00 	.word	0x40000c00
 80100ac:	50000c00 	.word	0x50000c00
 80100b0:	40014000 	.word	0x40014000
 80100b4:	50014000 	.word	0x50014000

080100b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d101      	bne.n	80100ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80100c6:	2301      	movs	r3, #1
 80100c8:	e042      	b.n	8010150 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d106      	bne.n	80100e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f7f2 f907 	bl	80022f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2224      	movs	r2, #36	@ 0x24
 80100e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f022 0201 	bic.w	r2, r2, #1
 80100f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d002      	beq.n	8010108 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 fd02 	bl	8010b0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 fb51 	bl	80107b0 <UART_SetConfig>
 801010e:	4603      	mov	r3, r0
 8010110:	2b01      	cmp	r3, #1
 8010112:	d101      	bne.n	8010118 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010114:	2301      	movs	r3, #1
 8010116:	e01b      	b.n	8010150 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	685a      	ldr	r2, [r3, #4]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	689a      	ldr	r2, [r3, #8]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	681a      	ldr	r2, [r3, #0]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f042 0201 	orr.w	r2, r2, #1
 8010146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 fd81 	bl	8010c50 <UART_CheckIdleState>
 801014e:	4603      	mov	r3, r0
}
 8010150:	4618      	mov	r0, r3
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b0ba      	sub	sp, #232	@ 0xe8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	69db      	ldr	r3, [r3, #28]
 8010166:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	689b      	ldr	r3, [r3, #8]
 801017a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801017e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010182:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010186:	4013      	ands	r3, r2
 8010188:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801018c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010190:	2b00      	cmp	r3, #0
 8010192:	d11b      	bne.n	80101cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010198:	f003 0320 	and.w	r3, r3, #32
 801019c:	2b00      	cmp	r3, #0
 801019e:	d015      	beq.n	80101cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80101a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101a4:	f003 0320 	and.w	r3, r3, #32
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d105      	bne.n	80101b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80101ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d009      	beq.n	80101cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101bc:	2b00      	cmp	r3, #0
 80101be:	f000 82cb 	beq.w	8010758 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	4798      	blx	r3
      }
      return;
 80101ca:	e2c5      	b.n	8010758 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80101cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f000 8123 	beq.w	801041c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80101d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80101da:	4b8d      	ldr	r3, [pc, #564]	@ (8010410 <HAL_UART_IRQHandler+0x2b8>)
 80101dc:	4013      	ands	r3, r2
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d106      	bne.n	80101f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80101e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80101e6:	4b8b      	ldr	r3, [pc, #556]	@ (8010414 <HAL_UART_IRQHandler+0x2bc>)
 80101e8:	4013      	ands	r3, r2
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f000 8116 	beq.w	801041c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80101f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101f4:	f003 0301 	and.w	r3, r3, #1
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d011      	beq.n	8010220 <HAL_UART_IRQHandler+0xc8>
 80101fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00b      	beq.n	8010220 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2201      	movs	r2, #1
 801020e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010216:	f043 0201 	orr.w	r2, r3, #1
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010224:	f003 0302 	and.w	r3, r3, #2
 8010228:	2b00      	cmp	r3, #0
 801022a:	d011      	beq.n	8010250 <HAL_UART_IRQHandler+0xf8>
 801022c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010230:	f003 0301 	and.w	r3, r3, #1
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00b      	beq.n	8010250 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2202      	movs	r2, #2
 801023e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010246:	f043 0204 	orr.w	r2, r3, #4
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010254:	f003 0304 	and.w	r3, r3, #4
 8010258:	2b00      	cmp	r3, #0
 801025a:	d011      	beq.n	8010280 <HAL_UART_IRQHandler+0x128>
 801025c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010260:	f003 0301 	and.w	r3, r3, #1
 8010264:	2b00      	cmp	r3, #0
 8010266:	d00b      	beq.n	8010280 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2204      	movs	r2, #4
 801026e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010276:	f043 0202 	orr.w	r2, r3, #2
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010284:	f003 0308 	and.w	r3, r3, #8
 8010288:	2b00      	cmp	r3, #0
 801028a:	d017      	beq.n	80102bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801028c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010290:	f003 0320 	and.w	r3, r3, #32
 8010294:	2b00      	cmp	r3, #0
 8010296:	d105      	bne.n	80102a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010298:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801029c:	4b5c      	ldr	r3, [pc, #368]	@ (8010410 <HAL_UART_IRQHandler+0x2b8>)
 801029e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d00b      	beq.n	80102bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2208      	movs	r2, #8
 80102aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102b2:	f043 0208 	orr.w	r2, r3, #8
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80102bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d012      	beq.n	80102ee <HAL_UART_IRQHandler+0x196>
 80102c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d00c      	beq.n	80102ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80102dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102e4:	f043 0220 	orr.w	r2, r3, #32
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f000 8231 	beq.w	801075c <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80102fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102fe:	f003 0320 	and.w	r3, r3, #32
 8010302:	2b00      	cmp	r3, #0
 8010304:	d013      	beq.n	801032e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801030a:	f003 0320 	and.w	r3, r3, #32
 801030e:	2b00      	cmp	r3, #0
 8010310:	d105      	bne.n	801031e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801031a:	2b00      	cmp	r3, #0
 801031c:	d007      	beq.n	801032e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010322:	2b00      	cmp	r3, #0
 8010324:	d003      	beq.n	801032e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010334:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010342:	2b40      	cmp	r3, #64	@ 0x40
 8010344:	d005      	beq.n	8010352 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801034a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801034e:	2b00      	cmp	r3, #0
 8010350:	d054      	beq.n	80103fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 fd93 	bl	8010e7e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010362:	2b40      	cmp	r3, #64	@ 0x40
 8010364:	d146      	bne.n	80103f4 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	3308      	adds	r3, #8
 801036c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010370:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010374:	e853 3f00 	ldrex	r3, [r3]
 8010378:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801037c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010384:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	3308      	adds	r3, #8
 801038e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010392:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010396:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801039e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80103a2:	e841 2300 	strex	r3, r2, [r1]
 80103a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80103aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1d9      	bne.n	8010366 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d017      	beq.n	80103ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103c2:	4a15      	ldr	r2, [pc, #84]	@ (8010418 <HAL_UART_IRQHandler+0x2c0>)
 80103c4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7f5 fa07 	bl	80057e0 <HAL_DMA_Abort_IT>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d019      	beq.n	801040c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80103e6:	4610      	mov	r0, r2
 80103e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103ea:	e00f      	b.n	801040c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f000 f9c9 	bl	8010784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103f2:	e00b      	b.n	801040c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f000 f9c5 	bl	8010784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103fa:	e007      	b.n	801040c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f000 f9c1 	bl	8010784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2200      	movs	r2, #0
 8010406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801040a:	e1a7      	b.n	801075c <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801040c:	bf00      	nop
    return;
 801040e:	e1a5      	b.n	801075c <HAL_UART_IRQHandler+0x604>
 8010410:	10000001 	.word	0x10000001
 8010414:	04000120 	.word	0x04000120
 8010418:	08010f4b 	.word	0x08010f4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010420:	2b01      	cmp	r3, #1
 8010422:	f040 8150 	bne.w	80106c6 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801042a:	f003 0310 	and.w	r3, r3, #16
 801042e:	2b00      	cmp	r3, #0
 8010430:	f000 8149 	beq.w	80106c6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010438:	f003 0310 	and.w	r3, r3, #16
 801043c:	2b00      	cmp	r3, #0
 801043e:	f000 8142 	beq.w	80106c6 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2210      	movs	r2, #16
 8010448:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	689b      	ldr	r3, [r3, #8]
 8010450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010454:	2b40      	cmp	r3, #64	@ 0x40
 8010456:	f040 80b8 	bne.w	80105ca <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010464:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801046c:	2b00      	cmp	r3, #0
 801046e:	f000 8177 	beq.w	8010760 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010478:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801047c:	429a      	cmp	r2, r3
 801047e:	f080 816f 	bcs.w	8010760 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010488:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010494:	2b81      	cmp	r3, #129	@ 0x81
 8010496:	f000 8087 	beq.w	80105a8 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80104a6:	e853 3f00 	ldrex	r3, [r3]
 80104aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80104ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80104b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80104b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	461a      	mov	r2, r3
 80104c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80104c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80104c8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80104d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80104d4:	e841 2300 	strex	r3, r2, [r1]
 80104d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80104dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d1da      	bne.n	801049a <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	3308      	adds	r3, #8
 80104ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80104ee:	e853 3f00 	ldrex	r3, [r3]
 80104f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80104f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80104f6:	f023 0301 	bic.w	r3, r3, #1
 80104fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	3308      	adds	r3, #8
 8010504:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010508:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801050c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801050e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010510:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010514:	e841 2300 	strex	r3, r2, [r1]
 8010518:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801051a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801051c:	2b00      	cmp	r3, #0
 801051e:	d1e1      	bne.n	80104e4 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	3308      	adds	r3, #8
 8010526:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010528:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801052a:	e853 3f00 	ldrex	r3, [r3]
 801052e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	3308      	adds	r3, #8
 8010540:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010544:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010546:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010548:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801054a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801054c:	e841 2300 	strex	r3, r2, [r1]
 8010550:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010552:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010554:	2b00      	cmp	r3, #0
 8010556:	d1e3      	bne.n	8010520 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2220      	movs	r2, #32
 801055c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801056c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801056e:	e853 3f00 	ldrex	r3, [r3]
 8010572:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010574:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010576:	f023 0310 	bic.w	r3, r3, #16
 801057a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	461a      	mov	r2, r3
 8010584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010588:	65bb      	str	r3, [r7, #88]	@ 0x58
 801058a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801058c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801058e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010590:	e841 2300 	strex	r3, r2, [r1]
 8010594:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1e4      	bne.n	8010566 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7f5 f8a0 	bl	80056e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2202      	movs	r2, #2
 80105ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	1ad3      	subs	r3, r2, r3
 80105be:	b29b      	uxth	r3, r3
 80105c0:	4619      	mov	r1, r3
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 f8e8 	bl	8010798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80105c8:	e0ca      	b.n	8010760 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	1ad3      	subs	r3, r2, r3
 80105da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	f000 80bc 	beq.w	8010764 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80105ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	f000 80b7 	beq.w	8010764 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105fe:	e853 3f00 	ldrex	r3, [r3]
 8010602:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010606:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801060a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	461a      	mov	r2, r3
 8010614:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010618:	647b      	str	r3, [r7, #68]	@ 0x44
 801061a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801061e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010620:	e841 2300 	strex	r3, r2, [r1]
 8010624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1e4      	bne.n	80105f6 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	3308      	adds	r3, #8
 8010632:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010636:	e853 3f00 	ldrex	r3, [r3]
 801063a:	623b      	str	r3, [r7, #32]
   return(result);
 801063c:	6a3b      	ldr	r3, [r7, #32]
 801063e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010642:	f023 0301 	bic.w	r3, r3, #1
 8010646:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	3308      	adds	r3, #8
 8010650:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010654:	633a      	str	r2, [r7, #48]	@ 0x30
 8010656:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010658:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801065a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801065c:	e841 2300 	strex	r3, r2, [r1]
 8010660:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010664:	2b00      	cmp	r3, #0
 8010666:	d1e1      	bne.n	801062c <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2220      	movs	r2, #32
 801066c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	e853 3f00 	ldrex	r3, [r3]
 8010688:	60fb      	str	r3, [r7, #12]
   return(result);
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f023 0310 	bic.w	r3, r3, #16
 8010690:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	461a      	mov	r2, r3
 801069a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801069e:	61fb      	str	r3, [r7, #28]
 80106a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a2:	69b9      	ldr	r1, [r7, #24]
 80106a4:	69fa      	ldr	r2, [r7, #28]
 80106a6:	e841 2300 	strex	r3, r2, [r1]
 80106aa:	617b      	str	r3, [r7, #20]
   return(result);
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d1e4      	bne.n	801067c <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2202      	movs	r2, #2
 80106b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80106b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80106bc:	4619      	mov	r1, r3
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f000 f86a 	bl	8010798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80106c4:	e04e      	b.n	8010764 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80106c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d014      	beq.n	80106fc <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80106d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d105      	bne.n	80106ea <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80106de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80106e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d008      	beq.n	80106fc <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d03a      	beq.n	8010768 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	4798      	blx	r3
    }
    return;
 80106fa:	e035      	b.n	8010768 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80106fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010704:	2b00      	cmp	r3, #0
 8010706:	d009      	beq.n	801071c <HAL_UART_IRQHandler+0x5c4>
 8010708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801070c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010710:	2b00      	cmp	r3, #0
 8010712:	d003      	beq.n	801071c <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 fc2e 	bl	8010f76 <UART_EndTransmit_IT>
    return;
 801071a:	e026      	b.n	801076a <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801071c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010720:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010724:	2b00      	cmp	r3, #0
 8010726:	d009      	beq.n	801073c <HAL_UART_IRQHandler+0x5e4>
 8010728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801072c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010730:	2b00      	cmp	r3, #0
 8010732:	d003      	beq.n	801073c <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 fc53 	bl	8010fe0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801073a:	e016      	b.n	801076a <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801073c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010744:	2b00      	cmp	r3, #0
 8010746:	d010      	beq.n	801076a <HAL_UART_IRQHandler+0x612>
 8010748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801074c:	2b00      	cmp	r3, #0
 801074e:	da0c      	bge.n	801076a <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f000 fc3b 	bl	8010fcc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010756:	e008      	b.n	801076a <HAL_UART_IRQHandler+0x612>
      return;
 8010758:	bf00      	nop
 801075a:	e006      	b.n	801076a <HAL_UART_IRQHandler+0x612>
    return;
 801075c:	bf00      	nop
 801075e:	e004      	b.n	801076a <HAL_UART_IRQHandler+0x612>
      return;
 8010760:	bf00      	nop
 8010762:	e002      	b.n	801076a <HAL_UART_IRQHandler+0x612>
      return;
 8010764:	bf00      	nop
 8010766:	e000      	b.n	801076a <HAL_UART_IRQHandler+0x612>
    return;
 8010768:	bf00      	nop
  }
}
 801076a:	37e8      	adds	r7, #232	@ 0xe8
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010778:	bf00      	nop
 801077a:	370c      	adds	r7, #12
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801078c:	bf00      	nop
 801078e:	370c      	adds	r7, #12
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	460b      	mov	r3, r1
 80107a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80107a4:	bf00      	nop
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr

080107b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107b4:	b094      	sub	sp, #80	@ 0x50
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107ba:	2300      	movs	r3, #0
 80107bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80107c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	4b83      	ldr	r3, [pc, #524]	@ (80109d4 <UART_SetConfig+0x224>)
 80107c6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ca:	689a      	ldr	r2, [r3, #8]
 80107cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ce:	691b      	ldr	r3, [r3, #16]
 80107d0:	431a      	orrs	r2, r3
 80107d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d4:	695b      	ldr	r3, [r3, #20]
 80107d6:	431a      	orrs	r2, r3
 80107d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107da:	69db      	ldr	r3, [r3, #28]
 80107dc:	4313      	orrs	r3, r2
 80107de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	497c      	ldr	r1, [pc, #496]	@ (80109d8 <UART_SetConfig+0x228>)
 80107e8:	4019      	ands	r1, r3
 80107ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107f0:	430b      	orrs	r3, r1
 80107f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80107fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010800:	68d9      	ldr	r1, [r3, #12]
 8010802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	ea40 0301 	orr.w	r3, r0, r1
 801080a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801080c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801080e:	699b      	ldr	r3, [r3, #24]
 8010810:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	4b6f      	ldr	r3, [pc, #444]	@ (80109d4 <UART_SetConfig+0x224>)
 8010818:	429a      	cmp	r2, r3
 801081a:	d009      	beq.n	8010830 <UART_SetConfig+0x80>
 801081c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	4b6e      	ldr	r3, [pc, #440]	@ (80109dc <UART_SetConfig+0x22c>)
 8010822:	429a      	cmp	r2, r3
 8010824:	d004      	beq.n	8010830 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010828:	6a1a      	ldr	r2, [r3, #32]
 801082a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801082c:	4313      	orrs	r3, r2
 801082e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	689b      	ldr	r3, [r3, #8]
 8010836:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801083a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 801083e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010844:	430b      	orrs	r3, r1
 8010846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801084e:	f023 000f 	bic.w	r0, r3, #15
 8010852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010854:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	ea40 0301 	orr.w	r3, r0, r1
 801085e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	4b5e      	ldr	r3, [pc, #376]	@ (80109e0 <UART_SetConfig+0x230>)
 8010866:	429a      	cmp	r2, r3
 8010868:	d102      	bne.n	8010870 <UART_SetConfig+0xc0>
 801086a:	2301      	movs	r3, #1
 801086c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801086e:	e032      	b.n	80108d6 <UART_SetConfig+0x126>
 8010870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	4b5b      	ldr	r3, [pc, #364]	@ (80109e4 <UART_SetConfig+0x234>)
 8010876:	429a      	cmp	r2, r3
 8010878:	d102      	bne.n	8010880 <UART_SetConfig+0xd0>
 801087a:	2302      	movs	r3, #2
 801087c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801087e:	e02a      	b.n	80108d6 <UART_SetConfig+0x126>
 8010880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	4b58      	ldr	r3, [pc, #352]	@ (80109e8 <UART_SetConfig+0x238>)
 8010886:	429a      	cmp	r2, r3
 8010888:	d102      	bne.n	8010890 <UART_SetConfig+0xe0>
 801088a:	2304      	movs	r3, #4
 801088c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801088e:	e022      	b.n	80108d6 <UART_SetConfig+0x126>
 8010890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	4b55      	ldr	r3, [pc, #340]	@ (80109ec <UART_SetConfig+0x23c>)
 8010896:	429a      	cmp	r2, r3
 8010898:	d102      	bne.n	80108a0 <UART_SetConfig+0xf0>
 801089a:	2308      	movs	r3, #8
 801089c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801089e:	e01a      	b.n	80108d6 <UART_SetConfig+0x126>
 80108a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a2:	681a      	ldr	r2, [r3, #0]
 80108a4:	4b52      	ldr	r3, [pc, #328]	@ (80109f0 <UART_SetConfig+0x240>)
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d102      	bne.n	80108b0 <UART_SetConfig+0x100>
 80108aa:	2310      	movs	r3, #16
 80108ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108ae:	e012      	b.n	80108d6 <UART_SetConfig+0x126>
 80108b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	4b4f      	ldr	r3, [pc, #316]	@ (80109f4 <UART_SetConfig+0x244>)
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d103      	bne.n	80108c2 <UART_SetConfig+0x112>
 80108ba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80108be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108c0:	e009      	b.n	80108d6 <UART_SetConfig+0x126>
 80108c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	4b43      	ldr	r3, [pc, #268]	@ (80109d4 <UART_SetConfig+0x224>)
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d102      	bne.n	80108d2 <UART_SetConfig+0x122>
 80108cc:	2320      	movs	r3, #32
 80108ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108d0:	e001      	b.n	80108d6 <UART_SetConfig+0x126>
 80108d2:	2300      	movs	r3, #0
 80108d4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80108d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	4b3e      	ldr	r3, [pc, #248]	@ (80109d4 <UART_SetConfig+0x224>)
 80108dc:	429a      	cmp	r2, r3
 80108de:	d005      	beq.n	80108ec <UART_SetConfig+0x13c>
 80108e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	4b3d      	ldr	r3, [pc, #244]	@ (80109dc <UART_SetConfig+0x22c>)
 80108e6:	429a      	cmp	r2, r3
 80108e8:	f040 8088 	bne.w	80109fc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80108ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108ee:	2200      	movs	r2, #0
 80108f0:	623b      	str	r3, [r7, #32]
 80108f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80108f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80108f8:	f7fb fdea 	bl	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80108fc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80108fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010900:	2b00      	cmp	r3, #0
 8010902:	f000 80eb 	beq.w	8010adc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801090a:	4a3b      	ldr	r2, [pc, #236]	@ (80109f8 <UART_SetConfig+0x248>)
 801090c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010910:	461a      	mov	r2, r3
 8010912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010914:	fbb3 f3f2 	udiv	r3, r3, r2
 8010918:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801091a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091c:	685a      	ldr	r2, [r3, #4]
 801091e:	4613      	mov	r3, r2
 8010920:	005b      	lsls	r3, r3, #1
 8010922:	4413      	add	r3, r2
 8010924:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010926:	429a      	cmp	r2, r3
 8010928:	d305      	bcc.n	8010936 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801092a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010930:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010932:	429a      	cmp	r2, r3
 8010934:	d903      	bls.n	801093e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8010936:	2301      	movs	r3, #1
 8010938:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801093c:	e048      	b.n	80109d0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801093e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010940:	2200      	movs	r2, #0
 8010942:	61bb      	str	r3, [r7, #24]
 8010944:	61fa      	str	r2, [r7, #28]
 8010946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801094a:	4a2b      	ldr	r2, [pc, #172]	@ (80109f8 <UART_SetConfig+0x248>)
 801094c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010950:	b29b      	uxth	r3, r3
 8010952:	2200      	movs	r2, #0
 8010954:	613b      	str	r3, [r7, #16]
 8010956:	617a      	str	r2, [r7, #20]
 8010958:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801095c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010960:	f7ef fca8 	bl	80002b4 <__aeabi_uldivmod>
 8010964:	4602      	mov	r2, r0
 8010966:	460b      	mov	r3, r1
 8010968:	4610      	mov	r0, r2
 801096a:	4619      	mov	r1, r3
 801096c:	f04f 0200 	mov.w	r2, #0
 8010970:	f04f 0300 	mov.w	r3, #0
 8010974:	020b      	lsls	r3, r1, #8
 8010976:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801097a:	0202      	lsls	r2, r0, #8
 801097c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801097e:	6849      	ldr	r1, [r1, #4]
 8010980:	0849      	lsrs	r1, r1, #1
 8010982:	2000      	movs	r0, #0
 8010984:	460c      	mov	r4, r1
 8010986:	4605      	mov	r5, r0
 8010988:	eb12 0804 	adds.w	r8, r2, r4
 801098c:	eb43 0905 	adc.w	r9, r3, r5
 8010990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	2200      	movs	r2, #0
 8010996:	60bb      	str	r3, [r7, #8]
 8010998:	60fa      	str	r2, [r7, #12]
 801099a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801099e:	4640      	mov	r0, r8
 80109a0:	4649      	mov	r1, r9
 80109a2:	f7ef fc87 	bl	80002b4 <__aeabi_uldivmod>
 80109a6:	4602      	mov	r2, r0
 80109a8:	460b      	mov	r3, r1
 80109aa:	4613      	mov	r3, r2
 80109ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80109ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80109b4:	d308      	bcc.n	80109c8 <UART_SetConfig+0x218>
 80109b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80109bc:	d204      	bcs.n	80109c8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80109be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80109c4:	60da      	str	r2, [r3, #12]
 80109c6:	e003      	b.n	80109d0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80109c8:	2301      	movs	r3, #1
 80109ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80109ce:	e085      	b.n	8010adc <UART_SetConfig+0x32c>
 80109d0:	e084      	b.n	8010adc <UART_SetConfig+0x32c>
 80109d2:	bf00      	nop
 80109d4:	46002400 	.word	0x46002400
 80109d8:	cfff69f3 	.word	0xcfff69f3
 80109dc:	56002400 	.word	0x56002400
 80109e0:	40013800 	.word	0x40013800
 80109e4:	40004400 	.word	0x40004400
 80109e8:	40004800 	.word	0x40004800
 80109ec:	40004c00 	.word	0x40004c00
 80109f0:	40005000 	.word	0x40005000
 80109f4:	40006400 	.word	0x40006400
 80109f8:	08011c14 	.word	0x08011c14
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80109fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109fe:	69db      	ldr	r3, [r3, #28]
 8010a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010a04:	d13c      	bne.n	8010a80 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a08:	2200      	movs	r2, #0
 8010a0a:	603b      	str	r3, [r7, #0]
 8010a0c:	607a      	str	r2, [r7, #4]
 8010a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010a12:	f7fb fd5d 	bl	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a16:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d05e      	beq.n	8010adc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a22:	4a39      	ldr	r2, [pc, #228]	@ (8010b08 <UART_SetConfig+0x358>)
 8010a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a28:	461a      	mov	r2, r3
 8010a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a30:	005a      	lsls	r2, r3, #1
 8010a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	085b      	lsrs	r3, r3, #1
 8010a38:	441a      	add	r2, r3
 8010a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a46:	2b0f      	cmp	r3, #15
 8010a48:	d916      	bls.n	8010a78 <UART_SetConfig+0x2c8>
 8010a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010a50:	d212      	bcs.n	8010a78 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	f023 030f 	bic.w	r3, r3, #15
 8010a5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a5e:	085b      	lsrs	r3, r3, #1
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	f003 0307 	and.w	r3, r3, #7
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010a6a:	4313      	orrs	r3, r2
 8010a6c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8010a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010a74:	60da      	str	r2, [r3, #12]
 8010a76:	e031      	b.n	8010adc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010a7e:	e02d      	b.n	8010adc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a82:	2200      	movs	r2, #0
 8010a84:	469a      	mov	sl, r3
 8010a86:	4693      	mov	fp, r2
 8010a88:	4650      	mov	r0, sl
 8010a8a:	4659      	mov	r1, fp
 8010a8c:	f7fb fd20 	bl	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a90:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d021      	beq.n	8010adc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8010b08 <UART_SetConfig+0x358>)
 8010a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010aa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8010aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	085b      	lsrs	r3, r3, #1
 8010ab0:	441a      	add	r2, r3
 8010ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010abe:	2b0f      	cmp	r3, #15
 8010ac0:	d909      	bls.n	8010ad6 <UART_SetConfig+0x326>
 8010ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ac8:	d205      	bcs.n	8010ad6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010acc:	b29a      	uxth	r2, r3
 8010ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	60da      	str	r2, [r3, #12]
 8010ad4:	e002      	b.n	8010adc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ade:	2201      	movs	r2, #1
 8010ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aee:	2200      	movs	r2, #0
 8010af0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010af4:	2200      	movs	r2, #0
 8010af6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010af8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3750      	adds	r7, #80	@ 0x50
 8010b00:	46bd      	mov	sp, r7
 8010b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010b06:	bf00      	nop
 8010b08:	08011c14 	.word	0x08011c14

08010b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b083      	sub	sp, #12
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b18:	f003 0308 	and.w	r3, r3, #8
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d00a      	beq.n	8010b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	430a      	orrs	r2, r1
 8010b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b3a:	f003 0301 	and.w	r3, r3, #1
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d00a      	beq.n	8010b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	430a      	orrs	r2, r1
 8010b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b5c:	f003 0302 	and.w	r3, r3, #2
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d00a      	beq.n	8010b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	430a      	orrs	r2, r1
 8010b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b7e:	f003 0304 	and.w	r3, r3, #4
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d00a      	beq.n	8010b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	430a      	orrs	r2, r1
 8010b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ba0:	f003 0310 	and.w	r3, r3, #16
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d00a      	beq.n	8010bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	430a      	orrs	r2, r1
 8010bbc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bc2:	f003 0320 	and.w	r3, r3, #32
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d00a      	beq.n	8010be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	689b      	ldr	r3, [r3, #8]
 8010bd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	430a      	orrs	r2, r1
 8010bde:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d01a      	beq.n	8010c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	430a      	orrs	r2, r1
 8010c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c0a:	d10a      	bne.n	8010c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	430a      	orrs	r2, r1
 8010c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00a      	beq.n	8010c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	430a      	orrs	r2, r1
 8010c42:	605a      	str	r2, [r3, #4]
  }
}
 8010c44:	bf00      	nop
 8010c46:	370c      	adds	r7, #12
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr

08010c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b098      	sub	sp, #96	@ 0x60
 8010c54:	af02      	add	r7, sp, #8
 8010c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010c60:	f7f1 ffd6 	bl	8002c10 <HAL_GetTick>
 8010c64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f003 0308 	and.w	r3, r3, #8
 8010c70:	2b08      	cmp	r3, #8
 8010c72:	d12f      	bne.n	8010cd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010c74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010c78:	9300      	str	r3, [sp, #0]
 8010c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f000 f88e 	bl	8010da4 <UART_WaitOnFlagUntilTimeout>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d022      	beq.n	8010cd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c96:	e853 3f00 	ldrex	r3, [r3]
 8010c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	461a      	mov	r2, r3
 8010caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8010cae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010cb4:	e841 2300 	strex	r3, r2, [r1]
 8010cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d1e6      	bne.n	8010c8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2220      	movs	r2, #32
 8010cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010cd0:	2303      	movs	r3, #3
 8010cd2:	e063      	b.n	8010d9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f003 0304 	and.w	r3, r3, #4
 8010cde:	2b04      	cmp	r3, #4
 8010ce0:	d149      	bne.n	8010d76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ce2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010cea:	2200      	movs	r2, #0
 8010cec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 f857 	bl	8010da4 <UART_WaitOnFlagUntilTimeout>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d03c      	beq.n	8010d76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d04:	e853 3f00 	ldrex	r3, [r3]
 8010d08:	623b      	str	r3, [r7, #32]
   return(result);
 8010d0a:	6a3b      	ldr	r3, [r7, #32]
 8010d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	461a      	mov	r2, r3
 8010d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d22:	e841 2300 	strex	r3, r2, [r1]
 8010d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d1e6      	bne.n	8010cfc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	3308      	adds	r3, #8
 8010d34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	e853 3f00 	ldrex	r3, [r3]
 8010d3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	f023 0301 	bic.w	r3, r3, #1
 8010d44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	3308      	adds	r3, #8
 8010d4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d4e:	61fa      	str	r2, [r7, #28]
 8010d50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d52:	69b9      	ldr	r1, [r7, #24]
 8010d54:	69fa      	ldr	r2, [r7, #28]
 8010d56:	e841 2300 	strex	r3, r2, [r1]
 8010d5a:	617b      	str	r3, [r7, #20]
   return(result);
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d1e5      	bne.n	8010d2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2220      	movs	r2, #32
 8010d66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010d72:	2303      	movs	r3, #3
 8010d74:	e012      	b.n	8010d9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2220      	movs	r2, #32
 8010d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2220      	movs	r2, #32
 8010d82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2200      	movs	r2, #0
 8010d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010d9a:	2300      	movs	r3, #0
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3758      	adds	r7, #88	@ 0x58
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	603b      	str	r3, [r7, #0]
 8010db0:	4613      	mov	r3, r2
 8010db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010db4:	e04f      	b.n	8010e56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dbc:	d04b      	beq.n	8010e56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010dbe:	f7f1 ff27 	bl	8002c10 <HAL_GetTick>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	1ad3      	subs	r3, r2, r3
 8010dc8:	69ba      	ldr	r2, [r7, #24]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d302      	bcc.n	8010dd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8010dce:	69bb      	ldr	r3, [r7, #24]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d101      	bne.n	8010dd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010dd4:	2303      	movs	r3, #3
 8010dd6:	e04e      	b.n	8010e76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f003 0304 	and.w	r3, r3, #4
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d037      	beq.n	8010e56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	2b80      	cmp	r3, #128	@ 0x80
 8010dea:	d034      	beq.n	8010e56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b40      	cmp	r3, #64	@ 0x40
 8010df0:	d031      	beq.n	8010e56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	69db      	ldr	r3, [r3, #28]
 8010df8:	f003 0308 	and.w	r3, r3, #8
 8010dfc:	2b08      	cmp	r3, #8
 8010dfe:	d110      	bne.n	8010e22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	2208      	movs	r2, #8
 8010e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010e08:	68f8      	ldr	r0, [r7, #12]
 8010e0a:	f000 f838 	bl	8010e7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	2208      	movs	r2, #8
 8010e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010e1e:	2301      	movs	r3, #1
 8010e20:	e029      	b.n	8010e76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	69db      	ldr	r3, [r3, #28]
 8010e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010e30:	d111      	bne.n	8010e56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010e3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010e3c:	68f8      	ldr	r0, [r7, #12]
 8010e3e:	f000 f81e 	bl	8010e7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2220      	movs	r2, #32
 8010e46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010e52:	2303      	movs	r3, #3
 8010e54:	e00f      	b.n	8010e76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	69da      	ldr	r2, [r3, #28]
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	4013      	ands	r3, r2
 8010e60:	68ba      	ldr	r2, [r7, #8]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	bf0c      	ite	eq
 8010e66:	2301      	moveq	r3, #1
 8010e68:	2300      	movne	r3, #0
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	79fb      	ldrb	r3, [r7, #7]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d0a0      	beq.n	8010db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010e74:	2300      	movs	r3, #0
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3710      	adds	r7, #16
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010e7e:	b480      	push	{r7}
 8010e80:	b095      	sub	sp, #84	@ 0x54
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e8e:	e853 3f00 	ldrex	r3, [r3]
 8010e92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ea4:	643b      	str	r3, [r7, #64]	@ 0x40
 8010ea6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010eaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010eac:	e841 2300 	strex	r3, r2, [r1]
 8010eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d1e6      	bne.n	8010e86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	3308      	adds	r3, #8
 8010ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec0:	6a3b      	ldr	r3, [r7, #32]
 8010ec2:	e853 3f00 	ldrex	r3, [r3]
 8010ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010ece:	f023 0301 	bic.w	r3, r3, #1
 8010ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	3308      	adds	r3, #8
 8010eda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010edc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ede:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ee0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ee4:	e841 2300 	strex	r3, r2, [r1]
 8010ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d1e3      	bne.n	8010eb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d118      	bne.n	8010f2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	e853 3f00 	ldrex	r3, [r3]
 8010f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	f023 0310 	bic.w	r3, r3, #16
 8010f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	461a      	mov	r2, r3
 8010f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f16:	61bb      	str	r3, [r7, #24]
 8010f18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f1a:	6979      	ldr	r1, [r7, #20]
 8010f1c:	69ba      	ldr	r2, [r7, #24]
 8010f1e:	e841 2300 	strex	r3, r2, [r1]
 8010f22:	613b      	str	r3, [r7, #16]
   return(result);
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d1e6      	bne.n	8010ef8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2220      	movs	r2, #32
 8010f2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010f3e:	bf00      	nop
 8010f40:	3754      	adds	r7, #84	@ 0x54
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr

08010f4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f4a:	b580      	push	{r7, lr}
 8010f4c:	b084      	sub	sp, #16
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2200      	movs	r2, #0
 8010f64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f68:	68f8      	ldr	r0, [r7, #12]
 8010f6a:	f7ff fc0b 	bl	8010784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f6e:	bf00      	nop
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b088      	sub	sp, #32
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	e853 3f00 	ldrex	r3, [r3]
 8010f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f92:	61fb      	str	r3, [r7, #28]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	461a      	mov	r2, r3
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	61bb      	str	r3, [r7, #24]
 8010f9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fa0:	6979      	ldr	r1, [r7, #20]
 8010fa2:	69ba      	ldr	r2, [r7, #24]
 8010fa4:	e841 2300 	strex	r3, r2, [r1]
 8010fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d1e6      	bne.n	8010f7e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2220      	movs	r2, #32
 8010fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f7ff fbd6 	bl	8010770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fc4:	bf00      	nop
 8010fc6:	3720      	adds	r7, #32
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b083      	sub	sp, #12
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010fd4:	bf00      	nop
 8010fd6:	370c      	adds	r7, #12
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr

08010fe0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010fe8:	bf00      	nop
 8010fea:	370c      	adds	r7, #12
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr

08010ff4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b085      	sub	sp, #20
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011002:	2b01      	cmp	r3, #1
 8011004:	d101      	bne.n	801100a <HAL_UARTEx_DisableFifoMode+0x16>
 8011006:	2302      	movs	r3, #2
 8011008:	e027      	b.n	801105a <HAL_UARTEx_DisableFifoMode+0x66>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2201      	movs	r2, #1
 801100e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2224      	movs	r2, #36	@ 0x24
 8011016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	681a      	ldr	r2, [r3, #0]
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f022 0201 	bic.w	r2, r2, #1
 8011030:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011038:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2200      	movs	r2, #0
 801103e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	68fa      	ldr	r2, [r7, #12]
 8011046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2220      	movs	r2, #32
 801104c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2200      	movs	r2, #0
 8011054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011058:	2300      	movs	r3, #0
}
 801105a:	4618      	mov	r0, r3
 801105c:	3714      	adds	r7, #20
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr

08011066 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011066:	b580      	push	{r7, lr}
 8011068:	b084      	sub	sp, #16
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
 801106e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011076:	2b01      	cmp	r3, #1
 8011078:	d101      	bne.n	801107e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801107a:	2302      	movs	r3, #2
 801107c:	e02d      	b.n	80110da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2201      	movs	r2, #1
 8011082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2224      	movs	r2, #36	@ 0x24
 801108a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f022 0201 	bic.w	r2, r2, #1
 80110a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	683a      	ldr	r2, [r7, #0]
 80110b6:	430a      	orrs	r2, r1
 80110b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f000 f850 	bl	8011160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	68fa      	ldr	r2, [r7, #12]
 80110c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2220      	movs	r2, #32
 80110cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2200      	movs	r2, #0
 80110d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80110d8:	2300      	movs	r3, #0
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3710      	adds	r7, #16
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110e2:	b580      	push	{r7, lr}
 80110e4:	b084      	sub	sp, #16
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
 80110ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d101      	bne.n	80110fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80110f6:	2302      	movs	r3, #2
 80110f8:	e02d      	b.n	8011156 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2201      	movs	r2, #1
 80110fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2224      	movs	r2, #36	@ 0x24
 8011106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	681a      	ldr	r2, [r3, #0]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	f022 0201 	bic.w	r2, r2, #1
 8011120:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	689b      	ldr	r3, [r3, #8]
 8011128:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	683a      	ldr	r2, [r7, #0]
 8011132:	430a      	orrs	r2, r1
 8011134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f000 f812 	bl	8011160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	68fa      	ldr	r2, [r7, #12]
 8011142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2220      	movs	r2, #32
 8011148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2200      	movs	r2, #0
 8011150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011154:	2300      	movs	r3, #0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
	...

08011160 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801116c:	2b00      	cmp	r3, #0
 801116e:	d108      	bne.n	8011182 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2201      	movs	r2, #1
 8011174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2201      	movs	r2, #1
 801117c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011180:	e031      	b.n	80111e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011182:	2308      	movs	r3, #8
 8011184:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011186:	2308      	movs	r3, #8
 8011188:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	689b      	ldr	r3, [r3, #8]
 8011190:	0e5b      	lsrs	r3, r3, #25
 8011192:	b2db      	uxtb	r3, r3
 8011194:	f003 0307 	and.w	r3, r3, #7
 8011198:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	689b      	ldr	r3, [r3, #8]
 80111a0:	0f5b      	lsrs	r3, r3, #29
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	f003 0307 	and.w	r3, r3, #7
 80111a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111aa:	7bbb      	ldrb	r3, [r7, #14]
 80111ac:	7b3a      	ldrb	r2, [r7, #12]
 80111ae:	4911      	ldr	r1, [pc, #68]	@ (80111f4 <UARTEx_SetNbDataToProcess+0x94>)
 80111b0:	5c8a      	ldrb	r2, [r1, r2]
 80111b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111b6:	7b3a      	ldrb	r2, [r7, #12]
 80111b8:	490f      	ldr	r1, [pc, #60]	@ (80111f8 <UARTEx_SetNbDataToProcess+0x98>)
 80111ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80111c0:	b29a      	uxth	r2, r3
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111c8:	7bfb      	ldrb	r3, [r7, #15]
 80111ca:	7b7a      	ldrb	r2, [r7, #13]
 80111cc:	4909      	ldr	r1, [pc, #36]	@ (80111f4 <UARTEx_SetNbDataToProcess+0x94>)
 80111ce:	5c8a      	ldrb	r2, [r1, r2]
 80111d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80111d4:	7b7a      	ldrb	r2, [r7, #13]
 80111d6:	4908      	ldr	r1, [pc, #32]	@ (80111f8 <UARTEx_SetNbDataToProcess+0x98>)
 80111d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111da:	fb93 f3f2 	sdiv	r3, r3, r2
 80111de:	b29a      	uxth	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80111e6:	bf00      	nop
 80111e8:	3714      	adds	r7, #20
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr
 80111f2:	bf00      	nop
 80111f4:	08011c2c 	.word	0x08011c2c
 80111f8:	08011c34 	.word	0x08011c34

080111fc <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af02      	add	r7, sp, #8
 8011202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011204:	2300      	movs	r3, #0
 8011206:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011208:	f7f1 fd02 	bl	8002c10 <HAL_GetTick>
 801120c:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d102      	bne.n	801121a <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011214:	2301      	movs	r3, #1
 8011216:	73fb      	strb	r3, [r7, #15]
 8011218:	e137      	b.n	801148a <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	4a76      	ldr	r2, [pc, #472]	@ (80113f8 <HAL_XSPI_Init+0x1fc>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d008      	beq.n	8011236 <HAL_XSPI_Init+0x3a>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	4a74      	ldr	r2, [pc, #464]	@ (80113fc <HAL_XSPI_Init+0x200>)
 801122a:	4293      	cmp	r3, r2
 801122c:	d003      	beq.n	8011236 <HAL_XSPI_Init+0x3a>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	4a73      	ldr	r2, [pc, #460]	@ (8011400 <HAL_XSPI_Init+0x204>)
 8011234:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4a72      	ldr	r2, [pc, #456]	@ (8011404 <HAL_XSPI_Init+0x208>)
 801123c:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	4a6d      	ldr	r2, [pc, #436]	@ (80113f8 <HAL_XSPI_Init+0x1fc>)
 8011244:	4293      	cmp	r3, r2
 8011246:	d008      	beq.n	801125a <HAL_XSPI_Init+0x5e>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	4a6b      	ldr	r2, [pc, #428]	@ (80113fc <HAL_XSPI_Init+0x200>)
 801124e:	4293      	cmp	r3, r2
 8011250:	d003      	beq.n	801125a <HAL_XSPI_Init+0x5e>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	4a6a      	ldr	r2, [pc, #424]	@ (8011400 <HAL_XSPI_Init+0x204>)
 8011258:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4a66      	ldr	r2, [pc, #408]	@ (80113f8 <HAL_XSPI_Init+0x1fc>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d008      	beq.n	8011276 <HAL_XSPI_Init+0x7a>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4a64      	ldr	r2, [pc, #400]	@ (80113fc <HAL_XSPI_Init+0x200>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d003      	beq.n	8011276 <HAL_XSPI_Init+0x7a>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4a63      	ldr	r2, [pc, #396]	@ (8011400 <HAL_XSPI_Init+0x204>)
 8011274:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2200      	movs	r2, #0
 801127a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011280:	2b00      	cmp	r3, #0
 8011282:	f040 8102 	bne.w	801148a <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f7f0 fcc0 	bl	8001c0c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 801128c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 f8ff 	bl	8011494 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	689a      	ldr	r2, [r3, #8]
 801129c:	4b5a      	ldr	r3, [pc, #360]	@ (8011408 <HAL_XSPI_Init+0x20c>)
 801129e:	4013      	ands	r3, r2
 80112a0:	687a      	ldr	r2, [r7, #4]
 80112a2:	68d1      	ldr	r1, [r2, #12]
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	6912      	ldr	r2, [r2, #16]
 80112a8:	0412      	lsls	r2, r2, #16
 80112aa:	4311      	orrs	r1, r2
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	6952      	ldr	r2, [r2, #20]
 80112b0:	3a01      	subs	r2, #1
 80112b2:	0212      	lsls	r2, r2, #8
 80112b4:	4311      	orrs	r1, r2
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	69d2      	ldr	r2, [r2, #28]
 80112ba:	4311      	orrs	r1, r2
 80112bc:	687a      	ldr	r2, [r7, #4]
 80112be:	6812      	ldr	r2, [r2, #0]
 80112c0:	430b      	orrs	r3, r1
 80112c2:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4a4b      	ldr	r2, [pc, #300]	@ (80113f8 <HAL_XSPI_Init+0x1fc>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d00e      	beq.n	80112ec <HAL_XSPI_Init+0xf0>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	4a4a      	ldr	r2, [pc, #296]	@ (80113fc <HAL_XSPI_Init+0x200>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d009      	beq.n	80112ec <HAL_XSPI_Init+0xf0>
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	4a48      	ldr	r2, [pc, #288]	@ (8011400 <HAL_XSPI_Init+0x204>)
 80112de:	4293      	cmp	r3, r2
 80112e0:	d004      	beq.n	80112ec <HAL_XSPI_Init+0xf0>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4a49      	ldr	r2, [pc, #292]	@ (801140c <HAL_XSPI_Init+0x210>)
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d10a      	bne.n	8011302 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	689b      	ldr	r3, [r3, #8]
 80112f2:	f023 0108 	bic.w	r1, r3, #8
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	430a      	orrs	r2, r1
 8011300:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6a1a      	ldr	r2, [r3, #32]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	430a      	orrs	r2, r1
 8011316:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	691b      	ldr	r3, [r3, #16]
 801131e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011326:	041a      	lsls	r2, r3, #16
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	430a      	orrs	r2, r1
 801132e:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4a30      	ldr	r2, [pc, #192]	@ (80113f8 <HAL_XSPI_Init+0x1fc>)
 8011336:	4293      	cmp	r3, r2
 8011338:	d00e      	beq.n	8011358 <HAL_XSPI_Init+0x15c>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4a2f      	ldr	r2, [pc, #188]	@ (80113fc <HAL_XSPI_Init+0x200>)
 8011340:	4293      	cmp	r3, r2
 8011342:	d009      	beq.n	8011358 <HAL_XSPI_Init+0x15c>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4a2d      	ldr	r2, [pc, #180]	@ (8011400 <HAL_XSPI_Init+0x204>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d004      	beq.n	8011358 <HAL_XSPI_Init+0x15c>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	4a2e      	ldr	r2, [pc, #184]	@ (801140c <HAL_XSPI_Init+0x210>)
 8011354:	4293      	cmp	r3, r2
 8011356:	d10a      	bne.n	801136e <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	691b      	ldr	r3, [r3, #16]
 801135e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	430a      	orrs	r2, r1
 801136c:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	687a      	ldr	r2, [r7, #4]
 8011374:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011376:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	3b01      	subs	r3, #1
 8011388:	021a      	lsls	r2, r3, #8
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	430a      	orrs	r2, r1
 8011390:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011396:	9300      	str	r3, [sp, #0]
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	2200      	movs	r2, #0
 801139c:	2120      	movs	r1, #32
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f000 f887 	bl	80114b2 <XSPI_WaitFlagStateUntilTimeout>
 80113a4:	4603      	mov	r3, r0
 80113a6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80113a8:	7bfb      	ldrb	r3, [r7, #15]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d16d      	bne.n	801148a <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	430a      	orrs	r2, r1
 80113c2:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	4a0e      	ldr	r2, [pc, #56]	@ (8011404 <HAL_XSPI_Init+0x208>)
 80113ca:	4293      	cmp	r3, r2
 80113cc:	d004      	beq.n	80113d8 <HAL_XSPI_Init+0x1dc>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	4a0f      	ldr	r2, [pc, #60]	@ (8011410 <HAL_XSPI_Init+0x214>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d11d      	bne.n	8011414 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80113dc:	9300      	str	r3, [sp, #0]
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2200      	movs	r2, #0
 80113e2:	2120      	movs	r1, #32
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 f864 	bl	80114b2 <XSPI_WaitFlagStateUntilTimeout>
 80113ea:	4603      	mov	r3, r0
 80113ec:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80113ee:	7bfb      	ldrb	r3, [r7, #15]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d00f      	beq.n	8011414 <HAL_XSPI_Init+0x218>
          {
            return status;
 80113f4:	7bfb      	ldrb	r3, [r7, #15]
 80113f6:	e049      	b.n	801148c <HAL_XSPI_Init+0x290>
 80113f8:	420d1400 	.word	0x420d1400
 80113fc:	520d1400 	.word	0x520d1400
 8011400:	420d2400 	.word	0x420d2400
 8011404:	420d3400 	.word	0x420d3400
 8011408:	f8e0c0fc 	.word	0xf8e0c0fc
 801140c:	520d2400 	.word	0x520d2400
 8011410:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	689a      	ldr	r2, [r3, #8]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	430a      	orrs	r2, r1
 8011428:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8011432:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801143e:	431a      	orrs	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	430a      	orrs	r2, r1
 8011446:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f042 0201 	orr.w	r2, r2, #1
 8011458:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	699b      	ldr	r3, [r3, #24]
 801145e:	2b02      	cmp	r3, #2
 8011460:	d107      	bne.n	8011472 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	689a      	ldr	r2, [r3, #8]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f042 0202 	orr.w	r2, r2, #2
 8011470:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	68db      	ldr	r3, [r3, #12]
 8011476:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801147a:	d103      	bne.n	8011484 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2201      	movs	r2, #1
 8011480:	655a      	str	r2, [r3, #84]	@ 0x54
 8011482:	e002      	b.n	801148a <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2202      	movs	r2, #2
 8011488:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 801148a:	7bfb      	ldrb	r3, [r7, #15]
}
 801148c:	4618      	mov	r0, r3
 801148e:	3710      	adds	r7, #16
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	683a      	ldr	r2, [r7, #0]
 80114a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 80114a4:	2300      	movs	r3, #0
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	370c      	adds	r7, #12
 80114aa:	46bd      	mov	sp, r7
 80114ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b0:	4770      	bx	lr

080114b2 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80114b2:	b580      	push	{r7, lr}
 80114b4:	b084      	sub	sp, #16
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	60f8      	str	r0, [r7, #12]
 80114ba:	60b9      	str	r1, [r7, #8]
 80114bc:	603b      	str	r3, [r7, #0]
 80114be:	4613      	mov	r3, r2
 80114c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80114c2:	e01a      	b.n	80114fa <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114c4:	69bb      	ldr	r3, [r7, #24]
 80114c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ca:	d016      	beq.n	80114fa <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114cc:	f7f1 fba0 	bl	8002c10 <HAL_GetTick>
 80114d0:	4602      	mov	r2, r0
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	1ad3      	subs	r3, r2, r3
 80114d6:	69ba      	ldr	r2, [r7, #24]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d302      	bcc.n	80114e2 <XSPI_WaitFlagStateUntilTimeout+0x30>
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d10b      	bne.n	80114fa <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80114e8:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114ee:	f043 0201 	orr.w	r2, r3, #1
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80114f6:	2303      	movs	r3, #3
 80114f8:	e00e      	b.n	8011518 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	6a1a      	ldr	r2, [r3, #32]
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	4013      	ands	r3, r2
 8011504:	2b00      	cmp	r3, #0
 8011506:	bf14      	ite	ne
 8011508:	2301      	movne	r3, #1
 801150a:	2300      	moveq	r3, #0
 801150c:	b2db      	uxtb	r3, r3
 801150e:	461a      	mov	r2, r3
 8011510:	79fb      	ldrb	r3, [r7, #7]
 8011512:	429a      	cmp	r2, r3
 8011514:	d1d6      	bne.n	80114c4 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011516:	2300      	movs	r3, #0
}
 8011518:	4618      	mov	r0, r3
 801151a:	3710      	adds	r7, #16
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011520:	b084      	sub	sp, #16
 8011522:	b580      	push	{r7, lr}
 8011524:	b084      	sub	sp, #16
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
 801152a:	f107 001c 	add.w	r0, r7, #28
 801152e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8011532:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011536:	2b03      	cmp	r3, #3
 8011538:	d105      	bne.n	8011546 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f000 fa8e 	bl	8011a68 <USB_CoreReset>
 801154c:	4603      	mov	r3, r0
 801154e:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8011550:	7fbb      	ldrb	r3, [r7, #30]
 8011552:	2b01      	cmp	r3, #1
 8011554:	d10b      	bne.n	801156e <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	689b      	ldr	r3, [r3, #8]
 801155a:	f043 0208 	orr.w	r2, r3, #8
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	f043 0220 	orr.w	r2, r3, #32
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 801156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011570:	4618      	mov	r0, r3
 8011572:	3710      	adds	r7, #16
 8011574:	46bd      	mov	sp, r7
 8011576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801157a:	b004      	add	sp, #16
 801157c:	4770      	bx	lr

0801157e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801157e:	b480      	push	{r7}
 8011580:	b083      	sub	sp, #12
 8011582:	af00      	add	r7, sp, #0
 8011584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	689b      	ldr	r3, [r3, #8]
 801158a:	f023 0201 	bic.w	r2, r3, #1
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011592:	2300      	movs	r3, #0
}
 8011594:	4618      	mov	r0, r3
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b084      	sub	sp, #16
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	460b      	mov	r3, r1
 80115aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80115ac:	2300      	movs	r3, #0
 80115ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80115bc:	78fb      	ldrb	r3, [r7, #3]
 80115be:	2b01      	cmp	r3, #1
 80115c0:	d115      	bne.n	80115ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	68db      	ldr	r3, [r3, #12]
 80115c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80115ce:	200a      	movs	r0, #10
 80115d0:	f7f1 fb2a 	bl	8002c28 <HAL_Delay>
      ms += 10U;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	330a      	adds	r3, #10
 80115d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f000 fa36 	bl	8011a4c <USB_GetMode>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2b01      	cmp	r3, #1
 80115e4:	d01e      	beq.n	8011624 <USB_SetCurrentMode+0x84>
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80115ea:	d9f0      	bls.n	80115ce <USB_SetCurrentMode+0x2e>
 80115ec:	e01a      	b.n	8011624 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80115ee:	78fb      	ldrb	r3, [r7, #3]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d115      	bne.n	8011620 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011600:	200a      	movs	r0, #10
 8011602:	f7f1 fb11 	bl	8002c28 <HAL_Delay>
      ms += 10U;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	330a      	adds	r3, #10
 801160a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f000 fa1d 	bl	8011a4c <USB_GetMode>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d005      	beq.n	8011624 <USB_SetCurrentMode+0x84>
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2bc7      	cmp	r3, #199	@ 0xc7
 801161c:	d9f0      	bls.n	8011600 <USB_SetCurrentMode+0x60>
 801161e:	e001      	b.n	8011624 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011620:	2301      	movs	r3, #1
 8011622:	e005      	b.n	8011630 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2bc8      	cmp	r3, #200	@ 0xc8
 8011628:	d101      	bne.n	801162e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801162a:	2301      	movs	r3, #1
 801162c:	e000      	b.n	8011630 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801162e:	2300      	movs	r3, #0
}
 8011630:	4618      	mov	r0, r3
 8011632:	3710      	adds	r7, #16
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011638:	b084      	sub	sp, #16
 801163a:	b580      	push	{r7, lr}
 801163c:	b086      	sub	sp, #24
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
 8011642:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801164a:	2300      	movs	r3, #0
 801164c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011652:	2300      	movs	r3, #0
 8011654:	613b      	str	r3, [r7, #16]
 8011656:	e009      	b.n	801166c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011658:	687a      	ldr	r2, [r7, #4]
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	3340      	adds	r3, #64	@ 0x40
 801165e:	009b      	lsls	r3, r3, #2
 8011660:	4413      	add	r3, r2
 8011662:	2200      	movs	r2, #0
 8011664:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	3301      	adds	r3, #1
 801166a:	613b      	str	r3, [r7, #16]
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	2b0e      	cmp	r3, #14
 8011670:	d9f2      	bls.n	8011658 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011676:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801167e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011682:	2b00      	cmp	r3, #0
 8011684:	d11c      	bne.n	80116c0 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	68fa      	ldr	r2, [r7, #12]
 8011690:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011694:	f043 0302 	orr.w	r3, r3, #2
 8011698:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801169e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116aa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80116be:	e011      	b.n	80116e4 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116d0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80116ea:	461a      	mov	r2, r3
 80116ec:	2300      	movs	r3, #0
 80116ee:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80116f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80116f4:	2b03      	cmp	r3, #3
 80116f6:	d10d      	bne.n	8011714 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80116f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d104      	bne.n	801170a <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011700:	2100      	movs	r1, #0
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f000 f968 	bl	80119d8 <USB_SetDevSpeed>
 8011708:	e008      	b.n	801171c <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801170a:	2101      	movs	r1, #1
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f000 f963 	bl	80119d8 <USB_SetDevSpeed>
 8011712:	e003      	b.n	801171c <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011714:	2103      	movs	r1, #3
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f000 f95e 	bl	80119d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801171c:	2110      	movs	r1, #16
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f000 f8fa 	bl	8011918 <USB_FlushTxFifo>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d001      	beq.n	801172e <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 801172a:	2301      	movs	r3, #1
 801172c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 f924 	bl	801197c <USB_FlushRxFifo>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 801173a:	2301      	movs	r3, #1
 801173c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011744:	461a      	mov	r2, r3
 8011746:	2300      	movs	r3, #0
 8011748:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011750:	461a      	mov	r2, r3
 8011752:	2300      	movs	r3, #0
 8011754:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801175c:	461a      	mov	r2, r3
 801175e:	2300      	movs	r3, #0
 8011760:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011762:	2300      	movs	r3, #0
 8011764:	613b      	str	r3, [r7, #16]
 8011766:	e043      	b.n	80117f0 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	015a      	lsls	r2, r3, #5
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	4413      	add	r3, r2
 8011770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801177a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801177e:	d118      	bne.n	80117b2 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d10a      	bne.n	801179c <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	015a      	lsls	r2, r3, #5
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	4413      	add	r3, r2
 801178e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011792:	461a      	mov	r2, r3
 8011794:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011798:	6013      	str	r3, [r2, #0]
 801179a:	e013      	b.n	80117c4 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	015a      	lsls	r2, r3, #5
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	4413      	add	r3, r2
 80117a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117a8:	461a      	mov	r2, r3
 80117aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80117ae:	6013      	str	r3, [r2, #0]
 80117b0:	e008      	b.n	80117c4 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	015a      	lsls	r2, r3, #5
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	4413      	add	r3, r2
 80117ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117be:	461a      	mov	r2, r3
 80117c0:	2300      	movs	r3, #0
 80117c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	015a      	lsls	r2, r3, #5
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	4413      	add	r3, r2
 80117cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117d0:	461a      	mov	r2, r3
 80117d2:	2300      	movs	r3, #0
 80117d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	015a      	lsls	r2, r3, #5
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	4413      	add	r3, r2
 80117de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117e2:	461a      	mov	r2, r3
 80117e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80117e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	3301      	adds	r3, #1
 80117ee:	613b      	str	r3, [r7, #16]
 80117f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80117f4:	461a      	mov	r2, r3
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d3b5      	bcc.n	8011768 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80117fc:	2300      	movs	r3, #0
 80117fe:	613b      	str	r3, [r7, #16]
 8011800:	e043      	b.n	801188a <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	015a      	lsls	r2, r3, #5
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	4413      	add	r3, r2
 801180a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011818:	d118      	bne.n	801184c <USB_DevInit+0x214>
    {
      if (i == 0U)
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d10a      	bne.n	8011836 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	015a      	lsls	r2, r3, #5
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	4413      	add	r3, r2
 8011828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801182c:	461a      	mov	r2, r3
 801182e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011832:	6013      	str	r3, [r2, #0]
 8011834:	e013      	b.n	801185e <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	015a      	lsls	r2, r3, #5
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	4413      	add	r3, r2
 801183e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011842:	461a      	mov	r2, r3
 8011844:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011848:	6013      	str	r3, [r2, #0]
 801184a:	e008      	b.n	801185e <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	015a      	lsls	r2, r3, #5
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	4413      	add	r3, r2
 8011854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011858:	461a      	mov	r2, r3
 801185a:	2300      	movs	r3, #0
 801185c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	015a      	lsls	r2, r3, #5
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	4413      	add	r3, r2
 8011866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801186a:	461a      	mov	r2, r3
 801186c:	2300      	movs	r3, #0
 801186e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	015a      	lsls	r2, r3, #5
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	4413      	add	r3, r2
 8011878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801187c:	461a      	mov	r2, r3
 801187e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011882:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	3301      	adds	r3, #1
 8011888:	613b      	str	r3, [r7, #16]
 801188a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801188e:	461a      	mov	r2, r3
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	4293      	cmp	r3, r2
 8011894:	d3b5      	bcc.n	8011802 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801189c:	691b      	ldr	r3, [r3, #16]
 801189e:	68fa      	ldr	r2, [r7, #12]
 80118a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80118a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80118a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2200      	movs	r2, #0
 80118ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80118b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80118b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d105      	bne.n	80118cc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	699b      	ldr	r3, [r3, #24]
 80118c4:	f043 0210 	orr.w	r2, r3, #16
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	699a      	ldr	r2, [r3, #24]
 80118d0:	4b10      	ldr	r3, [pc, #64]	@ (8011914 <USB_DevInit+0x2dc>)
 80118d2:	4313      	orrs	r3, r2
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80118d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d005      	beq.n	80118ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	699b      	ldr	r3, [r3, #24]
 80118e4:	f043 0208 	orr.w	r2, r3, #8
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80118ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d107      	bne.n	8011904 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	699b      	ldr	r3, [r3, #24]
 80118f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80118fc:	f043 0304 	orr.w	r3, r3, #4
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011904:	7dfb      	ldrb	r3, [r7, #23]
}
 8011906:	4618      	mov	r0, r3
 8011908:	3718      	adds	r7, #24
 801190a:	46bd      	mov	sp, r7
 801190c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011910:	b004      	add	sp, #16
 8011912:	4770      	bx	lr
 8011914:	803c3800 	.word	0x803c3800

08011918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011918:	b480      	push	{r7}
 801191a:	b085      	sub	sp, #20
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011922:	2300      	movs	r3, #0
 8011924:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	3301      	adds	r3, #1
 801192a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011932:	d901      	bls.n	8011938 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011934:	2303      	movs	r3, #3
 8011936:	e01b      	b.n	8011970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	691b      	ldr	r3, [r3, #16]
 801193c:	2b00      	cmp	r3, #0
 801193e:	daf2      	bge.n	8011926 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011940:	2300      	movs	r3, #0
 8011942:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	019b      	lsls	r3, r3, #6
 8011948:	f043 0220 	orr.w	r2, r3, #32
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	3301      	adds	r3, #1
 8011954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801195c:	d901      	bls.n	8011962 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801195e:	2303      	movs	r3, #3
 8011960:	e006      	b.n	8011970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	691b      	ldr	r3, [r3, #16]
 8011966:	f003 0320 	and.w	r3, r3, #32
 801196a:	2b20      	cmp	r3, #32
 801196c:	d0f0      	beq.n	8011950 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801196e:	2300      	movs	r3, #0
}
 8011970:	4618      	mov	r0, r3
 8011972:	3714      	adds	r7, #20
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801197c:	b480      	push	{r7}
 801197e:	b085      	sub	sp, #20
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011984:	2300      	movs	r3, #0
 8011986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	3301      	adds	r3, #1
 801198c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011994:	d901      	bls.n	801199a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011996:	2303      	movs	r3, #3
 8011998:	e018      	b.n	80119cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	691b      	ldr	r3, [r3, #16]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	daf2      	bge.n	8011988 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80119a2:	2300      	movs	r3, #0
 80119a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2210      	movs	r2, #16
 80119aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	3301      	adds	r3, #1
 80119b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80119b8:	d901      	bls.n	80119be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80119ba:	2303      	movs	r3, #3
 80119bc:	e006      	b.n	80119cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	691b      	ldr	r3, [r3, #16]
 80119c2:	f003 0310 	and.w	r3, r3, #16
 80119c6:	2b10      	cmp	r3, #16
 80119c8:	d0f0      	beq.n	80119ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80119ca:	2300      	movs	r3, #0
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3714      	adds	r7, #20
 80119d0:	46bd      	mov	sp, r7
 80119d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d6:	4770      	bx	lr

080119d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80119d8:	b480      	push	{r7}
 80119da:	b085      	sub	sp, #20
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	460b      	mov	r3, r1
 80119e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80119ee:	681a      	ldr	r2, [r3, #0]
 80119f0:	78fb      	ldrb	r3, [r7, #3]
 80119f2:	68f9      	ldr	r1, [r7, #12]
 80119f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80119f8:	4313      	orrs	r3, r2
 80119fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3714      	adds	r7, #20
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr

08011a0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011a0a:	b480      	push	{r7}
 8011a0c:	b085      	sub	sp, #20
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	68fa      	ldr	r2, [r7, #12]
 8011a20:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011a24:	f023 0303 	bic.w	r3, r3, #3
 8011a28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	68fa      	ldr	r2, [r7, #12]
 8011a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011a38:	f043 0302 	orr.w	r3, r3, #2
 8011a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011a3e:	2300      	movs	r3, #0
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3714      	adds	r7, #20
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	695b      	ldr	r3, [r3, #20]
 8011a58:	f003 0301 	and.w	r3, r3, #1
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	370c      	adds	r7, #12
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr

08011a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b085      	sub	sp, #20
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a70:	2300      	movs	r3, #0
 8011a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	3301      	adds	r3, #1
 8011a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a80:	d901      	bls.n	8011a86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011a82:	2303      	movs	r3, #3
 8011a84:	e01b      	b.n	8011abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	691b      	ldr	r3, [r3, #16]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	daf2      	bge.n	8011a74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	691b      	ldr	r3, [r3, #16]
 8011a96:	f043 0201 	orr.w	r2, r3, #1
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011aaa:	d901      	bls.n	8011ab0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011aac:	2303      	movs	r3, #3
 8011aae:	e006      	b.n	8011abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	691b      	ldr	r3, [r3, #16]
 8011ab4:	f003 0301 	and.w	r3, r3, #1
 8011ab8:	2b01      	cmp	r3, #1
 8011aba:	d0f0      	beq.n	8011a9e <USB_CoreReset+0x36>

  return HAL_OK;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3714      	adds	r7, #20
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <memset>:
 8011aca:	4402      	add	r2, r0
 8011acc:	4603      	mov	r3, r0
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d100      	bne.n	8011ad4 <memset+0xa>
 8011ad2:	4770      	bx	lr
 8011ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8011ad8:	e7f9      	b.n	8011ace <memset+0x4>
	...

08011adc <__libc_init_array>:
 8011adc:	b570      	push	{r4, r5, r6, lr}
 8011ade:	4d0d      	ldr	r5, [pc, #52]	@ (8011b14 <__libc_init_array+0x38>)
 8011ae0:	2600      	movs	r6, #0
 8011ae2:	4c0d      	ldr	r4, [pc, #52]	@ (8011b18 <__libc_init_array+0x3c>)
 8011ae4:	1b64      	subs	r4, r4, r5
 8011ae6:	10a4      	asrs	r4, r4, #2
 8011ae8:	42a6      	cmp	r6, r4
 8011aea:	d109      	bne.n	8011b00 <__libc_init_array+0x24>
 8011aec:	4d0b      	ldr	r5, [pc, #44]	@ (8011b1c <__libc_init_array+0x40>)
 8011aee:	2600      	movs	r6, #0
 8011af0:	4c0b      	ldr	r4, [pc, #44]	@ (8011b20 <__libc_init_array+0x44>)
 8011af2:	f000 f817 	bl	8011b24 <_init>
 8011af6:	1b64      	subs	r4, r4, r5
 8011af8:	10a4      	asrs	r4, r4, #2
 8011afa:	42a6      	cmp	r6, r4
 8011afc:	d105      	bne.n	8011b0a <__libc_init_array+0x2e>
 8011afe:	bd70      	pop	{r4, r5, r6, pc}
 8011b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b04:	3601      	adds	r6, #1
 8011b06:	4798      	blx	r3
 8011b08:	e7ee      	b.n	8011ae8 <__libc_init_array+0xc>
 8011b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b0e:	3601      	adds	r6, #1
 8011b10:	4798      	blx	r3
 8011b12:	e7f2      	b.n	8011afa <__libc_init_array+0x1e>
 8011b14:	08011c44 	.word	0x08011c44
 8011b18:	08011c44 	.word	0x08011c44
 8011b1c:	08011c44 	.word	0x08011c44
 8011b20:	08011c48 	.word	0x08011c48

08011b24 <_init>:
 8011b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b26:	bf00      	nop
 8011b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b2a:	bc08      	pop	{r3}
 8011b2c:	469e      	mov	lr, r3
 8011b2e:	4770      	bx	lr

08011b30 <_fini>:
 8011b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b32:	bf00      	nop
 8011b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b36:	bc08      	pop	{r3}
 8011b38:	469e      	mov	lr, r3
 8011b3a:	4770      	bx	lr
