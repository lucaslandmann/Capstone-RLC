
RLCMixer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012590  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08012804  08012804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012904  08012904  00014034  2**0
                  CONTENTS
  4 .ARM          00000008  08012904  08012904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801290c  0801290c  00014034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801290c  0801290c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012910  08012910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08012914  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00033c34  20000034  08012948  00014034  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20033c68  08012948  00014c68  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032037  00000000  00000000  0001406a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004da1  00000000  00000000  000460a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad0  00000000  00000000  0004ae48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002196  00000000  00000000  0004d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047332  00000000  00000000  0004faae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035e98  00000000  00000000  00096de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bcb33  00000000  00000000  000ccc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002897ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be5c  00000000  00000000  002897f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0029564c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000034 	.word	0x20000034
 8000290:	00000000 	.word	0x00000000
 8000294:	080127ec 	.word	0x080127ec

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000038 	.word	0x20000038
 80002b0:	080127ec 	.word	0x080127ec

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Do_Comb0>:

struct delayInit delayChannel[6] = {0};


float Do_Comb0(float inSample, int channelNum)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005d6:	6038      	str	r0, [r7, #0]
	delayChannel[2].cf_g = 0.8;
 80005d8:	4b46      	ldr	r3, [pc, #280]	@ (80006f4 <Do_Comb0+0x128>)
 80005da:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80005de:	f603 53e8 	addw	r3, r3, #3560	@ 0xde8
 80005e2:	4a45      	ldr	r2, [pc, #276]	@ (80006f8 <Do_Comb0+0x12c>)
 80005e4:	601a      	str	r2, [r3, #0]

	float readback = delayChannel[channelNum].cfbuf[delayChannel[channelNum].cf_p];
 80005e6:	4a43      	ldr	r2, [pc, #268]	@ (80006f4 <Do_Comb0+0x128>)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80005ee:	fb01 f303 	mul.w	r3, r1, r3
 80005f2:	4413      	add	r3, r2
 80005f4:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80005f8:	3320      	adds	r3, #32
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	493d      	ldr	r1, [pc, #244]	@ (80006f4 <Do_Comb0+0x128>)
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 8000604:	fb00 f202 	mul.w	r2, r0, r2
 8000608:	4413      	add	r3, r2
 800060a:	3302      	adds	r3, #2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	60fb      	str	r3, [r7, #12]
	float new = readback*(delayChannel[channelNum].cf_g) + inSample;
 8000614:	4a37      	ldr	r2, [pc, #220]	@ (80006f4 <Do_Comb0+0x128>)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 800061c:	fb01 f303 	mul.w	r3, r1, r3
 8000620:	4413      	add	r3, r2
 8000622:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000626:	3318      	adds	r3, #24
 8000628:	ed93 7a00 	vldr	s14, [r3]
 800062c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000634:	ed97 7a01 	vldr	s14, [r7, #4]
 8000638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800063c:	edc7 7a02 	vstr	s15, [r7, #8]
	delayChannel[channelNum].cfbuf[delayChannel[channelNum].cf_p] = new;
 8000640:	4a2c      	ldr	r2, [pc, #176]	@ (80006f4 <Do_Comb0+0x128>)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000648:	fb01 f303 	mul.w	r3, r1, r3
 800064c:	4413      	add	r3, r2
 800064e:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000652:	3320      	adds	r3, #32
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4927      	ldr	r1, [pc, #156]	@ (80006f4 <Do_Comb0+0x128>)
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 800065e:	fb00 f202 	mul.w	r2, r0, r2
 8000662:	4413      	add	r3, r2
 8000664:	3302      	adds	r3, #2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	601a      	str	r2, [r3, #0]
	delayChannel[channelNum].cf_p++;
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <Do_Comb0+0x128>)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	4413      	add	r3, r2
 800067c:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000680:	3320      	adds	r3, #32
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	491b      	ldr	r1, [pc, #108]	@ (80006f4 <Do_Comb0+0x128>)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 800068e:	fb00 f303 	mul.w	r3, r0, r3
 8000692:	440b      	add	r3, r1
 8000694:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000698:	3320      	adds	r3, #32
 800069a:	601a      	str	r2, [r3, #0]
	if (delayChannel[channelNum].cf_p==delayChannel[channelNum].cf_lim)
 800069c:	4a15      	ldr	r2, [pc, #84]	@ (80006f4 <Do_Comb0+0x128>)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80006a4:	fb01 f303 	mul.w	r3, r1, r3
 80006a8:	4413      	add	r3, r2
 80006aa:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80006ae:	3320      	adds	r3, #32
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4910      	ldr	r1, [pc, #64]	@ (80006f4 <Do_Comb0+0x128>)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 80006ba:	fb00 f303 	mul.w	r3, r0, r3
 80006be:	440b      	add	r3, r1
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d10b      	bne.n	80006de <Do_Comb0+0x112>
	{
		delayChannel[channelNum].cf_p = 0;
 80006c6:	4a0b      	ldr	r2, [pc, #44]	@ (80006f4 <Do_Comb0+0x128>)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80006ce:	fb01 f303 	mul.w	r3, r1, r3
 80006d2:	4413      	add	r3, r2
 80006d4:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80006d8:	3320      	adds	r3, #32
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
	}
	return readback;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	ee07 3a90 	vmov	s15, r3

}
 80006e4:	eeb0 0a67 	vmov.f32	s0, s15
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000d84 	.word	0x20000d84
 80006f8:	3f4ccccd 	.word	0x3f4ccccd

080006fc <Do_Allpass0>:
float Do_Allpass0(float inSample, int channelNum)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	ed87 0a01 	vstr	s0, [r7, #4]
 8000706:	6038      	str	r0, [r7, #0]
	delayChannel[2].ap_g = 0.7;
 8000708:	4b4e      	ldr	r3, [pc, #312]	@ (8000844 <Do_Allpass0+0x148>)
 800070a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800070e:	f603 53ec 	addw	r3, r3, #3564	@ 0xdec
 8000712:	4a4d      	ldr	r2, [pc, #308]	@ (8000848 <Do_Allpass0+0x14c>)
 8000714:	601a      	str	r2, [r3, #0]

	float readback = delayChannel[channelNum].apbuf[delayChannel[channelNum].ap_p];
 8000716:	4a4b      	ldr	r2, [pc, #300]	@ (8000844 <Do_Allpass0+0x148>)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 800071e:	fb01 f303 	mul.w	r3, r1, r3
 8000722:	4413      	add	r3, r2
 8000724:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000728:	3324      	adds	r3, #36	@ 0x24
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4945      	ldr	r1, [pc, #276]	@ (8000844 <Do_Allpass0+0x148>)
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 8000734:	fb00 f202 	mul.w	r2, r0, r2
 8000738:	4413      	add	r3, r2
 800073a:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 800073e:	3306      	adds	r3, #6
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	440b      	add	r3, r1
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	60fb      	str	r3, [r7, #12]
	readback += (-delayChannel[channelNum].ap_g) * inSample;
 8000748:	4a3e      	ldr	r2, [pc, #248]	@ (8000844 <Do_Allpass0+0x148>)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000750:	fb01 f303 	mul.w	r3, r1, r3
 8000754:	4413      	add	r3, r2
 8000756:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800075a:	331c      	adds	r3, #28
 800075c:	edd3 7a00 	vldr	s15, [r3]
 8000760:	eeb1 7a67 	vneg.f32	s14, s15
 8000764:	edd7 7a01 	vldr	s15, [r7, #4]
 8000768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000774:	edc7 7a03 	vstr	s15, [r7, #12]
	float new = readback*delayChannel[0].ap_g + inSample;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <Do_Allpass0+0x148>)
 800077a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800077e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8000782:	ed93 7a00 	vldr	s14, [r3]
 8000786:	edd7 7a03 	vldr	s15, [r7, #12]
 800078a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800078e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000796:	edc7 7a02 	vstr	s15, [r7, #8]
	delayChannel[channelNum].apbuf[delayChannel[channelNum].ap_p] = new;
 800079a:	4a2a      	ldr	r2, [pc, #168]	@ (8000844 <Do_Allpass0+0x148>)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80007a2:	fb01 f303 	mul.w	r3, r1, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007ac:	3324      	adds	r3, #36	@ 0x24
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4924      	ldr	r1, [pc, #144]	@ (8000844 <Do_Allpass0+0x148>)
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 80007b8:	fb00 f202 	mul.w	r2, r0, r2
 80007bc:	4413      	add	r3, r2
 80007be:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 80007c2:	3306      	adds	r3, #6
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	601a      	str	r2, [r3, #0]
	delayChannel[channelNum].ap_p++;
 80007cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000844 <Do_Allpass0+0x148>)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80007d4:	fb01 f303 	mul.w	r3, r1, r3
 80007d8:	4413      	add	r3, r2
 80007da:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007de:	3324      	adds	r3, #36	@ 0x24
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	4917      	ldr	r1, [pc, #92]	@ (8000844 <Do_Allpass0+0x148>)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 80007ec:	fb00 f303 	mul.w	r3, r0, r3
 80007f0:	440b      	add	r3, r1
 80007f2:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007f6:	3324      	adds	r3, #36	@ 0x24
 80007f8:	601a      	str	r2, [r3, #0]
	if (delayChannel[channelNum].ap_p == delayChannel[0].ap_lim)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <Do_Allpass0+0x148>)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000802:	fb01 f303 	mul.w	r3, r1, r3
 8000806:	4413      	add	r3, r2
 8000808:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800080c:	3324      	adds	r3, #36	@ 0x24
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <Do_Allpass0+0x148>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	d10b      	bne.n	8000830 <Do_Allpass0+0x134>
	{
		delayChannel[channelNum].ap_p = 0;
 8000818:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <Do_Allpass0+0x148>)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	4413      	add	r3, r2
 8000826:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800082a:	3324      	adds	r3, #36	@ 0x24
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
	}
	return readback;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	ee07 3a90 	vmov	s15, r3

}
 8000836:	eeb0 0a67 	vmov.f32	s0, s15
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000d84 	.word	0x20000d84
 8000848:	3f333333 	.word	0x3f333333

0800084c <Do_Delay>:
float Do_Delay(float inSample, int channelNum) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	ed87 0a01 	vstr	s0, [r7, #4]
 8000856:	6038      	str	r0, [r7, #0]
	float newsample = (Do_Comb0(inSample, channelNum));
 8000858:	6838      	ldr	r0, [r7, #0]
 800085a:	ed97 0a01 	vldr	s0, [r7, #4]
 800085e:	f7ff feb5 	bl	80005cc <Do_Comb0>
 8000862:	ed87 0a03 	vstr	s0, [r7, #12]
	newsample = Do_Allpass0(newsample, channelNum);
 8000866:	6838      	ldr	r0, [r7, #0]
 8000868:	ed97 0a03 	vldr	s0, [r7, #12]
 800086c:	f7ff ff46 	bl	80006fc <Do_Allpass0>
 8000870:	ed87 0a03 	vstr	s0, [r7, #12]
	return newsample;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	ee07 3a90 	vmov	s15, r3
}
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	ed2d 8b02 	vpush	{d8}
 800088a:	b08a      	sub	sp, #40	@ 0x28
 800088c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

  //code credits start 'yetanotherelectronicschannel'
  delayChannel[0].cf_lim = (int)(time*CB);
 800088e:	4bb5      	ldr	r3, [pc, #724]	@ (8000b64 <main+0x2e0>)
 8000890:	edd3 7a00 	vldr	s15, [r3]
 8000894:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000b68 <main+0x2e4>
 8000898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800089c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008a4:	ee17 2a90 	vmov	r2, s15
 80008a8:	4bb0      	ldr	r3, [pc, #704]	@ (8000b6c <main+0x2e8>)
 80008aa:	601a      	str	r2, [r3, #0]
  delayChannel[0].ap_lim = (int)(time*AP);
 80008ac:	4bad      	ldr	r3, [pc, #692]	@ (8000b64 <main+0x2e0>)
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8000b70 <main+0x2ec>
 80008b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c2:	ee17 2a90 	vmov	r2, s15
 80008c6:	4ba9      	ldr	r3, [pc, #676]	@ (8000b6c <main+0x2e8>)
 80008c8:	605a      	str	r2, [r3, #4]

  delayChannel[1].cf_lim = (int)(time*CB);
 80008ca:	4ba6      	ldr	r3, [pc, #664]	@ (8000b64 <main+0x2e0>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8000b68 <main+0x2e4>
 80008d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e0:	ee17 2a90 	vmov	r2, s15
 80008e4:	4ba1      	ldr	r3, [pc, #644]	@ (8000b6c <main+0x2e8>)
 80008e6:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80008ea:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
  delayChannel[1].ap_lim = (int)(time*AP);
 80008ee:	4b9d      	ldr	r3, [pc, #628]	@ (8000b64 <main+0x2e0>)
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8000b70 <main+0x2ec>
 80008f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000904:	ee17 2a90 	vmov	r2, s15
 8000908:	4b98      	ldr	r3, [pc, #608]	@ (8000b6c <main+0x2e8>)
 800090a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800090e:	f8c3 24ac 	str.w	r2, [r3, #1196]	@ 0x4ac

  delayChannel[2].cf_lim = (int)(time*CB);
 8000912:	4b94      	ldr	r3, [pc, #592]	@ (8000b64 <main+0x2e0>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8000b68 <main+0x2e4>
 800091c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000920:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000928:	ee17 2a90 	vmov	r2, s15
 800092c:	4b8f      	ldr	r3, [pc, #572]	@ (8000b6c <main+0x2e8>)
 800092e:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000932:	f8c3 2950 	str.w	r2, [r3, #2384]	@ 0x950
  delayChannel[2].ap_lim = (int)(time*AP);
 8000936:	4b8b      	ldr	r3, [pc, #556]	@ (8000b64 <main+0x2e0>)
 8000938:	edd3 7a00 	vldr	s15, [r3]
 800093c:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8000b70 <main+0x2ec>
 8000940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000944:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800094c:	ee17 2a90 	vmov	r2, s15
 8000950:	4b86      	ldr	r3, [pc, #536]	@ (8000b6c <main+0x2e8>)
 8000952:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000956:	f8c3 2954 	str.w	r2, [r3, #2388]	@ 0x954

  delayChannel[3].cf_lim = (int)(time*CB);
 800095a:	4b82      	ldr	r3, [pc, #520]	@ (8000b64 <main+0x2e0>)
 800095c:	edd3 7a00 	vldr	s15, [r3]
 8000960:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8000b68 <main+0x2e4>
 8000964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800096c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000970:	ee17 2a90 	vmov	r2, s15
 8000974:	4b7d      	ldr	r3, [pc, #500]	@ (8000b6c <main+0x2e8>)
 8000976:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800097a:	f8c3 2df8 	str.w	r2, [r3, #3576]	@ 0xdf8
  delayChannel[3].ap_lim = (int)(time*AP);
 800097e:	4b79      	ldr	r3, [pc, #484]	@ (8000b64 <main+0x2e0>)
 8000980:	edd3 7a00 	vldr	s15, [r3]
 8000984:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8000b70 <main+0x2ec>
 8000988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000994:	ee17 2a90 	vmov	r2, s15
 8000998:	4b74      	ldr	r3, [pc, #464]	@ (8000b6c <main+0x2e8>)
 800099a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800099e:	f8c3 2dfc 	str.w	r2, [r3, #3580]	@ 0xdfc

  delayChannel[4].cf_lim = (int)(time*CB);
 80009a2:	4b70      	ldr	r3, [pc, #448]	@ (8000b64 <main+0x2e0>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8000b68 <main+0x2e4>
 80009ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b8:	ee17 2a90 	vmov	r2, s15
 80009bc:	4b6b      	ldr	r3, [pc, #428]	@ (8000b6c <main+0x2e8>)
 80009be:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 80009c2:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
  delayChannel[4].ap_lim = (int)(time*AP);
 80009c6:	4b67      	ldr	r3, [pc, #412]	@ (8000b64 <main+0x2e0>)
 80009c8:	edd3 7a00 	vldr	s15, [r3]
 80009cc:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8000b70 <main+0x2ec>
 80009d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009dc:	ee17 2a90 	vmov	r2, s15
 80009e0:	4b62      	ldr	r3, [pc, #392]	@ (8000b6c <main+0x2e8>)
 80009e2:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 80009e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  delayChannel[5].cf_lim = (int)(time*CB);
 80009ea:	4b5e      	ldr	r3, [pc, #376]	@ (8000b64 <main+0x2e0>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000b68 <main+0x2e4>
 80009f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a00:	ee17 2a90 	vmov	r2, s15
 8000a04:	4b59      	ldr	r3, [pc, #356]	@ (8000b6c <main+0x2e8>)
 8000a06:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a0a:	f8c3 2748 	str.w	r2, [r3, #1864]	@ 0x748
  delayChannel[5].ap_lim = (int)(time*AP);
 8000a0e:	4b55      	ldr	r3, [pc, #340]	@ (8000b64 <main+0x2e0>)
 8000a10:	edd3 7a00 	vldr	s15, [r3]
 8000a14:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000b70 <main+0x2ec>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a24:	ee17 2a90 	vmov	r2, s15
 8000a28:	4b50      	ldr	r3, [pc, #320]	@ (8000b6c <main+0x2e8>)
 8000a2a:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a2e:	f8c3 274c 	str.w	r2, [r3, #1868]	@ 0x74c

  delayChannel[0].cf_p = 0;
 8000a32:	4b4e      	ldr	r3, [pc, #312]	@ (8000b6c <main+0x2e8>)
 8000a34:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c2 34a0 	str.w	r3, [r2, #1184]	@ 0x4a0
  delayChannel[1].cf_p = 0;
 8000a40:	4b4a      	ldr	r3, [pc, #296]	@ (8000b6c <main+0x2e8>)
 8000a42:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000a46:	461a      	mov	r2, r3
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c2 3948 	str.w	r3, [r2, #2376]	@ 0x948
  delayChannel[2].cf_p = 0;
 8000a4e:	4b47      	ldr	r3, [pc, #284]	@ (8000b6c <main+0x2e8>)
 8000a50:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8000a54:	461a      	mov	r2, r3
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c2 3df0 	str.w	r3, [r2, #3568]	@ 0xdf0
  delayChannel[3].cf_p = 0;
 8000a5c:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <main+0x2e8>)
 8000a5e:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8000a62:	461a      	mov	r2, r3
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c2 3298 	str.w	r3, [r2, #664]	@ 0x298
  delayChannel[4].cf_p = 0;
 8000a6a:	4b40      	ldr	r3, [pc, #256]	@ (8000b6c <main+0x2e8>)
 8000a6c:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a70:	461a      	mov	r2, r3
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c2 3740 	str.w	r3, [r2, #1856]	@ 0x740
  delayChannel[5].cf_p = 0;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	@ (8000b6c <main+0x2e8>)
 8000a7a:	f503 332c 	add.w	r3, r3, #176128	@ 0x2b000
 8000a7e:	461a      	mov	r2, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c2 3be8 	str.w	r3, [r2, #3048]	@ 0xbe8

  delayChannel[0].ap_p = 0;
 8000a86:	4b39      	ldr	r3, [pc, #228]	@ (8000b6c <main+0x2e8>)
 8000a88:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c2 34a4 	str.w	r3, [r2, #1188]	@ 0x4a4
  delayChannel[1].ap_p = 0;
 8000a94:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <main+0x2e8>)
 8000a96:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c2 394c 	str.w	r3, [r2, #2380]	@ 0x94c
  delayChannel[2].ap_p = 0;
 8000aa2:	4b32      	ldr	r3, [pc, #200]	@ (8000b6c <main+0x2e8>)
 8000aa4:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c2 3df4 	str.w	r3, [r2, #3572]	@ 0xdf4
  delayChannel[3].ap_p = 0;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <main+0x2e8>)
 8000ab2:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c2 329c 	str.w	r3, [r2, #668]	@ 0x29c
  delayChannel[4].ap_p = 0;
 8000abe:	4b2b      	ldr	r3, [pc, #172]	@ (8000b6c <main+0x2e8>)
 8000ac0:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c2 3744 	str.w	r3, [r2, #1860]	@ 0x744
  delayChannel[5].ap_p = 0;
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <main+0x2e8>)
 8000ace:	f503 332c 	add.w	r3, r3, #176128	@ 0x2b000
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c2 3bec 	str.w	r3, [r2, #3052]	@ 0xbec
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f002 fe0d 	bl	80036f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 f963 	bl	8000da8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae2:	f000 f9cd 	bl	8000e80 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ae6:	f000 fa02 	bl	8000eee <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aea:	f000 ff73 	bl	80019d4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000aee:	f000 fc01 	bl	80012f4 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 8000af2:	f000 fbc1 	bl	8001278 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 8000af6:	f000 fc35 	bl	8001364 <MX_HSPI1_Init>
  MX_I2C2_Init();
 8000afa:	f000 fcb1 	bl	8001460 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8000afe:	f000 fcef 	bl	80014e0 <MX_ICACHE_Init>
  MX_LTDC_Init();
 8000b02:	f000 fd01 	bl	8001508 <MX_LTDC_Init>
  MX_RTC_Init();
 8000b06:	f000 fd7f 	bl	8001608 <MX_RTC_Init>
  MX_TIM3_Init();
 8000b0a:	f000 fe37 	bl	800177c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000b0e:	f000 f9fd 	bl	8000f0c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b12:	f000 fee5 	bl	80018e0 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000b16:	f000 fdc5 	bl	80016a4 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000b1a:	f000 fb31 	bl	8001180 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000b1e:	f000 fc5f 	bl	80013e0 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000b22:	f000 ff29 	bl	8001978 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 8000b26:	f000 fe8b 	bl	8001840 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //Begins DMA transfer for first ADC
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1));
 8000b2a:	220d      	movs	r2, #13
 8000b2c:	4911      	ldr	r1, [pc, #68]	@ (8000b74 <main+0x2f0>)
 8000b2e:	4812      	ldr	r0, [pc, #72]	@ (8000b78 <main+0x2f4>)
 8000b30:	f003 fd2e 	bl	8004590 <HAL_ADC_Start_DMA>
  //begins DMA transfer for fourth ADC
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4));
 8000b34:	2202      	movs	r2, #2
 8000b36:	4911      	ldr	r1, [pc, #68]	@ (8000b7c <main+0x2f8>)
 8000b38:	4811      	ldr	r0, [pc, #68]	@ (8000b80 <main+0x2fc>)
 8000b3a:	f003 fd29 	bl	8004590 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000b3e:	4811      	ldr	r0, [pc, #68]	@ (8000b84 <main+0x300>)
 8000b40:	f00e ffde 	bl	800fb00 <HAL_TIM_Base_Start>
  //Config ADC/DAC

  HAL_Delay(2000);
 8000b44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b48:	f002 fe9c 	bl	8003884 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2104      	movs	r1, #4
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <main+0x304>)
 8000b52:	f007 fcb7 	bl	80084c4 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000b56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b5a:	f002 fe93 	bl	8003884 <HAL_Delay>

  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	e024      	b.n	8000bae <main+0x32a>
 8000b64:	20000004 	.word	0x20000004
 8000b68:	454b2000 	.word	0x454b2000
 8000b6c:	20000d84 	.word	0x20000d84
 8000b70:	43f00000 	.word	0x43f00000
 8000b74:	2002c974 	.word	0x2002c974
 8000b78:	20000050 	.word	0x20000050
 8000b7c:	2002c990 	.word	0x2002c990
 8000b80:	200000dc 	.word	0x200000dc
 8000b84:	200007c0 	.word	0x200007c0
 8000b88:	42021000 	.word	0x42021000
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4a77      	ldr	r2, [pc, #476]	@ (8000d70 <main+0x4ec>)
 8000b92:	441a      	add	r2, r3
 8000b94:	2364      	movs	r3, #100	@ 0x64
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2302      	movs	r3, #2
 8000b9a:	2190      	movs	r1, #144	@ 0x90
 8000b9c:	4875      	ldr	r0, [pc, #468]	@ (8000d74 <main+0x4f0>)
 8000b9e:	f007 fd9b 	bl	80086d8 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000ba2:	2064      	movs	r0, #100	@ 0x64
 8000ba4:	f002 fe6e 	bl	8003884 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	3301      	adds	r3, #1
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	2b1d      	cmp	r3, #29
 8000bb2:	d9eb      	bls.n	8000b8c <main+0x308>
  }

  HAL_Delay(100);
 8000bb4:	2064      	movs	r0, #100	@ 0x64
 8000bb6:	f002 fe65 	bl	8003884 <HAL_Delay>
  //Begins DMA transfer for PCM6260
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData));
 8000bba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bbe:	496e      	ldr	r1, [pc, #440]	@ (8000d78 <main+0x4f4>)
 8000bc0:	486e      	ldr	r0, [pc, #440]	@ (8000d7c <main+0x4f8>)
 8000bc2:	f00e fc13 	bl	800f3ec <HAL_SAI_Receive_DMA>
  //Begins DMA transfer for CS4334k-QZ
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacDataBuffer, DIM(dacDataBuffer));
 8000bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bca:	496d      	ldr	r1, [pc, #436]	@ (8000d80 <main+0x4fc>)
 8000bcc:	486d      	ldr	r0, [pc, #436]	@ (8000d84 <main+0x500>)
 8000bce:	f00e fb0b 	bl	800f1e8 <HAL_SAI_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t heartBeatTick = HAL_GetTick() + 1000;
 8000bd2:	f002 fe4b 	bl	800386c <HAL_GetTick>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000bdc:	61bb      	str	r3, [r7, #24]
  uint16_t index = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	82fb      	strh	r3, [r7, #22]
  int channelNumber = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(HAL_GetTick() >= heartBeatTick)
 8000be6:	f002 fe41 	bl	800386c <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d809      	bhi.n	8000c06 <main+0x382>
	  {
		 heartBeatTick = HAL_GetTick() + 1000;
 8000bf2:	f002 fe3b 	bl	800386c <HAL_GetTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000bfc:	61bb      	str	r3, [r7, #24]
		 HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4861      	ldr	r0, [pc, #388]	@ (8000d88 <main+0x504>)
 8000c02:	f007 fc77 	bl	80084f4 <HAL_GPIO_TogglePin>
	  }
	  //Slider/Pot Processing
	  volumeLRPoll(index);
 8000c06:	8afb      	ldrh	r3, [r7, #22]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f82f 	bl	8001c6c <volumeLRPoll>
	  index++;
 8000c0e:	8afb      	ldrh	r3, [r7, #22]
 8000c10:	3301      	adds	r3, #1
 8000c12:	82fb      	strh	r3, [r7, #22]


	  if(adcReady)
 8000c14:	4b5d      	ldr	r3, [pc, #372]	@ (8000d8c <main+0x508>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d067      	beq.n	8000cee <main+0x46a>
	  {
		  //Loads sample data into Structs
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	82bb      	strh	r3, [r7, #20]
 8000c22:	e05e      	b.n	8000ce2 <main+0x45e>
		  {
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	827b      	strh	r3, [r7, #18]
 8000c28:	e055      	b.n	8000cd6 <main+0x452>
		        {
		            channels[channel].channelData[sample] = signExtend24((uint32_t)(adcData[channelCount*sample + channel]));
 8000c2a:	4b59      	ldr	r3, [pc, #356]	@ (8000d90 <main+0x50c>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	8a7b      	ldrh	r3, [r7, #18]
 8000c30:	00d9      	lsls	r1, r3, #3
 8000c32:	8abb      	ldrh	r3, [r7, #20]
 8000c34:	440b      	add	r3, r1
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	8abd      	ldrh	r5, [r7, #20]
 8000c3e:	8a7c      	ldrh	r4, [r7, #18]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fffd 	bl	8001c40 <signExtend24>
 8000c46:	4602      	mov	r2, r0
 8000c48:	4952      	ldr	r1, [pc, #328]	@ (8000d94 <main+0x510>)
 8000c4a:	f44f 738b 	mov.w	r3, #278	@ 0x116
 8000c4e:	fb05 f303 	mul.w	r3, r5, r3
 8000c52:	4423      	add	r3, r4
 8000c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		            if(channel == 1){
 8000c58:	8abb      	ldrh	r3, [r7, #20]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d138      	bne.n	8000cd0 <main+0x44c>
		            channels[channel].channelData[sample] = (int32_t)((1.0f-wet)*((float)channels[1].channelData[sample])
 8000c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8000d98 <main+0x514>)
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c6c:	8a7b      	ldrh	r3, [r7, #18]
 8000c6e:	4a49      	ldr	r2, [pc, #292]	@ (8000d94 <main+0x510>)
 8000c70:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c80:	ee27 8a27 	vmul.f32	s16, s14, s15
							    + wet*Do_Delay((float)channels[1].channelData[sample], 1));
 8000c84:	8a7b      	ldrh	r3, [r7, #18]
 8000c86:	4a43      	ldr	r2, [pc, #268]	@ (8000d94 <main+0x510>)
 8000c88:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c98:	2001      	movs	r0, #1
 8000c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c9e:	f7ff fdd5 	bl	800084c <Do_Delay>
 8000ca2:	eeb0 7a40 	vmov.f32	s14, s0
 8000ca6:	4b3c      	ldr	r3, [pc, #240]	@ (8000d98 <main+0x514>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb0:	ee78 7a27 	vadd.f32	s15, s16, s15
		            channels[channel].channelData[sample] = (int32_t)((1.0f-wet)*((float)channels[1].channelData[sample])
 8000cb4:	8aba      	ldrh	r2, [r7, #20]
 8000cb6:	8a7b      	ldrh	r3, [r7, #18]
 8000cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cbc:	ee17 4a90 	vmov	r4, s15
 8000cc0:	4934      	ldr	r1, [pc, #208]	@ (8000d94 <main+0x510>)
 8000cc2:	f44f 708b 	mov.w	r0, #278	@ 0x116
 8000cc6:	fb00 f202 	mul.w	r2, r0, r2
 8000cca:	4413      	add	r3, r2
 8000ccc:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000cd0:	8a7b      	ldrh	r3, [r7, #18]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	827b      	strh	r3, [r7, #18]
 8000cd6:	8a7b      	ldrh	r3, [r7, #18]
 8000cd8:	2bff      	cmp	r3, #255	@ 0xff
 8000cda:	d9a6      	bls.n	8000c2a <main+0x3a6>
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000cdc:	8abb      	ldrh	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	82bb      	strh	r3, [r7, #20]
 8000ce2:	8abb      	ldrh	r3, [r7, #20]
 8000ce4:	2b07      	cmp	r3, #7
 8000ce6:	d99d      	bls.n	8000c24 <main+0x3a0>
		            }
		        }
		  }
		  //TODO: apply effects
		  //TODO: mix
		  adcReady = false;
 8000ce8:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <main+0x508>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
	  }
	  if(dacReady)
 8000cee:	4b2b      	ldr	r3, [pc, #172]	@ (8000d9c <main+0x518>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f43f af76 	beq.w	8000be6 <main+0x362>
	  {
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	823b      	strh	r3, [r7, #16]
 8000cfe:	e030      	b.n	8000d62 <main+0x4de>
		  {
			  int32_t mixedSignal = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	817b      	strh	r3, [r7, #10]
 8000d08:	e00f      	b.n	8000d2a <main+0x4a6>
			  {
				  mixedSignal += channels[currChannel].channelData[sample];
 8000d0a:	897a      	ldrh	r2, [r7, #10]
 8000d0c:	8a3b      	ldrh	r3, [r7, #16]
 8000d0e:	4921      	ldr	r1, [pc, #132]	@ (8000d94 <main+0x510>)
 8000d10:	f44f 708b 	mov.w	r0, #278	@ 0x116
 8000d14:	fb00 f202 	mul.w	r2, r0, r2
 8000d18:	4413      	add	r3, r2
 8000d1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	4413      	add	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000d24:	897b      	ldrh	r3, [r7, #10]
 8000d26:	3301      	adds	r3, #1
 8000d28:	817b      	strh	r3, [r7, #10]
 8000d2a:	897b      	ldrh	r3, [r7, #10]
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d9ec      	bls.n	8000d0a <main+0x486>
			  }
			  mixedSignal = mixedSignal / 6;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4a1b      	ldr	r2, [pc, #108]	@ (8000da0 <main+0x51c>)
 8000d34:	fb82 1203 	smull	r1, r2, r2, r3
 8000d38:	17db      	asrs	r3, r3, #31
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	60fb      	str	r3, [r7, #12]
			  dacData[(sample * 2)] =  mixedSignal * gain;//channels[2].channelData[sample];
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <main+0x520>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	8a3b      	ldrh	r3, [r7, #16]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	601a      	str	r2, [r3, #0]
			  dacData[(sample * 2) + 1] = mixedSignal * gain;//channels[2].channelData[sample];
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <main+0x520>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	8a3b      	ldrh	r3, [r7, #16]
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	3304      	adds	r3, #4
 8000d56:	4413      	add	r3, r2
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	601a      	str	r2, [r3, #0]
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000d5c:	8a3b      	ldrh	r3, [r7, #16]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	823b      	strh	r3, [r7, #16]
 8000d62:	8a3b      	ldrh	r3, [r7, #16]
 8000d64:	2bff      	cmp	r3, #255	@ 0xff
 8000d66:	d9cb      	bls.n	8000d00 <main+0x47c>
		  }
		  dacReady = false;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <main+0x518>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() >= heartBeatTick)
 8000d6e:	e73a      	b.n	8000be6 <main+0x362>
 8000d70:	20000008 	.word	0x20000008
 8000d74:	2000035c 	.word	0x2000035c
 8000d78:	2002c994 	.word	0x2002c994
 8000d7c:	20000574 	.word	0x20000574
 8000d80:	20030994 	.word	0x20030994
 8000d84:	200004dc 	.word	0x200004dc
 8000d88:	42020c00 	.word	0x42020c00
 8000d8c:	20033c54 	.word	0x20033c54
 8000d90:	20033c58 	.word	0x20033c58
 8000d94:	20031994 	.word	0x20031994
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20033c55 	.word	0x20033c55
 8000da0:	2aaaaaab 	.word	0x2aaaaaab
 8000da4:	20033c5c 	.word	0x20033c5c

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b09e      	sub	sp, #120	@ 0x78
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	2260      	movs	r2, #96	@ 0x60
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f011 fceb 	bl	8012792 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dcc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000dd0:	f009 fac6 	bl	800a360 <HAL_PWREx_ControlVoltageScaling>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000dda:	f001 fabb 	bl	8002354 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dde:	f009 faaf 	bl	800a340 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000de2:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <SystemClock_Config+0xd4>)
 8000de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000de8:	4a24      	ldr	r2, [pc, #144]	@ (8000e7c <SystemClock_Config+0xd4>)
 8000dea:	f023 0318 	bic.w	r3, r3, #24
 8000dee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000df2:	2307      	movs	r3, #7
 8000df4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dfc:	2381      	movs	r3, #129	@ 0x81
 8000dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e06:	2310      	movs	r3, #16
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000e26:	2301      	movs	r3, #1
 8000e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f107 0318 	add.w	r3, r7, #24
 8000e36:	4618      	mov	r0, r3
 8000e38:	f009 fbbc 	bl	800a5b4 <HAL_RCC_OscConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e42:	f001 fa87 	bl	8002354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	231f      	movs	r3, #31
 8000e48:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2103      	movs	r1, #3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00a fa82 	bl	800b36c <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e6e:	f001 fa71 	bl	8002354 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3778      	adds	r7, #120	@ 0x78
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	46020c00 	.word	0x46020c00

08000e80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0b8      	sub	sp, #224	@ 0xe0
 8000e84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	22e0      	movs	r2, #224	@ 0xe0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f011 fc80 	bl	8012792 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8000e92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e96:	f04f 0301 	mov.w	r3, #1
 8000e9a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000ea4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8000eac:	2303      	movs	r3, #3
 8000eae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000ece:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f00a fe18 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000ee2:	f001 fa37 	bl	8002354 <Error_Handler>
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	37e0      	adds	r7, #224	@ 0xe0
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000ef2:	f009 fb21 	bl	800a538 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f009 fabe 	bl	800a478 <HAL_PWREx_ConfigSupply>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000f02:	f001 fa27 	bl	8002354 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f12:	463b      	mov	r3, r7
 8000f14:	2220      	movs	r2, #32
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f011 fc3a 	bl	8012792 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1e:	4b89      	ldr	r3, [pc, #548]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f20:	4a89      	ldr	r2, [pc, #548]	@ (8001148 <MX_ADC1_Init+0x23c>)
 8000f22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f24:	4b87      	ldr	r3, [pc, #540]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2a:	4b86      	ldr	r3, [pc, #536]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000f30:	4b84      	ldr	r3, [pc, #528]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f36:	4b83      	ldr	r3, [pc, #524]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f3c:	4b81      	ldr	r3, [pc, #516]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b80      	ldr	r3, [pc, #512]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000f48:	4b7e      	ldr	r3, [pc, #504]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000f56:	4b7b      	ldr	r3, [pc, #492]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f58:	220d      	movs	r2, #13
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5c:	4b79      	ldr	r3, [pc, #484]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000f64:	4b77      	ldr	r3, [pc, #476]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f66:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000f6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f6c:	4b75      	ldr	r3, [pc, #468]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f72:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f74:	4b73      	ldr	r3, [pc, #460]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f7c:	4b71      	ldr	r3, [pc, #452]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f82:	4b70      	ldr	r3, [pc, #448]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f88:	4b6e      	ldr	r3, [pc, #440]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f90:	2203      	movs	r2, #3
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f94:	4b6b      	ldr	r3, [pc, #428]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9c:	4869      	ldr	r0, [pc, #420]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000f9e:	f003 f80f 	bl	8003fc0 <HAL_ADC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000fa8:	f001 f9d4 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fac:	4b67      	ldr	r3, [pc, #412]	@ (800114c <MX_ADC1_Init+0x240>)
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fbc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	485e      	ldr	r0, [pc, #376]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000fcc:	f003 ff26 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000fd6:	f001 f9bd 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fda:	4b5d      	ldr	r3, [pc, #372]	@ (8001150 <MX_ADC1_Init+0x244>)
 8000fdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fde:	230c      	movs	r3, #12
 8000fe0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4857      	ldr	r0, [pc, #348]	@ (8001144 <MX_ADC1_Init+0x238>)
 8000fe8:	f003 ff18 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000ff2:	f001 f9af 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ff6:	4b57      	ldr	r3, [pc, #348]	@ (8001154 <MX_ADC1_Init+0x248>)
 8000ff8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ffa:	2312      	movs	r3, #18
 8000ffc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4850      	ldr	r0, [pc, #320]	@ (8001144 <MX_ADC1_Init+0x238>)
 8001004:	f003 ff0a 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800100e:	f001 f9a1 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001012:	4b51      	ldr	r3, [pc, #324]	@ (8001158 <MX_ADC1_Init+0x24c>)
 8001014:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001016:	2318      	movs	r3, #24
 8001018:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	4619      	mov	r1, r3
 800101e:	4849      	ldr	r0, [pc, #292]	@ (8001144 <MX_ADC1_Init+0x238>)
 8001020:	f003 fefc 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800102a:	f001 f993 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800102e:	4b4b      	ldr	r3, [pc, #300]	@ (800115c <MX_ADC1_Init+0x250>)
 8001030:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001032:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001036:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4841      	ldr	r0, [pc, #260]	@ (8001144 <MX_ADC1_Init+0x238>)
 800103e:	f003 feed 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8001048:	f001 f984 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800104c:	4b44      	ldr	r3, [pc, #272]	@ (8001160 <MX_ADC1_Init+0x254>)
 800104e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001050:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001054:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	483a      	ldr	r0, [pc, #232]	@ (8001144 <MX_ADC1_Init+0x238>)
 800105c:	f003 fede 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001066:	f001 f975 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800106a:	4b3e      	ldr	r3, [pc, #248]	@ (8001164 <MX_ADC1_Init+0x258>)
 800106c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800106e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4832      	ldr	r0, [pc, #200]	@ (8001144 <MX_ADC1_Init+0x238>)
 800107a:	f003 fecf 	bl	8004e1c <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8001084:	f001 f966 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001088:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <MX_ADC1_Init+0x25c>)
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800108c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001090:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	482b      	ldr	r0, [pc, #172]	@ (8001144 <MX_ADC1_Init+0x238>)
 8001098:	f003 fec0 	bl	8004e1c <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 80010a2:	f001 f957 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010a6:	4b31      	ldr	r3, [pc, #196]	@ (800116c <MX_ADC1_Init+0x260>)
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80010aa:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80010ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	4823      	ldr	r0, [pc, #140]	@ (8001144 <MX_ADC1_Init+0x238>)
 80010b6:	f003 feb1 	bl	8004e1c <HAL_ADC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 80010c0:	f001 f948 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <MX_ADC1_Init+0x264>)
 80010c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80010c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ce:	463b      	mov	r3, r7
 80010d0:	4619      	mov	r1, r3
 80010d2:	481c      	ldr	r0, [pc, #112]	@ (8001144 <MX_ADC1_Init+0x238>)
 80010d4:	f003 fea2 	bl	8004e1c <HAL_ADC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 80010de:	f001 f939 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010e2:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <MX_ADC1_Init+0x268>)
 80010e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80010e6:	f240 2306 	movw	r3, #518	@ 0x206
 80010ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	4814      	ldr	r0, [pc, #80]	@ (8001144 <MX_ADC1_Init+0x238>)
 80010f2:	f003 fe93 	bl	8004e1c <HAL_ADC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 80010fc:	f001 f92a 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001100:	4b1d      	ldr	r3, [pc, #116]	@ (8001178 <MX_ADC1_Init+0x26c>)
 8001102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001104:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8001108:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	@ (8001144 <MX_ADC1_Init+0x238>)
 8001110:	f003 fe84 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 800111a:	f001 f91b 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800111e:	4b17      	ldr	r3, [pc, #92]	@ (800117c <MX_ADC1_Init+0x270>)
 8001120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001122:	f240 2312 	movw	r3, #530	@ 0x212
 8001126:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_ADC1_Init+0x238>)
 800112e:	f003 fe75 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8001138:	f001 f90c 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000050 	.word	0x20000050
 8001148:	42028000 	.word	0x42028000
 800114c:	04000002 	.word	0x04000002
 8001150:	08000004 	.word	0x08000004
 8001154:	0c000008 	.word	0x0c000008
 8001158:	10000010 	.word	0x10000010
 800115c:	14000020 	.word	0x14000020
 8001160:	1c000080 	.word	0x1c000080
 8001164:	20000100 	.word	0x20000100
 8001168:	2a000400 	.word	0x2a000400
 800116c:	2e000800 	.word	0x2e000800
 8001170:	32001000 	.word	0x32001000
 8001174:	3e008000 	.word	0x3e008000
 8001178:	42010000 	.word	0x42010000
 800117c:	ce080000 	.word	0xce080000

08001180 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2220      	movs	r2, #32
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f011 fb00 	bl	8012792 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001192:	4b35      	ldr	r3, [pc, #212]	@ (8001268 <MX_ADC4_Init+0xe8>)
 8001194:	4a35      	ldr	r2, [pc, #212]	@ (800126c <MX_ADC4_Init+0xec>)
 8001196:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001198:	4b33      	ldr	r3, [pc, #204]	@ (8001268 <MX_ADC4_Init+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800119e:	4b32      	ldr	r3, [pc, #200]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011a0:	2204      	movs	r2, #4
 80011a2:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a4:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 80011aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011ac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80011b0:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011b4:	2204      	movs	r2, #4
 80011b6:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 80011b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011be:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80011c4:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 80011cc:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC4_EXTERNALTRIG_T15_TRGO;
 80011d2:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011d4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011da:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80011e2:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011ec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011f0:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <MX_ADC4_Init+0xe8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_ADC4_Init+0xe8>)
 8001200:	2200      	movs	r2, #0
 8001202:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <MX_ADC4_Init+0xe8>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800120c:	4816      	ldr	r0, [pc, #88]	@ (8001268 <MX_ADC4_Init+0xe8>)
 800120e:	f002 fed7 	bl	8003fc0 <HAL_ADC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC4_Init+0x9c>
  {
    Error_Handler();
 8001218:	f001 f89c 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <MX_ADC4_Init+0xf0>)
 800121e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001228:	2304      	movs	r3, #4
 800122a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	@ (8001268 <MX_ADC4_Init+0xe8>)
 8001236:	f003 fdf1 	bl	8004e1c <HAL_ADC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC4_Init+0xc4>
  {
    Error_Handler();
 8001240:	f001 f888 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <MX_ADC4_Init+0xf4>)
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8001248:	2304      	movs	r3, #4
 800124a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_ADC4_Init+0xe8>)
 8001252:	f003 fde3 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC4_Init+0xe0>
  {
    Error_Handler();
 800125c:	f001 f87a 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200000dc 	.word	0x200000dc
 800126c:	46021000 	.word	0x46021000
 8001270:	1c000080 	.word	0x1c000080
 8001274:	20000100 	.word	0x20000100

08001278 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <MX_DMA2D_Init+0x74>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <MX_DMA2D_Init+0x78>)
 8001280:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001282:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <MX_DMA2D_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <MX_DMA2D_Init+0x74>)
 800128a:	2201      	movs	r2, #1
 800128c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <MX_DMA2D_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8001294:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <MX_DMA2D_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 800129a:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MX_DMA2D_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <MX_DMA2D_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_DMA2D_Init+0x74>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_DMA2D_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_DMA2D_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_DMA2D_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <MX_DMA2D_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80012c4:	4809      	ldr	r0, [pc, #36]	@ (80012ec <MX_DMA2D_Init+0x74>)
 80012c6:	f005 fd33 	bl	8006d30 <HAL_DMA2D_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 80012d0:	f001 f840 	bl	8002354 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80012d4:	2101      	movs	r1, #1
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_DMA2D_Init+0x74>)
 80012d8:	f005 fd8c 	bl	8006df4 <HAL_DMA2D_ConfigLayer>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f001 f837 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000294 	.word	0x20000294
 80012f0:	4002b000 	.word	0x4002b000

080012f4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80012fa:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <MX_GPDMA1_Init+0x6c>)
 80012fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001300:	4a17      	ldr	r2, [pc, #92]	@ (8001360 <MX_GPDMA1_Init+0x6c>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <MX_GPDMA1_Init+0x6c>)
 800130c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	201d      	movs	r0, #29
 800131e:	f004 fda9 	bl	8005e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001322:	201d      	movs	r0, #29
 8001324:	f004 fdc0 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	201e      	movs	r0, #30
 800132e:	f004 fda1 	bl	8005e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001332:	201e      	movs	r0, #30
 8001334:	f004 fdb8 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	201f      	movs	r0, #31
 800133e:	f004 fd99 	bl	8005e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001342:	201f      	movs	r0, #31
 8001344:	f004 fdb0 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	2020      	movs	r0, #32
 800134e:	f004 fd91 	bl	8005e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001352:	2020      	movs	r0, #32
 8001354:	f004 fda8 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	46020c00 	.word	0x46020c00

08001364 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <MX_HSPI1_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 8001370:	2204      	movs	r2, #4
 8001372:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 800137c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001380:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 8001384:	221a      	movs	r2, #26
 8001386:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 800138a:	2202      	movs	r2, #2
 800138c:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 800138e:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 80013b8:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <MX_HSPI1_Init+0x74>)
 80013c6:	f010 fd7d 	bl	8011ec4 <HAL_XSPI_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 80013d0:	f000 ffc0 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200002fc 	.word	0x200002fc
 80013dc:	420d3400 	.word	0x420d3400

080013e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <MX_I2C1_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013ec:	4a1b      	ldr	r2, [pc, #108]	@ (800145c <MX_I2C1_Init+0x7c>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_I2C1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800141a:	480e      	ldr	r0, [pc, #56]	@ (8001454 <MX_I2C1_Init+0x74>)
 800141c:	f007 f8c0 	bl	80085a0 <HAL_I2C_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001426:	f000 ff95 	bl	8002354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142a:	2100      	movs	r1, #0
 800142c:	4809      	ldr	r0, [pc, #36]	@ (8001454 <MX_I2C1_Init+0x74>)
 800142e:	f008 fa4b 	bl	80098c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001438:	f000 ff8c 	bl	8002354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800143c:	2100      	movs	r1, #0
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001440:	f008 fa8d 	bl	800995e <HAL_I2CEx_ConfigDigitalFilter>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800144a:	f000 ff83 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000035c 	.word	0x2000035c
 8001458:	40005400 	.word	0x40005400
 800145c:	20a0c4df 	.word	0x20a0c4df

08001460 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <MX_I2C2_Init+0x74>)
 8001466:	4a1c      	ldr	r2, [pc, #112]	@ (80014d8 <MX_I2C2_Init+0x78>)
 8001468:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 800146a:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <MX_I2C2_Init+0x74>)
 800146c:	4a1b      	ldr	r2, [pc, #108]	@ (80014dc <MX_I2C2_Init+0x7c>)
 800146e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001470:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MX_I2C2_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <MX_I2C2_Init+0x74>)
 8001478:	2201      	movs	r2, #1
 800147a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <MX_I2C2_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001482:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <MX_I2C2_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <MX_I2C2_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <MX_I2C2_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <MX_I2C2_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800149a:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <MX_I2C2_Init+0x74>)
 800149c:	f007 f880 	bl	80085a0 <HAL_I2C_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014a6:	f000 ff55 	bl	8002354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014aa:	2100      	movs	r1, #0
 80014ac:	4809      	ldr	r0, [pc, #36]	@ (80014d4 <MX_I2C2_Init+0x74>)
 80014ae:	f008 fa0b 	bl	80098c8 <HAL_I2CEx_ConfigAnalogFilter>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014b8:	f000 ff4c 	bl	8002354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014bc:	2100      	movs	r1, #0
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_I2C2_Init+0x74>)
 80014c0:	f008 fa4d 	bl	800995e <HAL_I2CEx_ConfigDigitalFilter>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014ca:	f000 ff43 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200003b0 	.word	0x200003b0
 80014d8:	40005800 	.word	0x40005800
 80014dc:	20a0c4df 	.word	0x20a0c4df

080014e0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80014e4:	2000      	movs	r0, #0
 80014e6:	f008 fa87 	bl	80099f8 <HAL_ICACHE_ConfigAssociativityMode>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80014f0:	f000 ff30 	bl	8002354 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80014f4:	f008 faa0 	bl	8009a38 <HAL_ICACHE_Enable>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80014fe:	f000 ff29 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	@ 0x38
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2234      	movs	r2, #52	@ 0x34
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f011 f93c 	bl	8012792 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800151a:	4b39      	ldr	r3, [pc, #228]	@ (8001600 <MX_LTDC_Init+0xf8>)
 800151c:	4a39      	ldr	r2, [pc, #228]	@ (8001604 <MX_LTDC_Init+0xfc>)
 800151e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001520:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <MX_LTDC_Init+0xf8>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001526:	4b36      	ldr	r3, [pc, #216]	@ (8001600 <MX_LTDC_Init+0xf8>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800152c:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <MX_LTDC_Init+0xf8>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001532:	4b33      	ldr	r3, [pc, #204]	@ (8001600 <MX_LTDC_Init+0xf8>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001538:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <MX_LTDC_Init+0xf8>)
 800153a:	2203      	movs	r2, #3
 800153c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800153e:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <MX_LTDC_Init+0xf8>)
 8001540:	2203      	movs	r2, #3
 8001542:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001544:	4b2e      	ldr	r3, [pc, #184]	@ (8001600 <MX_LTDC_Init+0xf8>)
 8001546:	220b      	movs	r2, #11
 8001548:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800154a:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <MX_LTDC_Init+0xf8>)
 800154c:	220b      	movs	r2, #11
 800154e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <MX_LTDC_Init+0xf8>)
 8001552:	f240 322b 	movw	r2, #811	@ 0x32b
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8001558:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <MX_LTDC_Init+0xf8>)
 800155a:	f240 12eb 	movw	r2, #491	@ 0x1eb
 800155e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8001560:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <MX_LTDC_Init+0xf8>)
 8001562:	f240 3233 	movw	r2, #819	@ 0x333
 8001566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8001568:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <MX_LTDC_Init+0xf8>)
 800156a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800156e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001570:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <MX_LTDC_Init+0xf8>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001578:	4b21      	ldr	r3, [pc, #132]	@ (8001600 <MX_LTDC_Init+0xf8>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001580:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <MX_LTDC_Init+0xf8>)
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001588:	481d      	ldr	r0, [pc, #116]	@ (8001600 <MX_LTDC_Init+0xf8>)
 800158a:	f008 fa65 	bl	8009a58 <HAL_LTDC_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001594:	f000 fede 	bl	8002354 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 800159c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80015a0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80015a6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015aa:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80015ac:	2301      	movs	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015b0:	23ff      	movs	r3, #255	@ 0xff
 80015b2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80015b8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015bc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80015be:	2307      	movs	r3, #7
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4806      	ldr	r0, [pc, #24]	@ (8001600 <MX_LTDC_Init+0xf8>)
 80015e8:	f008 fbc8 	bl	8009d7c <HAL_LTDC_ConfigLayer>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 80015f2:	f000 feaf 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3738      	adds	r7, #56	@ 0x38
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000404 	.word	0x20000404
 8001604:	40016800 	.word	0x40016800

08001608 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
 800161c:	615a      	str	r2, [r3, #20]
 800161e:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001620:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <MX_RTC_Init+0x94>)
 8001622:	4a1f      	ldr	r2, [pc, #124]	@ (80016a0 <MX_RTC_Init+0x98>)
 8001624:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001626:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <MX_RTC_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <MX_RTC_Init+0x94>)
 800162e:	227f      	movs	r2, #127	@ 0x7f
 8001630:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_RTC_Init+0x94>)
 8001634:	22ff      	movs	r2, #255	@ 0xff
 8001636:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001638:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MX_RTC_Init+0x94>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800163e:	4b17      	ldr	r3, [pc, #92]	@ (800169c <MX_RTC_Init+0x94>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001644:	4b15      	ldr	r3, [pc, #84]	@ (800169c <MX_RTC_Init+0x94>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800164a:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_RTC_Init+0x94>)
 800164c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001650:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <MX_RTC_Init+0x94>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001658:	4b10      	ldr	r3, [pc, #64]	@ (800169c <MX_RTC_Init+0x94>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800165e:	480f      	ldr	r0, [pc, #60]	@ (800169c <MX_RTC_Init+0x94>)
 8001660:	f00d fa50 	bl	800eb04 <HAL_RTC_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800166a:	f000 fe73 	bl	8002354 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	@ (800169c <MX_RTC_Init+0x94>)
 8001684:	f00d fb6c 	bl	800ed60 <HAL_RTCEx_PrivilegeModeSet>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800168e:	f000 fe61 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200004ac 	.word	0x200004ac
 80016a0:	46007800 	.word	0x46007800

080016a4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80016a8:	4b30      	ldr	r3, [pc, #192]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016aa:	4a31      	ldr	r2, [pc, #196]	@ (8001770 <MX_SAI2_Init+0xcc>)
 80016ac:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80016b4:	4b2d      	ldr	r3, [pc, #180]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80016ba:	4b2c      	ldr	r3, [pc, #176]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80016c0:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80016c6:	4b29      	ldr	r3, [pc, #164]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016ce:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80016d2:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016dc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016e0:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80016e8:	4b20      	ldr	r3, [pc, #128]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016f0:	2210      	movs	r2, #16
 80016f2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80016f4:	2302      	movs	r3, #2
 80016f6:	2202      	movs	r2, #2
 80016f8:	2101      	movs	r1, #1
 80016fa:	481c      	ldr	r0, [pc, #112]	@ (800176c <MX_SAI2_Init+0xc8>)
 80016fc:	f00d fb5e 	bl	800edbc <HAL_SAI_InitProtocol>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_SAI2_Init+0x66>
  {
    Error_Handler();
 8001706:	f000 fe25 	bl	8002354 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <MX_SAI2_Init+0xd0>)
 800170c:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <MX_SAI2_Init+0xd4>)
 800170e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8001710:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <MX_SAI2_Init+0xd0>)
 8001712:	2201      	movs	r2, #1
 8001714:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <MX_SAI2_Init+0xd0>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <MX_SAI2_Init+0xd0>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_SAI2_Init+0xd0>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MX_SAI2_Init+0xd0>)
 800172a:	2202      	movs	r2, #2
 800172c:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_SAI2_Init+0xd0>)
 8001730:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001734:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <MX_SAI2_Init+0xd0>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <MX_SAI2_Init+0xd0>)
 800173e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001742:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <MX_SAI2_Init+0xd0>)
 8001746:	2200      	movs	r2, #0
 8001748:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <MX_SAI2_Init+0xd0>)
 800174c:	2200      	movs	r2, #0
 800174e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001750:	2308      	movs	r3, #8
 8001752:	2202      	movs	r2, #2
 8001754:	2100      	movs	r1, #0
 8001756:	4807      	ldr	r0, [pc, #28]	@ (8001774 <MX_SAI2_Init+0xd0>)
 8001758:	f00d fb30 	bl	800edbc <HAL_SAI_InitProtocol>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_SAI2_Init+0xc2>
  {
    Error_Handler();
 8001762:	f000 fdf7 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200004dc 	.word	0x200004dc
 8001770:	40015804 	.word	0x40015804
 8001774:	20000574 	.word	0x20000574
 8001778:	40015824 	.word	0x40015824

0800177c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	@ 0x28
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	615a      	str	r2, [r3, #20]
 800179e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <MX_TIM3_Init+0xbc>)
 80017a2:	4a26      	ldr	r2, [pc, #152]	@ (800183c <MX_TIM3_Init+0xc0>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <MX_TIM3_Init+0xbc>)
 80017a8:	22a0      	movs	r2, #160	@ 0xa0
 80017aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <MX_TIM3_Init+0xbc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_TIM3_Init+0xbc>)
 80017b4:	2264      	movs	r2, #100	@ 0x64
 80017b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <MX_TIM3_Init+0xbc>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <MX_TIM3_Init+0xbc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017c4:	481c      	ldr	r0, [pc, #112]	@ (8001838 <MX_TIM3_Init+0xbc>)
 80017c6:	f00e fa33 	bl	800fc30 <HAL_TIM_PWM_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017d0:	f000 fdc0 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4815      	ldr	r0, [pc, #84]	@ (8001838 <MX_TIM3_Init+0xbc>)
 80017e4:	f00f fa0a 	bl	8010bfc <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017ee:	f000 fdb1 	bl	8002354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f2:	2360      	movs	r3, #96	@ 0x60
 80017f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 80017f6:	234b      	movs	r3, #75	@ 0x4b
 80017f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001802:	463b      	mov	r3, r7
 8001804:	220c      	movs	r2, #12
 8001806:	4619      	mov	r1, r3
 8001808:	480b      	ldr	r0, [pc, #44]	@ (8001838 <MX_TIM3_Init+0xbc>)
 800180a:	f00e fa69 	bl	800fce0 <HAL_TIM_PWM_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001814:	f000 fd9e 	bl	8002354 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <MX_TIM3_Init+0xbc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_TIM3_Init+0xbc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001826:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001828:	4803      	ldr	r0, [pc, #12]	@ (8001838 <MX_TIM3_Init+0xbc>)
 800182a:	f001 fb55 	bl	8002ed8 <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	@ 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000774 	.word	0x20000774
 800183c:	40000400 	.word	0x40000400

08001840 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <MX_TIM15_Init+0x98>)
 8001860:	4a1e      	ldr	r2, [pc, #120]	@ (80018dc <MX_TIM15_Init+0x9c>)
 8001862:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001864:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <MX_TIM15_Init+0x98>)
 8001866:	221a      	movs	r2, #26
 8001868:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <MX_TIM15_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 8001870:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <MX_TIM15_Init+0x98>)
 8001872:	2231      	movs	r2, #49	@ 0x31
 8001874:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <MX_TIM15_Init+0x98>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800187c:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <MX_TIM15_Init+0x98>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <MX_TIM15_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001888:	4813      	ldr	r0, [pc, #76]	@ (80018d8 <MX_TIM15_Init+0x98>)
 800188a:	f00e f8e2 	bl	800fa52 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001894:	f000 fd5e 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4619      	mov	r1, r3
 80018a4:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <MX_TIM15_Init+0x98>)
 80018a6:	f00e fb2f 	bl	800ff08 <HAL_TIM_ConfigClockSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80018b0:	f000 fd50 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018b4:	2320      	movs	r3, #32
 80018b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <MX_TIM15_Init+0x98>)
 80018c2:	f00f f99b 	bl	8010bfc <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80018cc:	f000 fd42 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200007c0 	.word	0x200007c0
 80018dc:	40014000 	.word	0x40014000

080018e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e4:	4b22      	ldr	r3, [pc, #136]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 80018e6:	4a23      	ldr	r2, [pc, #140]	@ (8001974 <MX_USART1_UART_Init+0x94>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ea:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 80018ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800191c:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001922:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001928:	4811      	ldr	r0, [pc, #68]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 800192a:	f00f fa29 	bl	8010d80 <HAL_UART_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001934:	f000 fd0e 	bl	8002354 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001938:	2100      	movs	r1, #0
 800193a:	480d      	ldr	r0, [pc, #52]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 800193c:	f010 f9f7 	bl	8011d2e <HAL_UARTEx_SetTxFifoThreshold>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001946:	f000 fd05 	bl	8002354 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194a:	2100      	movs	r1, #0
 800194c:	4808      	ldr	r0, [pc, #32]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 800194e:	f010 fa2c 	bl	8011daa <HAL_UARTEx_SetRxFifoThreshold>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001958:	f000 fcfc 	bl	8002354 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800195c:	4804      	ldr	r0, [pc, #16]	@ (8001970 <MX_USART1_UART_Init+0x90>)
 800195e:	f010 f9ad 	bl	8011cbc <HAL_UARTEx_DisableFifoMode>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001968:	f000 fcf4 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000080c 	.word	0x2000080c
 8001974:	40013800 	.word	0x40013800

08001978 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 800197e:	4a14      	ldr	r2, [pc, #80]	@ (80019d0 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001980:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001982:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001984:	2209      	movs	r2, #9
 8001986:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001988:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 800198a:	2200      	movs	r2, #0
 800198c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001990:	2203      	movs	r2, #3
 8001992:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001994:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001996:	2200      	movs	r2, #0
 8001998:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 800199c:	2200      	movs	r2, #0
 800199e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80019ac:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80019b8:	4804      	ldr	r0, [pc, #16]	@ (80019cc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019ba:	f008 fb90 	bl	800a0de <HAL_PCD_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80019c4:	f000 fcc6 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200008a0 	.word	0x200008a0
 80019d0:	42040000 	.word	0x42040000

080019d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08e      	sub	sp, #56	@ 0x38
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ea:	4b8c      	ldr	r3, [pc, #560]	@ (8001c1c <MX_GPIO_Init+0x248>)
 80019ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f0:	4a8a      	ldr	r2, [pc, #552]	@ (8001c1c <MX_GPIO_Init+0x248>)
 80019f2:	f043 0310 	orr.w	r3, r3, #16
 80019f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019fa:	4b88      	ldr	r3, [pc, #544]	@ (8001c1c <MX_GPIO_Init+0x248>)
 80019fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	623b      	str	r3, [r7, #32]
 8001a06:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a08:	4b84      	ldr	r3, [pc, #528]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a0e:	4a83      	ldr	r2, [pc, #524]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a18:	4b80      	ldr	r3, [pc, #512]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a26:	4b7d      	ldr	r3, [pc, #500]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a2c:	4a7b      	ldr	r2, [pc, #492]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a2e:	f043 0320 	orr.w	r3, r3, #32
 8001a32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a36:	4b79      	ldr	r3, [pc, #484]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a44:	4b75      	ldr	r3, [pc, #468]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a4a:	4a74      	ldr	r2, [pc, #464]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a54:	4b71      	ldr	r3, [pc, #452]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b6e      	ldr	r3, [pc, #440]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a68:	4a6c      	ldr	r2, [pc, #432]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a72:	4b6a      	ldr	r3, [pc, #424]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a80:	4b66      	ldr	r3, [pc, #408]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a86:	4a65      	ldr	r2, [pc, #404]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a90:	4b62      	ldr	r3, [pc, #392]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aa4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aae:	4b5b      	ldr	r3, [pc, #364]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abc:	4b57      	ldr	r3, [pc, #348]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac2:	4a56      	ldr	r2, [pc, #344]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001acc:	4b53      	ldr	r3, [pc, #332]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ada:	4b50      	ldr	r3, [pc, #320]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae0:	4a4e      	ldr	r2, [pc, #312]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aea:	4b4c      	ldr	r3, [pc, #304]	@ (8001c1c <MX_GPIO_Init+0x248>)
 8001aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2104      	movs	r1, #4
 8001afc:	4848      	ldr	r0, [pc, #288]	@ (8001c20 <MX_GPIO_Init+0x24c>)
 8001afe:	f006 fce1 	bl	80084c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2110      	movs	r1, #16
 8001b06:	4846      	ldr	r0, [pc, #280]	@ (8001c20 <MX_GPIO_Init+0x24c>)
 8001b08:	f006 fcdc 	bl	80084c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2114      	movs	r1, #20
 8001b10:	4844      	ldr	r0, [pc, #272]	@ (8001c24 <MX_GPIO_Init+0x250>)
 8001b12:	f006 fcd7 	bl	80084c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001b16:	2314      	movs	r3, #20
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	483c      	ldr	r0, [pc, #240]	@ (8001c20 <MX_GPIO_Init+0x24c>)
 8001b2e:	f006 faf1 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001b32:	2320      	movs	r3, #32
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <MX_GPIO_Init+0x254>)
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b42:	4619      	mov	r1, r3
 8001b44:	4836      	ldr	r0, [pc, #216]	@ (8001c20 <MX_GPIO_Init+0x24c>)
 8001b46:	f006 fae5 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b4e:	4b37      	ldr	r3, [pc, #220]	@ (8001c2c <MX_GPIO_Init+0x258>)
 8001b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4834      	ldr	r0, [pc, #208]	@ (8001c30 <MX_GPIO_Init+0x25c>)
 8001b5e:	f006 fad9 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001b62:	2310      	movs	r3, #16
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b66:	4b33      	ldr	r3, [pc, #204]	@ (8001c34 <MX_GPIO_Init+0x260>)
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b72:	4619      	mov	r1, r3
 8001b74:	482e      	ldr	r0, [pc, #184]	@ (8001c30 <MX_GPIO_Init+0x25c>)
 8001b76:	f006 facd 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001b7a:	2314      	movs	r3, #20
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4824      	ldr	r0, [pc, #144]	@ (8001c24 <MX_GPIO_Init+0x250>)
 8001b92:	f006 fabf 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481e      	ldr	r0, [pc, #120]	@ (8001c24 <MX_GPIO_Init+0x250>)
 8001baa:	f006 fab3 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 8001bae:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	481d      	ldr	r0, [pc, #116]	@ (8001c38 <MX_GPIO_Init+0x264>)
 8001bc4:	f006 faa6 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001bc8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4817      	ldr	r0, [pc, #92]	@ (8001c3c <MX_GPIO_Init+0x268>)
 8001bde:	f006 fa99 	bl	8008114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	200c      	movs	r0, #12
 8001be8:	f004 f944 	bl	8005e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001bec:	200c      	movs	r0, #12
 8001bee:	f004 f95b 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f004 f93c 	bl	8005e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bfc:	200f      	movs	r0, #15
 8001bfe:	f004 f953 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	2010      	movs	r0, #16
 8001c08:	f004 f934 	bl	8005e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001c0c:	2010      	movs	r0, #16
 8001c0e:	f004 f94b 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c12:	bf00      	nop
 8001c14:	3738      	adds	r7, #56	@ 0x38
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	46020c00 	.word	0x46020c00
 8001c20:	42021000 	.word	0x42021000
 8001c24:	42020c00 	.word	0x42020c00
 8001c28:	10110000 	.word	0x10110000
 8001c2c:	10310000 	.word	0x10310000
 8001c30:	42020000 	.word	0x42020000
 8001c34:	10210000 	.word	0x10210000
 8001c38:	42021800 	.word	0x42021800
 8001c3c:	42020400 	.word	0x42020400

08001c40 <signExtend24>:

/* USER CODE BEGIN 4 */

static inline int32_t signExtend24(uint32_t value)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    return (int32_t)((value & (1 << 23)) ? value | 0xFF000000 : value & 0x007FFFFF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <signExtend24+0x1a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c58:	e002      	b.n	8001c60 <signExtend24+0x20>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <volumeLRPoll>:

static void volumeLRPoll(uint16_t index)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
	  //Channel 1 Volume
	  channels[0].volumeBuffer[index % (sizeof(channels[0].volumeBuffer) / 2)] = adcGroup1[c1Vol];
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4ac2      	ldr	r2, [pc, #776]	@ (8001f88 <volumeLRPoll+0x31c>)
 8001c7e:	8811      	ldrh	r1, [r2, #0]
 8001c80:	4ac2      	ldr	r2, [pc, #776]	@ (8001f8c <volumeLRPoll+0x320>)
 8001c82:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	805a      	strh	r2, [r3, #2]
	  channels[0].volumeRunner += channels[0].volumeBuffer[index % (sizeof(channels[0].volumeBuffer) / 2)];
 8001c8e:	4bbf      	ldr	r3, [pc, #764]	@ (8001f8c <volumeLRPoll+0x320>)
 8001c90:	f8b3 2412 	ldrh.w	r2, [r3, #1042]	@ 0x412
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	49bc      	ldr	r1, [pc, #752]	@ (8001f8c <volumeLRPoll+0x320>)
 8001c9c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	440b      	add	r3, r1
 8001ca4:	885b      	ldrh	r3, [r3, #2]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	4bb8      	ldr	r3, [pc, #736]	@ (8001f8c <volumeLRPoll+0x320>)
 8001cac:	f8a3 2412 	strh.w	r2, [r3, #1042]	@ 0x412
	  channels[0].volumeRunner -= channels[0].volumeBuffer[(index + 1) % (sizeof(channels[0].volumeBuffer) / 2)];
 8001cb0:	4bb6      	ldr	r3, [pc, #728]	@ (8001f8c <volumeLRPoll+0x320>)
 8001cb2:	f8b3 2412 	ldrh.w	r2, [r3, #1042]	@ 0x412
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	49b3      	ldr	r1, [pc, #716]	@ (8001f8c <volumeLRPoll+0x320>)
 8001cc0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	440b      	add	r3, r1
 8001cc8:	885b      	ldrh	r3, [r3, #2]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4baf      	ldr	r3, [pc, #700]	@ (8001f8c <volumeLRPoll+0x320>)
 8001cd0:	f8a3 2412 	strh.w	r2, [r3, #1042]	@ 0x412

	  //Channel 2 Volume
	  channels[1].volumeBuffer[index % (sizeof(channels[1].volumeBuffer) / 2)] = adcGroup1[c2Vol];
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	4aab      	ldr	r2, [pc, #684]	@ (8001f88 <volumeLRPoll+0x31c>)
 8001cdc:	8851      	ldrh	r1, [r2, #2]
 8001cde:	4aab      	ldr	r2, [pc, #684]	@ (8001f8c <volumeLRPoll+0x320>)
 8001ce0:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	460a      	mov	r2, r1
 8001cea:	805a      	strh	r2, [r3, #2]
	  channels[1].volumeRunner += channels[1].volumeBuffer[index % (sizeof(channels[1].volumeBuffer) / 2)];
 8001cec:	4ba7      	ldr	r3, [pc, #668]	@ (8001f8c <volumeLRPoll+0x320>)
 8001cee:	f8b3 286a 	ldrh.w	r2, [r3, #2154]	@ 0x86a
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	49a4      	ldr	r1, [pc, #656]	@ (8001f8c <volumeLRPoll+0x320>)
 8001cfa:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	440b      	add	r3, r1
 8001d02:	885b      	ldrh	r3, [r3, #2]
 8001d04:	4413      	add	r3, r2
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4ba0      	ldr	r3, [pc, #640]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d0a:	f8a3 286a 	strh.w	r2, [r3, #2154]	@ 0x86a
	  channels[1].volumeRunner -= channels[1].volumeBuffer[(index + 1) % (sizeof(channels[1].volumeBuffer) / 2)];
 8001d0e:	4b9f      	ldr	r3, [pc, #636]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d10:	f8b3 286a 	ldrh.w	r2, [r3, #2154]	@ 0x86a
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	3301      	adds	r3, #1
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	499b      	ldr	r1, [pc, #620]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d1e:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	885b      	ldrh	r3, [r3, #2]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b97      	ldr	r3, [pc, #604]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d2e:	f8a3 286a 	strh.w	r2, [r3, #2154]	@ 0x86a

	  //Channel 3 Volume
	  channels[2].volumeBuffer[index % (sizeof(channels[2].volumeBuffer) / 2)] = adcGroup1[c3Vol];
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4a93      	ldr	r2, [pc, #588]	@ (8001f88 <volumeLRPoll+0x31c>)
 8001d3a:	8891      	ldrh	r1, [r2, #4]
 8001d3c:	4a93      	ldr	r2, [pc, #588]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d3e:	f503 63cb 	add.w	r3, r3, #1624	@ 0x658
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	460a      	mov	r2, r1
 8001d48:	805a      	strh	r2, [r3, #2]
	  channels[2].volumeRunner += channels[2].volumeBuffer[index % (sizeof(channels[2].volumeBuffer) / 2)];
 8001d4a:	4b90      	ldr	r3, [pc, #576]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d4c:	f8b3 2cc2 	ldrh.w	r2, [r3, #3266]	@ 0xcc2
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	498d      	ldr	r1, [pc, #564]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d58:	f503 63cb 	add.w	r3, r3, #1624	@ 0x658
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	440b      	add	r3, r1
 8001d60:	885b      	ldrh	r3, [r3, #2]
 8001d62:	4413      	add	r3, r2
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b89      	ldr	r3, [pc, #548]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d68:	f8a3 2cc2 	strh.w	r2, [r3, #3266]	@ 0xcc2
	  channels[2].volumeRunner -= channels[2].volumeBuffer[(index + 1) % (sizeof(channels[2].volumeBuffer) / 2)];
 8001d6c:	4b87      	ldr	r3, [pc, #540]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d6e:	f8b3 2cc2 	ldrh.w	r2, [r3, #3266]	@ 0xcc2
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	3301      	adds	r3, #1
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	4984      	ldr	r1, [pc, #528]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d7c:	f503 63cb 	add.w	r3, r3, #1624	@ 0x658
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	440b      	add	r3, r1
 8001d84:	885b      	ldrh	r3, [r3, #2]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	4b80      	ldr	r3, [pc, #512]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d8c:	f8a3 2cc2 	strh.w	r2, [r3, #3266]	@ 0xcc2

	  //Channel 4 Volume
	  channels[3].volumeBuffer[index % (sizeof(channels[3].volumeBuffer) / 2)] = adcGroup1[c4Vol];
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	4a7c      	ldr	r2, [pc, #496]	@ (8001f88 <volumeLRPoll+0x31c>)
 8001d98:	88d1      	ldrh	r1, [r2, #6]
 8001d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f8c <volumeLRPoll+0x320>)
 8001d9c:	f603 0384 	addw	r3, r3, #2180	@ 0x884
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	460a      	mov	r2, r1
 8001da6:	805a      	strh	r2, [r3, #2]
	  channels[3].volumeRunner += channels[3].volumeBuffer[index % (sizeof(channels[3].volumeBuffer) / 2)];
 8001da8:	4b78      	ldr	r3, [pc, #480]	@ (8001f8c <volumeLRPoll+0x320>)
 8001daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dae:	f8b3 211a 	ldrh.w	r2, [r3, #282]	@ 0x11a
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4974      	ldr	r1, [pc, #464]	@ (8001f8c <volumeLRPoll+0x320>)
 8001dba:	f603 0384 	addw	r3, r3, #2180	@ 0x884
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	440b      	add	r3, r1
 8001dc2:	885b      	ldrh	r3, [r3, #2]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b70      	ldr	r3, [pc, #448]	@ (8001f8c <volumeLRPoll+0x320>)
 8001dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dce:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
	  channels[3].volumeRunner -= channels[3].volumeBuffer[(index + 1) % (sizeof(channels[3].volumeBuffer) / 2)];
 8001dd2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f8c <volumeLRPoll+0x320>)
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd8:	f8b3 211a 	ldrh.w	r2, [r3, #282]	@ 0x11a
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	3301      	adds	r3, #1
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4969      	ldr	r1, [pc, #420]	@ (8001f8c <volumeLRPoll+0x320>)
 8001de6:	f603 0384 	addw	r3, r3, #2180	@ 0x884
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	440b      	add	r3, r1
 8001dee:	885b      	ldrh	r3, [r3, #2]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b65      	ldr	r3, [pc, #404]	@ (8001f8c <volumeLRPoll+0x320>)
 8001df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dfa:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a

	  //Channel 5 Volume
	  channels[4].volumeBuffer[index % (sizeof(channels[4].volumeBuffer) / 2)] = adcGroup1[c5Vol];
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4a60      	ldr	r2, [pc, #384]	@ (8001f88 <volumeLRPoll+0x31c>)
 8001e06:	8911      	ldrh	r1, [r2, #8]
 8001e08:	4a60      	ldr	r2, [pc, #384]	@ (8001f8c <volumeLRPoll+0x320>)
 8001e0a:	f503 632b 	add.w	r3, r3, #2736	@ 0xab0
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	460a      	mov	r2, r1
 8001e14:	805a      	strh	r2, [r3, #2]
	  channels[4].volumeRunner += channels[4].volumeBuffer[index % (sizeof(channels[4].volumeBuffer) / 2)];
 8001e16:	4b5d      	ldr	r3, [pc, #372]	@ (8001f8c <volumeLRPoll+0x320>)
 8001e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1c:	f8b3 2572 	ldrh.w	r2, [r3, #1394]	@ 0x572
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	4959      	ldr	r1, [pc, #356]	@ (8001f8c <volumeLRPoll+0x320>)
 8001e28:	f503 632b 	add.w	r3, r3, #2736	@ 0xab0
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	440b      	add	r3, r1
 8001e30:	885b      	ldrh	r3, [r3, #2]
 8001e32:	4413      	add	r3, r2
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b55      	ldr	r3, [pc, #340]	@ (8001f8c <volumeLRPoll+0x320>)
 8001e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e3c:	f8a3 2572 	strh.w	r2, [r3, #1394]	@ 0x572
	  channels[4].volumeRunner -= channels[4].volumeBuffer[(index + 1) % (sizeof(channels[4].volumeBuffer) / 2)];
 8001e40:	4b52      	ldr	r3, [pc, #328]	@ (8001f8c <volumeLRPoll+0x320>)
 8001e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e46:	f8b3 2572 	ldrh.w	r2, [r3, #1394]	@ 0x572
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	494e      	ldr	r1, [pc, #312]	@ (8001f8c <volumeLRPoll+0x320>)
 8001e54:	f503 632b 	add.w	r3, r3, #2736	@ 0xab0
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	440b      	add	r3, r1
 8001e5c:	885b      	ldrh	r3, [r3, #2]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	4b4a      	ldr	r3, [pc, #296]	@ (8001f8c <volumeLRPoll+0x320>)
 8001e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e68:	f8a3 2572 	strh.w	r2, [r3, #1394]	@ 0x572

	  //Channel 6 Volume
	  channels[5].volumeBuffer[index % (sizeof(channels[5].volumeBuffer) / 2)] = adcGroup1[c6Vol];
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	4a45      	ldr	r2, [pc, #276]	@ (8001f88 <volumeLRPoll+0x31c>)
 8001e74:	8951      	ldrh	r1, [r2, #10]
 8001e76:	4a45      	ldr	r2, [pc, #276]	@ (8001f8c <volumeLRPoll+0x320>)
 8001e78:	f603 43dc 	addw	r3, r3, #3292	@ 0xcdc
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	460a      	mov	r2, r1
 8001e82:	805a      	strh	r2, [r3, #2]
	  channels[5].volumeRunner += channels[5].volumeBuffer[index % (sizeof(channels[5].volumeBuffer) / 2)];
 8001e84:	4b41      	ldr	r3, [pc, #260]	@ (8001f8c <volumeLRPoll+0x320>)
 8001e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8a:	f8b3 29ca 	ldrh.w	r2, [r3, #2506]	@ 0x9ca
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	493d      	ldr	r1, [pc, #244]	@ (8001f8c <volumeLRPoll+0x320>)
 8001e96:	f603 43dc 	addw	r3, r3, #3292	@ 0xcdc
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	440b      	add	r3, r1
 8001e9e:	885b      	ldrh	r3, [r3, #2]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <volumeLRPoll+0x320>)
 8001ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eaa:	f8a3 29ca 	strh.w	r2, [r3, #2506]	@ 0x9ca
	  channels[5].volumeRunner -= channels[5].volumeBuffer[(index + 1) % (sizeof(channels[5].volumeBuffer) / 2)];
 8001eae:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <volumeLRPoll+0x320>)
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb4:	f8b3 29ca 	ldrh.w	r2, [r3, #2506]	@ 0x9ca
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4932      	ldr	r1, [pc, #200]	@ (8001f8c <volumeLRPoll+0x320>)
 8001ec2:	f603 43dc 	addw	r3, r3, #3292	@ 0xcdc
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	440b      	add	r3, r1
 8001eca:	885b      	ldrh	r3, [r3, #2]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f8c <volumeLRPoll+0x320>)
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed6:	f8a3 29ca 	strh.w	r2, [r3, #2506]	@ 0x9ca

	  //Channel 1 LR
	  channels[0].lrBuffer[index % (sizeof(channels[0].lrBuffer) / 2)] = adcGroup1[c1LR];
 8001eda:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <volumeLRPoll+0x31c>)
 8001edc:	8a1a      	ldrh	r2, [r3, #16]
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	ee07 2a90 	vmov	s15, r2
 8001ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eec:	4a27      	ldr	r2, [pc, #156]	@ (8001f8c <volumeLRPoll+0x320>)
 8001eee:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	edc3 7a00 	vstr	s15, [r3]
	  channels[0].lrRunner += channels[0].lrBuffer[index % (sizeof(channels[0].lrBuffer) / 2)];
 8001efc:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <volumeLRPoll+0x320>)
 8001efe:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	@ 0x434
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	4a1e      	ldr	r2, [pc, #120]	@ (8001f8c <volumeLRPoll+0x320>)
 8001f12:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f28:	ee17 3a90 	vmov	r3, s15
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <volumeLRPoll+0x320>)
 8001f30:	f8a3 2434 	strh.w	r2, [r3, #1076]	@ 0x434
	  channels[0].lrRunner -= channels[0].lrBuffer[(index + 1) % (sizeof(channels[0].lrBuffer) / 2)];
 8001f34:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <volumeLRPoll+0x320>)
 8001f36:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	@ 0x434
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	3301      	adds	r3, #1
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <volumeLRPoll+0x320>)
 8001f4c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f62:	ee17 3a90 	vmov	r3, s15
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <volumeLRPoll+0x320>)
 8001f6a:	f8a3 2434 	strh.w	r2, [r3, #1076]	@ 0x434

	  //Channel 2 LR
	  channels[1].lrBuffer[index % (sizeof(channels[1].lrBuffer) / 2)] = adcGroup1[c2LR];
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <volumeLRPoll+0x31c>)
 8001f70:	8a5a      	ldrh	r2, [r3, #18]
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	ee07 2a90 	vmov	s15, r2
 8001f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f80:	4a02      	ldr	r2, [pc, #8]	@ (8001f8c <volumeLRPoll+0x320>)
 8001f82:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 8001f86:	e003      	b.n	8001f90 <volumeLRPoll+0x324>
 8001f88:	2002c974 	.word	0x2002c974
 8001f8c:	20031994 	.word	0x20031994
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	edc3 7a00 	vstr	s15, [r3]
	  channels[1].lrRunner += channels[1].lrBuffer[index % (sizeof(channels[1].lrBuffer) / 2)];
 8001f9a:	4bbf      	ldr	r3, [pc, #764]	@ (8002298 <volumeLRPoll+0x62c>)
 8001f9c:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	@ 0x88c
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	4aba      	ldr	r2, [pc, #744]	@ (8002298 <volumeLRPoll+0x62c>)
 8001fb0:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3304      	adds	r3, #4
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc6:	ee17 3a90 	vmov	r3, s15
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	4bb2      	ldr	r3, [pc, #712]	@ (8002298 <volumeLRPoll+0x62c>)
 8001fce:	f8a3 288c 	strh.w	r2, [r3, #2188]	@ 0x88c
	  channels[1].lrRunner -= channels[1].lrBuffer[(index + 1) % (sizeof(channels[1].lrBuffer) / 2)];
 8001fd2:	4bb1      	ldr	r3, [pc, #708]	@ (8002298 <volumeLRPoll+0x62c>)
 8001fd4:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	@ 0x88c
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	4aab      	ldr	r2, [pc, #684]	@ (8002298 <volumeLRPoll+0x62c>)
 8001fea:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002000:	ee17 3a90 	vmov	r3, s15
 8002004:	b29a      	uxth	r2, r3
 8002006:	4ba4      	ldr	r3, [pc, #656]	@ (8002298 <volumeLRPoll+0x62c>)
 8002008:	f8a3 288c 	strh.w	r2, [r3, #2188]	@ 0x88c

	  //Channel 3 LR
	  channels[2].lrBuffer[index % (sizeof(channels[2].lrBuffer) / 2)] = adcGroup1[c3LR];
 800200c:	4ba3      	ldr	r3, [pc, #652]	@ (800229c <volumeLRPoll+0x630>)
 800200e:	8a9a      	ldrh	r2, [r3, #20]
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	ee07 2a90 	vmov	s15, r2
 800201a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201e:	4a9e      	ldr	r2, [pc, #632]	@ (8002298 <volumeLRPoll+0x62c>)
 8002020:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3304      	adds	r3, #4
 800202a:	edc3 7a00 	vstr	s15, [r3]
	  channels[2].lrRunner += channels[2].lrBuffer[index % (sizeof(channels[2].lrBuffer) / 2)];
 800202e:	4b9a      	ldr	r3, [pc, #616]	@ (8002298 <volumeLRPoll+0x62c>)
 8002030:	f8b3 3ce4 	ldrh.w	r3, [r3, #3300]	@ 0xce4
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	4a95      	ldr	r2, [pc, #596]	@ (8002298 <volumeLRPoll+0x62c>)
 8002044:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800205a:	ee17 3a90 	vmov	r3, s15
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b8d      	ldr	r3, [pc, #564]	@ (8002298 <volumeLRPoll+0x62c>)
 8002062:	f8a3 2ce4 	strh.w	r2, [r3, #3300]	@ 0xce4
	  channels[2].lrRunner -= channels[2].lrBuffer[(index + 1) % (sizeof(channels[2].lrBuffer) / 2)];
 8002066:	4b8c      	ldr	r3, [pc, #560]	@ (8002298 <volumeLRPoll+0x62c>)
 8002068:	f8b3 3ce4 	ldrh.w	r3, [r3, #3300]	@ 0xce4
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	3301      	adds	r3, #1
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	4a86      	ldr	r2, [pc, #536]	@ (8002298 <volumeLRPoll+0x62c>)
 800207e:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	3304      	adds	r3, #4
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002094:	ee17 3a90 	vmov	r3, s15
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b7f      	ldr	r3, [pc, #508]	@ (8002298 <volumeLRPoll+0x62c>)
 800209c:	f8a3 2ce4 	strh.w	r2, [r3, #3300]	@ 0xce4

	  //Channel 4 LR
	  channels[3].lrBuffer[index % (sizeof(channels[3].lrBuffer) / 2)] = adcGroup1[c4LR];
 80020a0:	4b7e      	ldr	r3, [pc, #504]	@ (800229c <volumeLRPoll+0x630>)
 80020a2:	8ada      	ldrh	r2, [r3, #22]
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	ee07 2a90 	vmov	s15, r2
 80020ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b2:	4a79      	ldr	r2, [pc, #484]	@ (8002298 <volumeLRPoll+0x62c>)
 80020b4:	f203 4346 	addw	r3, r3, #1094	@ 0x446
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	3304      	adds	r3, #4
 80020be:	edc3 7a00 	vstr	s15, [r3]
	  channels[3].lrRunner += channels[3].lrBuffer[index % (sizeof(channels[3].lrBuffer) / 2)];
 80020c2:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <volumeLRPoll+0x62c>)
 80020c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a6f      	ldr	r2, [pc, #444]	@ (8002298 <volumeLRPoll+0x62c>)
 80020dc:	f203 4346 	addw	r3, r3, #1094	@ 0x446
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3304      	adds	r3, #4
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f2:	ee17 3a90 	vmov	r3, s15
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <volumeLRPoll+0x62c>)
 80020fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fe:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
	  channels[3].lrRunner -= channels[3].lrBuffer[(index + 1) % (sizeof(channels[3].lrBuffer) / 2)];
 8002102:	4b65      	ldr	r3, [pc, #404]	@ (8002298 <volumeLRPoll+0x62c>)
 8002104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002108:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 800210c:	ee07 3a90 	vmov	s15, r3
 8002110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	3301      	adds	r3, #1
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	4a5e      	ldr	r2, [pc, #376]	@ (8002298 <volumeLRPoll+0x62c>)
 800211e:	f203 4346 	addw	r3, r3, #1094	@ 0x446
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3304      	adds	r3, #4
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002134:	ee17 3a90 	vmov	r3, s15
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b57      	ldr	r3, [pc, #348]	@ (8002298 <volumeLRPoll+0x62c>)
 800213c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002140:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	  //Channel 5 LR
	  channels[4].lrBuffer[index % (sizeof(channels[4].lrBuffer) / 2)] = adcGroup4[c5LR];
 8002144:	4b56      	ldr	r3, [pc, #344]	@ (80022a0 <volumeLRPoll+0x634>)
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	ee07 2a90 	vmov	s15, r2
 8002152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002156:	4a50      	ldr	r2, [pc, #320]	@ (8002298 <volumeLRPoll+0x62c>)
 8002158:	f203 535c 	addw	r3, r3, #1372	@ 0x55c
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	edc3 7a00 	vstr	s15, [r3]
	  channels[4].lrRunner += channels[4].lrBuffer[index % (sizeof(channels[4].lrBuffer) / 2)];
 8002166:	4b4c      	ldr	r3, [pc, #304]	@ (8002298 <volumeLRPoll+0x62c>)
 8002168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800216c:	f8b3 3594 	ldrh.w	r3, [r3, #1428]	@ 0x594
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	4a46      	ldr	r2, [pc, #280]	@ (8002298 <volumeLRPoll+0x62c>)
 8002180:	f203 535c 	addw	r3, r3, #1372	@ 0x55c
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002196:	ee17 3a90 	vmov	r3, s15
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b3e      	ldr	r3, [pc, #248]	@ (8002298 <volumeLRPoll+0x62c>)
 800219e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a2:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
	  channels[4].lrRunner -= channels[4].lrBuffer[(index + 1) % (sizeof(channels[4].lrBuffer) / 2)];
 80021a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002298 <volumeLRPoll+0x62c>)
 80021a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ac:	f8b3 3594 	ldrh.w	r3, [r3, #1428]	@ 0x594
 80021b0:	ee07 3a90 	vmov	s15, r3
 80021b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	3301      	adds	r3, #1
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	4a35      	ldr	r2, [pc, #212]	@ (8002298 <volumeLRPoll+0x62c>)
 80021c2:	f203 535c 	addw	r3, r3, #1372	@ 0x55c
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	3304      	adds	r3, #4
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d8:	ee17 3a90 	vmov	r3, s15
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b2e      	ldr	r3, [pc, #184]	@ (8002298 <volumeLRPoll+0x62c>)
 80021e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594

	  //Channel 6 LR
	  channels[5].lrBuffer[index % (sizeof(channels[5].lrBuffer) / 2)] = adcGroup4[c6LR];
 80021e8:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <volumeLRPoll+0x634>)
 80021ea:	885a      	ldrh	r2, [r3, #2]
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	ee07 2a90 	vmov	s15, r2
 80021f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021fa:	4a27      	ldr	r2, [pc, #156]	@ (8002298 <volumeLRPoll+0x62c>)
 80021fc:	f203 6372 	addw	r3, r3, #1650	@ 0x672
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3304      	adds	r3, #4
 8002206:	edc3 7a00 	vstr	s15, [r3]
	  channels[5].lrRunner += channels[5].lrBuffer[index % (sizeof(channels[5].lrBuffer) / 2)];
 800220a:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <volumeLRPoll+0x62c>)
 800220c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002210:	f8b3 39ec 	ldrh.w	r3, [r3, #2540]	@ 0x9ec
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	4a1d      	ldr	r2, [pc, #116]	@ (8002298 <volumeLRPoll+0x62c>)
 8002224:	f203 6372 	addw	r3, r3, #1650	@ 0x672
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800223a:	ee17 3a90 	vmov	r3, s15
 800223e:	b29a      	uxth	r2, r3
 8002240:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <volumeLRPoll+0x62c>)
 8002242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002246:	f8a3 29ec 	strh.w	r2, [r3, #2540]	@ 0x9ec
	  channels[5].lrRunner -= channels[5].lrBuffer[(index + 1) % (sizeof(channels[5].lrBuffer) / 2)];
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <volumeLRPoll+0x62c>)
 800224c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002250:	f8b3 39ec 	ldrh.w	r3, [r3, #2540]	@ 0x9ec
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	3301      	adds	r3, #1
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	4a0c      	ldr	r2, [pc, #48]	@ (8002298 <volumeLRPoll+0x62c>)
 8002266:	f203 6372 	addw	r3, r3, #1650	@ 0x672
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800227c:	ee17 3a90 	vmov	r3, s15
 8002280:	b29a      	uxth	r2, r3
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <volumeLRPoll+0x62c>)
 8002284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002288:	f8a3 29ec 	strh.w	r2, [r3, #2540]	@ 0x9ec
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	20031994 	.word	0x20031994
 800229c:	2002c974 	.word	0x2002c974
 80022a0:	2002c990 	.word	0x2002c990

080022a4 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	adcReady = true;
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <HAL_SAI_RxHalfCpltCallback+0x20>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[0];
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_SAI_RxHalfCpltCallback+0x24>)
 80022b4:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <HAL_SAI_RxHalfCpltCallback+0x28>)
 80022b6:	601a      	str	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	20033c54 	.word	0x20033c54
 80022c8:	20033c58 	.word	0x20033c58
 80022cc:	2002c994 	.word	0x2002c994

080022d0 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	adcReady = true;
 80022d8:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <HAL_SAI_RxCpltCallback+0x20>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[sampleSize * (channelCount / 2)];
 80022de:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <HAL_SAI_RxCpltCallback+0x24>)
 80022e0:	4a05      	ldr	r2, [pc, #20]	@ (80022f8 <HAL_SAI_RxCpltCallback+0x28>)
 80022e2:	601a      	str	r2, [r3, #0]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	20033c54 	.word	0x20033c54
 80022f4:	20033c58 	.word	0x20033c58
 80022f8:	2002e994 	.word	0x2002e994

080022fc <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_SAI_TxHalfCpltCallback+0x20>)
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[0];
 800230a:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <HAL_SAI_TxHalfCpltCallback+0x24>)
 800230c:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <HAL_SAI_TxHalfCpltCallback+0x28>)
 800230e:	601a      	str	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	20033c55 	.word	0x20033c55
 8002320:	20033c5c 	.word	0x20033c5c
 8002324:	20030994 	.word	0x20030994

08002328 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_SAI_TxCpltCallback+0x20>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[sampleSize];
 8002336:	4b05      	ldr	r3, [pc, #20]	@ (800234c <HAL_SAI_TxCpltCallback+0x24>)
 8002338:	4a05      	ldr	r2, [pc, #20]	@ (8002350 <HAL_SAI_TxCpltCallback+0x28>)
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	20033c55 	.word	0x20033c55
 800234c:	20033c5c 	.word	0x20033c5c
 8002350:	20031194 	.word	0x20031194

08002354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002358:	b672      	cpsid	i
}
 800235a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <Error_Handler+0x8>

08002360 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <HAL_MspInit+0x30>)
 8002368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236c:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <HAL_MspInit+0x30>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002376:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_MspInit+0x30>)
 8002378:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8002384:	f008 f8e8 	bl	800a558 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	46020c00 	.word	0x46020c00

08002394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0e4      	sub	sp, #400	@ 0x190
 8002398:	af00      	add	r7, sp, #0
 800239a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800239e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023a2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  DMA_TriggerConfTypeDef TriggerConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023b8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023bc:	4618      	mov	r0, r3
 80023be:	23e0      	movs	r3, #224	@ 0xe0
 80023c0:	461a      	mov	r2, r3
 80023c2:	2100      	movs	r1, #0
 80023c4:	f010 f9e5 	bl	8012792 <memset>
  if(hadc->Instance==ADC1)
 80023c8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023cc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4aa1      	ldr	r2, [pc, #644]	@ (800265c <HAL_ADC_MspInit+0x2c8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	f040 8152 	bne.w	8002680 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80023dc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023e0:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 80023e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80023f0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023f4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023fc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002400:	f107 0320 	add.w	r3, r7, #32
 8002404:	4618      	mov	r0, r3
 8002406:	f009 fb81 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8002410:	f7ff ffa0 	bl	8002354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002414:	4b92      	ldr	r3, [pc, #584]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 8002416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800241a:	4a91      	ldr	r2, [pc, #580]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 800241c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002420:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002424:	4b8e      	ldr	r3, [pc, #568]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 8002426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800242a:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800242e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002432:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800243c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002440:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	4b87      	ldr	r3, [pc, #540]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 8002444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002448:	4a85      	ldr	r2, [pc, #532]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002452:	4b83      	ldr	r3, [pc, #524]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 8002454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002458:	f003 0204 	and.w	r2, r3, #4
 800245c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002460:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800246a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800246e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	4b7b      	ldr	r3, [pc, #492]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 8002472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002476:	4a7a      	ldr	r2, [pc, #488]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002480:	4b77      	ldr	r3, [pc, #476]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 8002482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800248e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002498:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800249c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	4b70      	ldr	r3, [pc, #448]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 80024a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002660 <HAL_ADC_MspInit+0x2cc>)
 80024b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b4:	f003 0202 	and.w	r2, r3, #2
 80024b8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80024bc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80024c6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024ca:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 80024cc:	230f      	movs	r3, #15
 80024ce:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d2:	2303      	movs	r3, #3
 80024d4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024de:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80024e2:	4619      	mov	r1, r3
 80024e4:	485f      	ldr	r0, [pc, #380]	@ (8002664 <HAL_ADC_MspInit+0x2d0>)
 80024e6:	f005 fe15 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 80024ea:	23ed      	movs	r3, #237	@ 0xed
 80024ec:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f0:	2303      	movs	r3, #3
 80024f2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fc:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002500:	4619      	mov	r1, r3
 8002502:	4859      	ldr	r0, [pc, #356]	@ (8002668 <HAL_ADC_MspInit+0x2d4>)
 8002504:	f005 fe06 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8002508:	2303      	movs	r3, #3
 800250a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250e:	2303      	movs	r3, #3
 8002510:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251a:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800251e:	4619      	mov	r1, r3
 8002520:	4852      	ldr	r0, [pc, #328]	@ (800266c <HAL_ADC_MspInit+0x2d8>)
 8002522:	f005 fdf7 	bl	8008114 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002526:	2321      	movs	r3, #33	@ 0x21
 8002528:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002544:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002548:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800254c:	2301      	movs	r3, #1
 800254e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002552:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002556:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.SrcBurstLength = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.DestBurstLength = 1;
 8002560:	2301      	movs	r3, #1
 8002562:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8002566:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800256a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8002580:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002584:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8002588:	232b      	movs	r3, #43	@ 0x2b
 800258a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800258e:	2300      	movs	r3, #0
 8002590:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 800259a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800259e:	4934      	ldr	r1, [pc, #208]	@ (8002670 <HAL_ADC_MspInit+0x2dc>)
 80025a0:	4618      	mov	r0, r3
 80025a2:	f004 fe95 	bl	80072d0 <HAL_DMAEx_List_BuildNode>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 80025ac:	f7ff fed2 	bl	8002354 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80025b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002670 <HAL_ADC_MspInit+0x2dc>)
 80025b2:	2100      	movs	r1, #0
 80025b4:	482f      	ldr	r0, [pc, #188]	@ (8002674 <HAL_ADC_MspInit+0x2e0>)
 80025b6:	f004 feb7 	bl	8007328 <HAL_DMAEx_List_InsertNode>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 80025c0:	f7ff fec8 	bl	8002354 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80025c4:	482b      	ldr	r0, [pc, #172]	@ (8002674 <HAL_ADC_MspInit+0x2e0>)
 80025c6:	f004 ff78 	bl	80074ba <HAL_DMAEx_List_SetCircularMode>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 80025d0:	f7ff fec0 	bl	8002354 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80025d4:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 80025d6:	4a29      	ldr	r2, [pc, #164]	@ (800267c <HAL_ADC_MspInit+0x2e8>)
 80025d8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80025da:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80025e0:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80025e6:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80025ec:	4b22      	ldr	r3, [pc, #136]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80025f2:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 80025f4:	2281      	movs	r2, #129	@ 0x81
 80025f6:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80025f8:	481f      	ldr	r0, [pc, #124]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 80025fa:	f004 fca9 	bl	8006f50 <HAL_DMAEx_List_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8002604:	f7ff fea6 	bl	8002354 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8002608:	491a      	ldr	r1, [pc, #104]	@ (8002674 <HAL_ADC_MspInit+0x2e0>)
 800260a:	481b      	ldr	r0, [pc, #108]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 800260c:	f004 ffb6 	bl	800757c <HAL_DMAEx_List_LinkQ>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8002616:	f7ff fe9d 	bl	8002354 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 800261a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800261e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a14      	ldr	r2, [pc, #80]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 8002626:	671a      	str	r2, [r3, #112]	@ 0x70
 8002628:	4a13      	ldr	r2, [pc, #76]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 800262a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800262e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002636:	2110      	movs	r1, #16
 8002638:	480f      	ldr	r0, [pc, #60]	@ (8002678 <HAL_ADC_MspInit+0x2e4>)
 800263a:	f004 f897 	bl	800676c <HAL_DMA_ConfigChannelAttributes>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8002644:	f7ff fe86 	bl	8002354 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	2025      	movs	r0, #37	@ 0x25
 800264e:	f003 fc11 	bl	8005e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002652:	2025      	movs	r0, #37	@ 0x25
 8002654:	f003 fc28 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8002658:	e0d5      	b.n	8002806 <HAL_ADC_MspInit+0x472>
 800265a:	bf00      	nop
 800265c:	42028000 	.word	0x42028000
 8002660:	46020c00 	.word	0x46020c00
 8002664:	42020800 	.word	0x42020800
 8002668:	42020000 	.word	0x42020000
 800266c:	42020400 	.word	0x42020400
 8002670:	20000168 	.word	0x20000168
 8002674:	2000018c 	.word	0x2000018c
 8002678:	200001a4 	.word	0x200001a4
 800267c:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8002680:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002684:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a60      	ldr	r2, [pc, #384]	@ (8002810 <HAL_ADC_MspInit+0x47c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	f040 80b9 	bne.w	8002806 <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002694:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002698:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 800269c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80026a8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80026ac:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80026b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b8:	f107 0320 	add.w	r3, r7, #32
 80026bc:	4618      	mov	r0, r3
 80026be:	f009 fa25 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_ADC_MspInit+0x338>
      Error_Handler();
 80026c8:	f7ff fe44 	bl	8002354 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 80026cc:	4b51      	ldr	r3, [pc, #324]	@ (8002814 <HAL_ADC_MspInit+0x480>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d2:	4a50      	ldr	r2, [pc, #320]	@ (8002814 <HAL_ADC_MspInit+0x480>)
 80026d4:	f043 0320 	orr.w	r3, r3, #32
 80026d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002814 <HAL_ADC_MspInit+0x480>)
 80026de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e2:	f003 0220 	and.w	r2, r3, #32
 80026e6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80026ea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80026f4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026f8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026fa:	4b46      	ldr	r3, [pc, #280]	@ (8002814 <HAL_ADC_MspInit+0x480>)
 80026fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002700:	4a44      	ldr	r2, [pc, #272]	@ (8002814 <HAL_ADC_MspInit+0x480>)
 8002702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002706:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800270a:	4b42      	ldr	r3, [pc, #264]	@ (8002814 <HAL_ADC_MspInit+0x480>)
 800270c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002710:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8002714:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002718:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002722:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002726:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8002728:	2303      	movs	r3, #3
 800272a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800272e:	2303      	movs	r3, #3
 8002730:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800273a:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800273e:	4619      	mov	r1, r3
 8002740:	4835      	ldr	r0, [pc, #212]	@ (8002818 <HAL_ADC_MspInit+0x484>)
 8002742:	f005 fce7 	bl	8008114 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8002746:	4b35      	ldr	r3, [pc, #212]	@ (800281c <HAL_ADC_MspInit+0x488>)
 8002748:	4a35      	ldr	r2, [pc, #212]	@ (8002820 <HAL_ADC_MspInit+0x48c>)
 800274a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 800274c:	4b33      	ldr	r3, [pc, #204]	@ (800281c <HAL_ADC_MspInit+0x488>)
 800274e:	2201      	movs	r2, #1
 8002750:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002752:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_ADC_MspInit+0x488>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002758:	4b30      	ldr	r3, [pc, #192]	@ (800281c <HAL_ADC_MspInit+0x488>)
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800275e:	4b2f      	ldr	r3, [pc, #188]	@ (800281c <HAL_ADC_MspInit+0x488>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8002764:	4b2d      	ldr	r3, [pc, #180]	@ (800281c <HAL_ADC_MspInit+0x488>)
 8002766:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800276a:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800276c:	4b2b      	ldr	r3, [pc, #172]	@ (800281c <HAL_ADC_MspInit+0x488>)
 800276e:	2201      	movs	r2, #1
 8002770:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002772:	4b2a      	ldr	r3, [pc, #168]	@ (800281c <HAL_ADC_MspInit+0x488>)
 8002774:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002778:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800277a:	4b28      	ldr	r3, [pc, #160]	@ (800281c <HAL_ADC_MspInit+0x488>)
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8002780:	4b26      	ldr	r3, [pc, #152]	@ (800281c <HAL_ADC_MspInit+0x488>)
 8002782:	2201      	movs	r2, #1
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8002786:	4b25      	ldr	r3, [pc, #148]	@ (800281c <HAL_ADC_MspInit+0x488>)
 8002788:	2201      	movs	r2, #1
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800278c:	4b23      	ldr	r3, [pc, #140]	@ (800281c <HAL_ADC_MspInit+0x488>)
 800278e:	2200      	movs	r2, #0
 8002790:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002792:	4b22      	ldr	r3, [pc, #136]	@ (800281c <HAL_ADC_MspInit+0x488>)
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8002798:	4b20      	ldr	r3, [pc, #128]	@ (800281c <HAL_ADC_MspInit+0x488>)
 800279a:	2200      	movs	r2, #0
 800279c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 800279e:	481f      	ldr	r0, [pc, #124]	@ (800281c <HAL_ADC_MspInit+0x488>)
 80027a0:	f003 fc44 	bl	800602c <HAL_DMA_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 80027aa:	f7ff fdd3 	bl	8002354 <Error_Handler>
    TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80027b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80027bc:	232b      	movs	r3, #43	@ 0x2b
 80027be:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (HAL_DMAEx_ConfigTrigger(&handle_GPDMA1_Channel2, &TriggerConfig) != HAL_OK)
 80027c2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80027c6:	4619      	mov	r1, r3
 80027c8:	4814      	ldr	r0, [pc, #80]	@ (800281c <HAL_ADC_MspInit+0x488>)
 80027ca:	f004 ff6d 	bl	80076a8 <HAL_DMAEx_ConfigTrigger>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_ADC_MspInit+0x444>
      Error_Handler();
 80027d4:	f7ff fdbe 	bl	8002354 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 80027d8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80027dc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a0e      	ldr	r2, [pc, #56]	@ (800281c <HAL_ADC_MspInit+0x488>)
 80027e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80027e6:	4a0d      	ldr	r2, [pc, #52]	@ (800281c <HAL_ADC_MspInit+0x488>)
 80027e8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80027ec:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80027f4:	2110      	movs	r1, #16
 80027f6:	4809      	ldr	r0, [pc, #36]	@ (800281c <HAL_ADC_MspInit+0x488>)
 80027f8:	f003 ffb8 	bl	800676c <HAL_DMA_ConfigChannelAttributes>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_ADC_MspInit+0x472>
      Error_Handler();
 8002802:	f7ff fda7 	bl	8002354 <Error_Handler>
}
 8002806:	bf00      	nop
 8002808:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	46021000 	.word	0x46021000
 8002814:	46020c00 	.word	0x46020c00
 8002818:	42021800 	.word	0x42021800
 800281c:	2000021c 	.word	0x2000021c
 8002820:	40020150 	.word	0x40020150

08002824 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0b      	ldr	r2, [pc, #44]	@ (8002860 <HAL_DMA2D_MspInit+0x3c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10e      	bne.n	8002854 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002836:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_DMA2D_MspInit+0x40>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	4a09      	ldr	r2, [pc, #36]	@ (8002864 <HAL_DMA2D_MspInit+0x40>)
 800283e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002842:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002846:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <HAL_DMA2D_MspInit+0x40>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	4002b000 	.word	0x4002b000
 8002864:	46020c00 	.word	0x46020c00

08002868 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	@ 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2a      	ldr	r2, [pc, #168]	@ (8002930 <HAL_XSPI_MspInit+0xc8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d14d      	bne.n	8002926 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 800288a:	4b2a      	ldr	r3, [pc, #168]	@ (8002934 <HAL_XSPI_MspInit+0xcc>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002890:	4a28      	ldr	r2, [pc, #160]	@ (8002934 <HAL_XSPI_MspInit+0xcc>)
 8002892:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002896:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800289a:	4b26      	ldr	r3, [pc, #152]	@ (8002934 <HAL_XSPI_MspInit+0xcc>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80028a8:	4b22      	ldr	r3, [pc, #136]	@ (8002934 <HAL_XSPI_MspInit+0xcc>)
 80028aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ae:	4a21      	ldr	r2, [pc, #132]	@ (8002934 <HAL_XSPI_MspInit+0xcc>)
 80028b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <HAL_XSPI_MspInit+0xcc>)
 80028ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80028c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <HAL_XSPI_MspInit+0xcc>)
 80028c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028cc:	4a19      	ldr	r2, [pc, #100]	@ (8002934 <HAL_XSPI_MspInit+0xcc>)
 80028ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028d6:	4b17      	ldr	r3, [pc, #92]	@ (8002934 <HAL_XSPI_MspInit+0xcc>)
 80028d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80028e4:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 80028e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80028f6:	2308      	movs	r3, #8
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	480d      	ldr	r0, [pc, #52]	@ (8002938 <HAL_XSPI_MspInit+0xd0>)
 8002902:	f005 fc07 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002906:	230f      	movs	r3, #15
 8002908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8002916:	2308      	movs	r3, #8
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	4806      	ldr	r0, [pc, #24]	@ (800293c <HAL_XSPI_MspInit+0xd4>)
 8002922:	f005 fbf7 	bl	8008114 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	@ 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	420d3400 	.word	0x420d3400
 8002934:	46020c00 	.word	0x46020c00
 8002938:	42021c00 	.word	0x42021c00
 800293c:	42022000 	.word	0x42022000

08002940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0c4      	sub	sp, #272	@ 0x110
 8002944:	af00      	add	r7, sp, #0
 8002946:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800294a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800294e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002960:	f107 0318 	add.w	r3, r7, #24
 8002964:	22e0      	movs	r2, #224	@ 0xe0
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f00f ff12 	bl	8012792 <memset>
  if(hi2c->Instance==I2C1)
 800296e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002972:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a63      	ldr	r2, [pc, #396]	@ (8002b08 <HAL_I2C_MspInit+0x1c8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d14f      	bne.n	8002a20 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002980:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002992:	f107 0318 	add.w	r3, r7, #24
 8002996:	4618      	mov	r0, r3
 8002998:	f009 f8b8 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 80029a2:	f7ff fcd7 	bl	8002354 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029a6:	4b59      	ldr	r3, [pc, #356]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 80029a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ac:	4a57      	ldr	r2, [pc, #348]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 80029ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029b6:	4b55      	ldr	r3, [pc, #340]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 80029b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80029c4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80029c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029cc:	2312      	movs	r3, #18
 80029ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029de:	2304      	movs	r3, #4
 80029e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029e4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80029e8:	4619      	mov	r1, r3
 80029ea:	4849      	ldr	r0, [pc, #292]	@ (8002b10 <HAL_I2C_MspInit+0x1d0>)
 80029ec:	f005 fb92 	bl	8008114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029f0:	4b46      	ldr	r3, [pc, #280]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 80029f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029f6:	4a45      	ldr	r2, [pc, #276]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 80029f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029fc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002a00:	4b42      	ldr	r3, [pc, #264]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 8002a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a06:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002a0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a0e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a18:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a1c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a1e:	e06e      	b.n	8002afe <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8002a20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a39      	ldr	r2, [pc, #228]	@ (8002b14 <HAL_I2C_MspInit+0x1d4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d165      	bne.n	8002afe <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a32:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a44:	f107 0318 	add.w	r3, r7, #24
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f009 f85f 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002a54:	f7ff fc7e 	bl	8002354 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a58:	4b2c      	ldr	r3, [pc, #176]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 8002a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a5e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 8002a60:	f043 0320 	orr.w	r3, r3, #32
 8002a64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a68:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 8002a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a6e:	f003 0220 	and.w	r2, r3, #32
 8002a72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a84:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a86:	2303      	movs	r3, #3
 8002a88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8c:	2312      	movs	r3, #18
 8002a8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aa4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	481b      	ldr	r0, [pc, #108]	@ (8002b18 <HAL_I2C_MspInit+0x1d8>)
 8002aac:	f005 fb32 	bl	8008114 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ab0:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 8002ab2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ab6:	4a15      	ldr	r2, [pc, #84]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 8002ab8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002abc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002ac0:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <HAL_I2C_MspInit+0x1cc>)
 8002ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ac6:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002aca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002adc:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	2039      	movs	r0, #57	@ 0x39
 8002ae4:	f003 f9c6 	bl	8005e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002ae8:	2039      	movs	r0, #57	@ 0x39
 8002aea:	f003 f9dd 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	203a      	movs	r0, #58	@ 0x3a
 8002af4:	f003 f9be 	bl	8005e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002af8:	203a      	movs	r0, #58	@ 0x3a
 8002afa:	f003 f9d5 	bl	8005ea8 <HAL_NVIC_EnableIRQ>
}
 8002afe:	bf00      	nop
 8002b00:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40005400 	.word	0x40005400
 8002b0c:	46020c00 	.word	0x46020c00
 8002b10:	42021800 	.word	0x42021800
 8002b14:	40005800 	.word	0x40005800
 8002b18:	42021400 	.word	0x42021400

08002b1c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b0c6      	sub	sp, #280	@ 0x118
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b2a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b3c:	f107 0320 	add.w	r3, r7, #32
 8002b40:	22e0      	movs	r2, #224	@ 0xe0
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f00f fe24 	bl	8012792 <memset>
  if(hltdc->Instance==LTDC)
 8002b4a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b4e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a92      	ldr	r2, [pc, #584]	@ (8002da0 <HAL_LTDC_MspInit+0x284>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	f040 811b 	bne.w	8002d94 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0302 	mov.w	r3, #2
 8002b66:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8002b70:	2303      	movs	r3, #3
 8002b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8002b74:	2304      	movs	r3, #4
 8002b76:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8002b78:	2332      	movs	r3, #50	@ 0x32
 8002b7a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8002b80:	2302      	movs	r3, #2
 8002b82:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8002b84:	2308      	movs	r3, #8
 8002b86:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8002b90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b96:	f107 0320 	add.w	r3, r7, #32
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f008 ffb6 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8002ba6:	f7ff fbd5 	bl	8002354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002baa:	4b7e      	ldr	r3, [pc, #504]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002bac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002bb0:	4a7c      	ldr	r2, [pc, #496]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002bb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bb6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002bba:	4b7a      	ldr	r3, [pc, #488]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002bbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002bc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc8:	4b76      	ldr	r3, [pc, #472]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bce:	4a75      	ldr	r2, [pc, #468]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bd8:	4b72      	ldr	r3, [pc, #456]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bde:	f003 0202 	and.w	r2, r3, #2
 8002be2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002be6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002bf0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bf4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bf6:	4b6b      	ldr	r3, [pc, #428]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bfc:	4a69      	ldr	r2, [pc, #420]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002bfe:	f043 0310 	orr.w	r3, r3, #16
 8002c02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c06:	4b67      	ldr	r3, [pc, #412]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c0c:	f003 0210 	and.w	r2, r3, #16
 8002c10:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c22:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c24:	4b5f      	ldr	r3, [pc, #380]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002c2c:	f043 0308 	orr.w	r3, r3, #8
 8002c30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c34:	4b5b      	ldr	r3, [pc, #364]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c3a:	f003 0208 	and.w	r2, r3, #8
 8002c3e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c50:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c52:	4b54      	ldr	r3, [pc, #336]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c58:	4a52      	ldr	r2, [pc, #328]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c62:	4b50      	ldr	r3, [pc, #320]	@ (8002da4 <HAL_LTDC_MspInit+0x288>)
 8002c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c68:	f003 0204 	and.w	r2, r3, #4
 8002c6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c7e:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c80:	2304      	movs	r3, #4
 8002c82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002c98:	2308      	movs	r3, #8
 8002c9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4840      	ldr	r0, [pc, #256]	@ (8002da8 <HAL_LTDC_MspInit+0x28c>)
 8002ca6:	f005 fa35 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002caa:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8002cae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cca:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4836      	ldr	r0, [pc, #216]	@ (8002dac <HAL_LTDC_MspInit+0x290>)
 8002cd2:	f005 fa1f 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002cd6:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8002cda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cf6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	482c      	ldr	r0, [pc, #176]	@ (8002db0 <HAL_LTDC_MspInit+0x294>)
 8002cfe:	f005 fa09 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d02:	23c0      	movs	r3, #192	@ 0xc0
 8002d04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d20:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002d24:	4619      	mov	r1, r3
 8002d26:	4823      	ldr	r0, [pc, #140]	@ (8002db4 <HAL_LTDC_MspInit+0x298>)
 8002d28:	f005 f9f4 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002d46:	2308      	movs	r3, #8
 8002d48:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002d50:	4619      	mov	r1, r3
 8002d52:	4818      	ldr	r0, [pc, #96]	@ (8002db4 <HAL_LTDC_MspInit+0x298>)
 8002d54:	f005 f9de 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002d72:	2307      	movs	r3, #7
 8002d74:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	480a      	ldr	r0, [pc, #40]	@ (8002da8 <HAL_LTDC_MspInit+0x28c>)
 8002d80:	f005 f9c8 	bl	8008114 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	2087      	movs	r0, #135	@ 0x87
 8002d8a:	f003 f873 	bl	8005e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002d8e:	2087      	movs	r0, #135	@ 0x87
 8002d90:	f003 f88a 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002d94:	bf00      	nop
 8002d96:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40016800 	.word	0x40016800
 8002da4:	46020c00 	.word	0x46020c00
 8002da8:	42020400 	.word	0x42020400
 8002dac:	42021000 	.word	0x42021000
 8002db0:	42020c00 	.word	0x42020c00
 8002db4:	42020800 	.word	0x42020800

08002db8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b0bc      	sub	sp, #240	@ 0xf0
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	22e0      	movs	r2, #224	@ 0xe0
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f00f fce2 	bl	8012792 <memset>
  if(hrtc->Instance==RTC)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e48 <HAL_RTC_MspInit+0x90>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d132      	bne.n	8002e3e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002dd8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002de4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4618      	mov	r0, r3
 8002df2:	f008 fe8b 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002dfc:	f7ff faaa 	bl	8002354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_RTC_MspInit+0x94>)
 8002e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e06:	4a11      	ldr	r2, [pc, #68]	@ (8002e4c <HAL_RTC_MspInit+0x94>)
 8002e08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e10:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <HAL_RTC_MspInit+0x94>)
 8002e12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e16:	4a0d      	ldr	r2, [pc, #52]	@ (8002e4c <HAL_RTC_MspInit+0x94>)
 8002e18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e1c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002e20:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <HAL_RTC_MspInit+0x94>)
 8002e22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002e2e:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <HAL_RTC_MspInit+0x94>)
 8002e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e34:	4a05      	ldr	r2, [pc, #20]	@ (8002e4c <HAL_RTC_MspInit+0x94>)
 8002e36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002e3e:	bf00      	nop
 8002e40:	37f0      	adds	r7, #240	@ 0xf0
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	46007800 	.word	0x46007800
 8002e4c:	46020c00 	.word	0x46020c00

08002e50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e8c <HAL_TIM_PWM_MspInit+0x3c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10e      	bne.n	8002e80 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e62:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <HAL_TIM_PWM_MspInit+0x40>)
 8002e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e68:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <HAL_TIM_PWM_MspInit+0x40>)
 8002e6a:	f043 0302 	orr.w	r3, r3, #2
 8002e6e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e72:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <HAL_TIM_PWM_MspInit+0x40>)
 8002e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	46020c00 	.word	0x46020c00

08002e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x40>)
 8002ea8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002eac:	4a09      	ldr	r2, [pc, #36]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x40>)
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002eb6:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x40>)
 8002eb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40014000 	.word	0x40014000
 8002ed4:	46020c00 	.word	0x46020c00

08002ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 030c 	add.w	r3, r7, #12
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a12      	ldr	r2, [pc, #72]	@ (8002f40 <HAL_TIM_MspPostInit+0x68>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d11e      	bne.n	8002f38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002efa:	4b12      	ldr	r3, [pc, #72]	@ (8002f44 <HAL_TIM_MspPostInit+0x6c>)
 8002efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f00:	4a10      	ldr	r2, [pc, #64]	@ (8002f44 <HAL_TIM_MspPostInit+0x6c>)
 8002f02:	f043 0310 	orr.w	r3, r3, #16
 8002f06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <HAL_TIM_MspPostInit+0x6c>)
 8002f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002f18:	2340      	movs	r3, #64	@ 0x40
 8002f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	4619      	mov	r1, r3
 8002f32:	4805      	ldr	r0, [pc, #20]	@ (8002f48 <HAL_TIM_MspPostInit+0x70>)
 8002f34:	f005 f8ee 	bl	8008114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f38:	bf00      	nop
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40000400 	.word	0x40000400
 8002f44:	46020c00 	.word	0x46020c00
 8002f48:	42021000 	.word	0x42021000

08002f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0c2      	sub	sp, #264	@ 0x108
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f5a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	22e0      	movs	r2, #224	@ 0xe0
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f00f fc0c 	bl	8012792 <memset>
  if(huart->Instance==USART1)
 8002f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2f      	ldr	r2, [pc, #188]	@ (8003044 <HAL_UART_MspInit+0xf8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d155      	bne.n	8003038 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f8c:	f04f 0201 	mov.w	r2, #1
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f9c:	f107 0310 	add.w	r3, r7, #16
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f008 fdb3 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002fac:	f7ff f9d2 	bl	8002354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fb0:	4b25      	ldr	r3, [pc, #148]	@ (8003048 <HAL_UART_MspInit+0xfc>)
 8002fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fb6:	4a24      	ldr	r2, [pc, #144]	@ (8003048 <HAL_UART_MspInit+0xfc>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fbc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002fc0:	4b21      	ldr	r3, [pc, #132]	@ (8003048 <HAL_UART_MspInit+0xfc>)
 8002fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fce:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <HAL_UART_MspInit+0xfc>)
 8002fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003048 <HAL_UART_MspInit+0xfc>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fde:	4b1a      	ldr	r3, [pc, #104]	@ (8003048 <HAL_UART_MspInit+0xfc>)
 8002fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fe4:	f003 0201 	and.w	r2, r3, #1
 8002fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ff6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ffa:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ffc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003000:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003016:	2307      	movs	r3, #7
 8003018:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003020:	4619      	mov	r1, r3
 8003022:	480a      	ldr	r0, [pc, #40]	@ (800304c <HAL_UART_MspInit+0x100>)
 8003024:	f005 f876 	bl	8008114 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	2100      	movs	r1, #0
 800302c:	203d      	movs	r0, #61	@ 0x3d
 800302e:	f002 ff21 	bl	8005e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003032:	203d      	movs	r0, #61	@ 0x3d
 8003034:	f002 ff38 	bl	8005ea8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003038:	bf00      	nop
 800303a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40013800 	.word	0x40013800
 8003048:	46020c00 	.word	0x46020c00
 800304c:	42020000 	.word	0x42020000

08003050 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b0be      	sub	sp, #248	@ 0xf8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003058:	f107 0318 	add.w	r3, r7, #24
 800305c:	22e0      	movs	r2, #224	@ 0xe0
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f00f fb96 	bl	8012792 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a3a      	ldr	r2, [pc, #232]	@ (8003154 <HAL_PCD_MspInit+0x104>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d16d      	bne.n	800314c <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003070:	4b39      	ldr	r3, [pc, #228]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 8003072:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003076:	4a38      	ldr	r2, [pc, #224]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003080:	4b35      	ldr	r3, [pc, #212]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 8003082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0308 	mov.w	r3, #8
 8003096:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 800309a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800309e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030a2:	f107 0318 	add.w	r3, r7, #24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f008 fd30 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80030b2:	f7ff f94f 	bl	8002354 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80030b6:	200c      	movs	r0, #12
 80030b8:	f000 fc1c 	bl	80038f4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80030bc:	4b26      	ldr	r3, [pc, #152]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 80030be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c2:	4a25      	ldr	r2, [pc, #148]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 80030c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030cc:	4b22      	ldr	r3, [pc, #136]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 80030ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80030da:	4b1f      	ldr	r3, [pc, #124]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 80030dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 80030e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 80030ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f8:	4b17      	ldr	r3, [pc, #92]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11b      	bne.n	800313e <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4b14      	ldr	r3, [pc, #80]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 8003108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310c:	4a12      	ldr	r2, [pc, #72]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003116:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 8003118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003124:	f007 f9f8 	bl	800a518 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8003128:	f007 fa26 	bl	800a578 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 800312c:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003132:	4a09      	ldr	r2, [pc, #36]	@ (8003158 <HAL_PCD_MspInit+0x108>)
 8003134:	f023 0304 	bic.w	r3, r3, #4
 8003138:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800313c:	e003      	b.n	8003146 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800313e:	f007 f9eb 	bl	800a518 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8003142:	f007 fa19 	bl	800a578 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8003146:	2001      	movs	r0, #1
 8003148:	f000 fbc0 	bl	80038cc <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800314c:	bf00      	nop
 800314e:	37f8      	adds	r7, #248	@ 0xf8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	42040000 	.word	0x42040000
 8003158:	46020c00 	.word	0x46020c00

0800315c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b0a4      	sub	sp, #144	@ 0x90
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4abb      	ldr	r2, [pc, #748]	@ (8003458 <HAL_SAI_MspInit+0x2fc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	f040 80ca 	bne.w	8003304 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003170:	4bba      	ldr	r3, [pc, #744]	@ (800345c <HAL_SAI_MspInit+0x300>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10e      	bne.n	8003196 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003178:	4bb9      	ldr	r3, [pc, #740]	@ (8003460 <HAL_SAI_MspInit+0x304>)
 800317a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800317e:	4ab8      	ldr	r2, [pc, #736]	@ (8003460 <HAL_SAI_MspInit+0x304>)
 8003180:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003184:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003188:	4bb5      	ldr	r3, [pc, #724]	@ (8003460 <HAL_SAI_MspInit+0x304>)
 800318a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800318e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8003196:	4bb1      	ldr	r3, [pc, #708]	@ (800345c <HAL_SAI_MspInit+0x300>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	4aaf      	ldr	r2, [pc, #700]	@ (800345c <HAL_SAI_MspInit+0x300>)
 800319e:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80031a0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80031a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80031b8:	230d      	movs	r3, #13
 80031ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80031c2:	4619      	mov	r1, r3
 80031c4:	48a7      	ldr	r0, [pc, #668]	@ (8003464 <HAL_SAI_MspInit+0x308>)
 80031c6:	f004 ffa5 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80031ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031dc:	2303      	movs	r3, #3
 80031de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80031e2:	230d      	movs	r3, #13
 80031e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80031ec:	4619      	mov	r1, r3
 80031ee:	489d      	ldr	r0, [pc, #628]	@ (8003464 <HAL_SAI_MspInit+0x308>)
 80031f0:	f004 ff90 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800320c:	230d      	movs	r3, #13
 800320e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003212:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003216:	4619      	mov	r1, r3
 8003218:	4893      	ldr	r0, [pc, #588]	@ (8003468 <HAL_SAI_MspInit+0x30c>)
 800321a:	f004 ff7b 	bl	8008114 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800321e:	2321      	movs	r3, #33	@ 0x21
 8003220:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8003222:	2326      	movs	r3, #38	@ 0x26
 8003224:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800322a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800322e:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8003230:	2308      	movs	r3, #8
 8003232:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8003234:	2300      	movs	r3, #0
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8003238:	2302      	movs	r3, #2
 800323a:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800323c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003240:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8003242:	2301      	movs	r3, #1
 8003244:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8003246:	2301      	movs	r3, #1
 8003248:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800324a:	2300      	movs	r3, #0
 800324c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800324e:	2300      	movs	r3, #0
 8003250:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8003252:	2300      	movs	r3, #0
 8003254:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8003256:	2300      	movs	r3, #0
 8003258:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800325a:	2300      	movs	r3, #0
 800325c:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800325e:	2300      	movs	r3, #0
 8003260:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8003262:	f107 0310 	add.w	r3, r7, #16
 8003266:	4981      	ldr	r1, [pc, #516]	@ (800346c <HAL_SAI_MspInit+0x310>)
 8003268:	4618      	mov	r0, r3
 800326a:	f004 f831 	bl	80072d0 <HAL_DMAEx_List_BuildNode>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8003274:	f7ff f86e 	bl	8002354 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8003278:	4a7c      	ldr	r2, [pc, #496]	@ (800346c <HAL_SAI_MspInit+0x310>)
 800327a:	2100      	movs	r1, #0
 800327c:	487c      	ldr	r0, [pc, #496]	@ (8003470 <HAL_SAI_MspInit+0x314>)
 800327e:	f004 f853 	bl	8007328 <HAL_DMAEx_List_InsertNode>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 8003288:	f7ff f864 	bl	8002354 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 800328c:	4878      	ldr	r0, [pc, #480]	@ (8003470 <HAL_SAI_MspInit+0x314>)
 800328e:	f004 f914 	bl	80074ba <HAL_DMAEx_List_SetCircularMode>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 8003298:	f7ff f85c 	bl	8002354 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800329c:	4b75      	ldr	r3, [pc, #468]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 800329e:	4a76      	ldr	r2, [pc, #472]	@ (8003478 <HAL_SAI_MspInit+0x31c>)
 80032a0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80032a2:	4b74      	ldr	r3, [pc, #464]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 80032a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032a8:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80032aa:	4b72      	ldr	r3, [pc, #456]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80032b0:	4b70      	ldr	r3, [pc, #448]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80032b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80032bc:	4b6d      	ldr	r3, [pc, #436]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 80032be:	2281      	movs	r2, #129	@ 0x81
 80032c0:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80032c2:	486c      	ldr	r0, [pc, #432]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 80032c4:	f003 fe44 	bl	8006f50 <HAL_DMAEx_List_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 80032ce:	f7ff f841 	bl	8002354 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 80032d2:	4967      	ldr	r1, [pc, #412]	@ (8003470 <HAL_SAI_MspInit+0x314>)
 80032d4:	4867      	ldr	r0, [pc, #412]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 80032d6:	f004 f951 	bl	800757c <HAL_DMAEx_List_LinkQ>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 80032e0:	f7ff f838 	bl	8002354 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a63      	ldr	r2, [pc, #396]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 80032e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80032ec:	4a61      	ldr	r2, [pc, #388]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80032f2:	2110      	movs	r1, #16
 80032f4:	485f      	ldr	r0, [pc, #380]	@ (8003474 <HAL_SAI_MspInit+0x318>)
 80032f6:	f003 fa39 	bl	800676c <HAL_DMA_ConfigChannelAttributes>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8003300:	f7ff f828 	bl	8002354 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a5c      	ldr	r2, [pc, #368]	@ (800347c <HAL_SAI_MspInit+0x320>)
 800330a:	4293      	cmp	r3, r2
 800330c:	f040 80eb 	bne.w	80034e6 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003310:	4b52      	ldr	r3, [pc, #328]	@ (800345c <HAL_SAI_MspInit+0x300>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10e      	bne.n	8003336 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003318:	4b51      	ldr	r3, [pc, #324]	@ (8003460 <HAL_SAI_MspInit+0x304>)
 800331a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800331e:	4a50      	ldr	r2, [pc, #320]	@ (8003460 <HAL_SAI_MspInit+0x304>)
 8003320:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003324:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003328:	4b4d      	ldr	r3, [pc, #308]	@ (8003460 <HAL_SAI_MspInit+0x304>)
 800332a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800332e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8003336:	4b49      	ldr	r3, [pc, #292]	@ (800345c <HAL_SAI_MspInit+0x300>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	4a47      	ldr	r2, [pc, #284]	@ (800345c <HAL_SAI_MspInit+0x300>)
 800333e:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003340:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003344:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003352:	2303      	movs	r3, #3
 8003354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003358:	230d      	movs	r3, #13
 800335a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003362:	4619      	mov	r1, r3
 8003364:	4846      	ldr	r0, [pc, #280]	@ (8003480 <HAL_SAI_MspInit+0x324>)
 8003366:	f004 fed5 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800336a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800336e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337c:	2303      	movs	r3, #3
 800337e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003382:	230d      	movs	r3, #13
 8003384:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003388:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800338c:	4619      	mov	r1, r3
 800338e:	483d      	ldr	r0, [pc, #244]	@ (8003484 <HAL_SAI_MspInit+0x328>)
 8003390:	f004 fec0 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003394:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003398:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80033ac:	230d      	movs	r3, #13
 80033ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80033b6:	4619      	mov	r1, r3
 80033b8:	4832      	ldr	r0, [pc, #200]	@ (8003484 <HAL_SAI_MspInit+0x328>)
 80033ba:	f004 feab 	bl	8008114 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80033be:	2321      	movs	r3, #33	@ 0x21
 80033c0:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80033c2:	2327      	movs	r3, #39	@ 0x27
 80033c4:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80033d2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80033d8:	2302      	movs	r3, #2
 80033da:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80033dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80033e2:	2301      	movs	r3, #1
 80033e4:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80033ee:	2300      	movs	r3, #0
 80033f0:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80033f6:	2300      	movs	r3, #0
 80033f8:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80033fe:	2300      	movs	r3, #0
 8003400:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8003402:	f107 0310 	add.w	r3, r7, #16
 8003406:	4920      	ldr	r1, [pc, #128]	@ (8003488 <HAL_SAI_MspInit+0x32c>)
 8003408:	4618      	mov	r0, r3
 800340a:	f003 ff61 	bl	80072d0 <HAL_DMAEx_List_BuildNode>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8003414:	f7fe ff9e 	bl	8002354 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8003418:	4a1b      	ldr	r2, [pc, #108]	@ (8003488 <HAL_SAI_MspInit+0x32c>)
 800341a:	2100      	movs	r1, #0
 800341c:	481b      	ldr	r0, [pc, #108]	@ (800348c <HAL_SAI_MspInit+0x330>)
 800341e:	f003 ff83 	bl	8007328 <HAL_DMAEx_List_InsertNode>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8003428:	f7fe ff94 	bl	8002354 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 800342c:	4817      	ldr	r0, [pc, #92]	@ (800348c <HAL_SAI_MspInit+0x330>)
 800342e:	f004 f844 	bl	80074ba <HAL_DMAEx_List_SetCircularMode>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8003438:	f7fe ff8c 	bl	8002354 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <HAL_SAI_MspInit+0x334>)
 800343e:	4a15      	ldr	r2, [pc, #84]	@ (8003494 <HAL_SAI_MspInit+0x338>)
 8003440:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8003442:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <HAL_SAI_MspInit+0x334>)
 8003444:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003448:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800344a:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_SAI_MspInit+0x334>)
 800344c:	2200      	movs	r2, #0
 800344e:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8003450:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <HAL_SAI_MspInit+0x334>)
 8003452:	2200      	movs	r2, #0
 8003454:	641a      	str	r2, [r3, #64]	@ 0x40
 8003456:	e01f      	b.n	8003498 <HAL_SAI_MspInit+0x33c>
 8003458:	40015804 	.word	0x40015804
 800345c:	20033c60 	.word	0x20033c60
 8003460:	46020c00 	.word	0x46020c00
 8003464:	42020400 	.word	0x42020400
 8003468:	42021800 	.word	0x42021800
 800346c:	2000060c 	.word	0x2000060c
 8003470:	20000630 	.word	0x20000630
 8003474:	20000648 	.word	0x20000648
 8003478:	400201d0 	.word	0x400201d0
 800347c:	40015824 	.word	0x40015824
 8003480:	42020000 	.word	0x42020000
 8003484:	42020800 	.word	0x42020800
 8003488:	200006c0 	.word	0x200006c0
 800348c:	200006e4 	.word	0x200006e4
 8003490:	200006fc 	.word	0x200006fc
 8003494:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003498:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <HAL_SAI_MspInit+0x394>)
 800349a:	2200      	movs	r2, #0
 800349c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800349e:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <HAL_SAI_MspInit+0x394>)
 80034a0:	2281      	movs	r2, #129	@ 0x81
 80034a2:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80034a4:	4812      	ldr	r0, [pc, #72]	@ (80034f0 <HAL_SAI_MspInit+0x394>)
 80034a6:	f003 fd53 	bl	8006f50 <HAL_DMAEx_List_Init>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 80034b0:	f7fe ff50 	bl	8002354 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80034b4:	490f      	ldr	r1, [pc, #60]	@ (80034f4 <HAL_SAI_MspInit+0x398>)
 80034b6:	480e      	ldr	r0, [pc, #56]	@ (80034f0 <HAL_SAI_MspInit+0x394>)
 80034b8:	f004 f860 	bl	800757c <HAL_DMAEx_List_LinkQ>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 80034c2:	f7fe ff47 	bl	8002354 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a09      	ldr	r2, [pc, #36]	@ (80034f0 <HAL_SAI_MspInit+0x394>)
 80034ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80034ce:	4a08      	ldr	r2, [pc, #32]	@ (80034f0 <HAL_SAI_MspInit+0x394>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80034d4:	2110      	movs	r1, #16
 80034d6:	4806      	ldr	r0, [pc, #24]	@ (80034f0 <HAL_SAI_MspInit+0x394>)
 80034d8:	f003 f948 	bl	800676c <HAL_DMA_ConfigChannelAttributes>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 80034e2:	f7fe ff37 	bl	8002354 <Error_Handler>
    }

    }
}
 80034e6:	bf00      	nop
 80034e8:	3790      	adds	r7, #144	@ 0x90
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200006fc 	.word	0x200006fc
 80034f4:	200006e4 	.word	0x200006e4

080034f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <NMI_Handler+0x4>

08003500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <HardFault_Handler+0x4>

08003508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <MemManage_Handler+0x4>

08003510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <BusFault_Handler+0x4>

08003518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <UsageFault_Handler+0x4>

08003520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800354e:	f000 f979 	bl	8003844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}

08003556 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 800355a:	2002      	movs	r0, #2
 800355c:	f004 ffe4 	bl	8008528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}

08003564 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8003568:	2010      	movs	r0, #16
 800356a:	f004 ffdd 	bl	8008528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}

08003572 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8003576:	2020      	movs	r0, #32
 8003578:	f004 ffd6 	bl	8008528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}

08003580 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003584:	4802      	ldr	r0, [pc, #8]	@ (8003590 <GPDMA1_Channel0_IRQHandler+0x10>)
 8003586:	f002 ff82 	bl	800648e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200001a4 	.word	0x200001a4

08003594 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8003598:	4802      	ldr	r0, [pc, #8]	@ (80035a4 <GPDMA1_Channel1_IRQHandler+0x10>)
 800359a:	f002 ff78 	bl	800648e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200006fc 	.word	0x200006fc

080035a8 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80035ac:	4802      	ldr	r0, [pc, #8]	@ (80035b8 <GPDMA1_Channel2_IRQHandler+0x10>)
 80035ae:	f002 ff6e 	bl	800648e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	2000021c 	.word	0x2000021c

080035bc <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80035c0:	4802      	ldr	r0, [pc, #8]	@ (80035cc <GPDMA1_Channel3_IRQHandler+0x10>)
 80035c2:	f002 ff64 	bl	800648e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000648 	.word	0x20000648

080035d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80035d4:	4802      	ldr	r0, [pc, #8]	@ (80035e0 <ADC1_2_IRQHandler+0x10>)
 80035d6:	f001 f925 	bl	8004824 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000050 	.word	0x20000050

080035e4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80035e8:	4802      	ldr	r0, [pc, #8]	@ (80035f4 <I2C2_EV_IRQHandler+0x10>)
 80035ea:	f005 f969 	bl	80088c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200003b0 	.word	0x200003b0

080035f8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80035fc:	4802      	ldr	r0, [pc, #8]	@ (8003608 <I2C2_ER_IRQHandler+0x10>)
 80035fe:	f005 f979 	bl	80088f4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200003b0 	.word	0x200003b0

0800360c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003610:	4802      	ldr	r0, [pc, #8]	@ (800361c <USART1_IRQHandler+0x10>)
 8003612:	f00d fc05 	bl	8010e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	2000080c 	.word	0x2000080c

08003620 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003624:	4802      	ldr	r0, [pc, #8]	@ (8003630 <LTDC_IRQHandler+0x10>)
 8003626:	f006 fae7 	bl	8009bf8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000404 	.word	0x20000404

08003634 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003638:	4b18      	ldr	r3, [pc, #96]	@ (800369c <SystemInit+0x68>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363e:	4a17      	ldr	r2, [pc, #92]	@ (800369c <SystemInit+0x68>)
 8003640:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003644:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003648:	4b15      	ldr	r3, [pc, #84]	@ (80036a0 <SystemInit+0x6c>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800364e:	4b14      	ldr	r3, [pc, #80]	@ (80036a0 <SystemInit+0x6c>)
 8003650:	2200      	movs	r2, #0
 8003652:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003654:	4b12      	ldr	r3, [pc, #72]	@ (80036a0 <SystemInit+0x6c>)
 8003656:	2200      	movs	r2, #0
 8003658:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800365a:	4b11      	ldr	r3, [pc, #68]	@ (80036a0 <SystemInit+0x6c>)
 800365c:	2200      	movs	r2, #0
 800365e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <SystemInit+0x6c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0e      	ldr	r2, [pc, #56]	@ (80036a0 <SystemInit+0x6c>)
 8003666:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800366a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800366e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <SystemInit+0x6c>)
 8003672:	2200      	movs	r2, #0
 8003674:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003676:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <SystemInit+0x6c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a09      	ldr	r2, [pc, #36]	@ (80036a0 <SystemInit+0x6c>)
 800367c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003680:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003682:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <SystemInit+0x6c>)
 8003684:	2200      	movs	r2, #0
 8003686:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003688:	4b04      	ldr	r3, [pc, #16]	@ (800369c <SystemInit+0x68>)
 800368a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800368e:	609a      	str	r2, [r3, #8]
  #endif
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000ed00 	.word	0xe000ed00
 80036a0:	46020c00 	.word	0x46020c00

080036a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80036a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036dc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80036a8:	f7ff ffc4 	bl	8003634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80036ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80036ae:	e003      	b.n	80036b8 <LoopCopyDataInit>

080036b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80036b0:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80036b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80036b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80036b6:	3104      	adds	r1, #4

080036b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80036b8:	480a      	ldr	r0, [pc, #40]	@ (80036e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80036ba:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80036bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80036be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80036c0:	d3f6      	bcc.n	80036b0 <CopyDataInit>
	ldr	r2, =_sbss
 80036c2:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80036c4:	e002      	b.n	80036cc <LoopFillZerobss>

080036c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80036c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80036c8:	f842 3b04 	str.w	r3, [r2], #4

080036cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80036cc:	4b08      	ldr	r3, [pc, #32]	@ (80036f0 <LoopForever+0x16>)
	cmp	r2, r3
 80036ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80036d0:	d3f9      	bcc.n	80036c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036d2:	f00f f867 	bl	80127a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036d6:	f7fd f8d5 	bl	8000884 <main>

080036da <LoopForever>:

LoopForever:
    b LoopForever
 80036da:	e7fe      	b.n	80036da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80036dc:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80036e0:	08012914 	.word	0x08012914
	ldr	r0, =_sdata
 80036e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80036e8:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 80036ec:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 80036f0:	20033c68 	.word	0x20033c68

080036f4 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036f4:	e7fe      	b.n	80036f4 <ADC4_IRQHandler>
	...

080036f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036fc:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <HAL_Init+0x50>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a11      	ldr	r2, [pc, #68]	@ (8003748 <HAL_Init+0x50>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003708:	2003      	movs	r0, #3
 800370a:	f002 fba8 	bl	8005e5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800370e:	f008 f81f 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 8003712:	4602      	mov	r2, r0
 8003714:	4b0d      	ldr	r3, [pc, #52]	@ (800374c <HAL_Init+0x54>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	490c      	ldr	r1, [pc, #48]	@ (8003750 <HAL_Init+0x58>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	4a0b      	ldr	r2, [pc, #44]	@ (8003754 <HAL_Init+0x5c>)
 8003726:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003728:	2004      	movs	r0, #4
 800372a:	f002 fbed 	bl	8005f08 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800372e:	200f      	movs	r0, #15
 8003730:	f000 f812 	bl	8003758 <HAL_InitTick>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e002      	b.n	8003744 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800373e:	f7fe fe0f 	bl	8002360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40022000 	.word	0x40022000
 800374c:	46020c00 	.word	0x46020c00
 8003750:	08012804 	.word	0x08012804
 8003754:	20000028 	.word	0x20000028

08003758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003764:	4b33      	ldr	r3, [pc, #204]	@ (8003834 <HAL_InitTick+0xdc>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e05c      	b.n	800382a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003770:	4b31      	ldr	r3, [pc, #196]	@ (8003838 <HAL_InitTick+0xe0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d10c      	bne.n	8003796 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800377c:	4b2f      	ldr	r3, [pc, #188]	@ (800383c <HAL_InitTick+0xe4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b2c      	ldr	r3, [pc, #176]	@ (8003834 <HAL_InitTick+0xdc>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800378a:	fbb3 f3f1 	udiv	r3, r3, r1
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e037      	b.n	8003806 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003796:	f002 fc0f 	bl	8005fb8 <HAL_SYSTICK_GetCLKSourceConfig>
 800379a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d023      	beq.n	80037ea <HAL_InitTick+0x92>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d82d      	bhi.n	8003804 <HAL_InitTick+0xac>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_InitTick+0x5e>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d00d      	beq.n	80037d0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80037b4:	e026      	b.n	8003804 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80037b6:	4b21      	ldr	r3, [pc, #132]	@ (800383c <HAL_InitTick+0xe4>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <HAL_InitTick+0xdc>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	4619      	mov	r1, r3
 80037c0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80037c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	60fb      	str	r3, [r7, #12]
        break;
 80037ce:	e01a      	b.n	8003806 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80037d0:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <HAL_InitTick+0xdc>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037da:	fbb3 f3f2 	udiv	r3, r3, r2
 80037de:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	60fb      	str	r3, [r7, #12]
        break;
 80037e8:	e00d      	b.n	8003806 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80037ea:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_InitTick+0xdc>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	60fb      	str	r3, [r7, #12]
        break;
 8003802:	e000      	b.n	8003806 <HAL_InitTick+0xae>
        break;
 8003804:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f002 fb5c 	bl	8005ec4 <HAL_SYSTICK_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e009      	b.n	800382a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003816:	2200      	movs	r2, #0
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	f04f 30ff 	mov.w	r0, #4294967295
 800381e:	f002 fb29 	bl	8005e74 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003822:	4a07      	ldr	r2, [pc, #28]	@ (8003840 <HAL_InitTick+0xe8>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000030 	.word	0x20000030
 8003838:	e000e010 	.word	0xe000e010
 800383c:	20000028 	.word	0x20000028
 8003840:	2000002c 	.word	0x2000002c

08003844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003848:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_IncTick+0x20>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_IncTick+0x24>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4413      	add	r3, r2
 8003854:	4a04      	ldr	r2, [pc, #16]	@ (8003868 <HAL_IncTick+0x24>)
 8003856:	6013      	str	r3, [r2, #0]
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000030 	.word	0x20000030
 8003868:	20033c64 	.word	0x20033c64

0800386c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return uwTick;
 8003870:	4b03      	ldr	r3, [pc, #12]	@ (8003880 <HAL_GetTick+0x14>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20033c64 	.word	0x20033c64

08003884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800388c:	f7ff ffee 	bl	800386c <HAL_GetTick>
 8003890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d005      	beq.n	80038aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <HAL_Delay+0x44>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038aa:	bf00      	nop
 80038ac:	f7ff ffde 	bl	800386c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d8f7      	bhi.n	80038ac <HAL_Delay+0x28>
  {
  }
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000030 	.word	0x20000030

080038cc <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 80038d4:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80038d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d8:	f023 0201 	bic.w	r2, r3, #1
 80038dc:	4904      	ldr	r1, [pc, #16]	@ (80038f0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	46000400 	.word	0x46000400

080038f4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80038fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003900:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8003904:	4904      	ldr	r1, [pc, #16]	@ (8003918 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4313      	orrs	r3, r2
 800390a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	46000400 	.word	0x46000400

0800391c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	609a      	str	r2, [r3, #8]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <LL_ADC_SetResolution+0x3c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d104      	bne.n	80039a4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3b01      	subs	r3, #1
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f023 020c 	bic.w	r2, r3, #12
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	46021000 	.word	0x46021000

080039c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3360      	adds	r3, #96	@ 0x60
 80039d6:	461a      	mov	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	430b      	orrs	r3, r1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b085      	sub	sp, #20
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3360      	adds	r3, #96	@ 0x60
 8003a14:	461a      	mov	r2, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b087      	sub	sp, #28
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3360      	adds	r3, #96	@ 0x60
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	601a      	str	r2, [r3, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3360      	adds	r3, #96	@ 0x60
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	601a      	str	r2, [r3, #0]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b087      	sub	sp, #28
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3360      	adds	r3, #96	@ 0x60
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	601a      	str	r2, [r3, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ae6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	d002      	beq.n	8003b06 <LL_ADC_SetGainCompensation+0x32>
 8003b00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b04:	e000      	b.n	8003b08 <LL_ADC_SetGainCompensation+0x34>
 8003b06:	2200      	movs	r2, #0
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2107      	movs	r1, #7
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	401a      	ands	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	431a      	orrs	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	@ 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c3c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d020      	beq.n	8003bd6 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3330      	adds	r3, #48	@ 0x30
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	4413      	add	r3, r2
 8003ba6:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	211f      	movs	r1, #31
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	401a      	ands	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	0e9b      	lsrs	r3, r3, #26
 8003bc0:	f003 011f 	and.w	r1, r3, #31
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003bd4:	e02b      	b.n	8003c2e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	210f      	movs	r1, #15
 8003be2:	fa01 f303 	lsl.w	r3, r1, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	401a      	ands	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	0e9b      	lsrs	r3, r3, #26
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	e010      	b.n	8003c20 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	613b      	str	r3, [r7, #16]
  return result;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003c14:	2320      	movs	r3, #32
 8003c16:	e003      	b.n	8003c20 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	f001 011f 	and.w	r1, r1, #31
 8003c26:	408b      	lsls	r3, r1
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c2e:	bf00      	nop
 8003c30:	3724      	adds	r7, #36	@ 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	46021000 	.word	0x46021000

08003c40 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d107      	bne.n	8003c64 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	0e9b      	lsrs	r3, r3, #26
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	e015      	b.n	8003c90 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	60fb      	str	r3, [r7, #12]
  return result;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8003c7a:	2320      	movs	r3, #32
 8003c7c:	e003      	b.n	8003c86 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c9a:	bf00      	nop
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b08b      	sub	sp, #44	@ 0x2c
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a2d      	ldr	r2, [pc, #180]	@ (8003ddc <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d042      	beq.n	8003db2 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d104      	bne.n	8003d40 <LL_ADC_SetChannelSamplingTime+0x28>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	0e9b      	lsrs	r3, r3, #26
 8003d3a:	f003 021f 	and.w	r2, r3, #31
 8003d3e:	e011      	b.n	8003d64 <LL_ADC_SetChannelSamplingTime+0x4c>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	617b      	str	r3, [r7, #20]
  return result;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003d56:	2320      	movs	r3, #32
 8003d58:	e003      	b.n	8003d62 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fab3 f383 	clz	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	0e5b      	lsrs	r3, r3, #25
 8003d68:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	1ad2      	subs	r2, r2, r3
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3314      	adds	r3, #20
 8003d82:	461a      	mov	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	0e5b      	lsrs	r3, r3, #25
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	4413      	add	r3, r2
 8003d90:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	2107      	movs	r1, #7
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	401a      	ands	r2, r3
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	431a      	orrs	r2, r3
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003db0:	e00e      	b.n	8003dd0 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	401a      	ands	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	0219      	lsls	r1, r3, #8
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	400b      	ands	r3, r1
 8003dc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	615a      	str	r2, [r3, #20]
}
 8003dd0:	bf00      	nop
 8003dd2:	372c      	adds	r7, #44	@ 0x2c
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	46021000 	.word	0x46021000

08003de0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f003 0318 	and.w	r3, r3, #24
 8003e02:	4908      	ldr	r1, [pc, #32]	@ (8003e24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e04:	40d9      	lsrs	r1, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	400b      	ands	r3, r1
 8003e0a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	000fffff 	.word	0x000fffff

08003e28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 031f 	and.w	r3, r3, #31
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003e70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6093      	str	r3, [r2, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e98:	d101      	bne.n	8003e9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ebc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ec0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ee8:	d101      	bne.n	8003eee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <LL_ADC_IsEnabled+0x18>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <LL_ADC_IsEnabled+0x1a>
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f5e:	f043 0204 	orr.w	r2, r3, #4
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	609a      	str	r2, [r3, #8]
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d101      	bne.n	8003f8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d101      	bne.n	8003fb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b08b      	sub	sp, #44	@ 0x2c
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e2ce      	b.n	800457e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a95      	ldr	r2, [pc, #596]	@ (8004244 <HAL_ADC_Init+0x284>)
 8003fee:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fe f9cb 	bl	8002394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff37 	bl	8003e84 <LL_ADC_IsDeepPowerDownEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d004      	beq.n	8004026 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff1d 	bl	8003e60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff52 	bl	8003ed4 <LL_ADC_IsInternalRegulatorEnabled>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d115      	bne.n	8004062 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff36 	bl	8003eac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004040:	4b81      	ldr	r3, [pc, #516]	@ (8004248 <HAL_ADC_Init+0x288>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	4a81      	ldr	r2, [pc, #516]	@ (800424c <HAL_ADC_Init+0x28c>)
 8004048:	fba2 2303 	umull	r2, r3, r2, r3
 800404c:	099b      	lsrs	r3, r3, #6
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004054:	e002      	b.n	800405c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b01      	subs	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f9      	bne.n	8004056 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ff34 	bl	8003ed4 <LL_ADC_IsInternalRegulatorEnabled>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10e      	bne.n	8004090 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004076:	f043 0210 	orr.w	r2, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff6c 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 800409a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f040 825f 	bne.w	8004568 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f040 825b 	bne.w	8004568 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80040ba:	f043 0202 	orr.w	r2, r3, #2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff ff2c 	bl	8003f24 <LL_ADC_IsEnabled>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d14f      	bne.n	8004172 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004244 <HAL_ADC_Init+0x284>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d037      	beq.n	800414c <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a5b      	ldr	r2, [pc, #364]	@ (8004250 <HAL_ADC_Init+0x290>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_ADC_Init+0x130>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5a      	ldr	r2, [pc, #360]	@ (8004254 <HAL_ADC_Init+0x294>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d10e      	bne.n	800410e <HAL_ADC_Init+0x14e>
 80040f0:	4857      	ldr	r0, [pc, #348]	@ (8004250 <HAL_ADC_Init+0x290>)
 80040f2:	f7ff ff17 	bl	8003f24 <LL_ADC_IsEnabled>
 80040f6:	4604      	mov	r4, r0
 80040f8:	4856      	ldr	r0, [pc, #344]	@ (8004254 <HAL_ADC_Init+0x294>)
 80040fa:	f7ff ff13 	bl	8003f24 <LL_ADC_IsEnabled>
 80040fe:	4603      	mov	r3, r0
 8004100:	4323      	orrs	r3, r4
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	e008      	b.n	8004120 <HAL_ADC_Init+0x160>
 800410e:	484d      	ldr	r0, [pc, #308]	@ (8004244 <HAL_ADC_Init+0x284>)
 8004110:	f7ff ff08 	bl	8003f24 <LL_ADC_IsEnabled>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf0c      	ite	eq
 800411a:	2301      	moveq	r3, #1
 800411c:	2300      	movne	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d026      	beq.n	8004172 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a49      	ldr	r2, [pc, #292]	@ (8004250 <HAL_ADC_Init+0x290>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_ADC_Init+0x178>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a48      	ldr	r2, [pc, #288]	@ (8004254 <HAL_ADC_Init+0x294>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_ADC_Init+0x17c>
 8004138:	4a47      	ldr	r2, [pc, #284]	@ (8004258 <HAL_ADC_Init+0x298>)
 800413a:	e000      	b.n	800413e <HAL_ADC_Init+0x17e>
 800413c:	4a47      	ldr	r2, [pc, #284]	@ (800425c <HAL_ADC_Init+0x29c>)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f7ff fbe9 	bl	800391c <LL_ADC_SetCommonClock>
 800414a:	e012      	b.n	8004172 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f7ff fc14 	bl	8003984 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800415c:	4b3f      	ldr	r3, [pc, #252]	@ (800425c <HAL_ADC_Init+0x29c>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800416c:	493b      	ldr	r1, [pc, #236]	@ (800425c <HAL_ADC_Init+0x29c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a33      	ldr	r2, [pc, #204]	@ (8004244 <HAL_ADC_Init+0x284>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d010      	beq.n	800419e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004182:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004188:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800418e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004196:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8004198:	4313      	orrs	r3, r2
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	e035      	b.n	800420a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7f1b      	ldrb	r3, [r3, #28]
 80041a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041aa:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041ac:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	d002      	beq.n	80041bc <HAL_ADC_Init+0x1fc>
 80041b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80041ba:	e000      	b.n	80041be <HAL_ADC_Init+0x1fe>
 80041bc:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80041be:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80041c4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	da04      	bge.n	80041d8 <HAL_ADC_Init+0x218>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041d6:	e001      	b.n	80041dc <HAL_ADC_Init+0x21c>
 80041d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80041dc:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	491b      	ldr	r1, [pc, #108]	@ (8004250 <HAL_ADC_Init+0x290>)
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d004      	beq.n	80041f2 <HAL_ADC_Init+0x232>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4919      	ldr	r1, [pc, #100]	@ (8004254 <HAL_ADC_Init+0x294>)
 80041ee:	428b      	cmp	r3, r1
 80041f0:	d103      	bne.n	80041fa <HAL_ADC_Init+0x23a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041f8:	e003      	b.n	8004202 <HAL_ADC_Init+0x242>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004200:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8004202:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	4313      	orrs	r3, r2
 8004208:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004210:	2b01      	cmp	r3, #1
 8004212:	d131      	bne.n	8004278 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0a      	ldr	r2, [pc, #40]	@ (8004244 <HAL_ADC_Init+0x284>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d007      	beq.n	800422e <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	3b01      	subs	r3, #1
 8004224:	045b      	lsls	r3, r3, #17
 8004226:	6a3a      	ldr	r2, [r7, #32]
 8004228:	4313      	orrs	r3, r2
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	e024      	b.n	8004278 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d113      	bne.n	8004260 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423e:	623b      	str	r3, [r7, #32]
 8004240:	e01a      	b.n	8004278 <HAL_ADC_Init+0x2b8>
 8004242:	bf00      	nop
 8004244:	46021000 	.word	0x46021000
 8004248:	20000028 	.word	0x20000028
 800424c:	053e2d63 	.word	0x053e2d63
 8004250:	42028000 	.word	0x42028000
 8004254:	42028100 	.word	0x42028100
 8004258:	42028300 	.word	0x42028300
 800425c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004270:	f043 0201 	orr.w	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a75      	ldr	r2, [pc, #468]	@ (8004454 <HAL_ADC_Init+0x494>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d018      	beq.n	80042b4 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004296:	4313      	orrs	r3, r2
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	4313      	orrs	r3, r2
 800429c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004458 <HAL_ADC_Init+0x498>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	6a39      	ldr	r1, [r7, #32]
 80042ae:	430b      	orrs	r3, r1
 80042b0:	60d3      	str	r3, [r2, #12]
 80042b2:	e031      	b.n	8004318 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c8:	4313      	orrs	r3, r2
 80042ca:	6a3a      	ldr	r2, [r7, #32]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	4b61      	ldr	r3, [pc, #388]	@ (800445c <HAL_ADC_Init+0x49c>)
 80042d8:	4013      	ands	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	6a39      	ldr	r1, [r7, #32]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1a      	ldr	r2, [r3, #32]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a4d      	ldr	r2, [pc, #308]	@ (8004454 <HAL_ADC_Init+0x494>)
 800431e:	4293      	cmp	r3, r2
 8004320:	f000 80a4 	beq.w	800446c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fe22 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 800432e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fe2f 	bl	8003f98 <LL_ADC_INJ_IsConversionOngoing>
 800433a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d166      	bne.n	8004410 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d163      	bne.n	8004410 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	7f1b      	ldrb	r3, [r3, #28]
 800434c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4943      	ldr	r1, [pc, #268]	@ (8004460 <HAL_ADC_Init+0x4a0>)
 8004354:	428b      	cmp	r3, r1
 8004356:	d004      	beq.n	8004362 <HAL_ADC_Init+0x3a2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4941      	ldr	r1, [pc, #260]	@ (8004464 <HAL_ADC_Init+0x4a4>)
 800435e:	428b      	cmp	r3, r1
 8004360:	d102      	bne.n	8004368 <HAL_ADC_Init+0x3a8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004366:	e002      	b.n	800436e <HAL_ADC_Init+0x3ae>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800436e:	4313      	orrs	r3, r2
 8004370:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800437c:	f023 0303 	bic.w	r3, r3, #3
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	6a39      	ldr	r1, [r7, #32]
 8004386:	430b      	orrs	r3, r1
 8004388:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	4619      	mov	r1, r3
 800439c:	4610      	mov	r0, r2
 800439e:	f7ff fb99 	bl	8003ad4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d11e      	bne.n	80043ea <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b0:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004468 <HAL_ADC_Init+0x4a8>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80043c0:	0411      	lsls	r1, r2, #16
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043c6:	4311      	orrs	r1, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80043cc:	4311      	orrs	r1, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80043d2:	4311      	orrs	r1, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043d8:	0892      	lsrs	r2, r2, #2
 80043da:	430a      	orrs	r2, r1
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	611a      	str	r2, [r3, #16]
 80043e8:	e007      	b.n	80043fa <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10c      	bne.n	8004432 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441e:	f023 010f 	bic.w	r1, r3, #15
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004426:	1e5a      	subs	r2, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004430:	e007      	b.n	8004442 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 020f 	bic.w	r2, r2, #15
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004446:	f023 0303 	bic.w	r3, r3, #3
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004452:	e092      	b.n	800457a <HAL_ADC_Init+0x5ba>
 8004454:	46021000 	.word	0x46021000
 8004458:	fff0c013 	.word	0xfff0c013
 800445c:	ffde800d 	.word	0xffde800d
 8004460:	42028000 	.word	0x42028000
 8004464:	42028100 	.word	0x42028100
 8004468:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004472:	2b01      	cmp	r3, #1
 8004474:	d111      	bne.n	800449a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800447e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8004484:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800448a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	4313      	orrs	r3, r2
 8004490:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	4b39      	ldr	r3, [pc, #228]	@ (8004588 <HAL_ADC_Init+0x5c8>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	69f9      	ldr	r1, [r7, #28]
 80044aa:	430b      	orrs	r3, r1
 80044ac:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b6:	461a      	mov	r2, r3
 80044b8:	2100      	movs	r1, #0
 80044ba:	f7ff fb2e 	bl	8003b1a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c6:	461a      	mov	r2, r3
 80044c8:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80044cc:	f7ff fb25 	bl	8003b1a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d108      	bne.n	80044ea <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f062 020f 	orn	r2, r2, #15
 80044e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80044e8:	e018      	b.n	800451c <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044f2:	d113      	bne.n	800451c <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	f003 031c 	and.w	r3, r3, #28
 8004506:	f06f 020f 	mvn.w	r2, #15
 800450a:	fa02 f103 	lsl.w	r1, r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	4b1a      	ldr	r3, [pc, #104]	@ (800458c <HAL_ADC_Init+0x5cc>)
 8004524:	4013      	ands	r3, r2
 8004526:	6a3a      	ldr	r2, [r7, #32]
 8004528:	429a      	cmp	r2, r3
 800452a:	d10b      	bne.n	8004544 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004542:	e01a      	b.n	800457a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004548:	f023 0312 	bic.w	r3, r3, #18
 800454c:	f043 0210 	orr.w	r2, r3, #16
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004558:	f043 0201 	orr.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004566:	e008      	b.n	800457a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800456c:	f043 0210 	orr.w	r2, r3, #16
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800457a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800457e:	4618      	mov	r0, r3
 8004580:	372c      	adds	r7, #44	@ 0x2c
 8004582:	46bd      	mov	sp, r7
 8004584:	bd90      	pop	{r4, r7, pc}
 8004586:	bf00      	nop
 8004588:	f7fffc02 	.word	0xf7fffc02
 800458c:	833ffff3 	.word	0x833ffff3

08004590 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b0a2      	sub	sp, #136	@ 0x88
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a98      	ldr	r2, [pc, #608]	@ (8004804 <HAL_ADC_Start_DMA+0x274>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <HAL_ADC_Start_DMA+0x20>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a97      	ldr	r2, [pc, #604]	@ (8004808 <HAL_ADC_Start_DMA+0x278>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d101      	bne.n	80045b4 <HAL_ADC_Start_DMA+0x24>
 80045b0:	4b96      	ldr	r3, [pc, #600]	@ (800480c <HAL_ADC_Start_DMA+0x27c>)
 80045b2:	e000      	b.n	80045b6 <HAL_ADC_Start_DMA+0x26>
 80045b4:	4b96      	ldr	r3, [pc, #600]	@ (8004810 <HAL_ADC_Start_DMA+0x280>)
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fc36 	bl	8003e28 <LL_ADC_GetMultimode>
 80045bc:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fcd5 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 8111 	bne.w	80047f2 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_ADC_Start_DMA+0x4e>
 80045da:	2302      	movs	r3, #2
 80045dc:	e10e      	b.n	80047fc <HAL_ADC_Start_DMA+0x26c>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d003      	beq.n	80045fa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045f4:	2b09      	cmp	r3, #9
 80045f6:	f040 80f4 	bne.w	80047e2 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f001 fa2c 	bl	8005a58 <ADC_Enable>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004606:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 80e4 	bne.w	80047d8 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004614:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7a      	ldr	r2, [pc, #488]	@ (8004814 <HAL_ADC_Start_DMA+0x284>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d026      	beq.n	800467c <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a75      	ldr	r2, [pc, #468]	@ (8004808 <HAL_ADC_Start_DMA+0x278>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d002      	beq.n	800463e <HAL_ADC_Start_DMA+0xae>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	e000      	b.n	8004640 <HAL_ADC_Start_DMA+0xb0>
 800463e:	4b71      	ldr	r3, [pc, #452]	@ (8004804 <HAL_ADC_Start_DMA+0x274>)
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	4293      	cmp	r3, r2
 8004646:	d002      	beq.n	800464e <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004648:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004652:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800465e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d006      	beq.n	8004674 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800466a:	f023 0206 	bic.w	r2, r3, #6
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004672:	e006      	b.n	8004682 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	67da      	str	r2, [r3, #124]	@ 0x7c
 800467a:	e002      	b.n	8004682 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	4a64      	ldr	r2, [pc, #400]	@ (8004818 <HAL_ADC_Start_DMA+0x288>)
 8004688:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468e:	4a63      	ldr	r2, [pc, #396]	@ (800481c <HAL_ADC_Start_DMA+0x28c>)
 8004690:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004696:	4a62      	ldr	r2, [pc, #392]	@ (8004820 <HAL_ADC_Start_DMA+0x290>)
 8004698:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	221c      	movs	r2, #28
 80046a0:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0210 	orr.w	r2, r2, #16
 80046b8:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a55      	ldr	r2, [pc, #340]	@ (8004814 <HAL_ADC_Start_DMA+0x284>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d107      	bne.n	80046d4 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d04f      	beq.n	8004782 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d046      	beq.n	800477a <HAL_ADC_Start_DMA+0x1ea>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d040      	beq.n	800477a <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	f107 0310 	add.w	r3, r7, #16
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f002 fdf8 	bl	80072fc <HAL_DMAEx_List_GetNodeConfig>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e072      	b.n	80047fc <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	2b02      	cmp	r3, #2
 800471a:	d104      	bne.n	8004726 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004724:	e00a      	b.n	800473c <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004728:	2b01      	cmp	r3, #1
 800472a:	d104      	bne.n	8004736 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004734:	e002      	b.n	800473c <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004748:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476c:	4618      	mov	r0, r3
 800476e:	f002 fd1b 	bl	80071a8 <HAL_DMAEx_List_Start_IT>
 8004772:	4603      	mov	r3, r0
 8004774:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004778:	e028      	b.n	80047cc <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004780:	e024      	b.n	80047cc <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d104      	bne.n	8004796 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004794:	e00c      	b.n	80047b0 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d104      	bne.n	80047aa <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047a8:	e002      	b.n	80047b0 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3340      	adds	r3, #64	@ 0x40
 80047ba:	4619      	mov	r1, r3
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047c2:	f001 fd5f 	bl	8006284 <HAL_DMA_Start_IT>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fbba 	bl	8003f4a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80047d6:	e00f      	b.n	80047f8 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 80047e0:	e00a      	b.n	80047f8 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80047f0:	e002      	b.n	80047f8 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
 80047f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80047f8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3788      	adds	r7, #136	@ 0x88
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	42028000 	.word	0x42028000
 8004808:	42028100 	.word	0x42028100
 800480c:	42028300 	.word	0x42028300
 8004810:	46021300 	.word	0x46021300
 8004814:	46021000 	.word	0x46021000
 8004818:	08005b8d 	.word	0x08005b8d
 800481c:	08005c65 	.word	0x08005c65
 8004820:	08005c81 	.word	0x08005c81

08004824 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	@ 0x28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800482c:	2300      	movs	r3, #0
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a77      	ldr	r2, [pc, #476]	@ (8004a24 <HAL_ADC_IRQHandler+0x200>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_ADC_IRQHandler+0x30>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a76      	ldr	r2, [pc, #472]	@ (8004a28 <HAL_ADC_IRQHandler+0x204>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <HAL_ADC_IRQHandler+0x34>
 8004854:	4b75      	ldr	r3, [pc, #468]	@ (8004a2c <HAL_ADC_IRQHandler+0x208>)
 8004856:	e000      	b.n	800485a <HAL_ADC_IRQHandler+0x36>
 8004858:	4b75      	ldr	r3, [pc, #468]	@ (8004a30 <HAL_ADC_IRQHandler+0x20c>)
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fae4 	bl	8003e28 <LL_ADC_GetMultimode>
 8004860:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d017      	beq.n	800489c <HAL_ADC_IRQHandler+0x78>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d012      	beq.n	800489c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	d105      	bne.n	800488e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004886:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f001 fa2e 	bl	8005cf0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2202      	movs	r2, #2
 800489a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d004      	beq.n	80048b0 <HAL_ADC_IRQHandler+0x8c>
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80d1 	beq.w	8004a5e <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80cb 	beq.w	8004a5e <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a53      	ldr	r2, [pc, #332]	@ (8004a34 <HAL_ADC_IRQHandler+0x210>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d06c      	beq.n	80049c4 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff f932 	bl	8003b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80aa 	beq.w	8004a50 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a49      	ldr	r2, [pc, #292]	@ (8004a28 <HAL_ADC_IRQHandler+0x204>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d002      	beq.n	800490c <HAL_ADC_IRQHandler+0xe8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	e000      	b.n	800490e <HAL_ADC_IRQHandler+0xea>
 800490c:	4b45      	ldr	r3, [pc, #276]	@ (8004a24 <HAL_ADC_IRQHandler+0x200>)
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	4293      	cmp	r3, r2
 8004914:	d008      	beq.n	8004928 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b05      	cmp	r3, #5
 8004920:	d002      	beq.n	8004928 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b09      	cmp	r3, #9
 8004926:	d104      	bne.n	8004932 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	e00c      	b.n	800494c <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a3c      	ldr	r2, [pc, #240]	@ (8004a28 <HAL_ADC_IRQHandler+0x204>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d002      	beq.n	8004942 <HAL_ADC_IRQHandler+0x11e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	e000      	b.n	8004944 <HAL_ADC_IRQHandler+0x120>
 8004942:	4b38      	ldr	r3, [pc, #224]	@ (8004a24 <HAL_ADC_IRQHandler+0x200>)
 8004944:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d17c      	bne.n	8004a50 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b08      	cmp	r3, #8
 8004962:	d175      	bne.n	8004a50 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fb02 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d11a      	bne.n	80049aa <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 020c 	bic.w	r2, r2, #12
 8004982:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004994:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d159      	bne.n	8004a50 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049a0:	f043 0201 	orr.w	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	679a      	str	r2, [r3, #120]	@ 0x78
 80049a8:	e052      	b.n	8004a50 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ae:	f043 0210 	orr.w	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ba:	f043 0201 	orr.w	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80049c2:	e045      	b.n	8004a50 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff f8c5 	bl	8003b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d03d      	beq.n	8004a50 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d138      	bne.n	8004a50 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d131      	bne.n	8004a50 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fabe 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d11d      	bne.n	8004a38 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 020c 	bic.w	r2, r2, #12
 8004a0a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	f043 0201 	orr.w	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	679a      	str	r2, [r3, #120]	@ 0x78
 8004a20:	e016      	b.n	8004a50 <HAL_ADC_IRQHandler+0x22c>
 8004a22:	bf00      	nop
 8004a24:	42028000 	.word	0x42028000
 8004a28:	42028100 	.word	0x42028100
 8004a2c:	42028300 	.word	0x42028300
 8004a30:	46021300 	.word	0x46021300
 8004a34:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a3c:	f043 0220 	orr.w	r2, r3, #32
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a48:	f043 0201 	orr.w	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f99d 	bl	8004d90 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	220c      	movs	r2, #12
 8004a5c:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a8c      	ldr	r2, [pc, #560]	@ (8004c94 <HAL_ADC_IRQHandler+0x470>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	f000 8095 	beq.w	8004b94 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <HAL_ADC_IRQHandler+0x25a>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8085 	beq.w	8004b94 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d07f      	beq.n	8004b94 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aa4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff f91e 	bl	8003cf2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004ab6:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff f84b 	bl	8003b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ac2:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a73      	ldr	r2, [pc, #460]	@ (8004c98 <HAL_ADC_IRQHandler+0x474>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d002      	beq.n	8004ad4 <HAL_ADC_IRQHandler+0x2b0>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	e000      	b.n	8004ad6 <HAL_ADC_IRQHandler+0x2b2>
 8004ad4:	4b71      	ldr	r3, [pc, #452]	@ (8004c9c <HAL_ADC_IRQHandler+0x478>)
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d008      	beq.n	8004af0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b06      	cmp	r3, #6
 8004ae8:	d002      	beq.n	8004af0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b07      	cmp	r3, #7
 8004aee:	d104      	bne.n	8004afa <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	623b      	str	r3, [r7, #32]
 8004af8:	e00c      	b.n	8004b14 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a66      	ldr	r2, [pc, #408]	@ (8004c98 <HAL_ADC_IRQHandler+0x474>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d002      	beq.n	8004b0a <HAL_ADC_IRQHandler+0x2e6>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	e000      	b.n	8004b0c <HAL_ADC_IRQHandler+0x2e8>
 8004b0a:	4b64      	ldr	r3, [pc, #400]	@ (8004c9c <HAL_ADC_IRQHandler+0x478>)
 8004b0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d035      	beq.n	8004b86 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_ADC_IRQHandler+0x310>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d02d      	beq.n	8004b86 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d128      	bne.n	8004b86 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3e:	2b40      	cmp	r3, #64	@ 0x40
 8004b40:	d121      	bne.n	8004b86 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fa26 	bl	8003f98 <LL_ADC_INJ_IsConversionOngoing>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d119      	bne.n	8004b86 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b60:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b7e:	f043 0201 	orr.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 f894 	bl	8005cb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2260      	movs	r2, #96	@ 0x60
 8004b92:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d011      	beq.n	8004bc2 <HAL_ADC_IRQHandler+0x39e>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00c      	beq.n	8004bc2 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8ff 	bl	8004db8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2280      	movs	r2, #128	@ 0x80
 8004bc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <HAL_ADC_IRQHandler+0x3ce>
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00d      	beq.n	8004bf2 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f001 f870 	bl	8005cc8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d012      	beq.n	8004c22 <HAL_ADC_IRQHandler+0x3fe>
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f001 f862 	bl	8005cdc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d05d      	beq.n	8004ce8 <HAL_ADC_IRQHandler+0x4c4>
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d058      	beq.n	8004ce8 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c42:	e03b      	b.n	8004cbc <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a12      	ldr	r2, [pc, #72]	@ (8004c94 <HAL_ADC_IRQHandler+0x470>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d02c      	beq.n	8004ca8 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d015      	beq.n	8004c80 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a10      	ldr	r2, [pc, #64]	@ (8004c9c <HAL_ADC_IRQHandler+0x478>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_ADC_IRQHandler+0x444>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a0d      	ldr	r2, [pc, #52]	@ (8004c98 <HAL_ADC_IRQHandler+0x474>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_IRQHandler+0x448>
 8004c68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <HAL_ADC_IRQHandler+0x47c>)
 8004c6a:	e000      	b.n	8004c6e <HAL_ADC_IRQHandler+0x44a>
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca4 <HAL_ADC_IRQHandler+0x480>)
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff f8e8 	bl	8003e44 <LL_ADC_GetMultiDMATransfer>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d020      	beq.n	8004cbc <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c7e:	e01d      	b.n	8004cbc <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c92:	e013      	b.n	8004cbc <HAL_ADC_IRQHandler+0x498>
 8004c94:	46021000 	.word	0x46021000
 8004c98:	42028100 	.word	0x42028100
 8004c9c:	42028000 	.word	0x42028000
 8004ca0:	42028300 	.word	0x42028300
 8004ca4:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff f812 	bl	8003cd6 <LL_ADC_REG_GetDMATransfer>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cc6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cd2:	f043 0202 	orr.w	r2, r3, #2
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f876 	bl	8004dcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2210      	movs	r2, #16
 8004ce6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01b      	beq.n	8004d2a <HAL_ADC_IRQHandler+0x506>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d016      	beq.n	8004d2a <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d0c:	f043 0201 	orr.w	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f877 	bl	8004e08 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a17      	ldr	r2, [pc, #92]	@ (8004d8c <HAL_ADC_IRQHandler+0x568>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d126      	bne.n	8004d82 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <HAL_ADC_IRQHandler+0x534>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f849 	bl	8004de0 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d56:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00f      	beq.n	8004d82 <HAL_ADC_IRQHandler+0x55e>
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f841 	bl	8004df4 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d80:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004d82:	bf00      	nop
 8004d84:	3728      	adds	r7, #40	@ 0x28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	46021000 	.word	0x46021000

08004d90 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b0b7      	sub	sp, #220	@ 0xdc
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4aa8      	ldr	r2, [pc, #672]	@ (80050d8 <HAL_ADC_ConfigChannel+0x2bc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d103      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d102      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x36>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	f000 bdfe 	b.w	8005a4e <HAL_ADC_ConfigChannel+0xc32>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff f887 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f040 85c1 	bne.w	80059ee <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a99      	ldr	r2, [pc, #612]	@ (80050d8 <HAL_ADC_ConfigChannel+0x2bc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	f000 8409 	beq.w	800568a <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0x7a>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	0e9b      	lsrs	r3, r3, #26
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2201      	movs	r2, #1
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	e01d      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0xb6>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ea2:	fa93 f3a3 	rbit	r3, r3
 8004ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004eaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004eae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004eb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8004eba:	2320      	movs	r3, #32
 8004ebc:	e004      	b.n	8004ec8 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8004ebe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ec2:	fab3 f383 	clz	r3, r3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	2201      	movs	r2, #1
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	69d1      	ldr	r1, [r2, #28]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	430b      	orrs	r3, r1
 8004ede:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	f7fe fe47 	bl	8003b80 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff f83b 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 8004efc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff f847 	bl	8003f98 <LL_ADC_INJ_IsConversionOngoing>
 8004f0a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f040 81df 	bne.w	80052d6 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 81da 	bne.w	80052d6 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6819      	ldr	r1, [r3, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f7fe fef2 	bl	8003d18 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	089b      	lsrs	r3, r3, #2
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d046      	beq.n	8004fe4 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6919      	ldr	r1, [r3, #16]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f66:	f7fe fd2d 	bl	80039c4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6919      	ldr	r1, [r3, #16]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f7fe fd5b 	bl	8003a32 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	7e9b      	ldrb	r3, [r3, #26]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d11e      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x17e>
 8004f94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f98:	e000      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x180>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f7fe fd7e 	bl	8003a9e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d102      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x19c>
 8004fb2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004fb6:	e000      	b.n	8004fba <HAL_ADC_ConfigChannel+0x19e>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f7fe fd54 	bl	8003a68 <LL_ADC_SetOffsetSignedSaturation>
 8004fc0:	e189      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f7fe fd66 	bl	8003a9e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f7fe fd43 	bl	8003a68 <LL_ADC_SetOffsetSignedSaturation>
 8004fe2:	e178      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe fd0b 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <HAL_ADC_ConfigChannel+0x1f4>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe fd00 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 8005006:	4603      	mov	r3, r0
 8005008:	0e9b      	lsrs	r3, r3, #26
 800500a:	f003 021f 	and.w	r2, r3, #31
 800500e:	e01e      	b.n	800504e <HAL_ADC_ConfigChannel+0x232>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fcf5 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 800501c:	4603      	mov	r3, r0
 800501e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005026:	fa93 f3a3 	rbit	r3, r3
 800502a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800502e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005032:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005036:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800503e:	2320      	movs	r3, #32
 8005040:	e004      	b.n	800504c <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8005042:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005046:	fab3 f383 	clz	r3, r3
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d105      	bne.n	8005066 <HAL_ADC_ConfigChannel+0x24a>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	0e9b      	lsrs	r3, r3, #26
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	e018      	b.n	8005098 <HAL_ADC_ConfigChannel+0x27c>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005072:	fa93 f3a3 	rbit	r3, r3
 8005076:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800507a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800507e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005082:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800508a:	2320      	movs	r3, #32
 800508c:	e004      	b.n	8005098 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800508e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005092:	fab3 f383 	clz	r3, r3
 8005096:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005098:	429a      	cmp	r2, r3
 800509a:	d107      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	2100      	movs	r1, #0
 80050a8:	f7fe fc8c 	bl	80039c4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe fca7 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10c      	bne.n	80050dc <HAL_ADC_ConfigChannel+0x2c0>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2101      	movs	r1, #1
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe fc9c 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 80050ce:	4603      	mov	r3, r0
 80050d0:	0e9b      	lsrs	r3, r3, #26
 80050d2:	f003 021f 	and.w	r2, r3, #31
 80050d6:	e020      	b.n	800511a <HAL_ADC_ConfigChannel+0x2fe>
 80050d8:	46021000 	.word	0x46021000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2101      	movs	r1, #1
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fc8f 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050f2:	fa93 f3a3 	rbit	r3, r3
 80050f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80050fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80050fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005102:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800510a:	2320      	movs	r3, #32
 800510c:	e004      	b.n	8005118 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800510e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005112:	fab3 f383 	clz	r3, r3
 8005116:	b2db      	uxtb	r3, r3
 8005118:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d105      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x316>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	0e9b      	lsrs	r3, r3, #26
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	e018      	b.n	8005164 <HAL_ADC_ConfigChannel+0x348>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800513e:	fa93 f3a3 	rbit	r3, r3
 8005142:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005146:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800514a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800514e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8005156:	2320      	movs	r3, #32
 8005158:	e004      	b.n	8005164 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800515a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800515e:	fab3 f383 	clz	r3, r3
 8005162:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005164:	429a      	cmp	r2, r3
 8005166:	d107      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2300      	movs	r3, #0
 8005172:	2101      	movs	r1, #1
 8005174:	f7fe fc26 	bl	80039c4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2102      	movs	r1, #2
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe fc41 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 8005184:	4603      	mov	r3, r0
 8005186:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x388>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2102      	movs	r1, #2
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe fc36 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 800519a:	4603      	mov	r3, r0
 800519c:	0e9b      	lsrs	r3, r3, #26
 800519e:	f003 021f 	and.w	r2, r3, #31
 80051a2:	e01a      	b.n	80051da <HAL_ADC_ConfigChannel+0x3be>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2102      	movs	r1, #2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fe fc2b 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 80051b0:	4603      	mov	r3, r0
 80051b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051b6:	fa93 f3a3 	rbit	r3, r3
 80051ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80051bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80051c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80051ca:	2320      	movs	r3, #32
 80051cc:	e004      	b.n	80051d8 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80051ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051d2:	fab3 f383 	clz	r3, r3
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d105      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x3d6>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	0e9b      	lsrs	r3, r3, #26
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	e011      	b.n	8005216 <HAL_ADC_ConfigChannel+0x3fa>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051fa:	fa93 f3a3 	rbit	r3, r3
 80051fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005202:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800520a:	2320      	movs	r3, #32
 800520c:	e003      	b.n	8005216 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800520e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005210:	fab3 f383 	clz	r3, r3
 8005214:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005216:	429a      	cmp	r2, r3
 8005218:	d107      	bne.n	800522a <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	2300      	movs	r3, #0
 8005224:	2102      	movs	r1, #2
 8005226:	f7fe fbcd 	bl	80039c4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2103      	movs	r1, #3
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe fbe8 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 8005236:	4603      	mov	r3, r0
 8005238:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <HAL_ADC_ConfigChannel+0x43a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2103      	movs	r1, #3
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fbdd 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 800524c:	4603      	mov	r3, r0
 800524e:	0e9b      	lsrs	r3, r3, #26
 8005250:	f003 021f 	and.w	r2, r3, #31
 8005254:	e017      	b.n	8005286 <HAL_ADC_ConfigChannel+0x46a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2103      	movs	r1, #3
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe fbd2 	bl	8003a06 <LL_ADC_GetOffsetChannel>
 8005262:	4603      	mov	r3, r0
 8005264:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005266:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005268:	fa93 f3a3 	rbit	r3, r3
 800526c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800526e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005270:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8005278:	2320      	movs	r3, #32
 800527a:	e003      	b.n	8005284 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 800527c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800527e:	fab3 f383 	clz	r3, r3
 8005282:	b2db      	uxtb	r3, r3
 8005284:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d105      	bne.n	800529e <HAL_ADC_ConfigChannel+0x482>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	0e9b      	lsrs	r3, r3, #26
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	e011      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x4a6>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052a6:	fa93 f3a3 	rbit	r3, r3
 80052aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80052ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80052b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80052b6:	2320      	movs	r3, #32
 80052b8:	e003      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80052ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052bc:	fab3 f383 	clz	r3, r3
 80052c0:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d107      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	2300      	movs	r3, #0
 80052d0:	2103      	movs	r1, #3
 80052d2:	f7fe fb77 	bl	80039c4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe fe22 	bl	8003f24 <LL_ADC_IsEnabled>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 83ad 	bne.w	8005a42 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	461a      	mov	r2, r3
 80052f6:	f7fe fd73 	bl	8003de0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005302:	f040 80d6 	bne.w	80054b2 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10b      	bne.n	800532a <HAL_ADC_ConfigChannel+0x50e>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	0e9b      	lsrs	r3, r3, #26
 8005318:	3301      	adds	r3, #1
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	2b09      	cmp	r3, #9
 8005320:	bf94      	ite	ls
 8005322:	2301      	movls	r3, #1
 8005324:	2300      	movhi	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	e019      	b.n	800535e <HAL_ADC_ConfigChannel+0x542>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005332:	fa93 f3a3 	rbit	r3, r3
 8005336:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800533c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005342:	2320      	movs	r3, #32
 8005344:	e003      	b.n	800534e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005348:	fab3 f383 	clz	r3, r3
 800534c:	b2db      	uxtb	r3, r3
 800534e:	3301      	adds	r3, #1
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2b09      	cmp	r3, #9
 8005356:	bf94      	ite	ls
 8005358:	2301      	movls	r3, #1
 800535a:	2300      	movhi	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d04d      	beq.n	80053fe <HAL_ADC_ConfigChannel+0x5e2>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d107      	bne.n	800537e <HAL_ADC_ConfigChannel+0x562>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	0e9b      	lsrs	r3, r3, #26
 8005374:	3301      	adds	r3, #1
 8005376:	069b      	lsls	r3, r3, #26
 8005378:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800537c:	e015      	b.n	80053aa <HAL_ADC_ConfigChannel+0x58e>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005386:	fa93 f3a3 	rbit	r3, r3
 800538a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800538c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800538e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005396:	2320      	movs	r3, #32
 8005398:	e003      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800539a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800539c:	fab3 f383 	clz	r3, r3
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	3301      	adds	r3, #1
 80053a4:	069b      	lsls	r3, r3, #26
 80053a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <HAL_ADC_ConfigChannel+0x5ae>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	0e9b      	lsrs	r3, r3, #26
 80053bc:	3301      	adds	r3, #1
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	2101      	movs	r1, #1
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	e017      	b.n	80053fa <HAL_ADC_ConfigChannel+0x5de>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80053e2:	2320      	movs	r3, #32
 80053e4:	e003      	b.n	80053ee <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80053e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e8:	fab3 f383 	clz	r3, r3
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	4313      	orrs	r3, r2
 80053fc:	e04e      	b.n	800549c <HAL_ADC_ConfigChannel+0x680>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d107      	bne.n	800541a <HAL_ADC_ConfigChannel+0x5fe>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	0e9b      	lsrs	r3, r3, #26
 8005410:	3301      	adds	r3, #1
 8005412:	069b      	lsls	r3, r3, #26
 8005414:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005418:	e015      	b.n	8005446 <HAL_ADC_ConfigChannel+0x62a>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005422:	fa93 f3a3 	rbit	r3, r3
 8005426:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800542c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8005432:	2320      	movs	r3, #32
 8005434:	e003      	b.n	800543e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8005436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005438:	fab3 f383 	clz	r3, r3
 800543c:	b2db      	uxtb	r3, r3
 800543e:	3301      	adds	r3, #1
 8005440:	069b      	lsls	r3, r3, #26
 8005442:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <HAL_ADC_ConfigChannel+0x64a>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	0e9b      	lsrs	r3, r3, #26
 8005458:	3301      	adds	r3, #1
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	2101      	movs	r1, #1
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	e017      	b.n	8005496 <HAL_ADC_ConfigChannel+0x67a>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	fa93 f3a3 	rbit	r3, r3
 8005472:	61bb      	str	r3, [r7, #24]
  return result;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 800547e:	2320      	movs	r3, #32
 8005480:	e003      	b.n	800548a <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	fab3 f383 	clz	r3, r3
 8005488:	b2db      	uxtb	r3, r3
 800548a:	3301      	adds	r3, #1
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	4313      	orrs	r3, r2
 8005498:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800549c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	461a      	mov	r2, r3
 80054aa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80054ae:	f7fe fc33 	bl	8003d18 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f280 82c3 	bge.w	8005a42 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a92      	ldr	r2, [pc, #584]	@ (800570c <HAL_ADC_ConfigChannel+0x8f0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <HAL_ADC_ConfigChannel+0x6b4>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a91      	ldr	r2, [pc, #580]	@ (8005710 <HAL_ADC_ConfigChannel+0x8f4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x6b8>
 80054d0:	4b90      	ldr	r3, [pc, #576]	@ (8005714 <HAL_ADC_ConfigChannel+0x8f8>)
 80054d2:	e000      	b.n	80054d6 <HAL_ADC_ConfigChannel+0x6ba>
 80054d4:	4b90      	ldr	r3, [pc, #576]	@ (8005718 <HAL_ADC_ConfigChannel+0x8fc>)
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe fa46 	bl	8003968 <LL_ADC_GetCommonPathInternalCh>
 80054dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a89      	ldr	r2, [pc, #548]	@ (800570c <HAL_ADC_ConfigChannel+0x8f0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <HAL_ADC_ConfigChannel+0x6d8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a88      	ldr	r2, [pc, #544]	@ (8005710 <HAL_ADC_ConfigChannel+0x8f4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d10e      	bne.n	8005512 <HAL_ADC_ConfigChannel+0x6f6>
 80054f4:	4885      	ldr	r0, [pc, #532]	@ (800570c <HAL_ADC_ConfigChannel+0x8f0>)
 80054f6:	f7fe fd15 	bl	8003f24 <LL_ADC_IsEnabled>
 80054fa:	4604      	mov	r4, r0
 80054fc:	4884      	ldr	r0, [pc, #528]	@ (8005710 <HAL_ADC_ConfigChannel+0x8f4>)
 80054fe:	f7fe fd11 	bl	8003f24 <LL_ADC_IsEnabled>
 8005502:	4603      	mov	r3, r0
 8005504:	4323      	orrs	r3, r4
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	e008      	b.n	8005524 <HAL_ADC_ConfigChannel+0x708>
 8005512:	4882      	ldr	r0, [pc, #520]	@ (800571c <HAL_ADC_ConfigChannel+0x900>)
 8005514:	f7fe fd06 	bl	8003f24 <LL_ADC_IsEnabled>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	bf0c      	ite	eq
 800551e:	2301      	moveq	r3, #1
 8005520:	2300      	movne	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 80a6 	beq.w	8005676 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a7c      	ldr	r2, [pc, #496]	@ (8005720 <HAL_ADC_ConfigChannel+0x904>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d13c      	bne.n	80055ae <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005538:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d136      	bne.n	80055ae <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a71      	ldr	r2, [pc, #452]	@ (800570c <HAL_ADC_ConfigChannel+0x8f0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00a      	beq.n	8005560 <HAL_ADC_ConfigChannel+0x744>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a70      	ldr	r2, [pc, #448]	@ (8005710 <HAL_ADC_ConfigChannel+0x8f4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d005      	beq.n	8005560 <HAL_ADC_ConfigChannel+0x744>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a70      	ldr	r2, [pc, #448]	@ (800571c <HAL_ADC_ConfigChannel+0x900>)
 800555a:	4293      	cmp	r3, r2
 800555c:	f040 826e 	bne.w	8005a3c <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a69      	ldr	r2, [pc, #420]	@ (800570c <HAL_ADC_ConfigChannel+0x8f0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_ADC_ConfigChannel+0x758>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a68      	ldr	r2, [pc, #416]	@ (8005710 <HAL_ADC_ConfigChannel+0x8f4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <HAL_ADC_ConfigChannel+0x75c>
 8005574:	4a67      	ldr	r2, [pc, #412]	@ (8005714 <HAL_ADC_ConfigChannel+0x8f8>)
 8005576:	e000      	b.n	800557a <HAL_ADC_ConfigChannel+0x75e>
 8005578:	4a67      	ldr	r2, [pc, #412]	@ (8005718 <HAL_ADC_ConfigChannel+0x8fc>)
 800557a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800557e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f7fe f9dc 	bl	8003942 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800558a:	4b66      	ldr	r3, [pc, #408]	@ (8005724 <HAL_ADC_ConfigChannel+0x908>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	099b      	lsrs	r3, r3, #6
 8005590:	4a65      	ldr	r2, [pc, #404]	@ (8005728 <HAL_ADC_ConfigChannel+0x90c>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	099b      	lsrs	r3, r3, #6
 8005598:	3301      	adds	r3, #1
 800559a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800559c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800559e:	e002      	b.n	80055a6 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f9      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055ac:	e246      	b.n	8005a3c <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a5e      	ldr	r2, [pc, #376]	@ (800572c <HAL_ADC_ConfigChannel+0x910>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d12b      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80055b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d125      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a50      	ldr	r2, [pc, #320]	@ (800570c <HAL_ADC_ConfigChannel+0x8f0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00a      	beq.n	80055e4 <HAL_ADC_ConfigChannel+0x7c8>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a4f      	ldr	r2, [pc, #316]	@ (8005710 <HAL_ADC_ConfigChannel+0x8f4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d005      	beq.n	80055e4 <HAL_ADC_ConfigChannel+0x7c8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a4f      	ldr	r2, [pc, #316]	@ (800571c <HAL_ADC_ConfigChannel+0x900>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	f040 822e 	bne.w	8005a40 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a48      	ldr	r2, [pc, #288]	@ (800570c <HAL_ADC_ConfigChannel+0x8f0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <HAL_ADC_ConfigChannel+0x7dc>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a47      	ldr	r2, [pc, #284]	@ (8005710 <HAL_ADC_ConfigChannel+0x8f4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x7e0>
 80055f8:	4a46      	ldr	r2, [pc, #280]	@ (8005714 <HAL_ADC_ConfigChannel+0x8f8>)
 80055fa:	e000      	b.n	80055fe <HAL_ADC_ConfigChannel+0x7e2>
 80055fc:	4a46      	ldr	r2, [pc, #280]	@ (8005718 <HAL_ADC_ConfigChannel+0x8fc>)
 80055fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f7fe f99a 	bl	8003942 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800560e:	e217      	b.n	8005a40 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a46      	ldr	r2, [pc, #280]	@ (8005730 <HAL_ADC_ConfigChannel+0x914>)
 8005616:	4293      	cmp	r3, r2
 8005618:	f040 8213 	bne.w	8005a42 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800561c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005624:	2b00      	cmp	r3, #0
 8005626:	f040 820c 	bne.w	8005a42 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a37      	ldr	r2, [pc, #220]	@ (800570c <HAL_ADC_ConfigChannel+0x8f0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00a      	beq.n	800564a <HAL_ADC_ConfigChannel+0x82e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a35      	ldr	r2, [pc, #212]	@ (8005710 <HAL_ADC_ConfigChannel+0x8f4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d005      	beq.n	800564a <HAL_ADC_ConfigChannel+0x82e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a36      	ldr	r2, [pc, #216]	@ (800571c <HAL_ADC_ConfigChannel+0x900>)
 8005644:	4293      	cmp	r3, r2
 8005646:	f040 81fc 	bne.w	8005a42 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2f      	ldr	r2, [pc, #188]	@ (800570c <HAL_ADC_ConfigChannel+0x8f0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d004      	beq.n	800565e <HAL_ADC_ConfigChannel+0x842>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a2d      	ldr	r2, [pc, #180]	@ (8005710 <HAL_ADC_ConfigChannel+0x8f4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d101      	bne.n	8005662 <HAL_ADC_ConfigChannel+0x846>
 800565e:	4a2d      	ldr	r2, [pc, #180]	@ (8005714 <HAL_ADC_ConfigChannel+0x8f8>)
 8005660:	e000      	b.n	8005664 <HAL_ADC_ConfigChannel+0x848>
 8005662:	4a2d      	ldr	r2, [pc, #180]	@ (8005718 <HAL_ADC_ConfigChannel+0x8fc>)
 8005664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005668:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f7fe f967 	bl	8003942 <LL_ADC_SetCommonPathInternalCh>
 8005674:	e1e5      	b.n	8005a42 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800567a:	f043 0220 	orr.w	r2, r3, #32
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005688:	e1db      	b.n	8005a42 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b02      	cmp	r3, #2
 8005698:	f000 811b 	beq.w	80058d2 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056a4:	d004      	beq.n	80056b0 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80056aa:	4a22      	ldr	r2, [pc, #136]	@ (8005734 <HAL_ADC_ConfigChannel+0x918>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d107      	bne.n	80056c0 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe fac1 	bl	8003c40 <LL_ADC_REG_SetSequencerChAdd>
 80056be:	e059      	b.n	8005774 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	210f      	movs	r1, #15
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	401a      	ands	r2, r3
 80056d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80056dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <HAL_ADC_ConfigChannel+0x8d4>
 80056e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80056e8:	0e9b      	lsrs	r3, r3, #26
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	e027      	b.n	8005740 <HAL_ADC_ConfigChannel+0x924>
 80056f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80056f4:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	fa93 f3a3 	rbit	r3, r3
 80056fc:	60fb      	str	r3, [r7, #12]
  return result;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d117      	bne.n	8005738 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8005708:	2320      	movs	r3, #32
 800570a:	e019      	b.n	8005740 <HAL_ADC_ConfigChannel+0x924>
 800570c:	42028000 	.word	0x42028000
 8005710:	42028100 	.word	0x42028100
 8005714:	42028300 	.word	0x42028300
 8005718:	46021300 	.word	0x46021300
 800571c:	46021000 	.word	0x46021000
 8005720:	ce080000 	.word	0xce080000
 8005724:	20000028 	.word	0x20000028
 8005728:	053e2d63 	.word	0x053e2d63
 800572c:	ca040000 	.word	0xca040000
 8005730:	80000001 	.word	0x80000001
 8005734:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	fab3 f383 	clz	r3, r3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6849      	ldr	r1, [r1, #4]
 8005744:	f001 011f 	and.w	r1, r1, #31
 8005748:	408b      	lsls	r3, r1
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	089b      	lsrs	r3, r3, #2
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575e:	429a      	cmp	r2, r3
 8005760:	d808      	bhi.n	8005774 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800576e:	4619      	mov	r1, r3
 8005770:	f7fe fa06 	bl	8003b80 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	461a      	mov	r2, r3
 800577e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005782:	f7fe fac9 	bl	8003d18 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f280 8159 	bge.w	8005a42 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a9b      	ldr	r2, [pc, #620]	@ (8005a04 <HAL_ADC_ConfigChannel+0xbe8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_ADC_ConfigChannel+0x988>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a9a      	ldr	r2, [pc, #616]	@ (8005a08 <HAL_ADC_ConfigChannel+0xbec>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d101      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x98c>
 80057a4:	4b99      	ldr	r3, [pc, #612]	@ (8005a0c <HAL_ADC_ConfigChannel+0xbf0>)
 80057a6:	e000      	b.n	80057aa <HAL_ADC_ConfigChannel+0x98e>
 80057a8:	4b99      	ldr	r3, [pc, #612]	@ (8005a10 <HAL_ADC_ConfigChannel+0xbf4>)
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe f8dc 	bl	8003968 <LL_ADC_GetCommonPathInternalCh>
 80057b0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a96      	ldr	r2, [pc, #600]	@ (8005a14 <HAL_ADC_ConfigChannel+0xbf8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d12b      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d125      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a8d      	ldr	r2, [pc, #564]	@ (8005a04 <HAL_ADC_ConfigChannel+0xbe8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_ADC_ConfigChannel+0x9c2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a8b      	ldr	r2, [pc, #556]	@ (8005a08 <HAL_ADC_ConfigChannel+0xbec>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d101      	bne.n	80057e2 <HAL_ADC_ConfigChannel+0x9c6>
 80057de:	4a8b      	ldr	r2, [pc, #556]	@ (8005a0c <HAL_ADC_ConfigChannel+0xbf0>)
 80057e0:	e000      	b.n	80057e4 <HAL_ADC_ConfigChannel+0x9c8>
 80057e2:	4a8b      	ldr	r2, [pc, #556]	@ (8005a10 <HAL_ADC_ConfigChannel+0xbf4>)
 80057e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f7fe f8a7 	bl	8003942 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80057f4:	4b88      	ldr	r3, [pc, #544]	@ (8005a18 <HAL_ADC_ConfigChannel+0xbfc>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	099b      	lsrs	r3, r3, #6
 80057fa:	4a88      	ldr	r2, [pc, #544]	@ (8005a1c <HAL_ADC_ConfigChannel+0xc00>)
 80057fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005800:	099b      	lsrs	r3, r3, #6
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8005806:	e002      	b.n	800580e <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	3b01      	subs	r3, #1
 800580c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f9      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8005814:	e045      	b.n	80058a2 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a81      	ldr	r2, [pc, #516]	@ (8005a20 <HAL_ADC_ConfigChannel+0xc04>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d11b      	bne.n	8005858 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8005828:	2b00      	cmp	r3, #0
 800582a:	d115      	bne.n	8005858 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a74      	ldr	r2, [pc, #464]	@ (8005a04 <HAL_ADC_ConfigChannel+0xbe8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_ADC_ConfigChannel+0xa24>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a73      	ldr	r2, [pc, #460]	@ (8005a08 <HAL_ADC_ConfigChannel+0xbec>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d101      	bne.n	8005844 <HAL_ADC_ConfigChannel+0xa28>
 8005840:	4a72      	ldr	r2, [pc, #456]	@ (8005a0c <HAL_ADC_ConfigChannel+0xbf0>)
 8005842:	e000      	b.n	8005846 <HAL_ADC_ConfigChannel+0xa2a>
 8005844:	4a72      	ldr	r2, [pc, #456]	@ (8005a10 <HAL_ADC_ConfigChannel+0xbf4>)
 8005846:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800584a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f7fe f876 	bl	8003942 <LL_ADC_SetCommonPathInternalCh>
 8005856:	e024      	b.n	80058a2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a71      	ldr	r2, [pc, #452]	@ (8005a24 <HAL_ADC_ConfigChannel+0xc08>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d11f      	bne.n	80058a2 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005862:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d115      	bne.n	800589a <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a64      	ldr	r2, [pc, #400]	@ (8005a04 <HAL_ADC_ConfigChannel+0xbe8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d004      	beq.n	8005882 <HAL_ADC_ConfigChannel+0xa66>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a62      	ldr	r2, [pc, #392]	@ (8005a08 <HAL_ADC_ConfigChannel+0xbec>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d101      	bne.n	8005886 <HAL_ADC_ConfigChannel+0xa6a>
 8005882:	4a62      	ldr	r2, [pc, #392]	@ (8005a0c <HAL_ADC_ConfigChannel+0xbf0>)
 8005884:	e000      	b.n	8005888 <HAL_ADC_ConfigChannel+0xa6c>
 8005886:	4a62      	ldr	r2, [pc, #392]	@ (8005a10 <HAL_ADC_ConfigChannel+0xbf4>)
 8005888:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800588c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f7fe f855 	bl	8003942 <LL_ADC_SetCommonPathInternalCh>
 8005898:	e003      	b.n	80058a2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a62      	ldr	r2, [pc, #392]	@ (8005a28 <HAL_ADC_ConfigChannel+0xc0c>)
 80058a0:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a61      	ldr	r2, [pc, #388]	@ (8005a2c <HAL_ADC_ConfigChannel+0xc10>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	f040 80ca 	bne.w	8005a42 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 80c3 	bne.w	8005a42 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80058d0:	e0b7      	b.n	8005a42 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058da:	d004      	beq.n	80058e6 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80058e0:	4a53      	ldr	r2, [pc, #332]	@ (8005a30 <HAL_ADC_ConfigChannel+0xc14>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d106      	bne.n	80058f4 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe f9d9 	bl	8003ca6 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f280 80a2 	bge.w	8005a42 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a40      	ldr	r2, [pc, #256]	@ (8005a04 <HAL_ADC_ConfigChannel+0xbe8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_ADC_ConfigChannel+0xaf6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a3e      	ldr	r2, [pc, #248]	@ (8005a08 <HAL_ADC_ConfigChannel+0xbec>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d101      	bne.n	8005916 <HAL_ADC_ConfigChannel+0xafa>
 8005912:	4b3e      	ldr	r3, [pc, #248]	@ (8005a0c <HAL_ADC_ConfigChannel+0xbf0>)
 8005914:	e000      	b.n	8005918 <HAL_ADC_ConfigChannel+0xafc>
 8005916:	4b3e      	ldr	r3, [pc, #248]	@ (8005a10 <HAL_ADC_ConfigChannel+0xbf4>)
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe f825 	bl	8003968 <LL_ADC_GetCommonPathInternalCh>
 800591e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a43      	ldr	r2, [pc, #268]	@ (8005a34 <HAL_ADC_ConfigChannel+0xc18>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d115      	bne.n	8005958 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a34      	ldr	r2, [pc, #208]	@ (8005a04 <HAL_ADC_ConfigChannel+0xbe8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_ADC_ConfigChannel+0xb24>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a33      	ldr	r2, [pc, #204]	@ (8005a08 <HAL_ADC_ConfigChannel+0xbec>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d101      	bne.n	8005944 <HAL_ADC_ConfigChannel+0xb28>
 8005940:	4a32      	ldr	r2, [pc, #200]	@ (8005a0c <HAL_ADC_ConfigChannel+0xbf0>)
 8005942:	e000      	b.n	8005946 <HAL_ADC_ConfigChannel+0xb2a>
 8005944:	4a32      	ldr	r2, [pc, #200]	@ (8005a10 <HAL_ADC_ConfigChannel+0xbf4>)
 8005946:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800594a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800594e:	4619      	mov	r1, r3
 8005950:	4610      	mov	r0, r2
 8005952:	f7fd fff6 	bl	8003942 <LL_ADC_SetCommonPathInternalCh>
 8005956:	e034      	b.n	80059c2 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a36      	ldr	r2, [pc, #216]	@ (8005a38 <HAL_ADC_ConfigChannel+0xc1c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d115      	bne.n	800598e <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a27      	ldr	r2, [pc, #156]	@ (8005a04 <HAL_ADC_ConfigChannel+0xbe8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_ADC_ConfigChannel+0xb5a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a25      	ldr	r2, [pc, #148]	@ (8005a08 <HAL_ADC_ConfigChannel+0xbec>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d101      	bne.n	800597a <HAL_ADC_ConfigChannel+0xb5e>
 8005976:	4a25      	ldr	r2, [pc, #148]	@ (8005a0c <HAL_ADC_ConfigChannel+0xbf0>)
 8005978:	e000      	b.n	800597c <HAL_ADC_ConfigChannel+0xb60>
 800597a:	4a25      	ldr	r2, [pc, #148]	@ (8005a10 <HAL_ADC_ConfigChannel+0xbf4>)
 800597c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005980:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f7fd ffdb 	bl	8003942 <LL_ADC_SetCommonPathInternalCh>
 800598c:	e019      	b.n	80059c2 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a24      	ldr	r2, [pc, #144]	@ (8005a24 <HAL_ADC_ConfigChannel+0xc08>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d114      	bne.n	80059c2 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a19      	ldr	r2, [pc, #100]	@ (8005a04 <HAL_ADC_ConfigChannel+0xbe8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <HAL_ADC_ConfigChannel+0xb90>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a18      	ldr	r2, [pc, #96]	@ (8005a08 <HAL_ADC_ConfigChannel+0xbec>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d101      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0xb94>
 80059ac:	4a17      	ldr	r2, [pc, #92]	@ (8005a0c <HAL_ADC_ConfigChannel+0xbf0>)
 80059ae:	e000      	b.n	80059b2 <HAL_ADC_ConfigChannel+0xb96>
 80059b0:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <HAL_ADC_ConfigChannel+0xbf4>)
 80059b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059b6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80059ba:	4619      	mov	r1, r3
 80059bc:	4610      	mov	r0, r2
 80059be:	f7fd ffc0 	bl	8003942 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a19      	ldr	r2, [pc, #100]	@ (8005a2c <HAL_ADC_ConfigChannel+0xc10>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d13a      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d134      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0201 	orr.w	r2, r2, #1
 80059e8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80059ec:	e029      	b.n	8005a42 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a00:	e01f      	b.n	8005a42 <HAL_ADC_ConfigChannel+0xc26>
 8005a02:	bf00      	nop
 8005a04:	42028000 	.word	0x42028000
 8005a08:	42028100 	.word	0x42028100
 8005a0c:	42028300 	.word	0x42028300
 8005a10:	46021300 	.word	0x46021300
 8005a14:	b6002000 	.word	0xb6002000
 8005a18:	20000028 	.word	0x20000028
 8005a1c:	053e2d63 	.word	0x053e2d63
 8005a20:	ba004000 	.word	0xba004000
 8005a24:	80000001 	.word	0x80000001
 8005a28:	b2001000 	.word	0xb2001000
 8005a2c:	d7200000 	.word	0xd7200000
 8005a30:	80000010 	.word	0x80000010
 8005a34:	ce080000 	.word	0xce080000
 8005a38:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a3c:	bf00      	nop
 8005a3e:	e000      	b.n	8005a42 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a40:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8005a4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	37dc      	adds	r7, #220	@ 0xdc
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd90      	pop	{r4, r7, pc}
 8005a56:	bf00      	nop

08005a58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe fa5d 	bl	8003f24 <LL_ADC_IsEnabled>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d17b      	bne.n	8005b68 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	4b3f      	ldr	r3, [pc, #252]	@ (8005b74 <ADC_Enable+0x11c>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a82:	f043 0210 	orr.w	r2, r3, #16
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a8e:	f043 0201 	orr.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e067      	b.n	8005b6a <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fa28 	bl	8003efc <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <ADC_Enable+0x66>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8005b78 <ADC_Enable+0x120>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d054      	beq.n	8005b68 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005abe:	f7fd fed5 	bl	800386c <HAL_GetTick>
 8005ac2:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b7c <ADC_Enable+0x124>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <ADC_Enable+0x80>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8005b80 <ADC_Enable+0x128>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d101      	bne.n	8005adc <ADC_Enable+0x84>
 8005ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b84 <ADC_Enable+0x12c>)
 8005ada:	e000      	b.n	8005ade <ADC_Enable+0x86>
 8005adc:	4b2a      	ldr	r3, [pc, #168]	@ (8005b88 <ADC_Enable+0x130>)
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe f9a2 	bl	8003e28 <LL_ADC_GetMultimode>
 8005ae4:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a25      	ldr	r2, [pc, #148]	@ (8005b80 <ADC_Enable+0x128>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d002      	beq.n	8005af6 <ADC_Enable+0x9e>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	e000      	b.n	8005af8 <ADC_Enable+0xa0>
 8005af6:	4b21      	ldr	r3, [pc, #132]	@ (8005b7c <ADC_Enable+0x124>)
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d02c      	beq.n	8005b5a <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d130      	bne.n	8005b68 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b06:	e028      	b.n	8005b5a <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fe fa09 	bl	8003f24 <LL_ADC_IsEnabled>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe f9ed 	bl	8003efc <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b22:	f7fd fea3 	bl	800386c <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d914      	bls.n	8005b5a <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d00d      	beq.n	8005b5a <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b42:	f043 0210 	orr.w	r2, r3, #16
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b4e:	f043 0201 	orr.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e007      	b.n	8005b6a <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d1cf      	bne.n	8005b08 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	8000003f 	.word	0x8000003f
 8005b78:	46021000 	.word	0x46021000
 8005b7c:	42028000 	.word	0x42028000
 8005b80:	42028100 	.word	0x42028100
 8005b84:	42028300 	.word	0x42028300
 8005b88:	46021300 	.word	0x46021300

08005b8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d14b      	bne.n	8005c3e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005baa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d021      	beq.n	8005c04 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fd ffc7 	bl	8003b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d032      	beq.n	8005c36 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d12b      	bne.n	8005c36 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005be2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d11f      	bne.n	8005c36 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bfa:	f043 0201 	orr.w	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	679a      	str	r2, [r3, #120]	@ 0x78
 8005c02:	e018      	b.n	8005c36 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d111      	bne.n	8005c36 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d105      	bne.n	8005c36 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c2e:	f043 0201 	orr.w	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f7ff f8aa 	bl	8004d90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c3c:	e00e      	b.n	8005c5c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff f8be 	bl	8004dcc <HAL_ADC_ErrorCallback>
}
 8005c50:	e004      	b.n	8005c5c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c70:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff f896 	bl	8004da4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c9e:	f043 0204 	orr.w	r2, r3, #4
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff f890 	bl	8004dcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d14:	4b0c      	ldr	r3, [pc, #48]	@ (8005d48 <__NVIC_SetPriorityGrouping+0x44>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d20:	4013      	ands	r3, r2
 8005d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d36:	4a04      	ldr	r2, [pc, #16]	@ (8005d48 <__NVIC_SetPriorityGrouping+0x44>)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	60d3      	str	r3, [r2, #12]
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	e000ed00 	.word	0xe000ed00

08005d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d50:	4b04      	ldr	r3, [pc, #16]	@ (8005d64 <__NVIC_GetPriorityGrouping+0x18>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	0a1b      	lsrs	r3, r3, #8
 8005d56:	f003 0307 	and.w	r3, r3, #7
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	e000ed00 	.word	0xe000ed00

08005d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	db0b      	blt.n	8005d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	f003 021f 	and.w	r2, r3, #31
 8005d80:	4907      	ldr	r1, [pc, #28]	@ (8005da0 <__NVIC_EnableIRQ+0x38>)
 8005d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2001      	movs	r0, #1
 8005d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	e000e100 	.word	0xe000e100

08005da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	6039      	str	r1, [r7, #0]
 8005dae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db0a      	blt.n	8005dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	490c      	ldr	r1, [pc, #48]	@ (8005df0 <__NVIC_SetPriority+0x4c>)
 8005dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dc2:	0112      	lsls	r2, r2, #4
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dcc:	e00a      	b.n	8005de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	4908      	ldr	r1, [pc, #32]	@ (8005df4 <__NVIC_SetPriority+0x50>)
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	3b04      	subs	r3, #4
 8005ddc:	0112      	lsls	r2, r2, #4
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	440b      	add	r3, r1
 8005de2:	761a      	strb	r2, [r3, #24]
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	e000e100 	.word	0xe000e100
 8005df4:	e000ed00 	.word	0xe000ed00

08005df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b089      	sub	sp, #36	@ 0x24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f1c3 0307 	rsb	r3, r3, #7
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	bf28      	it	cs
 8005e16:	2304      	movcs	r3, #4
 8005e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	2b06      	cmp	r3, #6
 8005e20:	d902      	bls.n	8005e28 <NVIC_EncodePriority+0x30>
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	3b03      	subs	r3, #3
 8005e26:	e000      	b.n	8005e2a <NVIC_EncodePriority+0x32>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43da      	mvns	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e40:	f04f 31ff 	mov.w	r1, #4294967295
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4a:	43d9      	mvns	r1, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e50:	4313      	orrs	r3, r2
         );
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3724      	adds	r7, #36	@ 0x24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff ff4c 	bl	8005d04 <__NVIC_SetPriorityGrouping>
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e82:	f7ff ff63 	bl	8005d4c <__NVIC_GetPriorityGrouping>
 8005e86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	6978      	ldr	r0, [r7, #20]
 8005e8e:	f7ff ffb3 	bl	8005df8 <NVIC_EncodePriority>
 8005e92:	4602      	mov	r2, r0
 8005e94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff ff82 	bl	8005da4 <__NVIC_SetPriority>
}
 8005ea0:	bf00      	nop
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff ff56 	bl	8005d68 <__NVIC_EnableIRQ>
}
 8005ebc:	bf00      	nop
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ed4:	d301      	bcc.n	8005eda <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e00d      	b.n	8005ef6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005eda:	4a0a      	ldr	r2, [pc, #40]	@ (8005f04 <HAL_SYSTICK_Config+0x40>)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005ee2:	4b08      	ldr	r3, [pc, #32]	@ (8005f04 <HAL_SYSTICK_Config+0x40>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005ee8:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <HAL_SYSTICK_Config+0x40>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a05      	ldr	r2, [pc, #20]	@ (8005f04 <HAL_SYSTICK_Config+0x40>)
 8005eee:	f043 0303 	orr.w	r3, r3, #3
 8005ef2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	e000e010 	.word	0xe000e010

08005f08 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d844      	bhi.n	8005fa0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005f16:	a201      	add	r2, pc, #4	@ (adr r2, 8005f1c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	08005f3f 	.word	0x08005f3f
 8005f20:	08005f5d 	.word	0x08005f5d
 8005f24:	08005f7f 	.word	0x08005f7f
 8005f28:	08005fa1 	.word	0x08005fa1
 8005f2c:	08005f31 	.word	0x08005f31
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005f30:	4b1f      	ldr	r3, [pc, #124]	@ (8005fb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1e      	ldr	r2, [pc, #120]	@ (8005fb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f36:	f043 0304 	orr.w	r3, r3, #4
 8005f3a:	6013      	str	r3, [r2, #0]
      break;
 8005f3c:	e031      	b.n	8005fa2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f44:	f023 0304 	bic.w	r3, r3, #4
 8005f48:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f50:	4a18      	ldr	r2, [pc, #96]	@ (8005fb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f52:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005f56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005f5a:	e022      	b.n	8005fa2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005f5c:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a13      	ldr	r2, [pc, #76]	@ (8005fb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f62:	f023 0304 	bic.w	r3, r3, #4
 8005f66:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005f68:	4b12      	ldr	r3, [pc, #72]	@ (8005fb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f6e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005f72:	4a10      	ldr	r2, [pc, #64]	@ (8005fb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005f7c:	e011      	b.n	8005fa2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a0b      	ldr	r2, [pc, #44]	@ (8005fb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f84:	f023 0304 	bic.w	r3, r3, #4
 8005f88:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f90:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005f94:	4a07      	ldr	r2, [pc, #28]	@ (8005fb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005f9e:	e000      	b.n	8005fa2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005fa0:	bf00      	nop
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	e000e010 	.word	0xe000e010
 8005fb4:	46020c00 	.word	0x46020c00

08005fb8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005fbe:	4b19      	ldr	r3, [pc, #100]	@ (8006024 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005fca:	2304      	movs	r3, #4
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	e021      	b.n	8006014 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005fd0:	4b15      	ldr	r3, [pc, #84]	@ (8006028 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8005fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fd6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005fda:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fe2:	d011      	beq.n	8006008 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fea:	d810      	bhi.n	800600e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ff8:	d003      	beq.n	8006002 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005ffa:	e008      	b.n	800600e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	607b      	str	r3, [r7, #4]
        break;
 8006000:	e008      	b.n	8006014 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8006002:	2301      	movs	r3, #1
 8006004:	607b      	str	r3, [r7, #4]
        break;
 8006006:	e005      	b.n	8006014 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8006008:	2302      	movs	r3, #2
 800600a:	607b      	str	r3, [r7, #4]
        break;
 800600c:	e002      	b.n	8006014 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800600e:	2300      	movs	r3, #0
 8006010:	607b      	str	r3, [r7, #4]
        break;
 8006012:	bf00      	nop
    }
  }
  return systick_source;
 8006014:	687b      	ldr	r3, [r7, #4]
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	e000e010 	.word	0xe000e010
 8006028:	46020c00 	.word	0x46020c00

0800602c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006034:	f7fd fc1a 	bl	800386c <HAL_GetTick>
 8006038:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0db      	b.n	80061fc <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a6e      	ldr	r2, [pc, #440]	@ (8006204 <HAL_DMA_Init+0x1d8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	f000 809f 	beq.w	800618e <HAL_DMA_Init+0x162>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a6c      	ldr	r2, [pc, #432]	@ (8006208 <HAL_DMA_Init+0x1dc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	f000 8099 	beq.w	800618e <HAL_DMA_Init+0x162>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a6a      	ldr	r2, [pc, #424]	@ (800620c <HAL_DMA_Init+0x1e0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	f000 8093 	beq.w	800618e <HAL_DMA_Init+0x162>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a68      	ldr	r2, [pc, #416]	@ (8006210 <HAL_DMA_Init+0x1e4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	f000 808d 	beq.w	800618e <HAL_DMA_Init+0x162>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a66      	ldr	r2, [pc, #408]	@ (8006214 <HAL_DMA_Init+0x1e8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	f000 8087 	beq.w	800618e <HAL_DMA_Init+0x162>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a64      	ldr	r2, [pc, #400]	@ (8006218 <HAL_DMA_Init+0x1ec>)
 8006086:	4293      	cmp	r3, r2
 8006088:	f000 8081 	beq.w	800618e <HAL_DMA_Init+0x162>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a62      	ldr	r2, [pc, #392]	@ (800621c <HAL_DMA_Init+0x1f0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d07b      	beq.n	800618e <HAL_DMA_Init+0x162>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a61      	ldr	r2, [pc, #388]	@ (8006220 <HAL_DMA_Init+0x1f4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d076      	beq.n	800618e <HAL_DMA_Init+0x162>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a5f      	ldr	r2, [pc, #380]	@ (8006224 <HAL_DMA_Init+0x1f8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d071      	beq.n	800618e <HAL_DMA_Init+0x162>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006228 <HAL_DMA_Init+0x1fc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d06c      	beq.n	800618e <HAL_DMA_Init+0x162>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a5c      	ldr	r2, [pc, #368]	@ (800622c <HAL_DMA_Init+0x200>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d067      	beq.n	800618e <HAL_DMA_Init+0x162>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006230 <HAL_DMA_Init+0x204>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d062      	beq.n	800618e <HAL_DMA_Init+0x162>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a59      	ldr	r2, [pc, #356]	@ (8006234 <HAL_DMA_Init+0x208>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d05d      	beq.n	800618e <HAL_DMA_Init+0x162>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a58      	ldr	r2, [pc, #352]	@ (8006238 <HAL_DMA_Init+0x20c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d058      	beq.n	800618e <HAL_DMA_Init+0x162>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a56      	ldr	r2, [pc, #344]	@ (800623c <HAL_DMA_Init+0x210>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d053      	beq.n	800618e <HAL_DMA_Init+0x162>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a55      	ldr	r2, [pc, #340]	@ (8006240 <HAL_DMA_Init+0x214>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d04e      	beq.n	800618e <HAL_DMA_Init+0x162>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a53      	ldr	r2, [pc, #332]	@ (8006244 <HAL_DMA_Init+0x218>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d049      	beq.n	800618e <HAL_DMA_Init+0x162>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a52      	ldr	r2, [pc, #328]	@ (8006248 <HAL_DMA_Init+0x21c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d044      	beq.n	800618e <HAL_DMA_Init+0x162>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a50      	ldr	r2, [pc, #320]	@ (800624c <HAL_DMA_Init+0x220>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d03f      	beq.n	800618e <HAL_DMA_Init+0x162>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a4f      	ldr	r2, [pc, #316]	@ (8006250 <HAL_DMA_Init+0x224>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d03a      	beq.n	800618e <HAL_DMA_Init+0x162>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a4d      	ldr	r2, [pc, #308]	@ (8006254 <HAL_DMA_Init+0x228>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d035      	beq.n	800618e <HAL_DMA_Init+0x162>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a4c      	ldr	r2, [pc, #304]	@ (8006258 <HAL_DMA_Init+0x22c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d030      	beq.n	800618e <HAL_DMA_Init+0x162>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a4a      	ldr	r2, [pc, #296]	@ (800625c <HAL_DMA_Init+0x230>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d02b      	beq.n	800618e <HAL_DMA_Init+0x162>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a49      	ldr	r2, [pc, #292]	@ (8006260 <HAL_DMA_Init+0x234>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d026      	beq.n	800618e <HAL_DMA_Init+0x162>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a47      	ldr	r2, [pc, #284]	@ (8006264 <HAL_DMA_Init+0x238>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d021      	beq.n	800618e <HAL_DMA_Init+0x162>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a46      	ldr	r2, [pc, #280]	@ (8006268 <HAL_DMA_Init+0x23c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d01c      	beq.n	800618e <HAL_DMA_Init+0x162>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a44      	ldr	r2, [pc, #272]	@ (800626c <HAL_DMA_Init+0x240>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d017      	beq.n	800618e <HAL_DMA_Init+0x162>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a43      	ldr	r2, [pc, #268]	@ (8006270 <HAL_DMA_Init+0x244>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d012      	beq.n	800618e <HAL_DMA_Init+0x162>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a41      	ldr	r2, [pc, #260]	@ (8006274 <HAL_DMA_Init+0x248>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00d      	beq.n	800618e <HAL_DMA_Init+0x162>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a40      	ldr	r2, [pc, #256]	@ (8006278 <HAL_DMA_Init+0x24c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d008      	beq.n	800618e <HAL_DMA_Init+0x162>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a3e      	ldr	r2, [pc, #248]	@ (800627c <HAL_DMA_Init+0x250>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d003      	beq.n	800618e <HAL_DMA_Init+0x162>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a3d      	ldr	r2, [pc, #244]	@ (8006280 <HAL_DMA_Init+0x254>)
 800618c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0206 	orr.w	r2, r2, #6
 80061ac:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80061ae:	e00f      	b.n	80061d0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80061b0:	f7fd fb5c 	bl	800386c <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	d908      	bls.n	80061d0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2210      	movs	r2, #16
 80061c2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2203      	movs	r2, #3
 80061c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e015      	b.n	80061fc <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e8      	bne.n	80061b0 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fb26 	bl	8006830 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40020050 	.word	0x40020050
 8006208:	50020050 	.word	0x50020050
 800620c:	400200d0 	.word	0x400200d0
 8006210:	500200d0 	.word	0x500200d0
 8006214:	40020150 	.word	0x40020150
 8006218:	50020150 	.word	0x50020150
 800621c:	400201d0 	.word	0x400201d0
 8006220:	500201d0 	.word	0x500201d0
 8006224:	40020250 	.word	0x40020250
 8006228:	50020250 	.word	0x50020250
 800622c:	400202d0 	.word	0x400202d0
 8006230:	500202d0 	.word	0x500202d0
 8006234:	40020350 	.word	0x40020350
 8006238:	50020350 	.word	0x50020350
 800623c:	400203d0 	.word	0x400203d0
 8006240:	500203d0 	.word	0x500203d0
 8006244:	40020450 	.word	0x40020450
 8006248:	50020450 	.word	0x50020450
 800624c:	400204d0 	.word	0x400204d0
 8006250:	500204d0 	.word	0x500204d0
 8006254:	40020550 	.word	0x40020550
 8006258:	50020550 	.word	0x50020550
 800625c:	400205d0 	.word	0x400205d0
 8006260:	500205d0 	.word	0x500205d0
 8006264:	40020650 	.word	0x40020650
 8006268:	50020650 	.word	0x50020650
 800626c:	400206d0 	.word	0x400206d0
 8006270:	500206d0 	.word	0x500206d0
 8006274:	40020750 	.word	0x40020750
 8006278:	50020750 	.word	0x50020750
 800627c:	400207d0 	.word	0x400207d0
 8006280:	500207d0 	.word	0x500207d0

08006284 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e04f      	b.n	800633c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_DMA_Start_IT+0x26>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e048      	b.n	800633c <HAL_DMA_Start_IT+0xb8>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d136      	bne.n	800632c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fa86 	bl	80067e4 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80062e6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695a      	ldr	r2, [r3, #20]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062fe:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006316:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695a      	ldr	r2, [r3, #20]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	e007      	b.n	800633c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2240      	movs	r2, #64	@ 0x40
 8006330:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800634c:	f7fd fa8e 	bl	800386c <HAL_GetTick>
 8006350:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e06b      	b.n	8006434 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d008      	beq.n	800637a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e05c      	b.n	8006434 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695a      	ldr	r2, [r3, #20]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0204 	orr.w	r2, r2, #4
 8006388:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2205      	movs	r2, #5
 800638e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8006392:	e020      	b.n	80063d6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006394:	f7fd fa6a 	bl	800386c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b05      	cmp	r3, #5
 80063a0:	d919      	bls.n	80063d6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a6:	f043 0210 	orr.w	r2, r3, #16
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2203      	movs	r2, #3
 80063b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c6:	2201      	movs	r2, #1
 80063c8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e02e      	b.n	8006434 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0d7      	beq.n	8006394 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695a      	ldr	r2, [r3, #20]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0202 	orr.w	r2, r2, #2
 80063f2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2204      	movs	r2, #4
 80063f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8006404:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006416:	2b00      	cmp	r3, #0
 8006418:	d007      	beq.n	800642a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800641e:	2201      	movs	r2, #1
 8006420:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2200      	movs	r2, #0
 8006428:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e019      	b.n	8006482 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d004      	beq.n	8006464 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e00e      	b.n	8006482 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2204      	movs	r2, #4
 8006468:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800647a:	f043 0304 	orr.w	r3, r3, #4
 800647e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b086      	sub	sp, #24
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800649e:	f023 030f 	bic.w	r3, r3, #15
 80064a2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ac:	3b50      	subs	r3, #80	@ 0x50
 80064ae:	09db      	lsrs	r3, r3, #7
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	2201      	movs	r2, #1
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4013      	ands	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 813b 	beq.w	8006744 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d011      	beq.n	8006500 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064f2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f8:	f043 0201 	orr.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800650a:	2b00      	cmp	r3, #0
 800650c:	d011      	beq.n	8006532 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006524:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800652a:	f043 0202 	orr.w	r2, r3, #2
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d011      	beq.n	8006564 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006556:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655c:	f043 0204 	orr.w	r2, r3, #4
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d011      	beq.n	8006596 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006588:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658e:	f043 0208 	orr.w	r2, r3, #8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d013      	beq.n	80065cc <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00c      	beq.n	80065cc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065ba:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d04c      	beq.n	8006674 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d045      	beq.n	8006674 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80065f0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d12e      	bne.n	800665c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800660c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695a      	ldr	r2, [r3, #20]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0202 	orr.w	r2, r2, #2
 800661c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800662a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006636:	2201      	movs	r2, #1
 8006638:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2200      	movs	r2, #0
 8006640:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d07a      	beq.n	8006748 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
        }

        return;
 800665a:	e075      	b.n	8006748 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2205      	movs	r2, #5
 8006660:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d039      	beq.n	80066f6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668c:	2b00      	cmp	r3, #0
 800668e:	d032      	beq.n	80066f6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006698:	2b00      	cmp	r3, #0
 800669a:	d012      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d116      	bne.n	80066d4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d111      	bne.n	80066d4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066bc:	2201      	movs	r2, #1
 80066be:	731a      	strb	r2, [r3, #12]
 80066c0:	e008      	b.n	80066d4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80066dc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d025      	beq.n	800674a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0202 	orr.w	r2, r2, #2
 800670c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800671a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006726:	2201      	movs	r2, #1
 8006728:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006736:	2b00      	cmp	r3, #0
 8006738:	d007      	beq.n	800674a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
 8006742:	e002      	b.n	800674a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8006744:	bf00      	nop
 8006746:	e000      	b.n	800674a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8006748:	bf00      	nop
    }
  }
}
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800675e:	b2db      	uxtb	r3, r3
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e02b      	b.n	80067d8 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006788:	f023 030f 	bic.w	r3, r3, #15
 800678c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006796:	3b50      	subs	r3, #80	@ 0x50
 8006798:	09db      	lsrs	r3, r3, #7
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	2201      	movs	r2, #1
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d012      	beq.n	80067d6 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f003 0311 	and.w	r3, r3, #17
 80067b6:	2b11      	cmp	r3, #17
 80067b8:	d106      	bne.n	80067c8 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	605a      	str	r2, [r3, #4]
 80067c6:	e006      	b.n	80067d6 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	43db      	mvns	r3, r3
 80067d0:	401a      	ands	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067f8:	0c1b      	lsrs	r3, r3, #16
 80067fa:	041b      	lsls	r3, r3, #16
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	b291      	uxth	r1, r2
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	430b      	orrs	r3, r1
 8006806:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8006810:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	430a      	orrs	r2, r1
 8006850:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a53      	ldr	r2, [pc, #332]	@ (80069bc <DMA_Init+0x18c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	f000 80a0 	beq.w	80069b6 <DMA_Init+0x186>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a51      	ldr	r2, [pc, #324]	@ (80069c0 <DMA_Init+0x190>)
 800687c:	4293      	cmp	r3, r2
 800687e:	f000 809a 	beq.w	80069b6 <DMA_Init+0x186>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a4f      	ldr	r2, [pc, #316]	@ (80069c4 <DMA_Init+0x194>)
 8006888:	4293      	cmp	r3, r2
 800688a:	f000 8094 	beq.w	80069b6 <DMA_Init+0x186>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a4d      	ldr	r2, [pc, #308]	@ (80069c8 <DMA_Init+0x198>)
 8006894:	4293      	cmp	r3, r2
 8006896:	f000 808e 	beq.w	80069b6 <DMA_Init+0x186>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a4b      	ldr	r2, [pc, #300]	@ (80069cc <DMA_Init+0x19c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	f000 8088 	beq.w	80069b6 <DMA_Init+0x186>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a49      	ldr	r2, [pc, #292]	@ (80069d0 <DMA_Init+0x1a0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	f000 8082 	beq.w	80069b6 <DMA_Init+0x186>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a47      	ldr	r2, [pc, #284]	@ (80069d4 <DMA_Init+0x1a4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d07c      	beq.n	80069b6 <DMA_Init+0x186>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a45      	ldr	r2, [pc, #276]	@ (80069d8 <DMA_Init+0x1a8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d077      	beq.n	80069b6 <DMA_Init+0x186>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a44      	ldr	r2, [pc, #272]	@ (80069dc <DMA_Init+0x1ac>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d072      	beq.n	80069b6 <DMA_Init+0x186>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a42      	ldr	r2, [pc, #264]	@ (80069e0 <DMA_Init+0x1b0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d06d      	beq.n	80069b6 <DMA_Init+0x186>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a41      	ldr	r2, [pc, #260]	@ (80069e4 <DMA_Init+0x1b4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d068      	beq.n	80069b6 <DMA_Init+0x186>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a3f      	ldr	r2, [pc, #252]	@ (80069e8 <DMA_Init+0x1b8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d063      	beq.n	80069b6 <DMA_Init+0x186>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a3e      	ldr	r2, [pc, #248]	@ (80069ec <DMA_Init+0x1bc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d05e      	beq.n	80069b6 <DMA_Init+0x186>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3c      	ldr	r2, [pc, #240]	@ (80069f0 <DMA_Init+0x1c0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d059      	beq.n	80069b6 <DMA_Init+0x186>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a3b      	ldr	r2, [pc, #236]	@ (80069f4 <DMA_Init+0x1c4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d054      	beq.n	80069b6 <DMA_Init+0x186>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a39      	ldr	r2, [pc, #228]	@ (80069f8 <DMA_Init+0x1c8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d04f      	beq.n	80069b6 <DMA_Init+0x186>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a38      	ldr	r2, [pc, #224]	@ (80069fc <DMA_Init+0x1cc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d04a      	beq.n	80069b6 <DMA_Init+0x186>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a36      	ldr	r2, [pc, #216]	@ (8006a00 <DMA_Init+0x1d0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d045      	beq.n	80069b6 <DMA_Init+0x186>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a35      	ldr	r2, [pc, #212]	@ (8006a04 <DMA_Init+0x1d4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d040      	beq.n	80069b6 <DMA_Init+0x186>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a33      	ldr	r2, [pc, #204]	@ (8006a08 <DMA_Init+0x1d8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d03b      	beq.n	80069b6 <DMA_Init+0x186>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a32      	ldr	r2, [pc, #200]	@ (8006a0c <DMA_Init+0x1dc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d036      	beq.n	80069b6 <DMA_Init+0x186>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a30      	ldr	r2, [pc, #192]	@ (8006a10 <DMA_Init+0x1e0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d031      	beq.n	80069b6 <DMA_Init+0x186>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a2f      	ldr	r2, [pc, #188]	@ (8006a14 <DMA_Init+0x1e4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d02c      	beq.n	80069b6 <DMA_Init+0x186>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a2d      	ldr	r2, [pc, #180]	@ (8006a18 <DMA_Init+0x1e8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d027      	beq.n	80069b6 <DMA_Init+0x186>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2c      	ldr	r2, [pc, #176]	@ (8006a1c <DMA_Init+0x1ec>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d022      	beq.n	80069b6 <DMA_Init+0x186>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a2a      	ldr	r2, [pc, #168]	@ (8006a20 <DMA_Init+0x1f0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d01d      	beq.n	80069b6 <DMA_Init+0x186>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a29      	ldr	r2, [pc, #164]	@ (8006a24 <DMA_Init+0x1f4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d018      	beq.n	80069b6 <DMA_Init+0x186>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a27      	ldr	r2, [pc, #156]	@ (8006a28 <DMA_Init+0x1f8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d013      	beq.n	80069b6 <DMA_Init+0x186>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a26      	ldr	r2, [pc, #152]	@ (8006a2c <DMA_Init+0x1fc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00e      	beq.n	80069b6 <DMA_Init+0x186>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a24      	ldr	r2, [pc, #144]	@ (8006a30 <DMA_Init+0x200>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d009      	beq.n	80069b6 <DMA_Init+0x186>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a23      	ldr	r2, [pc, #140]	@ (8006a34 <DMA_Init+0x204>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d004      	beq.n	80069b6 <DMA_Init+0x186>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a21      	ldr	r2, [pc, #132]	@ (8006a38 <DMA_Init+0x208>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d142      	bne.n	8006a3c <DMA_Init+0x20c>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e041      	b.n	8006a3e <DMA_Init+0x20e>
 80069ba:	bf00      	nop
 80069bc:	40020050 	.word	0x40020050
 80069c0:	50020050 	.word	0x50020050
 80069c4:	400200d0 	.word	0x400200d0
 80069c8:	500200d0 	.word	0x500200d0
 80069cc:	40020150 	.word	0x40020150
 80069d0:	50020150 	.word	0x50020150
 80069d4:	400201d0 	.word	0x400201d0
 80069d8:	500201d0 	.word	0x500201d0
 80069dc:	40020250 	.word	0x40020250
 80069e0:	50020250 	.word	0x50020250
 80069e4:	400202d0 	.word	0x400202d0
 80069e8:	500202d0 	.word	0x500202d0
 80069ec:	40020350 	.word	0x40020350
 80069f0:	50020350 	.word	0x50020350
 80069f4:	400203d0 	.word	0x400203d0
 80069f8:	500203d0 	.word	0x500203d0
 80069fc:	40020450 	.word	0x40020450
 8006a00:	50020450 	.word	0x50020450
 8006a04:	400204d0 	.word	0x400204d0
 8006a08:	500204d0 	.word	0x500204d0
 8006a0c:	40020550 	.word	0x40020550
 8006a10:	50020550 	.word	0x50020550
 8006a14:	400205d0 	.word	0x400205d0
 8006a18:	500205d0 	.word	0x500205d0
 8006a1c:	40020650 	.word	0x40020650
 8006a20:	50020650 	.word	0x50020650
 8006a24:	400206d0 	.word	0x400206d0
 8006a28:	500206d0 	.word	0x500206d0
 8006a2c:	40020750 	.word	0x40020750
 8006a30:	50020750 	.word	0x50020750
 8006a34:	400207d0 	.word	0x400207d0
 8006a38:	500207d0 	.word	0x500207d0
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d012      	beq.n	8006a68 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	051b      	lsls	r3, r3, #20
 8006a4e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006a52:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006a60:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a9a:	f040 80b0 	bne.w	8006bfe <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a82      	ldr	r2, [pc, #520]	@ (8006cac <DMA_Init+0x47c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	f000 80a0 	beq.w	8006bea <DMA_Init+0x3ba>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a80      	ldr	r2, [pc, #512]	@ (8006cb0 <DMA_Init+0x480>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	f000 809a 	beq.w	8006bea <DMA_Init+0x3ba>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a7e      	ldr	r2, [pc, #504]	@ (8006cb4 <DMA_Init+0x484>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	f000 8094 	beq.w	8006bea <DMA_Init+0x3ba>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8006cb8 <DMA_Init+0x488>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	f000 808e 	beq.w	8006bea <DMA_Init+0x3ba>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a7a      	ldr	r2, [pc, #488]	@ (8006cbc <DMA_Init+0x48c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	f000 8088 	beq.w	8006bea <DMA_Init+0x3ba>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a78      	ldr	r2, [pc, #480]	@ (8006cc0 <DMA_Init+0x490>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	f000 8082 	beq.w	8006bea <DMA_Init+0x3ba>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a76      	ldr	r2, [pc, #472]	@ (8006cc4 <DMA_Init+0x494>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d07c      	beq.n	8006bea <DMA_Init+0x3ba>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a74      	ldr	r2, [pc, #464]	@ (8006cc8 <DMA_Init+0x498>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d077      	beq.n	8006bea <DMA_Init+0x3ba>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a73      	ldr	r2, [pc, #460]	@ (8006ccc <DMA_Init+0x49c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d072      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a71      	ldr	r2, [pc, #452]	@ (8006cd0 <DMA_Init+0x4a0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d06d      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a70      	ldr	r2, [pc, #448]	@ (8006cd4 <DMA_Init+0x4a4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d068      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8006cd8 <DMA_Init+0x4a8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d063      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a6d      	ldr	r2, [pc, #436]	@ (8006cdc <DMA_Init+0x4ac>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d05e      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a6b      	ldr	r2, [pc, #428]	@ (8006ce0 <DMA_Init+0x4b0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d059      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a6a      	ldr	r2, [pc, #424]	@ (8006ce4 <DMA_Init+0x4b4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d054      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a68      	ldr	r2, [pc, #416]	@ (8006ce8 <DMA_Init+0x4b8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d04f      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a67      	ldr	r2, [pc, #412]	@ (8006cec <DMA_Init+0x4bc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d04a      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a65      	ldr	r2, [pc, #404]	@ (8006cf0 <DMA_Init+0x4c0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d045      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a64      	ldr	r2, [pc, #400]	@ (8006cf4 <DMA_Init+0x4c4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d040      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a62      	ldr	r2, [pc, #392]	@ (8006cf8 <DMA_Init+0x4c8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d03b      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a61      	ldr	r2, [pc, #388]	@ (8006cfc <DMA_Init+0x4cc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d036      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a5f      	ldr	r2, [pc, #380]	@ (8006d00 <DMA_Init+0x4d0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d031      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a5e      	ldr	r2, [pc, #376]	@ (8006d04 <DMA_Init+0x4d4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d02c      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a5c      	ldr	r2, [pc, #368]	@ (8006d08 <DMA_Init+0x4d8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d027      	beq.n	8006bea <DMA_Init+0x3ba>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8006d0c <DMA_Init+0x4dc>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d022      	beq.n	8006bea <DMA_Init+0x3ba>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a59      	ldr	r2, [pc, #356]	@ (8006d10 <DMA_Init+0x4e0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d01d      	beq.n	8006bea <DMA_Init+0x3ba>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a58      	ldr	r2, [pc, #352]	@ (8006d14 <DMA_Init+0x4e4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d018      	beq.n	8006bea <DMA_Init+0x3ba>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a56      	ldr	r2, [pc, #344]	@ (8006d18 <DMA_Init+0x4e8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <DMA_Init+0x3ba>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a55      	ldr	r2, [pc, #340]	@ (8006d1c <DMA_Init+0x4ec>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00e      	beq.n	8006bea <DMA_Init+0x3ba>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a53      	ldr	r2, [pc, #332]	@ (8006d20 <DMA_Init+0x4f0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d009      	beq.n	8006bea <DMA_Init+0x3ba>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a52      	ldr	r2, [pc, #328]	@ (8006d24 <DMA_Init+0x4f4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d004      	beq.n	8006bea <DMA_Init+0x3ba>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a50      	ldr	r2, [pc, #320]	@ (8006d28 <DMA_Init+0x4f8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d101      	bne.n	8006bee <DMA_Init+0x3be>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e000      	b.n	8006bf0 <DMA_Init+0x3c0>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00d      	beq.n	8006c10 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	e008      	b.n	8006c10 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c06:	d103      	bne.n	8006c10 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c0e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c16:	4b45      	ldr	r3, [pc, #276]	@ (8006d2c <DMA_Init+0x4fc>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6812      	ldr	r2, [r2, #0]
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	430b      	orrs	r3, r1
 8006c22:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a36      	ldr	r2, [pc, #216]	@ (8006d0c <DMA_Init+0x4dc>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d022      	beq.n	8006c7c <DMA_Init+0x44c>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a35      	ldr	r2, [pc, #212]	@ (8006d10 <DMA_Init+0x4e0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01d      	beq.n	8006c7c <DMA_Init+0x44c>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a33      	ldr	r2, [pc, #204]	@ (8006d14 <DMA_Init+0x4e4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <DMA_Init+0x44c>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a32      	ldr	r2, [pc, #200]	@ (8006d18 <DMA_Init+0x4e8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <DMA_Init+0x44c>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a30      	ldr	r2, [pc, #192]	@ (8006d1c <DMA_Init+0x4ec>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <DMA_Init+0x44c>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a2f      	ldr	r2, [pc, #188]	@ (8006d20 <DMA_Init+0x4f0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <DMA_Init+0x44c>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006d24 <DMA_Init+0x4f4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <DMA_Init+0x44c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2c      	ldr	r2, [pc, #176]	@ (8006d28 <DMA_Init+0x4f8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d101      	bne.n	8006c80 <DMA_Init+0x450>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <DMA_Init+0x452>
 8006c80:	2300      	movs	r3, #0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d007      	beq.n	8006c96 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2200      	movs	r2, #0
 8006c94:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006c9e:	bf00      	nop
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40020050 	.word	0x40020050
 8006cb0:	50020050 	.word	0x50020050
 8006cb4:	400200d0 	.word	0x400200d0
 8006cb8:	500200d0 	.word	0x500200d0
 8006cbc:	40020150 	.word	0x40020150
 8006cc0:	50020150 	.word	0x50020150
 8006cc4:	400201d0 	.word	0x400201d0
 8006cc8:	500201d0 	.word	0x500201d0
 8006ccc:	40020250 	.word	0x40020250
 8006cd0:	50020250 	.word	0x50020250
 8006cd4:	400202d0 	.word	0x400202d0
 8006cd8:	500202d0 	.word	0x500202d0
 8006cdc:	40020350 	.word	0x40020350
 8006ce0:	50020350 	.word	0x50020350
 8006ce4:	400203d0 	.word	0x400203d0
 8006ce8:	500203d0 	.word	0x500203d0
 8006cec:	40020450 	.word	0x40020450
 8006cf0:	50020450 	.word	0x50020450
 8006cf4:	400204d0 	.word	0x400204d0
 8006cf8:	500204d0 	.word	0x500204d0
 8006cfc:	40020550 	.word	0x40020550
 8006d00:	50020550 	.word	0x50020550
 8006d04:	400205d0 	.word	0x400205d0
 8006d08:	500205d0 	.word	0x500205d0
 8006d0c:	40020650 	.word	0x40020650
 8006d10:	50020650 	.word	0x50020650
 8006d14:	400206d0 	.word	0x400206d0
 8006d18:	500206d0 	.word	0x500206d0
 8006d1c:	40020750 	.word	0x40020750
 8006d20:	50020750 	.word	0x50020750
 8006d24:	400207d0 	.word	0x400207d0
 8006d28:	500207d0 	.word	0x500207d0
 8006d2c:	3c803180 	.word	0x3c803180

08006d30 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e053      	b.n	8006dea <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fb fd64 	bl	8002824 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	6851      	ldr	r1, [r2, #4]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	69d2      	ldr	r2, [r2, #28]
 8006d7a:	4311      	orrs	r1, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	430b      	orrs	r3, r1
 8006d82:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d8a:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8006d8e:	f023 0301 	bic.w	r3, r3, #1
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6891      	ldr	r1, [r2, #8]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6992      	ldr	r2, [r2, #24]
 8006d9a:	4311      	orrs	r1, r2
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6812      	ldr	r2, [r2, #0]
 8006da0:	430b      	orrs	r3, r1
 8006da2:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006daa:	0c1b      	lsrs	r3, r3, #16
 8006dac:	041b      	lsls	r3, r3, #16
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68d1      	ldr	r1, [r2, #12]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6812      	ldr	r2, [r2, #0]
 8006db6:	430b      	orrs	r3, r1
 8006db8:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	051a      	lsls	r2, r3, #20
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	055b      	lsls	r3, r3, #21
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_DMA2D_ConfigLayer+0x24>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e092      	b.n	8006f3e <HAL_DMA2D_ConfigLayer+0x14a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	3328      	adds	r3, #40	@ 0x28
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	4413      	add	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	041b      	lsls	r3, r3, #16
 8006e44:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006e4c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006e58:	4b3c      	ldr	r3, [pc, #240]	@ (8006f4c <HAL_DMA2D_ConfigLayer+0x158>)
 8006e5a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b0a      	cmp	r3, #10
 8006e62:	d003      	beq.n	8006e6c <HAL_DMA2D_ConfigLayer+0x78>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b09      	cmp	r3, #9
 8006e6a:	d107      	bne.n	8006e7c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
 8006e7a:	e005      	b.n	8006e88 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	061b      	lsls	r3, r3, #24
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d120      	bne.n	8006ed0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	43db      	mvns	r3, r3
 8006e98:	ea02 0103 	and.w	r1, r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	6812      	ldr	r2, [r2, #0]
 8006eae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2b0a      	cmp	r3, #10
 8006eb6:	d003      	beq.n	8006ec0 <HAL_DMA2D_ConfigLayer+0xcc>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b09      	cmp	r3, #9
 8006ebe:	d135      	bne.n	8006f2c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006ecc:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ece:	e02d      	b.n	8006f2c <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b0b      	cmp	r3, #11
 8006ed6:	d109      	bne.n	8006eec <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	049b      	lsls	r3, r3, #18
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006eea:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69da      	ldr	r2, [r3, #28]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	ea02 0103 	and.w	r1, r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	6812      	ldr	r2, [r2, #0]
 8006f0c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b0a      	cmp	r3, #10
 8006f14:	d003      	beq.n	8006f1e <HAL_DMA2D_ConfigLayer+0x12a>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2b09      	cmp	r3, #9
 8006f1c:	d106      	bne.n	8006f2c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006f2a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	ff33000f 	.word	0xff33000f

08006f50 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006f58:	f7fc fc88 	bl	800386c <HAL_GetTick>
 8006f5c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0db      	b.n	8007120 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8007128 <HAL_DMAEx_List_Init+0x1d8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	f000 809f 	beq.w	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a6c      	ldr	r2, [pc, #432]	@ (800712c <HAL_DMAEx_List_Init+0x1dc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	f000 8099 	beq.w	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a6a      	ldr	r2, [pc, #424]	@ (8007130 <HAL_DMAEx_List_Init+0x1e0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	f000 8093 	beq.w	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a68      	ldr	r2, [pc, #416]	@ (8007134 <HAL_DMAEx_List_Init+0x1e4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	f000 808d 	beq.w	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a66      	ldr	r2, [pc, #408]	@ (8007138 <HAL_DMAEx_List_Init+0x1e8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	f000 8087 	beq.w	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a64      	ldr	r2, [pc, #400]	@ (800713c <HAL_DMAEx_List_Init+0x1ec>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	f000 8081 	beq.w	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a62      	ldr	r2, [pc, #392]	@ (8007140 <HAL_DMAEx_List_Init+0x1f0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d07b      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a61      	ldr	r2, [pc, #388]	@ (8007144 <HAL_DMAEx_List_Init+0x1f4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d076      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a5f      	ldr	r2, [pc, #380]	@ (8007148 <HAL_DMAEx_List_Init+0x1f8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d071      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800714c <HAL_DMAEx_List_Init+0x1fc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d06c      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8007150 <HAL_DMAEx_List_Init+0x200>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d067      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8007154 <HAL_DMAEx_List_Init+0x204>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d062      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a59      	ldr	r2, [pc, #356]	@ (8007158 <HAL_DMAEx_List_Init+0x208>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d05d      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a58      	ldr	r2, [pc, #352]	@ (800715c <HAL_DMAEx_List_Init+0x20c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d058      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a56      	ldr	r2, [pc, #344]	@ (8007160 <HAL_DMAEx_List_Init+0x210>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d053      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a55      	ldr	r2, [pc, #340]	@ (8007164 <HAL_DMAEx_List_Init+0x214>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d04e      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a53      	ldr	r2, [pc, #332]	@ (8007168 <HAL_DMAEx_List_Init+0x218>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d049      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a52      	ldr	r2, [pc, #328]	@ (800716c <HAL_DMAEx_List_Init+0x21c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d044      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a50      	ldr	r2, [pc, #320]	@ (8007170 <HAL_DMAEx_List_Init+0x220>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d03f      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a4f      	ldr	r2, [pc, #316]	@ (8007174 <HAL_DMAEx_List_Init+0x224>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d03a      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a4d      	ldr	r2, [pc, #308]	@ (8007178 <HAL_DMAEx_List_Init+0x228>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d035      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a4c      	ldr	r2, [pc, #304]	@ (800717c <HAL_DMAEx_List_Init+0x22c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d030      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a4a      	ldr	r2, [pc, #296]	@ (8007180 <HAL_DMAEx_List_Init+0x230>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d02b      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a49      	ldr	r2, [pc, #292]	@ (8007184 <HAL_DMAEx_List_Init+0x234>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d026      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a47      	ldr	r2, [pc, #284]	@ (8007188 <HAL_DMAEx_List_Init+0x238>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d021      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a46      	ldr	r2, [pc, #280]	@ (800718c <HAL_DMAEx_List_Init+0x23c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d01c      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a44      	ldr	r2, [pc, #272]	@ (8007190 <HAL_DMAEx_List_Init+0x240>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d017      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a43      	ldr	r2, [pc, #268]	@ (8007194 <HAL_DMAEx_List_Init+0x244>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d012      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a41      	ldr	r2, [pc, #260]	@ (8007198 <HAL_DMAEx_List_Init+0x248>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00d      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a40      	ldr	r2, [pc, #256]	@ (800719c <HAL_DMAEx_List_Init+0x24c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d008      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a3e      	ldr	r2, [pc, #248]	@ (80071a0 <HAL_DMAEx_List_Init+0x250>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d003      	beq.n	80070b2 <HAL_DMAEx_List_Init+0x162>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a3d      	ldr	r2, [pc, #244]	@ (80071a4 <HAL_DMAEx_List_Init+0x254>)
 80070b0:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0206 	orr.w	r2, r2, #6
 80070d0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80070d2:	e00f      	b.n	80070f4 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80070d4:	f7fc fbca 	bl	800386c <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b05      	cmp	r3, #5
 80070e0:	d908      	bls.n	80070f4 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2210      	movs	r2, #16
 80070e6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2203      	movs	r2, #3
 80070ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e015      	b.n	8007120 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e8      	bne.n	80070d4 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fb16 	bl	8007734 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40020050 	.word	0x40020050
 800712c:	50020050 	.word	0x50020050
 8007130:	400200d0 	.word	0x400200d0
 8007134:	500200d0 	.word	0x500200d0
 8007138:	40020150 	.word	0x40020150
 800713c:	50020150 	.word	0x50020150
 8007140:	400201d0 	.word	0x400201d0
 8007144:	500201d0 	.word	0x500201d0
 8007148:	40020250 	.word	0x40020250
 800714c:	50020250 	.word	0x50020250
 8007150:	400202d0 	.word	0x400202d0
 8007154:	500202d0 	.word	0x500202d0
 8007158:	40020350 	.word	0x40020350
 800715c:	50020350 	.word	0x50020350
 8007160:	400203d0 	.word	0x400203d0
 8007164:	500203d0 	.word	0x500203d0
 8007168:	40020450 	.word	0x40020450
 800716c:	50020450 	.word	0x50020450
 8007170:	400204d0 	.word	0x400204d0
 8007174:	500204d0 	.word	0x500204d0
 8007178:	40020550 	.word	0x40020550
 800717c:	50020550 	.word	0x50020550
 8007180:	400205d0 	.word	0x400205d0
 8007184:	500205d0 	.word	0x500205d0
 8007188:	40020650 	.word	0x40020650
 800718c:	50020650 	.word	0x50020650
 8007190:	400206d0 	.word	0x400206d0
 8007194:	500206d0 	.word	0x500206d0
 8007198:	40020750 	.word	0x40020750
 800719c:	50020750 	.word	0x50020750
 80071a0:	400207d0 	.word	0x400207d0
 80071a4:	500207d0 	.word	0x500207d0

080071a8 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_DMAEx_List_Start_IT+0x16>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e082      	b.n	80072c8 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80071c8:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071d4:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d005      	beq.n	80071e8 <HAL_DMAEx_List_Start_IT+0x40>
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d16a      	bne.n	80072b8 <HAL_DMAEx_List_Start_IT+0x110>
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d067      	beq.n	80072b8 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d157      	bne.n	80072a4 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_DMAEx_List_Start_IT+0x5a>
 80071fe:	2302      	movs	r3, #2
 8007200:	e062      	b.n	80072c8 <HAL_DMAEx_List_Start_IT+0x120>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007216:	2202      	movs	r2, #2
 8007218:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007224:	2200      	movs	r2, #0
 8007226:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695a      	ldr	r2, [r3, #20]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8007236:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695a      	ldr	r2, [r3, #20]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800724e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007254:	2b00      	cmp	r3, #0
 8007256:	d007      	beq.n	8007268 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695a      	ldr	r2, [r3, #20]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007266:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f107 010c 	add.w	r1, r7, #12
 8007272:	2200      	movs	r2, #0
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fe7d 	bl	8007f74 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4619      	mov	r1, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	0c0b      	lsrs	r3, r1, #16
 8007288:	041b      	lsls	r3, r3, #16
 800728a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007298:	4013      	ands	r3, r2
 800729a:	68f9      	ldr	r1, [r7, #12]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	430b      	orrs	r3, r1
 80072a2:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695a      	ldr	r2, [r3, #20]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	e007      	b.n	80072c8 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2240      	movs	r2, #64	@ 0x40
 80072bc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_DMAEx_List_BuildNode+0x16>
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e004      	b.n	80072f4 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fb79 	bl	80079e4 <DMA_List_BuildNode>

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <HAL_DMAEx_List_GetNodeConfig+0x16>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e004      	b.n	8007320 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fcb5 	bl	8007c88 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08c      	sub	sp, #48	@ 0x30
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <HAL_DMAEx_List_InsertNode+0x18>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e0b6      	b.n	80074b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d104      	bne.n	8007356 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2204      	movs	r2, #4
 8007350:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e0ad      	b.n	80074b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fd9c 	bl	8007e9c <DMA_List_CheckNodesBaseAddresses>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d004      	beq.n	8007374 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2205      	movs	r2, #5
 800736e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e09e      	b.n	80074b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fdbd 	bl	8007efc <DMA_List_CheckNodesTypes>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d004      	beq.n	8007392 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2204      	movs	r2, #4
 800738c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e08f      	b.n	80074b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2202      	movs	r2, #2
 8007396:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800739e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80073a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fde3 	bl	8007f74 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d11a      	bne.n	80073ec <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	609a      	str	r2, [r3, #8]
 80073c8:	e06c      	b.n	80074a4 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073d6:	4013      	ands	r3, r2
 80073d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073dc:	4319      	orrs	r1, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2202      	movs	r2, #2
 80073e8:	609a      	str	r2, [r3, #8]
 80073ea:	e05b      	b.n	80074a4 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10f      	bne.n	8007412 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073fc:	4013      	ands	r3, r2
 80073fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007402:	4319      	orrs	r1, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	e043      	b.n	800749a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8007412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007414:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8007416:	f107 0314 	add.w	r3, r7, #20
 800741a:	461a      	mov	r2, r3
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fdd8 	bl	8007fd4 <DMA_List_FindNode>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d132      	bne.n	8007490 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	429a      	cmp	r2, r3
 8007432:	d11a      	bne.n	800746a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	461a      	mov	r2, r3
 8007442:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007446:	4013      	ands	r3, r2
 8007448:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800744a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800744c:	4319      	orrs	r1, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800745a:	4013      	ands	r3, r2
 800745c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800745e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007460:	4319      	orrs	r1, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007468:	e017      	b.n	800749a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800746a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800746c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007480:	4013      	ands	r3, r2
 8007482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007486:	4319      	orrs	r1, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800748e:	e004      	b.n	800749a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2206      	movs	r2, #6
 8007494:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e00b      	b.n	80074b2 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3730      	adds	r7, #48	@ 0x30
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b08a      	sub	sp, #40	@ 0x28
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e052      	b.n	8007572 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e049      	b.n	8007572 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00c      	beq.n	8007500 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d101      	bne.n	80074f6 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	e03d      	b.n	8007572 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2204      	movs	r2, #4
 80074fa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e038      	b.n	8007572 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d104      	bne.n	8007512 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2204      	movs	r2, #4
 800750c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e02f      	b.n	8007572 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f107 0220 	add.w	r2, r7, #32
 8007526:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fd22 	bl	8007f74 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8007534:	f107 030c 	add.w	r3, r7, #12
 8007538:	461a      	mov	r2, r3
 800753a:	2100      	movs	r1, #0
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fd49 	bl	8007fd4 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800754c:	4013      	ands	r3, r2
 800754e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	4610      	mov	r0, r2
 8007554:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8007556:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007558:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3728      	adds	r7, #40	@ 0x28
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_DMAEx_List_LinkQ+0x16>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e072      	b.n	800767c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800759c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d002      	beq.n	80075b0 <HAL_DMAEx_List_LinkQ+0x34>
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	2b05      	cmp	r3, #5
 80075ae:	d108      	bne.n	80075c2 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2240      	movs	r2, #64	@ 0x40
 80075b4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e05c      	b.n	800767c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	7b1b      	ldrb	r3, [r3, #12]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d104      	bne.n	80075d6 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2201      	movs	r2, #1
 80075d0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e052      	b.n	800767c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2b      	ldr	r2, [pc, #172]	@ (8007688 <HAL_DMAEx_List_LinkQ+0x10c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d022      	beq.n	8007626 <HAL_DMAEx_List_LinkQ+0xaa>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a29      	ldr	r2, [pc, #164]	@ (800768c <HAL_DMAEx_List_LinkQ+0x110>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d01d      	beq.n	8007626 <HAL_DMAEx_List_LinkQ+0xaa>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a28      	ldr	r2, [pc, #160]	@ (8007690 <HAL_DMAEx_List_LinkQ+0x114>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d018      	beq.n	8007626 <HAL_DMAEx_List_LinkQ+0xaa>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a26      	ldr	r2, [pc, #152]	@ (8007694 <HAL_DMAEx_List_LinkQ+0x118>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <HAL_DMAEx_List_LinkQ+0xaa>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a25      	ldr	r2, [pc, #148]	@ (8007698 <HAL_DMAEx_List_LinkQ+0x11c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00e      	beq.n	8007626 <HAL_DMAEx_List_LinkQ+0xaa>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a23      	ldr	r2, [pc, #140]	@ (800769c <HAL_DMAEx_List_LinkQ+0x120>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d009      	beq.n	8007626 <HAL_DMAEx_List_LinkQ+0xaa>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a22      	ldr	r2, [pc, #136]	@ (80076a0 <HAL_DMAEx_List_LinkQ+0x124>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d004      	beq.n	8007626 <HAL_DMAEx_List_LinkQ+0xaa>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a20      	ldr	r2, [pc, #128]	@ (80076a4 <HAL_DMAEx_List_LinkQ+0x128>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d101      	bne.n	800762a <HAL_DMAEx_List_LinkQ+0xae>
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <HAL_DMAEx_List_LinkQ+0xb0>
 800762a:	2300      	movs	r3, #0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10b      	bne.n	8007648 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800763a:	2b00      	cmp	r3, #0
 800763c:	d004      	beq.n	8007648 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2203      	movs	r2, #3
 8007642:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e019      	b.n	800767c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800764c:	2b81      	cmp	r3, #129	@ 0x81
 800764e:	d108      	bne.n	8007662 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10d      	bne.n	8007674 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2204      	movs	r2, #4
 800765c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e00c      	b.n	800767c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d004      	beq.n	8007674 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2204      	movs	r2, #4
 800766e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e003      	b.n	800767c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	40020650 	.word	0x40020650
 800768c:	50020650 	.word	0x50020650
 8007690:	400206d0 	.word	0x400206d0
 8007694:	500206d0 	.word	0x500206d0
 8007698:	40020750 	.word	0x40020750
 800769c:	50020750 	.word	0x50020750
 80076a0:	400207d0 	.word	0x400207d0
 80076a4:	500207d0 	.word	0x500207d0

080076a8 <HAL_DMAEx_ConfigTrigger>:
  * @param  pConfigTrigger : Pointer to a DMA_TriggerConfTypeDef structure that contains the trigger configuration.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigTrigger(DMA_HandleTypeDef *const hdma,
                                          DMA_TriggerConfTypeDef const *const pConfigTrigger)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  /* Check the DMA peripheral handle and trigger parameters */
  if ((hdma == NULL) || (pConfigTrigger == NULL))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_DMAEx_ConfigTrigger+0x16>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_DMAEx_ConfigTrigger+0x1a>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e023      	b.n	800770a <HAL_DMAEx_ConfigTrigger+0x62>
  assert_param(IS_DMA_TRIGGER_POLARITY(pConfigTrigger->TriggerPolarity));
  assert_param(IS_DMA_TRIGGER_MODE(pConfigTrigger->TriggerMode));
  assert_param(IS_DMA_TRIGGER_SELECTION(pConfigTrigger->TriggerSelection));

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d115      	bne.n	80076fa <HAL_DMAEx_ConfigTrigger+0x52>
  {
    MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM),
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d4:	f023 735f 	bic.w	r3, r3, #58458112	@ 0x37c0000
 80076d8:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	6851      	ldr	r1, [r2, #4]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	6812      	ldr	r2, [r2, #0]
 80076e4:	4311      	orrs	r1, r2
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	6892      	ldr	r2, [r2, #8]
 80076ea:	0412      	lsls	r2, r2, #16
 80076ec:	4311      	orrs	r1, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	430b      	orrs	r3, r1
 80076f4:	6453      	str	r3, [r2, #68]	@ 0x44
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e007      	b.n	800770a <HAL_DMAEx_ConfigTrigger+0x62>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2240      	movs	r2, #64	@ 0x40
 80076fe:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	0c1b      	lsrs	r3, r3, #16
 8007726:	b2db      	uxtb	r3, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a85      	ldr	r2, [pc, #532]	@ (8007964 <DMA_List_Init+0x230>)
 800774e:	4293      	cmp	r3, r2
 8007750:	f000 80a0 	beq.w	8007894 <DMA_List_Init+0x160>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a83      	ldr	r2, [pc, #524]	@ (8007968 <DMA_List_Init+0x234>)
 800775a:	4293      	cmp	r3, r2
 800775c:	f000 809a 	beq.w	8007894 <DMA_List_Init+0x160>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a81      	ldr	r2, [pc, #516]	@ (800796c <DMA_List_Init+0x238>)
 8007766:	4293      	cmp	r3, r2
 8007768:	f000 8094 	beq.w	8007894 <DMA_List_Init+0x160>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a7f      	ldr	r2, [pc, #508]	@ (8007970 <DMA_List_Init+0x23c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	f000 808e 	beq.w	8007894 <DMA_List_Init+0x160>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a7d      	ldr	r2, [pc, #500]	@ (8007974 <DMA_List_Init+0x240>)
 800777e:	4293      	cmp	r3, r2
 8007780:	f000 8088 	beq.w	8007894 <DMA_List_Init+0x160>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a7b      	ldr	r2, [pc, #492]	@ (8007978 <DMA_List_Init+0x244>)
 800778a:	4293      	cmp	r3, r2
 800778c:	f000 8082 	beq.w	8007894 <DMA_List_Init+0x160>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a79      	ldr	r2, [pc, #484]	@ (800797c <DMA_List_Init+0x248>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d07c      	beq.n	8007894 <DMA_List_Init+0x160>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a78      	ldr	r2, [pc, #480]	@ (8007980 <DMA_List_Init+0x24c>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d077      	beq.n	8007894 <DMA_List_Init+0x160>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a76      	ldr	r2, [pc, #472]	@ (8007984 <DMA_List_Init+0x250>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d072      	beq.n	8007894 <DMA_List_Init+0x160>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a75      	ldr	r2, [pc, #468]	@ (8007988 <DMA_List_Init+0x254>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d06d      	beq.n	8007894 <DMA_List_Init+0x160>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a73      	ldr	r2, [pc, #460]	@ (800798c <DMA_List_Init+0x258>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d068      	beq.n	8007894 <DMA_List_Init+0x160>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a72      	ldr	r2, [pc, #456]	@ (8007990 <DMA_List_Init+0x25c>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d063      	beq.n	8007894 <DMA_List_Init+0x160>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a70      	ldr	r2, [pc, #448]	@ (8007994 <DMA_List_Init+0x260>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d05e      	beq.n	8007894 <DMA_List_Init+0x160>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a6f      	ldr	r2, [pc, #444]	@ (8007998 <DMA_List_Init+0x264>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d059      	beq.n	8007894 <DMA_List_Init+0x160>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a6d      	ldr	r2, [pc, #436]	@ (800799c <DMA_List_Init+0x268>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d054      	beq.n	8007894 <DMA_List_Init+0x160>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a6c      	ldr	r2, [pc, #432]	@ (80079a0 <DMA_List_Init+0x26c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d04f      	beq.n	8007894 <DMA_List_Init+0x160>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a6a      	ldr	r2, [pc, #424]	@ (80079a4 <DMA_List_Init+0x270>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d04a      	beq.n	8007894 <DMA_List_Init+0x160>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a69      	ldr	r2, [pc, #420]	@ (80079a8 <DMA_List_Init+0x274>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d045      	beq.n	8007894 <DMA_List_Init+0x160>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a67      	ldr	r2, [pc, #412]	@ (80079ac <DMA_List_Init+0x278>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d040      	beq.n	8007894 <DMA_List_Init+0x160>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a66      	ldr	r2, [pc, #408]	@ (80079b0 <DMA_List_Init+0x27c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d03b      	beq.n	8007894 <DMA_List_Init+0x160>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a64      	ldr	r2, [pc, #400]	@ (80079b4 <DMA_List_Init+0x280>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d036      	beq.n	8007894 <DMA_List_Init+0x160>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a63      	ldr	r2, [pc, #396]	@ (80079b8 <DMA_List_Init+0x284>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d031      	beq.n	8007894 <DMA_List_Init+0x160>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a61      	ldr	r2, [pc, #388]	@ (80079bc <DMA_List_Init+0x288>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d02c      	beq.n	8007894 <DMA_List_Init+0x160>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a60      	ldr	r2, [pc, #384]	@ (80079c0 <DMA_List_Init+0x28c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d027      	beq.n	8007894 <DMA_List_Init+0x160>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a5e      	ldr	r2, [pc, #376]	@ (80079c4 <DMA_List_Init+0x290>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d022      	beq.n	8007894 <DMA_List_Init+0x160>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a5d      	ldr	r2, [pc, #372]	@ (80079c8 <DMA_List_Init+0x294>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d01d      	beq.n	8007894 <DMA_List_Init+0x160>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a5b      	ldr	r2, [pc, #364]	@ (80079cc <DMA_List_Init+0x298>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d018      	beq.n	8007894 <DMA_List_Init+0x160>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a5a      	ldr	r2, [pc, #360]	@ (80079d0 <DMA_List_Init+0x29c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d013      	beq.n	8007894 <DMA_List_Init+0x160>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a58      	ldr	r2, [pc, #352]	@ (80079d4 <DMA_List_Init+0x2a0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00e      	beq.n	8007894 <DMA_List_Init+0x160>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a57      	ldr	r2, [pc, #348]	@ (80079d8 <DMA_List_Init+0x2a4>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d009      	beq.n	8007894 <DMA_List_Init+0x160>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a55      	ldr	r2, [pc, #340]	@ (80079dc <DMA_List_Init+0x2a8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d004      	beq.n	8007894 <DMA_List_Init+0x160>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a54      	ldr	r2, [pc, #336]	@ (80079e0 <DMA_List_Init+0x2ac>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d101      	bne.n	8007898 <DMA_List_Init+0x164>
 8007894:	2301      	movs	r3, #1
 8007896:	e000      	b.n	800789a <DMA_List_Init+0x166>
 8007898:	2300      	movs	r3, #0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d004      	beq.n	80078a8 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2200      	movs	r2, #0
 80078c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80078cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2200      	movs	r2, #0
 80078dc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2200      	movs	r2, #0
 80078e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a36      	ldr	r2, [pc, #216]	@ (80079c4 <DMA_List_Init+0x290>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d022      	beq.n	8007936 <DMA_List_Init+0x202>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a34      	ldr	r2, [pc, #208]	@ (80079c8 <DMA_List_Init+0x294>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d01d      	beq.n	8007936 <DMA_List_Init+0x202>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a33      	ldr	r2, [pc, #204]	@ (80079cc <DMA_List_Init+0x298>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d018      	beq.n	8007936 <DMA_List_Init+0x202>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a31      	ldr	r2, [pc, #196]	@ (80079d0 <DMA_List_Init+0x29c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d013      	beq.n	8007936 <DMA_List_Init+0x202>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a30      	ldr	r2, [pc, #192]	@ (80079d4 <DMA_List_Init+0x2a0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00e      	beq.n	8007936 <DMA_List_Init+0x202>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a2e      	ldr	r2, [pc, #184]	@ (80079d8 <DMA_List_Init+0x2a4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d009      	beq.n	8007936 <DMA_List_Init+0x202>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a2d      	ldr	r2, [pc, #180]	@ (80079dc <DMA_List_Init+0x2a8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d004      	beq.n	8007936 <DMA_List_Init+0x202>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a2b      	ldr	r2, [pc, #172]	@ (80079e0 <DMA_List_Init+0x2ac>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d101      	bne.n	800793a <DMA_List_Init+0x206>
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <DMA_List_Init+0x208>
 800793a:	2300      	movs	r3, #0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2200      	movs	r2, #0
 8007946:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2200      	movs	r2, #0
 800794e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2200      	movs	r2, #0
 8007956:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007958:	bf00      	nop
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	40020050 	.word	0x40020050
 8007968:	50020050 	.word	0x50020050
 800796c:	400200d0 	.word	0x400200d0
 8007970:	500200d0 	.word	0x500200d0
 8007974:	40020150 	.word	0x40020150
 8007978:	50020150 	.word	0x50020150
 800797c:	400201d0 	.word	0x400201d0
 8007980:	500201d0 	.word	0x500201d0
 8007984:	40020250 	.word	0x40020250
 8007988:	50020250 	.word	0x50020250
 800798c:	400202d0 	.word	0x400202d0
 8007990:	500202d0 	.word	0x500202d0
 8007994:	40020350 	.word	0x40020350
 8007998:	50020350 	.word	0x50020350
 800799c:	400203d0 	.word	0x400203d0
 80079a0:	500203d0 	.word	0x500203d0
 80079a4:	40020450 	.word	0x40020450
 80079a8:	50020450 	.word	0x50020450
 80079ac:	400204d0 	.word	0x400204d0
 80079b0:	500204d0 	.word	0x500204d0
 80079b4:	40020550 	.word	0x40020550
 80079b8:	50020550 	.word	0x50020550
 80079bc:	400205d0 	.word	0x400205d0
 80079c0:	500205d0 	.word	0x500205d0
 80079c4:	40020650 	.word	0x40020650
 80079c8:	50020650 	.word	0x50020650
 80079cc:	400206d0 	.word	0x400206d0
 80079d0:	500206d0 	.word	0x500206d0
 80079d4:	40020750 	.word	0x40020750
 80079d8:	50020750 	.word	0x50020750
 80079dc:	400207d0 	.word	0x400207d0
 80079e0:	500207d0 	.word	0x500207d0

080079e4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80079f6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80079fc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007a02:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8007a08:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d017      	beq.n	8007a4a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a26:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	051b      	lsls	r3, r3, #20
 8007a30:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007a34:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007a42:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007a44:	431a      	orrs	r2, r3
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6859      	ldr	r1, [r3, #4]
 8007a52:	f240 237f 	movw	r3, #639	@ 0x27f
 8007a56:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a66:	d10c      	bne.n	8007a82 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d011      	beq.n	8007a98 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	605a      	str	r2, [r3, #4]
 8007a80:	e00a      	b.n	8007a98 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a8a:	d105      	bne.n	8007a98 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00f      	beq.n	8007ac0 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aac:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ab2:	041b      	lsls	r3, r3, #16
 8007ab4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007ab8:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007aba:	431a      	orrs	r2, r3
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d04e      	beq.n	8007b74 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	0419      	lsls	r1, r3, #16
 8007ae2:	4b67      	ldr	r3, [pc, #412]	@ (8007c80 <DMA_List_BuildNode+0x29c>)
 8007ae4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da06      	bge.n	8007b02 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	609a      	str	r2, [r3, #8]
 8007b00:	e005      	b.n	8007b0e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	da06      	bge.n	8007b24 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	609a      	str	r2, [r3, #8]
 8007b22:	e005      	b.n	8007b30 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	da06      	bge.n	8007b46 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	609a      	str	r2, [r3, #8]
 8007b44:	e005      	b.n	8007b52 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	da06      	bge.n	8007b68 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	609a      	str	r2, [r3, #8]
 8007b66:	e005      	b.n	8007b74 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d059      	beq.n	8007c44 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da09      	bge.n	8007bac <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9c:	425b      	negs	r3, r3
 8007b9e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	615a      	str	r2, [r3, #20]
 8007baa:	e005      	b.n	8007bb8 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb0:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	da0d      	bge.n	8007bdc <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc4:	425b      	negs	r3, r3
 8007bc6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	695a      	ldr	r2, [r3, #20]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	0419      	lsls	r1, r3, #16
 8007bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8007c84 <DMA_List_BuildNode+0x2a0>)
 8007bd2:	400b      	ands	r3, r1
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	615a      	str	r2, [r3, #20]
 8007bda:	e009      	b.n	8007bf0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be4:	0419      	lsls	r1, r3, #16
 8007be6:	4b27      	ldr	r3, [pc, #156]	@ (8007c84 <DMA_List_BuildNode+0x2a0>)
 8007be8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007bea:	431a      	orrs	r2, r3
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	da08      	bge.n	8007c0a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfc:	425b      	negs	r3, r3
 8007bfe:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	619a      	str	r2, [r3, #24]
 8007c08:	e004      	b.n	8007c14 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c0e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	da0b      	bge.n	8007c34 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c20:	425b      	negs	r3, r3
 8007c22:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	619a      	str	r2, [r3, #24]
 8007c32:	e007      	b.n	8007c44 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c3c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d006      	beq.n	8007c66 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007c64:	e005      	b.n	8007c72 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	621a      	str	r2, [r3, #32]
}
 8007c72:	bf00      	nop
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	07ff0000 	.word	0x07ff0000
 8007c84:	1fff0000 	.word	0x1fff0000

08007c88 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0208 	and.w	r2, r3, #8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0203 	and.w	r2, r3, #3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8007cd0:	091b      	lsrs	r3, r3, #4
 8007cd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cd6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8007ce0:	0d1b      	lsrs	r3, r3, #20
 8007ce2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ce6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	4b66      	ldr	r3, [pc, #408]	@ (8007e98 <DMA_List_GetNodeConfig+0x210>)
 8007cfe:	4013      	ands	r3, r2
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d008      	beq.n	8007d2e <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d22:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d2a:	60da      	str	r2, [r3, #12]
 8007d2c:	e013      	b.n	8007d56 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d004      	beq.n	8007d50 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d4c:	60da      	str	r2, [r3, #12]
 8007d4e:	e002      	b.n	8007d56 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8007d7e:	0c1b      	lsrs	r3, r3, #16
 8007d80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d008      	beq.n	8007dbc <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	0c1b      	lsrs	r3, r3, #16
 8007db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007db4:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007dba:	e002      	b.n	8007dc2 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d04a      	beq.n	8007e74 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007de8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8007dea:	89fa      	ldrh	r2, [r7, #14]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	0c1b      	lsrs	r3, r3, #16
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dfc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8007dfe:	89fa      	ldrh	r2, [r7, #14]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d004      	beq.n	8007e1a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e14:	425a      	negs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e2a:	425a      	negs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007e36:	89fa      	ldrh	r2, [r7, #14]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	0c1b      	lsrs	r3, r3, #16
 8007e42:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007e44:	89fa      	ldrh	r2, [r7, #14]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5a:	425a      	negs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da11      	bge.n	8007e8c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e6c:	425a      	negs	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8007e72:	e00b      	b.n	8007e8c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007e8c:	bf00      	nop
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	0c002000 	.word	0x0c002000

08007e9c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	0c1b      	lsrs	r3, r3, #16
 8007eb4:	041b      	lsls	r3, r3, #16
 8007eb6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	e00a      	b.n	8007ede <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	e004      	b.n	8007ede <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	041b      	lsls	r3, r3, #16
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d001      	beq.n	8007eee <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e00e      	b.n	8007f3a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	e006      	b.n	8007f3a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d001      	beq.n	8007f50 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e00b      	b.n	8007f68 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d007      	beq.n	8007f66 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d001      	beq.n	8007f66 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e000      	b.n	8007f68 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00c      	beq.n	8007fa6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	4a0d      	ldr	r2, [pc, #52]	@ (8007fcc <DMA_List_GetCLLRNodeInfo+0x58>)
 8007f96:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00f      	beq.n	8007fbe <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2207      	movs	r2, #7
 8007fa2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007fa4:	e00b      	b.n	8007fbe <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4a08      	ldr	r2, [pc, #32]	@ (8007fd0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007fb0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2205      	movs	r2, #5
 8007fbc:	601a      	str	r2, [r3, #0]
}
 8007fbe:	bf00      	nop
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	fe010000 	.word	0xfe010000
 8007fd0:	f8010000 	.word	0xf8010000

08007fd4 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b089      	sub	sp, #36	@ 0x24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d142      	bne.n	800807e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007ff8:	e01d      	b.n	8008036 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	461a      	mov	r2, r3
 8008006:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800800a:	4013      	ands	r3, r2
 800800c:	61bb      	str	r3, [r7, #24]
 800800e:	e00f      	b.n	8008030 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	0c1b      	lsrs	r3, r3, #16
 800801a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	4413      	add	r3, r2
 8008020:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008028:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800802c:	4013      	ands	r3, r2
 800802e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	3301      	adds	r3, #1
 8008034:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	429a      	cmp	r2, r3
 800803e:	d3dc      	bcc.n	8007ffa <DMA_List_FindNode+0x26>
 8008040:	e029      	b.n	8008096 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d107      	bne.n	8008058 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8008052:	4013      	ands	r3, r2
 8008054:	61bb      	str	r3, [r7, #24]
 8008056:	e00f      	b.n	8008078 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	0c1b      	lsrs	r3, r3, #16
 8008062:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	4413      	add	r3, r2
 8008068:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008070:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8008074:	4013      	ands	r3, r2
 8008076:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	3301      	adds	r3, #1
 800807c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	429a      	cmp	r2, r3
 8008086:	d206      	bcs.n	8008096 <DMA_List_FindNode+0xc2>
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800808e:	4013      	ands	r3, r2
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	429a      	cmp	r2, r3
 8008094:	d1d5      	bne.n	8008042 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d008      	beq.n	80080ae <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80080a2:	4013      	ands	r3, r2
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d001      	beq.n	80080ae <DMA_List_FindNode+0xda>
    {
      return 1U;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e02b      	b.n	8008106 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	0c1b      	lsrs	r3, r3, #16
 80080ba:	041b      	lsls	r3, r3, #16
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	0c1b      	lsrs	r3, r3, #16
 80080ca:	041b      	lsls	r3, r3, #16
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	461a      	mov	r2, r3
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00f      	beq.n	8008104 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	461a      	mov	r2, r3
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80080f4:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	0c1b      	lsrs	r3, r3, #16
 80080fc:	041b      	lsls	r3, r3, #16
 80080fe:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3724      	adds	r7, #36	@ 0x24
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
	...

08008114 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008114:	b480      	push	{r7}
 8008116:	b089      	sub	sp, #36	@ 0x24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008126:	e1ba      	b.n	800849e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	2101      	movs	r1, #1
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	fa01 f303 	lsl.w	r3, r1, r3
 8008134:	4013      	ands	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 81aa 	beq.w	8008498 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a55      	ldr	r2, [pc, #340]	@ (800829c <HAL_GPIO_Init+0x188>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d15d      	bne.n	8008208 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8008152:	2201      	movs	r2, #1
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	fa02 f303 	lsl.w	r3, r2, r3
 800815a:	43db      	mvns	r3, r3
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	4013      	ands	r3, r2
 8008160:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f003 0201 	and.w	r2, r3, #1
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	fa02 f303 	lsl.w	r3, r2, r3
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	4313      	orrs	r3, r2
 8008174:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	69fa      	ldr	r2, [r7, #28]
 800817a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800817c:	4a48      	ldr	r2, [pc, #288]	@ (80082a0 <HAL_GPIO_Init+0x18c>)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008184:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8008186:	4a46      	ldr	r2, [pc, #280]	@ (80082a0 <HAL_GPIO_Init+0x18c>)
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	4413      	add	r3, r2
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	08da      	lsrs	r2, r3, #3
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	3208      	adds	r2, #8
 800819a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	220f      	movs	r2, #15
 80081aa:	fa02 f303 	lsl.w	r3, r2, r3
 80081ae:	43db      	mvns	r3, r3
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	4013      	ands	r3, r2
 80081b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	220b      	movs	r2, #11
 80081c0:	fa02 f303 	lsl.w	r3, r2, r3
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	08da      	lsrs	r2, r3, #3
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	3208      	adds	r2, #8
 80081d2:	69f9      	ldr	r1, [r7, #28]
 80081d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	2203      	movs	r2, #3
 80081e4:	fa02 f303 	lsl.w	r3, r2, r3
 80081e8:	43db      	mvns	r3, r3
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	4013      	ands	r3, r2
 80081ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	2202      	movs	r2, #2
 80081f6:	fa02 f303 	lsl.w	r3, r2, r3
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	69fa      	ldr	r2, [r7, #28]
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	e067      	b.n	80082d8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d003      	beq.n	8008218 <HAL_GPIO_Init+0x104>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2b12      	cmp	r3, #18
 8008216:	d145      	bne.n	80082a4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	08da      	lsrs	r2, r3, #3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3208      	adds	r2, #8
 8008220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008224:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	220f      	movs	r2, #15
 8008230:	fa02 f303 	lsl.w	r3, r2, r3
 8008234:	43db      	mvns	r3, r3
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	4013      	ands	r3, r2
 800823a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f003 020f 	and.w	r2, r3, #15
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	fa02 f303 	lsl.w	r3, r2, r3
 8008250:	69fa      	ldr	r2, [r7, #28]
 8008252:	4313      	orrs	r3, r2
 8008254:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	08da      	lsrs	r2, r3, #3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3208      	adds	r2, #8
 800825e:	69f9      	ldr	r1, [r7, #28]
 8008260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	2203      	movs	r2, #3
 8008270:	fa02 f303 	lsl.w	r3, r2, r3
 8008274:	43db      	mvns	r3, r3
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	4013      	ands	r3, r2
 800827a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f003 0203 	and.w	r2, r3, #3
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	fa02 f303 	lsl.w	r3, r2, r3
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	4313      	orrs	r3, r2
 8008290:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	e01e      	b.n	80082d8 <HAL_GPIO_Init+0x1c4>
 800829a:	bf00      	nop
 800829c:	46020000 	.word	0x46020000
 80082a0:	0801285c 	.word	0x0801285c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	2203      	movs	r2, #3
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	43db      	mvns	r3, r3
 80082b6:	69fa      	ldr	r2, [r7, #28]
 80082b8:	4013      	ands	r3, r2
 80082ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f003 0203 	and.w	r2, r3, #3
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d00b      	beq.n	80082f8 <HAL_GPIO_Init+0x1e4>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d007      	beq.n	80082f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80082ec:	2b11      	cmp	r3, #17
 80082ee:	d003      	beq.n	80082f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	2b12      	cmp	r3, #18
 80082f6:	d130      	bne.n	800835a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	2203      	movs	r2, #3
 8008304:	fa02 f303 	lsl.w	r3, r2, r3
 8008308:	43db      	mvns	r3, r3
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	4013      	ands	r3, r2
 800830e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	fa02 f303 	lsl.w	r3, r2, r3
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	4313      	orrs	r3, r2
 8008320:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800832e:	2201      	movs	r2, #1
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
 8008336:	43db      	mvns	r3, r3
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	4013      	ands	r3, r2
 800833c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	091b      	lsrs	r3, r3, #4
 8008344:	f003 0201 	and.w	r2, r3, #1
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	fa02 f303 	lsl.w	r3, r2, r3
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	4313      	orrs	r3, r2
 8008352:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	69fa      	ldr	r2, [r7, #28]
 8008358:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b03      	cmp	r3, #3
 8008360:	d017      	beq.n	8008392 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	2203      	movs	r2, #3
 800836e:	fa02 f303 	lsl.w	r3, r2, r3
 8008372:	43db      	mvns	r3, r3
 8008374:	69fa      	ldr	r2, [r7, #28]
 8008376:	4013      	ands	r3, r2
 8008378:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	fa02 f303 	lsl.w	r3, r2, r3
 8008386:	69fa      	ldr	r2, [r7, #28]
 8008388:	4313      	orrs	r3, r2
 800838a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	69fa      	ldr	r2, [r7, #28]
 8008390:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d07c      	beq.n	8008498 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800839e:	4a47      	ldr	r2, [pc, #284]	@ (80084bc <HAL_GPIO_Init+0x3a8>)
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	089b      	lsrs	r3, r3, #2
 80083a4:	3318      	adds	r3, #24
 80083a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f003 0303 	and.w	r3, r3, #3
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	220f      	movs	r2, #15
 80083b6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ba:	43db      	mvns	r3, r3
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	4013      	ands	r3, r2
 80083c0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	0a9a      	lsrs	r2, r3, #10
 80083c6:	4b3e      	ldr	r3, [pc, #248]	@ (80084c0 <HAL_GPIO_Init+0x3ac>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	f002 0203 	and.w	r2, r2, #3
 80083d0:	00d2      	lsls	r2, r2, #3
 80083d2:	4093      	lsls	r3, r2
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80083da:	4938      	ldr	r1, [pc, #224]	@ (80084bc <HAL_GPIO_Init+0x3a8>)
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	089b      	lsrs	r3, r3, #2
 80083e0:	3318      	adds	r3, #24
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80083e8:	4b34      	ldr	r3, [pc, #208]	@ (80084bc <HAL_GPIO_Init+0x3a8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	43db      	mvns	r3, r3
 80083f2:	69fa      	ldr	r2, [r7, #28]
 80083f4:	4013      	ands	r3, r2
 80083f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4313      	orrs	r3, r2
 800840a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800840c:	4a2b      	ldr	r2, [pc, #172]	@ (80084bc <HAL_GPIO_Init+0x3a8>)
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8008412:	4b2a      	ldr	r3, [pc, #168]	@ (80084bc <HAL_GPIO_Init+0x3a8>)
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	43db      	mvns	r3, r3
 800841c:	69fa      	ldr	r2, [r7, #28]
 800841e:	4013      	ands	r3, r2
 8008420:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8008436:	4a21      	ldr	r2, [pc, #132]	@ (80084bc <HAL_GPIO_Init+0x3a8>)
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800843c:	4b1f      	ldr	r3, [pc, #124]	@ (80084bc <HAL_GPIO_Init+0x3a8>)
 800843e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008442:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	43db      	mvns	r3, r3
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	4013      	ands	r3, r2
 800844c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8008462:	4a16      	ldr	r2, [pc, #88]	@ (80084bc <HAL_GPIO_Init+0x3a8>)
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800846a:	4b14      	ldr	r3, [pc, #80]	@ (80084bc <HAL_GPIO_Init+0x3a8>)
 800846c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008470:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	43db      	mvns	r3, r3
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	4013      	ands	r3, r2
 800847a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8008488:	69fa      	ldr	r2, [r7, #28]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4313      	orrs	r3, r2
 800848e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8008490:	4a0a      	ldr	r2, [pc, #40]	@ (80084bc <HAL_GPIO_Init+0x3a8>)
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	3301      	adds	r3, #1
 800849c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	fa22 f303 	lsr.w	r3, r2, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f47f ae3d 	bne.w	8008128 <HAL_GPIO_Init+0x14>
  }
}
 80084ae:	bf00      	nop
 80084b0:	bf00      	nop
 80084b2:	3724      	adds	r7, #36	@ 0x24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	46022000 	.word	0x46022000
 80084c0:	002f7f7f 	.word	0x002f7f7f

080084c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	807b      	strh	r3, [r7, #2]
 80084d0:	4613      	mov	r3, r2
 80084d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084d4:	787b      	ldrb	r3, [r7, #1]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80084da:	887a      	ldrh	r2, [r7, #2]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80084e0:	e002      	b.n	80084e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80084e2:	887a      	ldrh	r2, [r7, #2]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008506:	887a      	ldrh	r2, [r7, #2]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4013      	ands	r3, r2
 800850c:	041a      	lsls	r2, r3, #16
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	43d9      	mvns	r1, r3
 8008512:	887b      	ldrh	r3, [r7, #2]
 8008514:	400b      	ands	r3, r1
 8008516:	431a      	orrs	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	619a      	str	r2, [r3, #24]
}
 800851c:	bf00      	nop
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8008532:	4b0f      	ldr	r3, [pc, #60]	@ (8008570 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008534:	68da      	ldr	r2, [r3, #12]
 8008536:	88fb      	ldrh	r3, [r7, #6]
 8008538:	4013      	ands	r3, r2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d006      	beq.n	800854c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800853e:	4a0c      	ldr	r2, [pc, #48]	@ (8008570 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008544:	88fb      	ldrh	r3, [r7, #6]
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f814 	bl	8008574 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800854c:	4b08      	ldr	r3, [pc, #32]	@ (8008570 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	88fb      	ldrh	r3, [r7, #6]
 8008552:	4013      	ands	r3, r2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d006      	beq.n	8008566 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008558:	4a05      	ldr	r2, [pc, #20]	@ (8008570 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800855e:	88fb      	ldrh	r3, [r7, #6]
 8008560:	4618      	mov	r0, r3
 8008562:	f000 f812 	bl	800858a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008566:	bf00      	nop
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	46022000 	.word	0x46022000

08008574 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	4603      	mov	r3, r0
 8008592:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e08d      	b.n	80086ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d106      	bne.n	80085cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fa f9ba 	bl	8002940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2224      	movs	r2, #36	@ 0x24
 80085d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0201 	bic.w	r2, r2, #1
 80085e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80085f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008600:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d107      	bne.n	800861a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008616:	609a      	str	r2, [r3, #8]
 8008618:	e006      	b.n	8008628 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008626:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	2b02      	cmp	r3, #2
 800862e:	d108      	bne.n	8008642 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800863e:	605a      	str	r2, [r3, #4]
 8008640:	e007      	b.n	8008652 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008650:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	6812      	ldr	r2, [r2, #0]
 800865c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008664:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008674:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691a      	ldr	r2, [r3, #16]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	69d9      	ldr	r1, [r3, #28]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a1a      	ldr	r2, [r3, #32]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	430a      	orrs	r2, r1
 800869e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f042 0201 	orr.w	r2, r2, #1
 80086ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2220      	movs	r2, #32
 80086ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	461a      	mov	r2, r3
 80086e4:	460b      	mov	r3, r1
 80086e6:	817b      	strh	r3, [r7, #10]
 80086e8:	4613      	mov	r3, r2
 80086ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	f040 80da 	bne.w	80088ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_I2C_Master_Transmit+0x30>
 8008704:	2302      	movs	r3, #2
 8008706:	e0d3      	b.n	80088b0 <HAL_I2C_Master_Transmit+0x1d8>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008710:	f7fb f8ac 	bl	800386c <HAL_GetTick>
 8008714:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	2319      	movs	r3, #25
 800871c:	2201      	movs	r2, #1
 800871e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fe7d 	bl	8009422 <I2C_WaitOnFlagUntilTimeout>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e0be      	b.n	80088b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2221      	movs	r2, #33	@ 0x21
 8008736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2210      	movs	r2, #16
 800873e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	893a      	ldrh	r2, [r7, #8]
 8008752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800875e:	b29b      	uxth	r3, r3
 8008760:	2bff      	cmp	r3, #255	@ 0xff
 8008762:	d90e      	bls.n	8008782 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	22ff      	movs	r2, #255	@ 0xff
 8008768:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800876e:	b2da      	uxtb	r2, r3
 8008770:	8979      	ldrh	r1, [r7, #10]
 8008772:	4b51      	ldr	r3, [pc, #324]	@ (80088b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f001 f814 	bl	80097a8 <I2C_TransferConfig>
 8008780:	e06c      	b.n	800885c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008790:	b2da      	uxtb	r2, r3
 8008792:	8979      	ldrh	r1, [r7, #10]
 8008794:	4b48      	ldr	r3, [pc, #288]	@ (80088b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f001 f803 	bl	80097a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80087a2:	e05b      	b.n	800885c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	6a39      	ldr	r1, [r7, #32]
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 fe93 	bl	80094d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e07b      	b.n	80088b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087bc:	781a      	ldrb	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	3b01      	subs	r3, #1
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d034      	beq.n	800885c <HAL_I2C_Master_Transmit+0x184>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d130      	bne.n	800885c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	2200      	movs	r2, #0
 8008802:	2180      	movs	r1, #128	@ 0x80
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 fe0c 	bl	8009422 <I2C_WaitOnFlagUntilTimeout>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e04d      	b.n	80088b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008818:	b29b      	uxth	r3, r3
 800881a:	2bff      	cmp	r3, #255	@ 0xff
 800881c:	d90e      	bls.n	800883c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	22ff      	movs	r2, #255	@ 0xff
 8008822:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008828:	b2da      	uxtb	r2, r3
 800882a:	8979      	ldrh	r1, [r7, #10]
 800882c:	2300      	movs	r3, #0
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 ffb7 	bl	80097a8 <I2C_TransferConfig>
 800883a:	e00f      	b.n	800885c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800884a:	b2da      	uxtb	r2, r3
 800884c:	8979      	ldrh	r1, [r7, #10]
 800884e:	2300      	movs	r3, #0
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 ffa6 	bl	80097a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008860:	b29b      	uxth	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d19e      	bne.n	80087a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	6a39      	ldr	r1, [r7, #32]
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 fe79 	bl	8009562 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e01a      	b.n	80088b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2220      	movs	r2, #32
 8008880:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6859      	ldr	r1, [r3, #4]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	4b0b      	ldr	r3, [pc, #44]	@ (80088bc <HAL_I2C_Master_Transmit+0x1e4>)
 800888e:	400b      	ands	r3, r1
 8008890:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2220      	movs	r2, #32
 8008896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	e000      	b.n	80088b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80088ae:	2302      	movs	r3, #2
  }
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	80002000 	.word	0x80002000
 80088bc:	fe00e800 	.word	0xfe00e800

080088c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	4798      	blx	r3
  }
}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00f      	beq.n	8008936 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00a      	beq.n	8008936 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008924:	f043 0201 	orr.w	r2, r3, #1
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008934:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00f      	beq.n	8008960 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800894e:	f043 0208 	orr.w	r2, r3, #8
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800895e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00f      	beq.n	800898a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008978:	f043 0202 	orr.w	r2, r3, #2
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008988:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800898e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f003 030b 	and.w	r3, r3, #11
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fbe7 	bl	8009170 <I2C_ITError>
  }
}
 80089a2:	bf00      	nop
 80089a4:	3718      	adds	r7, #24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80089b2:	bf00      	nop
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089be:	b480      	push	{r7}
 80089c0:	b083      	sub	sp, #12
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
 80089de:	4613      	mov	r3, r2
 80089e0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008a1e:	bf00      	nop
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b086      	sub	sp, #24
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <I2C_Slave_ISR_IT+0x24>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e0e2      	b.n	8008c14 <I2C_Slave_ISR_IT+0x1ea>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f003 0320 	and.w	r3, r3, #32
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d009      	beq.n	8008a74 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d004      	beq.n	8008a74 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008a6a:	6939      	ldr	r1, [r7, #16]
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 f9b5 	bl	8008ddc <I2C_ITSlaveCplt>
 8008a72:	e0ca      	b.n	8008c0a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f003 0310 	and.w	r3, r3, #16
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d04b      	beq.n	8008b16 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d046      	beq.n	8008b16 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d128      	bne.n	8008ae4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b28      	cmp	r3, #40	@ 0x28
 8008a9c:	d108      	bne.n	8008ab0 <I2C_Slave_ISR_IT+0x86>
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008aa4:	d104      	bne.n	8008ab0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008aa6:	6939      	ldr	r1, [r7, #16]
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 fb0d 	bl	80090c8 <I2C_ITListenCplt>
 8008aae:	e031      	b.n	8008b14 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b29      	cmp	r3, #41	@ 0x29
 8008aba:	d10e      	bne.n	8008ada <I2C_Slave_ISR_IT+0xb0>
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ac2:	d00a      	beq.n	8008ada <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2210      	movs	r2, #16
 8008aca:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 fc66 	bl	800939e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 f926 	bl	8008d24 <I2C_ITSlaveSeqCplt>
 8008ad8:	e01c      	b.n	8008b14 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2210      	movs	r2, #16
 8008ae0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008ae2:	e08f      	b.n	8008c04 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2210      	movs	r2, #16
 8008aea:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af0:	f043 0204 	orr.w	r2, r3, #4
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <I2C_Slave_ISR_IT+0xdc>
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b04:	d17e      	bne.n	8008c04 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 fb2f 	bl	8009170 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008b12:	e077      	b.n	8008c04 <I2C_Slave_ISR_IT+0x1da>
 8008b14:	e076      	b.n	8008c04 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d02f      	beq.n	8008b80 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d02a      	beq.n	8008b80 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d018      	beq.n	8008b66 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b50:	3b01      	subs	r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d14b      	bne.n	8008c08 <I2C_Slave_ISR_IT+0x1de>
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008b76:	d047      	beq.n	8008c08 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f8d3 	bl	8008d24 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008b7e:	e043      	b.n	8008c08 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f003 0308 	and.w	r3, r3, #8
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d009      	beq.n	8008b9e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008b94:	6939      	ldr	r1, [r7, #16]
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f840 	bl	8008c1c <I2C_ITAddrCplt>
 8008b9c:	e035      	b.n	8008c0a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d030      	beq.n	8008c0a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d02b      	beq.n	8008c0a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d018      	beq.n	8008bee <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc0:	781a      	ldrb	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008be4:	3b01      	subs	r3, #1
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008bec:	e00d      	b.n	8008c0a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bf4:	d002      	beq.n	8008bfc <I2C_Slave_ISR_IT+0x1d2>
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d106      	bne.n	8008c0a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f891 	bl	8008d24 <I2C_ITSlaveSeqCplt>
 8008c02:	e002      	b.n	8008c0a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8008c04:	bf00      	nop
 8008c06:	e000      	b.n	8008c0a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8008c08:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c32:	2b28      	cmp	r3, #40	@ 0x28
 8008c34:	d16a      	bne.n	8008d0c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	0c1b      	lsrs	r3, r3, #16
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	0c1b      	lsrs	r3, r3, #16
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008c54:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c62:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008c70:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d138      	bne.n	8008cec <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008c7a:	897b      	ldrh	r3, [r7, #10]
 8008c7c:	09db      	lsrs	r3, r3, #7
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	89bb      	ldrh	r3, [r7, #12]
 8008c82:	4053      	eors	r3, r2
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	f003 0306 	and.w	r3, r3, #6
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d11c      	bne.n	8008cc8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008c8e:	897b      	ldrh	r3, [r7, #10]
 8008c90:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d13b      	bne.n	8008d1c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2208      	movs	r2, #8
 8008cb0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008cba:	89ba      	ldrh	r2, [r7, #12]
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff fe86 	bl	80089d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008cc6:	e029      	b.n	8008d1c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008cc8:	893b      	ldrh	r3, [r7, #8]
 8008cca:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008ccc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fd9b 	bl	800980c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008cde:	89ba      	ldrh	r2, [r7, #12]
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7ff fe74 	bl	80089d2 <HAL_I2C_AddrCallback>
}
 8008cea:	e017      	b.n	8008d1c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008cec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fd8b 	bl	800980c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008cfe:	89ba      	ldrh	r2, [r7, #12]
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff fe64 	bl	80089d2 <HAL_I2C_AddrCallback>
}
 8008d0a:	e007      	b.n	8008d1c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2208      	movs	r2, #8
 8008d12:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008d1c:	bf00      	nop
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	e00c      	b.n	8008d72 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d70:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b29      	cmp	r3, #41	@ 0x29
 8008d7c:	d112      	bne.n	8008da4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2228      	movs	r2, #40	@ 0x28
 8008d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2221      	movs	r2, #33	@ 0x21
 8008d8a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fd3c 	bl	800980c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff fe04 	bl	80089aa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008da2:	e017      	b.n	8008dd4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dae:	d111      	bne.n	8008dd4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2228      	movs	r2, #40	@ 0x28
 8008db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2222      	movs	r2, #34	@ 0x22
 8008dbc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008dbe:	2102      	movs	r1, #2
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fd23 	bl	800980c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff fdf5 	bl	80089be <HAL_I2C_SlaveRxCpltCallback>
}
 8008dd4:	bf00      	nop
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008ddc:	b590      	push	{r4, r7, lr}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dfe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2220      	movs	r2, #32
 8008e06:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e08:	7afb      	ldrb	r3, [r7, #11]
 8008e0a:	2b21      	cmp	r3, #33	@ 0x21
 8008e0c:	d002      	beq.n	8008e14 <I2C_ITSlaveCplt+0x38>
 8008e0e:	7afb      	ldrb	r3, [r7, #11]
 8008e10:	2b29      	cmp	r3, #41	@ 0x29
 8008e12:	d108      	bne.n	8008e26 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008e14:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fcf7 	bl	800980c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2221      	movs	r2, #33	@ 0x21
 8008e22:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e24:	e019      	b.n	8008e5a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e26:	7afb      	ldrb	r3, [r7, #11]
 8008e28:	2b22      	cmp	r3, #34	@ 0x22
 8008e2a:	d002      	beq.n	8008e32 <I2C_ITSlaveCplt+0x56>
 8008e2c:	7afb      	ldrb	r3, [r7, #11]
 8008e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e30:	d108      	bne.n	8008e44 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008e32:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fce8 	bl	800980c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2222      	movs	r2, #34	@ 0x22
 8008e40:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e42:	e00a      	b.n	8008e5a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008e44:	7afb      	ldrb	r3, [r7, #11]
 8008e46:	2b28      	cmp	r3, #40	@ 0x28
 8008e48:	d107      	bne.n	8008e5a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008e4a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fcdc 	bl	800980c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e68:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6859      	ldr	r1, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	4b92      	ldr	r3, [pc, #584]	@ (80090c0 <I2C_ITSlaveCplt+0x2e4>)
 8008e76:	400b      	ands	r3, r1
 8008e78:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fa8f 	bl	800939e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d01c      	beq.n	8008ec4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e98:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d031      	beq.n	8008f06 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eaa:	b29c      	uxth	r4, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fe fc30 	bl	8007716 <HAL_DMAEx_GetFifoLevel>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	4423      	add	r3, r4
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008ec2:	e020      	b.n	8008f06 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d01b      	beq.n	8008f06 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008edc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00f      	beq.n	8008f06 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eee:	b29c      	uxth	r4, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fc0e 	bl	8007716 <HAL_DMAEx_GetFifoLevel>
 8008efa:	4603      	mov	r3, r0
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	4423      	add	r3, r4
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d020      	beq.n	8008f52 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0304 	bic.w	r3, r3, #4
 8008f16:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f22:	b2d2      	uxtb	r2, r2
 8008f24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00c      	beq.n	8008f52 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d005      	beq.n	8008f68 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f60:	f043 0204 	orr.w	r2, r3, #4
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f003 0310 	and.w	r3, r3, #16
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d049      	beq.n	8009006 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d044      	beq.n	8009006 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d128      	bne.n	8008fd8 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b28      	cmp	r3, #40	@ 0x28
 8008f90:	d108      	bne.n	8008fa4 <I2C_ITSlaveCplt+0x1c8>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f98:	d104      	bne.n	8008fa4 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008f9a:	6979      	ldr	r1, [r7, #20]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f893 	bl	80090c8 <I2C_ITListenCplt>
 8008fa2:	e030      	b.n	8009006 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b29      	cmp	r3, #41	@ 0x29
 8008fae:	d10e      	bne.n	8008fce <I2C_ITSlaveCplt+0x1f2>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008fb6:	d00a      	beq.n	8008fce <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2210      	movs	r2, #16
 8008fbe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f9ec 	bl	800939e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff feac 	bl	8008d24 <I2C_ITSlaveSeqCplt>
 8008fcc:	e01b      	b.n	8009006 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2210      	movs	r2, #16
 8008fd4:	61da      	str	r2, [r3, #28]
 8008fd6:	e016      	b.n	8009006 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2210      	movs	r2, #16
 8008fde:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe4:	f043 0204 	orr.w	r2, r3, #4
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <I2C_ITSlaveCplt+0x21e>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ff8:	d105      	bne.n	8009006 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f8b5 	bl	8009170 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009018:	2b00      	cmp	r3, #0
 800901a:	d010      	beq.n	800903e <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f8a4 	bl	8009170 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b28      	cmp	r3, #40	@ 0x28
 8009032:	d141      	bne.n	80090b8 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009034:	6979      	ldr	r1, [r7, #20]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f846 	bl	80090c8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800903c:	e03c      	b.n	80090b8 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009042:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009046:	d014      	beq.n	8009072 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff fe6b 	bl	8008d24 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a1c      	ldr	r2, [pc, #112]	@ (80090c4 <I2C_ITSlaveCplt+0x2e8>)
 8009052:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2220      	movs	r2, #32
 8009058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff fcbf 	bl	80089ee <HAL_I2C_ListenCpltCallback>
}
 8009070:	e022      	b.n	80090b8 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b22      	cmp	r3, #34	@ 0x22
 800907c:	d10e      	bne.n	800909c <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2220      	movs	r2, #32
 8009082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff fc92 	bl	80089be <HAL_I2C_SlaveRxCpltCallback>
}
 800909a:	e00d      	b.n	80090b8 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2220      	movs	r2, #32
 80090a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fc79 	bl	80089aa <HAL_I2C_SlaveTxCpltCallback>
}
 80090b8:	bf00      	nop
 80090ba:	371c      	adds	r7, #28
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd90      	pop	{r4, r7, pc}
 80090c0:	fe00e800 	.word	0xfe00e800
 80090c4:	ffff0000 	.word	0xffff0000

080090c8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a25      	ldr	r2, [pc, #148]	@ (800916c <I2C_ITListenCplt+0xa4>)
 80090d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	f003 0304 	and.w	r3, r3, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d022      	beq.n	8009144 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009108:	b2d2      	uxtb	r2, r2
 800910a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800911a:	2b00      	cmp	r3, #0
 800911c:	d012      	beq.n	8009144 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009122:	3b01      	subs	r3, #1
 8009124:	b29a      	uxth	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800912e:	b29b      	uxth	r3, r3
 8009130:	3b01      	subs	r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800913c:	f043 0204 	orr.w	r2, r3, #4
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009144:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fb5f 	bl	800980c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2210      	movs	r2, #16
 8009154:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff fc45 	bl	80089ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	ffff0000 	.word	0xffff0000

08009170 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009180:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a6d      	ldr	r2, [pc, #436]	@ (8009344 <I2C_ITError+0x1d4>)
 800918e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	431a      	orrs	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	2b28      	cmp	r3, #40	@ 0x28
 80091a6:	d005      	beq.n	80091b4 <I2C_ITError+0x44>
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
 80091aa:	2b29      	cmp	r3, #41	@ 0x29
 80091ac:	d002      	beq.n	80091b4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80091b2:	d10b      	bne.n	80091cc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80091b4:	2103      	movs	r1, #3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fb28 	bl	800980c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2228      	movs	r2, #40	@ 0x28
 80091c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a60      	ldr	r2, [pc, #384]	@ (8009348 <I2C_ITError+0x1d8>)
 80091c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80091ca:	e030      	b.n	800922e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80091cc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fb1b 	bl	800980c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f8e1 	bl	800939e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b60      	cmp	r3, #96	@ 0x60
 80091e6:	d01f      	beq.n	8009228 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	f003 0320 	and.w	r3, r3, #32
 80091fa:	2b20      	cmp	r3, #32
 80091fc:	d114      	bne.n	8009228 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f003 0310 	and.w	r3, r3, #16
 8009208:	2b10      	cmp	r3, #16
 800920a:	d109      	bne.n	8009220 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2210      	movs	r2, #16
 8009212:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009218:	f043 0204 	orr.w	r2, r3, #4
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2220      	movs	r2, #32
 8009226:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009232:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009238:	2b00      	cmp	r3, #0
 800923a:	d039      	beq.n	80092b0 <I2C_ITError+0x140>
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b11      	cmp	r3, #17
 8009240:	d002      	beq.n	8009248 <I2C_ITError+0xd8>
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2b21      	cmp	r3, #33	@ 0x21
 8009246:	d133      	bne.n	80092b0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009252:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009256:	d107      	bne.n	8009268 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009266:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	4618      	mov	r0, r3
 800926e:	f7fd fa6f 	bl	8006750 <HAL_DMA_GetState>
 8009272:	4603      	mov	r3, r0
 8009274:	2b01      	cmp	r3, #1
 8009276:	d017      	beq.n	80092a8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927c:	4a33      	ldr	r2, [pc, #204]	@ (800934c <I2C_ITError+0x1dc>)
 800927e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928c:	4618      	mov	r0, r3
 800928e:	f7fd f8d5 	bl	800643c <HAL_DMA_Abort_IT>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d04d      	beq.n	8009334 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80092a2:	4610      	mov	r0, r2
 80092a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092a6:	e045      	b.n	8009334 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f851 	bl	8009350 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092ae:	e041      	b.n	8009334 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d039      	beq.n	800932c <I2C_ITError+0x1bc>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2b12      	cmp	r3, #18
 80092bc:	d002      	beq.n	80092c4 <I2C_ITError+0x154>
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b22      	cmp	r3, #34	@ 0x22
 80092c2:	d133      	bne.n	800932c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092d2:	d107      	bne.n	80092e4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80092e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fd fa31 	bl	8006750 <HAL_DMA_GetState>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d017      	beq.n	8009324 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f8:	4a14      	ldr	r2, [pc, #80]	@ (800934c <I2C_ITError+0x1dc>)
 80092fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009308:	4618      	mov	r0, r3
 800930a:	f7fd f897 	bl	800643c <HAL_DMA_Abort_IT>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d011      	beq.n	8009338 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800931e:	4610      	mov	r0, r2
 8009320:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009322:	e009      	b.n	8009338 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f813 	bl	8009350 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800932a:	e005      	b.n	8009338 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f80f 	bl	8009350 <I2C_TreatErrorCallback>
  }
}
 8009332:	e002      	b.n	800933a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009334:	bf00      	nop
 8009336:	e000      	b.n	800933a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009338:	bf00      	nop
}
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	ffff0000 	.word	0xffff0000
 8009348:	08008a2b 	.word	0x08008a2b
 800934c:	080093e7 	.word	0x080093e7

08009350 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b60      	cmp	r3, #96	@ 0x60
 8009362:	d10e      	bne.n	8009382 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2220      	movs	r2, #32
 8009368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff fb4b 	bl	8008a16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009380:	e009      	b.n	8009396 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff fb36 	bl	8008a02 <HAL_I2C_ErrorCallback>
}
 8009396:	bf00      	nop
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d103      	bne.n	80093bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2200      	movs	r2, #0
 80093ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d007      	beq.n	80093da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	699a      	ldr	r2, [r3, #24]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0201 	orr.w	r2, r2, #1
 80093d8:	619a      	str	r2, [r3, #24]
  }
}
 80093da:	bf00      	nop
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009400:	2200      	movs	r2, #0
 8009402:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009410:	2200      	movs	r2, #0
 8009412:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff ff9b 	bl	8009350 <I2C_TreatErrorCallback>
}
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	603b      	str	r3, [r7, #0]
 800942e:	4613      	mov	r3, r2
 8009430:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009432:	e03b      	b.n	80094ac <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 f8d5 	bl	80095e8 <I2C_IsErrorOccurred>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e041      	b.n	80094cc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944e:	d02d      	beq.n	80094ac <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009450:	f7fa fa0c 	bl	800386c <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d302      	bcc.n	8009466 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d122      	bne.n	80094ac <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	699a      	ldr	r2, [r3, #24]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	4013      	ands	r3, r2
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	429a      	cmp	r2, r3
 8009474:	bf0c      	ite	eq
 8009476:	2301      	moveq	r3, #1
 8009478:	2300      	movne	r3, #0
 800947a:	b2db      	uxtb	r3, r3
 800947c:	461a      	mov	r2, r3
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	429a      	cmp	r2, r3
 8009482:	d113      	bne.n	80094ac <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009488:	f043 0220 	orr.w	r2, r3, #32
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2220      	movs	r2, #32
 8009494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e00f      	b.n	80094cc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	4013      	ands	r3, r2
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	bf0c      	ite	eq
 80094bc:	2301      	moveq	r3, #1
 80094be:	2300      	movne	r3, #0
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	461a      	mov	r2, r3
 80094c4:	79fb      	ldrb	r3, [r7, #7]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d0b4      	beq.n	8009434 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80094e0:	e033      	b.n	800954a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	68b9      	ldr	r1, [r7, #8]
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 f87e 	bl	80095e8 <I2C_IsErrorOccurred>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e031      	b.n	800955a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fc:	d025      	beq.n	800954a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094fe:	f7fa f9b5 	bl	800386c <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	429a      	cmp	r2, r3
 800950c:	d302      	bcc.n	8009514 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d11a      	bne.n	800954a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	2b02      	cmp	r3, #2
 8009520:	d013      	beq.n	800954a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009526:	f043 0220 	orr.w	r2, r3, #32
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2220      	movs	r2, #32
 8009532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e007      	b.n	800955a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b02      	cmp	r3, #2
 8009556:	d1c4      	bne.n	80094e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800956e:	e02f      	b.n	80095d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	68b9      	ldr	r1, [r7, #8]
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 f837 	bl	80095e8 <I2C_IsErrorOccurred>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e02d      	b.n	80095e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009584:	f7fa f972 	bl	800386c <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	429a      	cmp	r2, r3
 8009592:	d302      	bcc.n	800959a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d11a      	bne.n	80095d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	d013      	beq.n	80095d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ac:	f043 0220 	orr.w	r2, r3, #32
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2220      	movs	r2, #32
 80095b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e007      	b.n	80095e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b20      	cmp	r3, #32
 80095dc:	d1c8      	bne.n	8009570 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08a      	sub	sp, #40	@ 0x28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	f003 0310 	and.w	r3, r3, #16
 8009610:	2b00      	cmp	r3, #0
 8009612:	d068      	beq.n	80096e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2210      	movs	r2, #16
 800961a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800961c:	e049      	b.n	80096b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009624:	d045      	beq.n	80096b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009626:	f7fa f921 	bl	800386c <HAL_GetTick>
 800962a:	4602      	mov	r2, r0
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	429a      	cmp	r2, r3
 8009634:	d302      	bcc.n	800963c <I2C_IsErrorOccurred+0x54>
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d13a      	bne.n	80096b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009646:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800964e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800965a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800965e:	d121      	bne.n	80096a4 <I2C_IsErrorOccurred+0xbc>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009666:	d01d      	beq.n	80096a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009668:	7cfb      	ldrb	r3, [r7, #19]
 800966a:	2b20      	cmp	r3, #32
 800966c:	d01a      	beq.n	80096a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800967c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800967e:	f7fa f8f5 	bl	800386c <HAL_GetTick>
 8009682:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009684:	e00e      	b.n	80096a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009686:	f7fa f8f1 	bl	800386c <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	2b19      	cmp	r3, #25
 8009692:	d907      	bls.n	80096a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	f043 0320 	orr.w	r3, r3, #32
 800969a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80096a2:	e006      	b.n	80096b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b20      	cmp	r3, #32
 80096b0:	d1e9      	bne.n	8009686 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f003 0320 	and.w	r3, r3, #32
 80096bc:	2b20      	cmp	r3, #32
 80096be:	d003      	beq.n	80096c8 <I2C_IsErrorOccurred+0xe0>
 80096c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0aa      	beq.n	800961e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80096c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d103      	bne.n	80096d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2220      	movs	r2, #32
 80096d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	f043 0304 	orr.w	r3, r3, #4
 80096de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00b      	beq.n	8009710 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	f043 0301 	orr.w	r3, r3, #1
 80096fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009708:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00b      	beq.n	8009732 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	f043 0308 	orr.w	r3, r3, #8
 8009720:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800972a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00b      	beq.n	8009754 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	f043 0302 	orr.w	r3, r3, #2
 8009742:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800974c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009758:	2b00      	cmp	r3, #0
 800975a:	d01c      	beq.n	8009796 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f7ff fe1e 	bl	800939e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6859      	ldr	r1, [r3, #4]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	4b0d      	ldr	r3, [pc, #52]	@ (80097a4 <I2C_IsErrorOccurred+0x1bc>)
 800976e:	400b      	ands	r3, r1
 8009770:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	431a      	orrs	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2220      	movs	r2, #32
 8009782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009796:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800979a:	4618      	mov	r0, r3
 800979c:	3728      	adds	r7, #40	@ 0x28
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	fe00e800 	.word	0xfe00e800

080097a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	607b      	str	r3, [r7, #4]
 80097b2:	460b      	mov	r3, r1
 80097b4:	817b      	strh	r3, [r7, #10]
 80097b6:	4613      	mov	r3, r2
 80097b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097ba:	897b      	ldrh	r3, [r7, #10]
 80097bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097c0:	7a7b      	ldrb	r3, [r7, #9]
 80097c2:	041b      	lsls	r3, r3, #16
 80097c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	0d5b      	lsrs	r3, r3, #21
 80097e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80097e6:	4b08      	ldr	r3, [pc, #32]	@ (8009808 <I2C_TransferConfig+0x60>)
 80097e8:	430b      	orrs	r3, r1
 80097ea:	43db      	mvns	r3, r3
 80097ec:	ea02 0103 	and.w	r1, r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80097fa:	bf00      	nop
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	03ff63ff 	.word	0x03ff63ff

0800980c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800981c:	887b      	ldrh	r3, [r7, #2]
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00f      	beq.n	8009846 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800982c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800983a:	2b28      	cmp	r3, #40	@ 0x28
 800983c:	d003      	beq.n	8009846 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009844:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009846:	887b      	ldrh	r3, [r7, #2]
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00f      	beq.n	8009870 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009856:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800985e:	b2db      	uxtb	r3, r3
 8009860:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009864:	2b28      	cmp	r3, #40	@ 0x28
 8009866:	d003      	beq.n	8009870 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800986e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009870:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009874:	2b00      	cmp	r3, #0
 8009876:	da03      	bge.n	8009880 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800987e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009880:	887b      	ldrh	r3, [r7, #2]
 8009882:	2b10      	cmp	r3, #16
 8009884:	d103      	bne.n	800988e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800988c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800988e:	887b      	ldrh	r3, [r7, #2]
 8009890:	2b20      	cmp	r3, #32
 8009892:	d103      	bne.n	800989c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f043 0320 	orr.w	r3, r3, #32
 800989a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800989c:	887b      	ldrh	r3, [r7, #2]
 800989e:	2b40      	cmp	r3, #64	@ 0x40
 80098a0:	d103      	bne.n	80098aa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098a8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	6819      	ldr	r1, [r3, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	43da      	mvns	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	400a      	ands	r2, r1
 80098ba:	601a      	str	r2, [r3, #0]
}
 80098bc:	bf00      	nop
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b20      	cmp	r3, #32
 80098dc:	d138      	bne.n	8009950 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d101      	bne.n	80098ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80098e8:	2302      	movs	r3, #2
 80098ea:	e032      	b.n	8009952 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2224      	movs	r2, #36	@ 0x24
 80098f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f022 0201 	bic.w	r2, r2, #1
 800990a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800991a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6819      	ldr	r1, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	430a      	orrs	r2, r1
 800992a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 0201 	orr.w	r2, r2, #1
 800993a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2220      	movs	r2, #32
 8009940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	e000      	b.n	8009952 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009950:	2302      	movs	r3, #2
  }
}
 8009952:	4618      	mov	r0, r3
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b20      	cmp	r3, #32
 8009972:	d139      	bne.n	80099e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800997a:	2b01      	cmp	r3, #1
 800997c:	d101      	bne.n	8009982 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800997e:	2302      	movs	r3, #2
 8009980:	e033      	b.n	80099ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2224      	movs	r2, #36	@ 0x24
 800998e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 0201 	bic.w	r2, r2, #1
 80099a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80099b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	021b      	lsls	r3, r3, #8
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f042 0201 	orr.w	r2, r2, #1
 80099d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e000      	b.n	80099ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80099e8:	2302      	movs	r3, #2
  }
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
	...

080099f8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8009a04:	4b0b      	ldr	r3, [pc, #44]	@ (8009a34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	73fb      	strb	r3, [r7, #15]
 8009a14:	e007      	b.n	8009a26 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8009a16:	4b07      	ldr	r3, [pc, #28]	@ (8009a34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f023 0204 	bic.w	r2, r3, #4
 8009a1e:	4905      	ldr	r1, [pc, #20]	@ (8009a34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	600b      	str	r3, [r1, #0]
  }

  return status;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	40030400 	.word	0x40030400

08009a38 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009a3c:	4b05      	ldr	r3, [pc, #20]	@ (8009a54 <HAL_ICACHE_Enable+0x1c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a04      	ldr	r2, [pc, #16]	@ (8009a54 <HAL_ICACHE_Enable+0x1c>)
 8009a42:	f043 0301 	orr.w	r3, r3, #1
 8009a46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	40030400 	.word	0x40030400

08009a58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e0bf      	b.n	8009bea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d106      	bne.n	8009a84 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7f9 f84c 	bl	8002b1c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	699a      	ldr	r2, [r3, #24]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009a9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6999      	ldr	r1, [r3, #24]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009ab0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6899      	ldr	r1, [r3, #8]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	4b4a      	ldr	r3, [pc, #296]	@ (8009bf4 <HAL_LTDC_Init+0x19c>)
 8009acc:	400b      	ands	r3, r1
 8009ace:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	041b      	lsls	r3, r3, #16
 8009ad6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6899      	ldr	r1, [r3, #8]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	699a      	ldr	r2, [r3, #24]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68d9      	ldr	r1, [r3, #12]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	4b3e      	ldr	r3, [pc, #248]	@ (8009bf4 <HAL_LTDC_Init+0x19c>)
 8009afa:	400b      	ands	r3, r1
 8009afc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68d9      	ldr	r1, [r3, #12]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a1a      	ldr	r2, [r3, #32]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	431a      	orrs	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6919      	ldr	r1, [r3, #16]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	4b33      	ldr	r3, [pc, #204]	@ (8009bf4 <HAL_LTDC_Init+0x19c>)
 8009b28:	400b      	ands	r3, r1
 8009b2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b30:	041b      	lsls	r3, r3, #16
 8009b32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6919      	ldr	r1, [r3, #16]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6959      	ldr	r1, [r3, #20]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	4b27      	ldr	r3, [pc, #156]	@ (8009bf4 <HAL_LTDC_Init+0x19c>)
 8009b56:	400b      	ands	r3, r1
 8009b58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5e:	041b      	lsls	r3, r3, #16
 8009b60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6959      	ldr	r1, [r3, #20]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b7e:	021b      	lsls	r3, r3, #8
 8009b80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009b88:	041b      	lsls	r3, r3, #16
 8009b8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009bae:	431a      	orrs	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 0206 	orr.w	r2, r2, #6
 8009bc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f042 0201 	orr.w	r2, r2, #1
 8009bd6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	f000f800 	.word	0xf000f800

08009bf8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c0e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f003 0304 	and.w	r3, r3, #4
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d023      	beq.n	8009c62 <HAL_LTDC_IRQHandler+0x6a>
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f003 0304 	and.w	r3, r3, #4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d01e      	beq.n	8009c62 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f022 0204 	bic.w	r2, r2, #4
 8009c32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2204      	movs	r2, #4
 8009c3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c42:	f043 0201 	orr.w	r2, r3, #1
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2204      	movs	r2, #4
 8009c50:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f86f 	bl	8009d40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d023      	beq.n	8009cb4 <HAL_LTDC_IRQHandler+0xbc>
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	f003 0302 	and.w	r3, r3, #2
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01e      	beq.n	8009cb4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f022 0202 	bic.w	r2, r2, #2
 8009c84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c94:	f043 0202 	orr.w	r2, r3, #2
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f846 	bl	8009d40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d01b      	beq.n	8009cf6 <HAL_LTDC_IRQHandler+0xfe>
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d016      	beq.n	8009cf6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f022 0201 	bic.w	r2, r2, #1
 8009cd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f82f 	bl	8009d54 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f003 0308 	and.w	r3, r3, #8
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01b      	beq.n	8009d38 <HAL_LTDC_IRQHandler+0x140>
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d016      	beq.n	8009d38 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0208 	bic.w	r2, r2, #8
 8009d18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2208      	movs	r2, #8
 8009d20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f818 	bl	8009d68 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009d7c:	b5b0      	push	{r4, r5, r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d101      	bne.n	8009d96 <HAL_LTDC_ConfigLayer+0x1a>
 8009d92:	2302      	movs	r3, #2
 8009d94:	e02c      	b.n	8009df0 <HAL_LTDC_ConfigLayer+0x74>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2202      	movs	r2, #2
 8009da2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2134      	movs	r1, #52	@ 0x34
 8009dac:	fb01 f303 	mul.w	r3, r1, r3
 8009db0:	4413      	add	r3, r2
 8009db2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	4614      	mov	r4, r2
 8009dba:	461d      	mov	r5, r3
 8009dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	68b9      	ldr	r1, [r7, #8]
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f811 	bl	8009df8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bdb0      	pop	{r4, r5, r7, pc}

08009df8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b089      	sub	sp, #36	@ 0x24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	0c1b      	lsrs	r3, r3, #16
 8009e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e14:	4413      	add	r3, r2
 8009e16:	041b      	lsls	r3, r3, #16
 8009e18:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	01db      	lsls	r3, r3, #7
 8009e24:	4413      	add	r3, r2
 8009e26:	3384      	adds	r3, #132	@ 0x84
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	6812      	ldr	r2, [r2, #0]
 8009e2e:	4611      	mov	r1, r2
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	01d2      	lsls	r2, r2, #7
 8009e34:	440a      	add	r2, r1
 8009e36:	3284      	adds	r2, #132	@ 0x84
 8009e38:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009e3c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	0c1b      	lsrs	r3, r3, #16
 8009e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e4e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e50:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4619      	mov	r1, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	01db      	lsls	r3, r3, #7
 8009e5c:	440b      	add	r3, r1
 8009e5e:	3384      	adds	r3, #132	@ 0x84
 8009e60:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e66:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	68da      	ldr	r2, [r3, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e76:	4413      	add	r3, r2
 8009e78:	041b      	lsls	r3, r3, #16
 8009e7a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	01db      	lsls	r3, r3, #7
 8009e86:	4413      	add	r3, r2
 8009e88:	3384      	adds	r3, #132	@ 0x84
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	6812      	ldr	r2, [r2, #0]
 8009e90:	4611      	mov	r1, r2
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	01d2      	lsls	r2, r2, #7
 8009e96:	440a      	add	r2, r1
 8009e98:	3284      	adds	r2, #132	@ 0x84
 8009e9a:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009e9e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009eae:	4413      	add	r3, r2
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	01db      	lsls	r3, r3, #7
 8009ebc:	440b      	add	r3, r1
 8009ebe:	3384      	adds	r3, #132	@ 0x84
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	01db      	lsls	r3, r3, #7
 8009ed2:	4413      	add	r3, r2
 8009ed4:	3384      	adds	r3, #132	@ 0x84
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	6812      	ldr	r2, [r2, #0]
 8009edc:	4611      	mov	r1, r2
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	01d2      	lsls	r2, r2, #7
 8009ee2:	440a      	add	r2, r1
 8009ee4:	3284      	adds	r2, #132	@ 0x84
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	01db      	lsls	r3, r3, #7
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3384      	adds	r3, #132	@ 0x84
 8009efa:	461a      	mov	r2, r3
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009f08:	021b      	lsls	r3, r3, #8
 8009f0a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009f12:	041b      	lsls	r3, r3, #16
 8009f14:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	061b      	lsls	r3, r3, #24
 8009f1c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f24:	461a      	mov	r2, r3
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	431a      	orrs	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4619      	mov	r1, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	01db      	lsls	r3, r3, #7
 8009f38:	440b      	add	r3, r1
 8009f3a:	3384      	adds	r3, #132	@ 0x84
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	01db      	lsls	r3, r3, #7
 8009f4e:	4413      	add	r3, r2
 8009f50:	3384      	adds	r3, #132	@ 0x84
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	6812      	ldr	r2, [r2, #0]
 8009f58:	4611      	mov	r1, r2
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	01d2      	lsls	r2, r2, #7
 8009f5e:	440a      	add	r2, r1
 8009f60:	3284      	adds	r2, #132	@ 0x84
 8009f62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009f66:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	01db      	lsls	r3, r3, #7
 8009f72:	4413      	add	r3, r2
 8009f74:	3384      	adds	r3, #132	@ 0x84
 8009f76:	461a      	mov	r2, r3
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	01db      	lsls	r3, r3, #7
 8009f88:	4413      	add	r3, r2
 8009f8a:	3384      	adds	r3, #132	@ 0x84
 8009f8c:	69db      	ldr	r3, [r3, #28]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	6812      	ldr	r2, [r2, #0]
 8009f92:	4611      	mov	r1, r2
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	01d2      	lsls	r2, r2, #7
 8009f98:	440a      	add	r2, r1
 8009f9a:	3284      	adds	r2, #132	@ 0x84
 8009f9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009fa0:	f023 0307 	bic.w	r3, r3, #7
 8009fa4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	69da      	ldr	r2, [r3, #28]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	68f9      	ldr	r1, [r7, #12]
 8009fb0:	6809      	ldr	r1, [r1, #0]
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	6879      	ldr	r1, [r7, #4]
 8009fb6:	01c9      	lsls	r1, r1, #7
 8009fb8:	4401      	add	r1, r0
 8009fba:	3184      	adds	r1, #132	@ 0x84
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	01db      	lsls	r3, r3, #7
 8009fca:	4413      	add	r3, r2
 8009fcc:	3384      	adds	r3, #132	@ 0x84
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d102      	bne.n	8009fe4 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8009fde:	2304      	movs	r3, #4
 8009fe0:	61fb      	str	r3, [r7, #28]
 8009fe2:	e01b      	b.n	800a01c <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d102      	bne.n	8009ff2 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8009fec:	2303      	movs	r3, #3
 8009fee:	61fb      	str	r3, [r7, #28]
 8009ff0:	e014      	b.n	800a01c <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	2b04      	cmp	r3, #4
 8009ff8:	d00b      	beq.n	800a012 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d007      	beq.n	800a012 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a006:	2b03      	cmp	r3, #3
 800a008:	d003      	beq.n	800a012 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a00e:	2b07      	cmp	r3, #7
 800a010:	d102      	bne.n	800a018 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 800a012:	2302      	movs	r3, #2
 800a014:	61fb      	str	r3, [r7, #28]
 800a016:	e001      	b.n	800a01c <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 800a018:	2301      	movs	r3, #1
 800a01a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	461a      	mov	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	01db      	lsls	r3, r3, #7
 800a026:	4413      	add	r3, r2
 800a028:	3384      	adds	r3, #132	@ 0x84
 800a02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	6812      	ldr	r2, [r2, #0]
 800a030:	4611      	mov	r1, r2
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	01d2      	lsls	r2, r2, #7
 800a036:	440a      	add	r2, r1
 800a038:	3284      	adds	r2, #132	@ 0x84
 800a03a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a03e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a044:	69fa      	ldr	r2, [r7, #28]
 800a046:	fb02 f303 	mul.w	r3, r2, r3
 800a04a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	6859      	ldr	r1, [r3, #4]
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	1acb      	subs	r3, r1, r3
 800a056:	69f9      	ldr	r1, [r7, #28]
 800a058:	fb01 f303 	mul.w	r3, r1, r3
 800a05c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a05e:	68f9      	ldr	r1, [r7, #12]
 800a060:	6809      	ldr	r1, [r1, #0]
 800a062:	4608      	mov	r0, r1
 800a064:	6879      	ldr	r1, [r7, #4]
 800a066:	01c9      	lsls	r1, r1, #7
 800a068:	4401      	add	r1, r0
 800a06a:	3184      	adds	r1, #132	@ 0x84
 800a06c:	4313      	orrs	r3, r2
 800a06e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	461a      	mov	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	01db      	lsls	r3, r3, #7
 800a07a:	4413      	add	r3, r2
 800a07c:	3384      	adds	r3, #132	@ 0x84
 800a07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	6812      	ldr	r2, [r2, #0]
 800a084:	4611      	mov	r1, r2
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	01d2      	lsls	r2, r2, #7
 800a08a:	440a      	add	r2, r1
 800a08c:	3284      	adds	r2, #132	@ 0x84
 800a08e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a092:	f023 0307 	bic.w	r3, r3, #7
 800a096:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	01db      	lsls	r3, r3, #7
 800a0a2:	4413      	add	r3, r2
 800a0a4:	3384      	adds	r3, #132	@ 0x84
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	01db      	lsls	r3, r3, #7
 800a0b8:	4413      	add	r3, r2
 800a0ba:	3384      	adds	r3, #132	@ 0x84
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	6812      	ldr	r2, [r2, #0]
 800a0c2:	4611      	mov	r1, r2
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	01d2      	lsls	r2, r2, #7
 800a0c8:	440a      	add	r2, r1
 800a0ca:	3284      	adds	r2, #132	@ 0x84
 800a0cc:	f043 0301 	orr.w	r3, r3, #1
 800a0d0:	6013      	str	r3, [r2, #0]
}
 800a0d2:	bf00      	nop
 800a0d4:	3724      	adds	r7, #36	@ 0x24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b086      	sub	sp, #24
 800a0e2:	af02      	add	r7, sp, #8
 800a0e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e0fe      	b.n	800a2ee <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d106      	bne.n	800a10a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7f8 ffa3 	bl	8003050 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2203      	movs	r2, #3
 800a10e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4618      	mov	r0, r3
 800a118:	f008 f895 	bl	8012246 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6818      	ldr	r0, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	7c1a      	ldrb	r2, [r3, #16]
 800a124:	f88d 2000 	strb.w	r2, [sp]
 800a128:	3304      	adds	r3, #4
 800a12a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a12c:	f008 f85c 	bl	80121e8 <USB_CoreInit>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d005      	beq.n	800a142 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2202      	movs	r2, #2
 800a13a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e0d5      	b.n	800a2ee <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f008 f88d 	bl	8012268 <USB_SetCurrentMode>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d005      	beq.n	800a160 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e0c6      	b.n	800a2ee <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]
 800a164:	e04a      	b.n	800a1fc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a166:	7bfa      	ldrb	r2, [r7, #15]
 800a168:	6879      	ldr	r1, [r7, #4]
 800a16a:	4613      	mov	r3, r2
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	4413      	add	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	440b      	add	r3, r1
 800a174:	3315      	adds	r3, #21
 800a176:	2201      	movs	r2, #1
 800a178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a17a:	7bfa      	ldrb	r2, [r7, #15]
 800a17c:	6879      	ldr	r1, [r7, #4]
 800a17e:	4613      	mov	r3, r2
 800a180:	00db      	lsls	r3, r3, #3
 800a182:	4413      	add	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	440b      	add	r3, r1
 800a188:	3314      	adds	r3, #20
 800a18a:	7bfa      	ldrb	r2, [r7, #15]
 800a18c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a18e:	7bfa      	ldrb	r2, [r7, #15]
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	b298      	uxth	r0, r3
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	4613      	mov	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	440b      	add	r3, r1
 800a1a0:	332e      	adds	r3, #46	@ 0x2e
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a1a6:	7bfa      	ldrb	r2, [r7, #15]
 800a1a8:	6879      	ldr	r1, [r7, #4]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	440b      	add	r3, r1
 800a1b4:	3318      	adds	r3, #24
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a1ba:	7bfa      	ldrb	r2, [r7, #15]
 800a1bc:	6879      	ldr	r1, [r7, #4]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	4413      	add	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	440b      	add	r3, r1
 800a1c8:	331c      	adds	r3, #28
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a1ce:	7bfa      	ldrb	r2, [r7, #15]
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	4413      	add	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	440b      	add	r3, r1
 800a1dc:	3320      	adds	r3, #32
 800a1de:	2200      	movs	r2, #0
 800a1e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a1e2:	7bfa      	ldrb	r2, [r7, #15]
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	00db      	lsls	r3, r3, #3
 800a1ea:	4413      	add	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	440b      	add	r3, r1
 800a1f0:	3324      	adds	r3, #36	@ 0x24
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	73fb      	strb	r3, [r7, #15]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	791b      	ldrb	r3, [r3, #4]
 800a200:	7bfa      	ldrb	r2, [r7, #15]
 800a202:	429a      	cmp	r2, r3
 800a204:	d3af      	bcc.n	800a166 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a206:	2300      	movs	r3, #0
 800a208:	73fb      	strb	r3, [r7, #15]
 800a20a:	e044      	b.n	800a296 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a20c:	7bfa      	ldrb	r2, [r7, #15]
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	4613      	mov	r3, r2
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	440b      	add	r3, r1
 800a21a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a21e:	2200      	movs	r2, #0
 800a220:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a222:	7bfa      	ldrb	r2, [r7, #15]
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	4613      	mov	r3, r2
 800a228:	00db      	lsls	r3, r3, #3
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	440b      	add	r3, r1
 800a230:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a234:	7bfa      	ldrb	r2, [r7, #15]
 800a236:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a238:	7bfa      	ldrb	r2, [r7, #15]
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	4613      	mov	r3, r2
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	4413      	add	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	440b      	add	r3, r1
 800a246:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a24a:	2200      	movs	r2, #0
 800a24c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a24e:	7bfa      	ldrb	r2, [r7, #15]
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	4613      	mov	r3, r2
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	4413      	add	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	440b      	add	r3, r1
 800a25c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a264:	7bfa      	ldrb	r2, [r7, #15]
 800a266:	6879      	ldr	r1, [r7, #4]
 800a268:	4613      	mov	r3, r2
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	4413      	add	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	440b      	add	r3, r1
 800a272:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a27a:	7bfa      	ldrb	r2, [r7, #15]
 800a27c:	6879      	ldr	r1, [r7, #4]
 800a27e:	4613      	mov	r3, r2
 800a280:	00db      	lsls	r3, r3, #3
 800a282:	4413      	add	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	440b      	add	r3, r1
 800a288:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a28c:	2200      	movs	r2, #0
 800a28e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	3301      	adds	r3, #1
 800a294:	73fb      	strb	r3, [r7, #15]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	791b      	ldrb	r3, [r3, #4]
 800a29a:	7bfa      	ldrb	r2, [r7, #15]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d3b5      	bcc.n	800a20c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	7c1a      	ldrb	r2, [r3, #16]
 800a2a8:	f88d 2000 	strb.w	r2, [sp]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2b0:	f008 f826 	bl	8012300 <USB_DevInit>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d005      	beq.n	800a2c6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2202      	movs	r2, #2
 800a2be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e013      	b.n	800a2ee <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	7b1b      	ldrb	r3, [r3, #12]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d102      	bne.n	800a2e2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f80a 	bl	800a2f6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f008 f9f3 	bl	80126d2 <USB_DevDisconnect>

  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a328:	f043 0303 	orr.w	r3, r3, #3
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
	...

0800a340 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a340:	b480      	push	{r7}
 800a342:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a344:	4b05      	ldr	r3, [pc, #20]	@ (800a35c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a348:	4a04      	ldr	r2, [pc, #16]	@ (800a35c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a34a:	f043 0301 	orr.w	r3, r3, #1
 800a34e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800a350:	bf00      	nop
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	46020800 	.word	0x46020800

0800a360 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800a368:	4b39      	ldr	r3, [pc, #228]	@ (800a450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a36a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a36c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a370:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	429a      	cmp	r2, r3
 800a378:	d10b      	bne.n	800a392 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a380:	d905      	bls.n	800a38e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a382:	4b33      	ldr	r3, [pc, #204]	@ (800a450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	4a32      	ldr	r2, [pc, #200]	@ (800a450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a38c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	e057      	b.n	800a442 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a398:	d90a      	bls.n	800a3b0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800a39a:	4b2d      	ldr	r3, [pc, #180]	@ (800a450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a3ac:	60d3      	str	r3, [r2, #12]
 800a3ae:	e007      	b.n	800a3c0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800a3b0:	4b27      	ldr	r3, [pc, #156]	@ (800a450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a3b8:	4925      	ldr	r1, [pc, #148]	@ (800a450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a3c0:	4b24      	ldr	r3, [pc, #144]	@ (800a454 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a24      	ldr	r2, [pc, #144]	@ (800a458 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ca:	099b      	lsrs	r3, r3, #6
 800a3cc:	2232      	movs	r2, #50	@ 0x32
 800a3ce:	fb02 f303 	mul.w	r3, r2, r3
 800a3d2:	4a21      	ldr	r2, [pc, #132]	@ (800a458 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d8:	099b      	lsrs	r3, r3, #6
 800a3da:	3301      	adds	r3, #1
 800a3dc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a3de:	e002      	b.n	800a3e6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a3e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d102      	bne.n	800a3f8 <HAL_PWREx_ControlVoltageScaling+0x98>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1f3      	bne.n	800a3e0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d01b      	beq.n	800a436 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a3fe:	4b15      	ldr	r3, [pc, #84]	@ (800a454 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a15      	ldr	r2, [pc, #84]	@ (800a458 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a404:	fba2 2303 	umull	r2, r3, r2, r3
 800a408:	099b      	lsrs	r3, r3, #6
 800a40a:	2232      	movs	r2, #50	@ 0x32
 800a40c:	fb02 f303 	mul.w	r3, r2, r3
 800a410:	4a11      	ldr	r2, [pc, #68]	@ (800a458 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a412:	fba2 2303 	umull	r2, r3, r2, r3
 800a416:	099b      	lsrs	r3, r3, #6
 800a418:	3301      	adds	r3, #1
 800a41a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a41c:	e002      	b.n	800a424 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3b01      	subs	r3, #1
 800a422:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a424:	4b0a      	ldr	r3, [pc, #40]	@ (800a450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d102      	bne.n	800a436 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1f3      	bne.n	800a41e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e000      	b.n	800a442 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	46020800 	.word	0x46020800
 800a454:	20000028 	.word	0x20000028
 800a458:	10624dd3 	.word	0x10624dd3

0800a45c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a45c:	b480      	push	{r7}
 800a45e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800a460:	4b04      	ldr	r3, [pc, #16]	@ (800a474 <HAL_PWREx_GetVoltageRange+0x18>)
 800a462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800a468:	4618      	mov	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	46020800 	.word	0x46020800

0800a478 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a480:	4b22      	ldr	r3, [pc, #136]	@ (800a50c <HAL_PWREx_ConfigSupply+0x94>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a22      	ldr	r2, [pc, #136]	@ (800a510 <HAL_PWREx_ConfigSupply+0x98>)
 800a486:	fba2 2303 	umull	r2, r3, r2, r3
 800a48a:	099b      	lsrs	r3, r3, #6
 800a48c:	2232      	movs	r2, #50	@ 0x32
 800a48e:	fb02 f303 	mul.w	r3, r2, r3
 800a492:	4a1f      	ldr	r2, [pc, #124]	@ (800a510 <HAL_PWREx_ConfigSupply+0x98>)
 800a494:	fba2 2303 	umull	r2, r3, r2, r3
 800a498:	099b      	lsrs	r3, r3, #6
 800a49a:	3301      	adds	r3, #1
 800a49c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d113      	bne.n	800a4cc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a4a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a514 <HAL_PWREx_ConfigSupply+0x9c>)
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a514 <HAL_PWREx_ConfigSupply+0x9c>)
 800a4aa:	f023 0302 	bic.w	r3, r3, #2
 800a4ae:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a4b0:	e002      	b.n	800a4b8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a4b8:	4b16      	ldr	r3, [pc, #88]	@ (800a514 <HAL_PWREx_ConfigSupply+0x9c>)
 800a4ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4bc:	f003 0302 	and.w	r3, r3, #2
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d116      	bne.n	800a4f2 <HAL_PWREx_ConfigSupply+0x7a>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1f3      	bne.n	800a4b2 <HAL_PWREx_ConfigSupply+0x3a>
 800a4ca:	e012      	b.n	800a4f2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a4cc:	4b11      	ldr	r3, [pc, #68]	@ (800a514 <HAL_PWREx_ConfigSupply+0x9c>)
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	4a10      	ldr	r2, [pc, #64]	@ (800a514 <HAL_PWREx_ConfigSupply+0x9c>)
 800a4d2:	f043 0302 	orr.w	r3, r3, #2
 800a4d6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a4d8:	e002      	b.n	800a4e0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a4e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a514 <HAL_PWREx_ConfigSupply+0x9c>)
 800a4e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <HAL_PWREx_ConfigSupply+0x7a>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1f3      	bne.n	800a4da <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e000      	b.n	800a4fe <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	20000028 	.word	0x20000028
 800a510:	10624dd3 	.word	0x10624dd3
 800a514:	46020800 	.word	0x46020800

0800a518 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800a51c:	4b05      	ldr	r3, [pc, #20]	@ (800a534 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	4a04      	ldr	r2, [pc, #16]	@ (800a534 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a526:	6113      	str	r3, [r2, #16]
}
 800a528:	bf00      	nop
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	46020800 	.word	0x46020800

0800a538 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800a538:	b480      	push	{r7}
 800a53a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800a53c:	4b05      	ldr	r3, [pc, #20]	@ (800a554 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	4a04      	ldr	r2, [pc, #16]	@ (800a554 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a542:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a546:	6113      	str	r3, [r2, #16]
}
 800a548:	bf00      	nop
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	46020800 	.word	0x46020800

0800a558 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800a558:	b480      	push	{r7}
 800a55a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800a55c:	4b05      	ldr	r3, [pc, #20]	@ (800a574 <HAL_PWREx_EnableVddA+0x1c>)
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	4a04      	ldr	r2, [pc, #16]	@ (800a574 <HAL_PWREx_EnableVddA+0x1c>)
 800a562:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a566:	6113      	str	r3, [r2, #16]
}
 800a568:	bf00      	nop
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	46020800 	.word	0x46020800

0800a578 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800a57e:	f7ff ff6d 	bl	800a45c <HAL_PWREx_GetVoltageRange>
 800a582:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a58a:	d003      	beq.n	800a594 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a592:	d107      	bne.n	800a5a4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800a594:	4b06      	ldr	r3, [pc, #24]	@ (800a5b0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	4a05      	ldr	r2, [pc, #20]	@ (800a5b0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800a59a:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800a59e:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	e000      	b.n	800a5a6 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	46020800 	.word	0x46020800

0800a5b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08e      	sub	sp, #56	@ 0x38
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d102      	bne.n	800a5ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	f000 bec8 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5ce:	4b99      	ldr	r3, [pc, #612]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	f003 030c 	and.w	r3, r3, #12
 800a5d6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a5d8:	4b96      	ldr	r3, [pc, #600]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5dc:	f003 0303 	and.w	r3, r3, #3
 800a5e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0310 	and.w	r3, r3, #16
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f000 816c 	beq.w	800a8c8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d007      	beq.n	800a606 <HAL_RCC_OscConfig+0x52>
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f8:	2b0c      	cmp	r3, #12
 800a5fa:	f040 80de 	bne.w	800a7ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a600:	2b01      	cmp	r3, #1
 800a602:	f040 80da 	bne.w	800a7ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d102      	bne.n	800a614 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	f000 bea5 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a618:	4b86      	ldr	r3, [pc, #536]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d004      	beq.n	800a62e <HAL_RCC_OscConfig+0x7a>
 800a624:	4b83      	ldr	r3, [pc, #524]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a62c:	e005      	b.n	800a63a <HAL_RCC_OscConfig+0x86>
 800a62e:	4b81      	ldr	r3, [pc, #516]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a634:	041b      	lsls	r3, r3, #16
 800a636:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d255      	bcs.n	800a6ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a648:	4618      	mov	r0, r3
 800a64a:	f001 f9d9 	bl	800ba00 <RCC_SetFlashLatencyFromMSIRange>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f000 be82 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a65a:	4b76      	ldr	r3, [pc, #472]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	4a75      	ldr	r2, [pc, #468]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a660:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a664:	6093      	str	r3, [r2, #8]
 800a666:	4b73      	ldr	r3, [pc, #460]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a672:	4970      	ldr	r1, [pc, #448]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a674:	4313      	orrs	r3, r2
 800a676:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a680:	d309      	bcc.n	800a696 <HAL_RCC_OscConfig+0xe2>
 800a682:	4b6c      	ldr	r3, [pc, #432]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	f023 021f 	bic.w	r2, r3, #31
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	4969      	ldr	r1, [pc, #420]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a690:	4313      	orrs	r3, r2
 800a692:	60cb      	str	r3, [r1, #12]
 800a694:	e07e      	b.n	800a794 <HAL_RCC_OscConfig+0x1e0>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	da0a      	bge.n	800a6b4 <HAL_RCC_OscConfig+0x100>
 800a69e:	4b65      	ldr	r3, [pc, #404]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	015b      	lsls	r3, r3, #5
 800a6ac:	4961      	ldr	r1, [pc, #388]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60cb      	str	r3, [r1, #12]
 800a6b2:	e06f      	b.n	800a794 <HAL_RCC_OscConfig+0x1e0>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6bc:	d30a      	bcc.n	800a6d4 <HAL_RCC_OscConfig+0x120>
 800a6be:	4b5d      	ldr	r3, [pc, #372]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	029b      	lsls	r3, r3, #10
 800a6cc:	4959      	ldr	r1, [pc, #356]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60cb      	str	r3, [r1, #12]
 800a6d2:	e05f      	b.n	800a794 <HAL_RCC_OscConfig+0x1e0>
 800a6d4:	4b57      	ldr	r3, [pc, #348]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a1b      	ldr	r3, [r3, #32]
 800a6e0:	03db      	lsls	r3, r3, #15
 800a6e2:	4954      	ldr	r1, [pc, #336]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	60cb      	str	r3, [r1, #12]
 800a6e8:	e054      	b.n	800a794 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a6ea:	4b52      	ldr	r3, [pc, #328]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	4a51      	ldr	r2, [pc, #324]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a6f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a6f4:	6093      	str	r3, [r2, #8]
 800a6f6:	4b4f      	ldr	r3, [pc, #316]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a702:	494c      	ldr	r1, [pc, #304]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a704:	4313      	orrs	r3, r2
 800a706:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a710:	d309      	bcc.n	800a726 <HAL_RCC_OscConfig+0x172>
 800a712:	4b48      	ldr	r3, [pc, #288]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	f023 021f 	bic.w	r2, r3, #31
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	4945      	ldr	r1, [pc, #276]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a720:	4313      	orrs	r3, r2
 800a722:	60cb      	str	r3, [r1, #12]
 800a724:	e028      	b.n	800a778 <HAL_RCC_OscConfig+0x1c4>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	da0a      	bge.n	800a744 <HAL_RCC_OscConfig+0x190>
 800a72e:	4b41      	ldr	r3, [pc, #260]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	015b      	lsls	r3, r3, #5
 800a73c:	493d      	ldr	r1, [pc, #244]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	60cb      	str	r3, [r1, #12]
 800a742:	e019      	b.n	800a778 <HAL_RCC_OscConfig+0x1c4>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a74c:	d30a      	bcc.n	800a764 <HAL_RCC_OscConfig+0x1b0>
 800a74e:	4b39      	ldr	r3, [pc, #228]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a1b      	ldr	r3, [r3, #32]
 800a75a:	029b      	lsls	r3, r3, #10
 800a75c:	4935      	ldr	r1, [pc, #212]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	60cb      	str	r3, [r1, #12]
 800a762:	e009      	b.n	800a778 <HAL_RCC_OscConfig+0x1c4>
 800a764:	4b33      	ldr	r3, [pc, #204]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	03db      	lsls	r3, r3, #15
 800a772:	4930      	ldr	r1, [pc, #192]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a774:	4313      	orrs	r3, r2
 800a776:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10a      	bne.n	800a794 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a782:	4618      	mov	r0, r3
 800a784:	f001 f93c 	bl	800ba00 <RCC_SetFlashLatencyFromMSIRange>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	f000 bde5 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800a794:	f001 f8de 	bl	800b954 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a798:	4b27      	ldr	r3, [pc, #156]	@ (800a838 <HAL_RCC_OscConfig+0x284>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7f8 ffdb 	bl	8003758 <HAL_InitTick>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800a7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 808a 	beq.w	800a8c6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800a7b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7b6:	f000 bdd2 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d066      	beq.n	800a890 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800a7c2:	4b1c      	ldr	r3, [pc, #112]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a1b      	ldr	r2, [pc, #108]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a7c8:	f043 0301 	orr.w	r3, r3, #1
 800a7cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a7ce:	f7f9 f84d 	bl	800386c <HAL_GetTick>
 800a7d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a7d4:	e009      	b.n	800a7ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a7d6:	f7f9 f849 	bl	800386c <HAL_GetTick>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d902      	bls.n	800a7ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	f000 bdba 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a7ea:	4b12      	ldr	r3, [pc, #72]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 0304 	and.w	r3, r3, #4
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0ef      	beq.n	800a7d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	4a0e      	ldr	r2, [pc, #56]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a7fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a800:	6093      	str	r3, [r2, #8]
 800a802:	4b0c      	ldr	r3, [pc, #48]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80e:	4909      	ldr	r1, [pc, #36]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a810:	4313      	orrs	r3, r2
 800a812:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a818:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a81c:	d30e      	bcc.n	800a83c <HAL_RCC_OscConfig+0x288>
 800a81e:	4b05      	ldr	r3, [pc, #20]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	f023 021f 	bic.w	r2, r3, #31
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	4902      	ldr	r1, [pc, #8]	@ (800a834 <HAL_RCC_OscConfig+0x280>)
 800a82c:	4313      	orrs	r3, r2
 800a82e:	60cb      	str	r3, [r1, #12]
 800a830:	e04a      	b.n	800a8c8 <HAL_RCC_OscConfig+0x314>
 800a832:	bf00      	nop
 800a834:	46020c00 	.word	0x46020c00
 800a838:	2000002c 	.word	0x2000002c
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a840:	2b00      	cmp	r3, #0
 800a842:	da0a      	bge.n	800a85a <HAL_RCC_OscConfig+0x2a6>
 800a844:	4b98      	ldr	r3, [pc, #608]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a1b      	ldr	r3, [r3, #32]
 800a850:	015b      	lsls	r3, r3, #5
 800a852:	4995      	ldr	r1, [pc, #596]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a854:	4313      	orrs	r3, r2
 800a856:	60cb      	str	r3, [r1, #12]
 800a858:	e036      	b.n	800a8c8 <HAL_RCC_OscConfig+0x314>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a85e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a862:	d30a      	bcc.n	800a87a <HAL_RCC_OscConfig+0x2c6>
 800a864:	4b90      	ldr	r3, [pc, #576]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	029b      	lsls	r3, r3, #10
 800a872:	498d      	ldr	r1, [pc, #564]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a874:	4313      	orrs	r3, r2
 800a876:	60cb      	str	r3, [r1, #12]
 800a878:	e026      	b.n	800a8c8 <HAL_RCC_OscConfig+0x314>
 800a87a:	4b8b      	ldr	r3, [pc, #556]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	03db      	lsls	r3, r3, #15
 800a888:	4987      	ldr	r1, [pc, #540]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60cb      	str	r3, [r1, #12]
 800a88e:	e01b      	b.n	800a8c8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800a890:	4b85      	ldr	r3, [pc, #532]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a84      	ldr	r2, [pc, #528]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a896:	f023 0301 	bic.w	r3, r3, #1
 800a89a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a89c:	f7f8 ffe6 	bl	800386c <HAL_GetTick>
 800a8a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a8a2:	e009      	b.n	800a8b8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a8a4:	f7f8 ffe2 	bl	800386c <HAL_GetTick>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d902      	bls.n	800a8b8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	f000 bd53 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a8b8:	4b7b      	ldr	r3, [pc, #492]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1ef      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x2f0>
 800a8c4:	e000      	b.n	800a8c8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a8c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 808b 	beq.w	800a9ec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d8:	2b08      	cmp	r3, #8
 800a8da:	d005      	beq.n	800a8e8 <HAL_RCC_OscConfig+0x334>
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8de:	2b0c      	cmp	r3, #12
 800a8e0:	d109      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d106      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d17d      	bne.n	800a9ec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	f000 bd34 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8fe:	d106      	bne.n	800a90e <HAL_RCC_OscConfig+0x35a>
 800a900:	4b69      	ldr	r3, [pc, #420]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a68      	ldr	r2, [pc, #416]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	e041      	b.n	800a992 <HAL_RCC_OscConfig+0x3de>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a916:	d112      	bne.n	800a93e <HAL_RCC_OscConfig+0x38a>
 800a918:	4b63      	ldr	r3, [pc, #396]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a62      	ldr	r2, [pc, #392]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a91e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	4b60      	ldr	r3, [pc, #384]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a5f      	ldr	r2, [pc, #380]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a92a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	4b5d      	ldr	r3, [pc, #372]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a5c      	ldr	r2, [pc, #368]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a93a:	6013      	str	r3, [r2, #0]
 800a93c:	e029      	b.n	800a992 <HAL_RCC_OscConfig+0x3de>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a946:	d112      	bne.n	800a96e <HAL_RCC_OscConfig+0x3ba>
 800a948:	4b57      	ldr	r3, [pc, #348]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a56      	ldr	r2, [pc, #344]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a94e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	4b54      	ldr	r3, [pc, #336]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a53      	ldr	r2, [pc, #332]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a95a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a95e:	6013      	str	r3, [r2, #0]
 800a960:	4b51      	ldr	r3, [pc, #324]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a50      	ldr	r2, [pc, #320]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	e011      	b.n	800a992 <HAL_RCC_OscConfig+0x3de>
 800a96e:	4b4e      	ldr	r3, [pc, #312]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a4d      	ldr	r2, [pc, #308]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	4b4b      	ldr	r3, [pc, #300]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a4a      	ldr	r2, [pc, #296]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a980:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	4b48      	ldr	r3, [pc, #288]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a47      	ldr	r2, [pc, #284]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a98c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a990:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d014      	beq.n	800a9c4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800a99a:	f7f8 ff67 	bl	800386c <HAL_GetTick>
 800a99e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9a0:	e009      	b.n	800a9b6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9a2:	f7f8 ff63 	bl	800386c <HAL_GetTick>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	2b64      	cmp	r3, #100	@ 0x64
 800a9ae:	d902      	bls.n	800a9b6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	f000 bcd4 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9b6:	4b3c      	ldr	r3, [pc, #240]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0ef      	beq.n	800a9a2 <HAL_RCC_OscConfig+0x3ee>
 800a9c2:	e013      	b.n	800a9ec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800a9c4:	f7f8 ff52 	bl	800386c <HAL_GetTick>
 800a9c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a9ca:	e009      	b.n	800a9e0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9cc:	f7f8 ff4e 	bl	800386c <HAL_GetTick>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	2b64      	cmp	r3, #100	@ 0x64
 800a9d8:	d902      	bls.n	800a9e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	f000 bcbf 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a9e0:	4b31      	ldr	r3, [pc, #196]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1ef      	bne.n	800a9cc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0302 	and.w	r3, r3, #2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d05f      	beq.n	800aab8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	2b04      	cmp	r3, #4
 800a9fc:	d005      	beq.n	800aa0a <HAL_RCC_OscConfig+0x456>
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa00:	2b0c      	cmp	r3, #12
 800aa02:	d114      	bne.n	800aa2e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800aa04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d111      	bne.n	800aa2e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d102      	bne.n	800aa18 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	f000 bca3 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800aa18:	4b23      	ldr	r3, [pc, #140]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	041b      	lsls	r3, r3, #16
 800aa26:	4920      	ldr	r1, [pc, #128]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa2c:	e044      	b.n	800aab8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d024      	beq.n	800aa80 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800aa36:	4b1c      	ldr	r3, [pc, #112]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a1b      	ldr	r2, [pc, #108]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800aa3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aa42:	f7f8 ff13 	bl	800386c <HAL_GetTick>
 800aa46:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa48:	e009      	b.n	800aa5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa4a:	f7f8 ff0f 	bl	800386c <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d902      	bls.n	800aa5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	f000 bc80 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa5e:	4b12      	ldr	r3, [pc, #72]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d0ef      	beq.n	800aa4a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800aa6a:	4b0f      	ldr	r3, [pc, #60]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	041b      	lsls	r3, r3, #16
 800aa78:	490b      	ldr	r1, [pc, #44]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	610b      	str	r3, [r1, #16]
 800aa7e:	e01b      	b.n	800aab8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800aa80:	4b09      	ldr	r3, [pc, #36]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a08      	ldr	r2, [pc, #32]	@ (800aaa8 <HAL_RCC_OscConfig+0x4f4>)
 800aa86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aa8c:	f7f8 feee 	bl	800386c <HAL_GetTick>
 800aa90:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aa92:	e00b      	b.n	800aaac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa94:	f7f8 feea 	bl	800386c <HAL_GetTick>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d904      	bls.n	800aaac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	f000 bc5b 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
 800aaa8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aaac:	4baf      	ldr	r3, [pc, #700]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1ed      	bne.n	800aa94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0308 	and.w	r3, r3, #8
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 80c8 	beq.w	800ac56 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800aac6:	2300      	movs	r3, #0
 800aac8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aacc:	4ba7      	ldr	r3, [pc, #668]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800aace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aad2:	f003 0304 	and.w	r3, r3, #4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d111      	bne.n	800aafe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aada:	4ba4      	ldr	r3, [pc, #656]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800aadc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aae0:	4aa2      	ldr	r2, [pc, #648]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800aae2:	f043 0304 	orr.w	r3, r3, #4
 800aae6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800aaea:	4ba0      	ldr	r3, [pc, #640]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800aaec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaf0:	f003 0304 	and.w	r3, r3, #4
 800aaf4:	617b      	str	r3, [r7, #20]
 800aaf6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800aafe:	4b9c      	ldr	r3, [pc, #624]	@ (800ad70 <HAL_RCC_OscConfig+0x7bc>)
 800ab00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d119      	bne.n	800ab3e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800ab0a:	4b99      	ldr	r3, [pc, #612]	@ (800ad70 <HAL_RCC_OscConfig+0x7bc>)
 800ab0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0e:	4a98      	ldr	r2, [pc, #608]	@ (800ad70 <HAL_RCC_OscConfig+0x7bc>)
 800ab10:	f043 0301 	orr.w	r3, r3, #1
 800ab14:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab16:	f7f8 fea9 	bl	800386c <HAL_GetTick>
 800ab1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab1c:	e009      	b.n	800ab32 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab1e:	f7f8 fea5 	bl	800386c <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d902      	bls.n	800ab32 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	f000 bc16 	b.w	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab32:	4b8f      	ldr	r3, [pc, #572]	@ (800ad70 <HAL_RCC_OscConfig+0x7bc>)
 800ab34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab36:	f003 0301 	and.w	r3, r3, #1
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0ef      	beq.n	800ab1e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d05f      	beq.n	800ac06 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800ab46:	4b89      	ldr	r3, [pc, #548]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ab48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab4c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	699a      	ldr	r2, [r3, #24]
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d037      	beq.n	800abcc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d006      	beq.n	800ab74 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e3f4      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d01b      	beq.n	800abb6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800ab7e:	4b7b      	ldr	r3, [pc, #492]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ab80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab84:	4a79      	ldr	r2, [pc, #484]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ab86:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800ab8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800ab8e:	f7f8 fe6d 	bl	800386c <HAL_GetTick>
 800ab92:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ab94:	e008      	b.n	800aba8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab96:	f7f8 fe69 	bl	800386c <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b05      	cmp	r3, #5
 800aba2:	d901      	bls.n	800aba8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e3da      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800aba8:	4b70      	ldr	r3, [pc, #448]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800abaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1ef      	bne.n	800ab96 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800abb6:	4b6d      	ldr	r3, [pc, #436]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800abb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abbc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	4969      	ldr	r1, [pc, #420]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800abcc:	4b67      	ldr	r3, [pc, #412]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800abce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abd2:	4a66      	ldr	r2, [pc, #408]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800abd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800abd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800abdc:	f7f8 fe46 	bl	800386c <HAL_GetTick>
 800abe0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800abe2:	e008      	b.n	800abf6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abe4:	f7f8 fe42 	bl	800386c <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b05      	cmp	r3, #5
 800abf0:	d901      	bls.n	800abf6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e3b3      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800abf6:	4b5d      	ldr	r3, [pc, #372]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800abf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d0ef      	beq.n	800abe4 <HAL_RCC_OscConfig+0x630>
 800ac04:	e01b      	b.n	800ac3e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800ac06:	4b59      	ldr	r3, [pc, #356]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ac08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac0c:	4a57      	ldr	r2, [pc, #348]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ac0e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800ac12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800ac16:	f7f8 fe29 	bl	800386c <HAL_GetTick>
 800ac1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ac1c:	e008      	b.n	800ac30 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac1e:	f7f8 fe25 	bl	800386c <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	2b05      	cmp	r3, #5
 800ac2a:	d901      	bls.n	800ac30 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e396      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ac30:	4b4e      	ldr	r3, [pc, #312]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ac32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1ef      	bne.n	800ac1e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ac3e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d107      	bne.n	800ac56 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac46:	4b49      	ldr	r3, [pc, #292]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ac48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac4c:	4a47      	ldr	r2, [pc, #284]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ac4e:	f023 0304 	bic.w	r3, r3, #4
 800ac52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0304 	and.w	r3, r3, #4
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 8111 	beq.w	800ae86 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800ac64:	2300      	movs	r3, #0
 800ac66:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac6a:	4b40      	ldr	r3, [pc, #256]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ac6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac70:	f003 0304 	and.w	r3, r3, #4
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d111      	bne.n	800ac9c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac78:	4b3c      	ldr	r3, [pc, #240]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ac7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac7e:	4a3b      	ldr	r2, [pc, #236]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ac80:	f043 0304 	orr.w	r3, r3, #4
 800ac84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ac88:	4b38      	ldr	r3, [pc, #224]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ac8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac8e:	f003 0304 	and.w	r3, r3, #4
 800ac92:	613b      	str	r3, [r7, #16]
 800ac94:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ac9c:	4b34      	ldr	r3, [pc, #208]	@ (800ad70 <HAL_RCC_OscConfig+0x7bc>)
 800ac9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d118      	bne.n	800acda <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800aca8:	4b31      	ldr	r3, [pc, #196]	@ (800ad70 <HAL_RCC_OscConfig+0x7bc>)
 800acaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acac:	4a30      	ldr	r2, [pc, #192]	@ (800ad70 <HAL_RCC_OscConfig+0x7bc>)
 800acae:	f043 0301 	orr.w	r3, r3, #1
 800acb2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800acb4:	f7f8 fdda 	bl	800386c <HAL_GetTick>
 800acb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800acba:	e008      	b.n	800acce <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acbc:	f7f8 fdd6 	bl	800386c <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d901      	bls.n	800acce <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e347      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800acce:	4b28      	ldr	r3, [pc, #160]	@ (800ad70 <HAL_RCC_OscConfig+0x7bc>)
 800acd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0f0      	beq.n	800acbc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d01f      	beq.n	800ad26 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f003 0304 	and.w	r3, r3, #4
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d010      	beq.n	800ad14 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800acf2:	4b1e      	ldr	r3, [pc, #120]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800acf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800acf8:	4a1c      	ldr	r2, [pc, #112]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800acfa:	f043 0304 	orr.w	r3, r3, #4
 800acfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ad02:	4b1a      	ldr	r3, [pc, #104]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ad04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad08:	4a18      	ldr	r2, [pc, #96]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ad0a:	f043 0301 	orr.w	r3, r3, #1
 800ad0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ad12:	e018      	b.n	800ad46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ad14:	4b15      	ldr	r3, [pc, #84]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ad16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad1a:	4a14      	ldr	r2, [pc, #80]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ad1c:	f043 0301 	orr.w	r3, r3, #1
 800ad20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ad24:	e00f      	b.n	800ad46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ad26:	4b11      	ldr	r3, [pc, #68]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ad28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad2c:	4a0f      	ldr	r2, [pc, #60]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ad2e:	f023 0301 	bic.w	r3, r3, #1
 800ad32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ad36:	4b0d      	ldr	r3, [pc, #52]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ad38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad3c:	4a0b      	ldr	r2, [pc, #44]	@ (800ad6c <HAL_RCC_OscConfig+0x7b8>)
 800ad3e:	f023 0304 	bic.w	r3, r3, #4
 800ad42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d057      	beq.n	800adfe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800ad4e:	f7f8 fd8d 	bl	800386c <HAL_GetTick>
 800ad52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad54:	e00e      	b.n	800ad74 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad56:	f7f8 fd89 	bl	800386c <HAL_GetTick>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d905      	bls.n	800ad74 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	e2f8      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
 800ad6c:	46020c00 	.word	0x46020c00
 800ad70:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad74:	4b9c      	ldr	r3, [pc, #624]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ad76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad7a:	f003 0302 	and.w	r3, r3, #2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0e9      	beq.n	800ad56 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d01b      	beq.n	800adc6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ad8e:	4b96      	ldr	r3, [pc, #600]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ad90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad94:	4a94      	ldr	r2, [pc, #592]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ad96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800ad9e:	e00a      	b.n	800adb6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ada0:	f7f8 fd64 	bl	800386c <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adae:	4293      	cmp	r3, r2
 800adb0:	d901      	bls.n	800adb6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e2d3      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800adb6:	4b8c      	ldr	r3, [pc, #560]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800adb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d0ed      	beq.n	800ada0 <HAL_RCC_OscConfig+0x7ec>
 800adc4:	e053      	b.n	800ae6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800adc6:	4b88      	ldr	r3, [pc, #544]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800adc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adcc:	4a86      	ldr	r2, [pc, #536]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800adce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800add2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800add6:	e00a      	b.n	800adee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800add8:	f7f8 fd48 	bl	800386c <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d901      	bls.n	800adee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e2b7      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800adee:	4b7e      	ldr	r3, [pc, #504]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800adf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1ed      	bne.n	800add8 <HAL_RCC_OscConfig+0x824>
 800adfc:	e037      	b.n	800ae6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800adfe:	f7f8 fd35 	bl	800386c <HAL_GetTick>
 800ae02:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ae04:	e00a      	b.n	800ae1c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae06:	f7f8 fd31 	bl	800386c <HAL_GetTick>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d901      	bls.n	800ae1c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e2a0      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ae1c:	4b72      	ldr	r3, [pc, #456]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ae1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae22:	f003 0302 	and.w	r3, r3, #2
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1ed      	bne.n	800ae06 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800ae2a:	4b6f      	ldr	r3, [pc, #444]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ae2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d01a      	beq.n	800ae6e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ae38:	4b6b      	ldr	r3, [pc, #428]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ae3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae3e:	4a6a      	ldr	r2, [pc, #424]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ae40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ae48:	e00a      	b.n	800ae60 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae4a:	f7f8 fd0f 	bl	800386c <HAL_GetTick>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d901      	bls.n	800ae60 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e27e      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ae60:	4b61      	ldr	r3, [pc, #388]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ae62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1ed      	bne.n	800ae4a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ae6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d107      	bne.n	800ae86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae76:	4b5c      	ldr	r3, [pc, #368]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ae78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae7c:	4a5a      	ldr	r2, [pc, #360]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ae7e:	f023 0304 	bic.w	r3, r3, #4
 800ae82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 0320 	and.w	r3, r3, #32
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d036      	beq.n	800af00 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d019      	beq.n	800aece <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800ae9a:	4b53      	ldr	r3, [pc, #332]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a52      	ldr	r2, [pc, #328]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800aea0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aea4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800aea6:	f7f8 fce1 	bl	800386c <HAL_GetTick>
 800aeaa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800aeac:	e008      	b.n	800aec0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aeae:	f7f8 fcdd 	bl	800386c <HAL_GetTick>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb6:	1ad3      	subs	r3, r2, r3
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d901      	bls.n	800aec0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800aebc:	2303      	movs	r3, #3
 800aebe:	e24e      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800aec0:	4b49      	ldr	r3, [pc, #292]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d0f0      	beq.n	800aeae <HAL_RCC_OscConfig+0x8fa>
 800aecc:	e018      	b.n	800af00 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800aece:	4b46      	ldr	r3, [pc, #280]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a45      	ldr	r2, [pc, #276]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800aed4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aed8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800aeda:	f7f8 fcc7 	bl	800386c <HAL_GetTick>
 800aede:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800aee0:	e008      	b.n	800aef4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aee2:	f7f8 fcc3 	bl	800386c <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d901      	bls.n	800aef4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e234      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800aef4:	4b3c      	ldr	r3, [pc, #240]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1f0      	bne.n	800aee2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d036      	beq.n	800af7a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af10:	2b00      	cmp	r3, #0
 800af12:	d019      	beq.n	800af48 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800af14:	4b34      	ldr	r3, [pc, #208]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a33      	ldr	r2, [pc, #204]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800af1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800af1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800af20:	f7f8 fca4 	bl	800386c <HAL_GetTick>
 800af24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800af26:	e008      	b.n	800af3a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800af28:	f7f8 fca0 	bl	800386c <HAL_GetTick>
 800af2c:	4602      	mov	r2, r0
 800af2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af30:	1ad3      	subs	r3, r2, r3
 800af32:	2b02      	cmp	r3, #2
 800af34:	d901      	bls.n	800af3a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800af36:	2303      	movs	r3, #3
 800af38:	e211      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800af3a:	4b2b      	ldr	r3, [pc, #172]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af42:	2b00      	cmp	r3, #0
 800af44:	d0f0      	beq.n	800af28 <HAL_RCC_OscConfig+0x974>
 800af46:	e018      	b.n	800af7a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800af48:	4b27      	ldr	r3, [pc, #156]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a26      	ldr	r2, [pc, #152]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800af4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800af54:	f7f8 fc8a 	bl	800386c <HAL_GetTick>
 800af58:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800af5a:	e008      	b.n	800af6e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800af5c:	f7f8 fc86 	bl	800386c <HAL_GetTick>
 800af60:	4602      	mov	r2, r0
 800af62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	2b02      	cmp	r3, #2
 800af68:	d901      	bls.n	800af6e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e1f7      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800af6e:	4b1e      	ldr	r3, [pc, #120]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1f0      	bne.n	800af5c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af82:	2b00      	cmp	r3, #0
 800af84:	d07f      	beq.n	800b086 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d062      	beq.n	800b054 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800af8e:	4b16      	ldr	r3, [pc, #88]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	4a15      	ldr	r2, [pc, #84]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800af94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800af98:	6093      	str	r3, [r2, #8]
 800af9a:	4b13      	ldr	r3, [pc, #76]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa6:	4910      	ldr	r1, [pc, #64]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800afa8:	4313      	orrs	r3, r2
 800afaa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800afb4:	d309      	bcc.n	800afca <HAL_RCC_OscConfig+0xa16>
 800afb6:	4b0c      	ldr	r3, [pc, #48]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	f023 021f 	bic.w	r2, r3, #31
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	4909      	ldr	r1, [pc, #36]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800afc4:	4313      	orrs	r3, r2
 800afc6:	60cb      	str	r3, [r1, #12]
 800afc8:	e02a      	b.n	800b020 <HAL_RCC_OscConfig+0xa6c>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afce:	2b00      	cmp	r3, #0
 800afd0:	da0c      	bge.n	800afec <HAL_RCC_OscConfig+0xa38>
 800afd2:	4b05      	ldr	r3, [pc, #20]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	015b      	lsls	r3, r3, #5
 800afe0:	4901      	ldr	r1, [pc, #4]	@ (800afe8 <HAL_RCC_OscConfig+0xa34>)
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60cb      	str	r3, [r1, #12]
 800afe6:	e01b      	b.n	800b020 <HAL_RCC_OscConfig+0xa6c>
 800afe8:	46020c00 	.word	0x46020c00
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aff4:	d30a      	bcc.n	800b00c <HAL_RCC_OscConfig+0xa58>
 800aff6:	4ba1      	ldr	r3, [pc, #644]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	029b      	lsls	r3, r3, #10
 800b004:	499d      	ldr	r1, [pc, #628]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b006:	4313      	orrs	r3, r2
 800b008:	60cb      	str	r3, [r1, #12]
 800b00a:	e009      	b.n	800b020 <HAL_RCC_OscConfig+0xa6c>
 800b00c:	4b9b      	ldr	r3, [pc, #620]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a1b      	ldr	r3, [r3, #32]
 800b018:	03db      	lsls	r3, r3, #15
 800b01a:	4998      	ldr	r1, [pc, #608]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b01c:	4313      	orrs	r3, r2
 800b01e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800b020:	4b96      	ldr	r3, [pc, #600]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a95      	ldr	r2, [pc, #596]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b026:	f043 0310 	orr.w	r3, r3, #16
 800b02a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800b02c:	f7f8 fc1e 	bl	800386c <HAL_GetTick>
 800b030:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800b032:	e008      	b.n	800b046 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800b034:	f7f8 fc1a 	bl	800386c <HAL_GetTick>
 800b038:	4602      	mov	r2, r0
 800b03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d901      	bls.n	800b046 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e18b      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800b046:	4b8d      	ldr	r3, [pc, #564]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f003 0320 	and.w	r3, r3, #32
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0f0      	beq.n	800b034 <HAL_RCC_OscConfig+0xa80>
 800b052:	e018      	b.n	800b086 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800b054:	4b89      	ldr	r3, [pc, #548]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a88      	ldr	r2, [pc, #544]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b05a:	f023 0310 	bic.w	r3, r3, #16
 800b05e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800b060:	f7f8 fc04 	bl	800386c <HAL_GetTick>
 800b064:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800b066:	e008      	b.n	800b07a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800b068:	f7f8 fc00 	bl	800386c <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	2b02      	cmp	r3, #2
 800b074:	d901      	bls.n	800b07a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e171      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800b07a:	4b80      	ldr	r3, [pc, #512]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 0320 	and.w	r3, r3, #32
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1f0      	bne.n	800b068 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f000 8166 	beq.w	800b35c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800b090:	2300      	movs	r3, #0
 800b092:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b096:	4b79      	ldr	r3, [pc, #484]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b098:	69db      	ldr	r3, [r3, #28]
 800b09a:	f003 030c 	and.w	r3, r3, #12
 800b09e:	2b0c      	cmp	r3, #12
 800b0a0:	f000 80f2 	beq.w	800b288 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	f040 80c5 	bne.w	800b238 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800b0ae:	4b73      	ldr	r3, [pc, #460]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a72      	ldr	r2, [pc, #456]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b0b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b0ba:	f7f8 fbd7 	bl	800386c <HAL_GetTick>
 800b0be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b0c0:	e008      	b.n	800b0d4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0c2:	f7f8 fbd3 	bl	800386c <HAL_GetTick>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d901      	bls.n	800b0d4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e144      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b0d4:	4b69      	ldr	r3, [pc, #420]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1f0      	bne.n	800b0c2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b0e0:	4b66      	ldr	r3, [pc, #408]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b0e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b0e6:	f003 0304 	and.w	r3, r3, #4
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d111      	bne.n	800b112 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800b0ee:	4b63      	ldr	r3, [pc, #396]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b0f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b0f4:	4a61      	ldr	r2, [pc, #388]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b0f6:	f043 0304 	orr.w	r3, r3, #4
 800b0fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b0fe:	4b5f      	ldr	r3, [pc, #380]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b104:	f003 0304 	and.w	r3, r3, #4
 800b108:	60fb      	str	r3, [r7, #12]
 800b10a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800b10c:	2301      	movs	r3, #1
 800b10e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800b112:	4b5b      	ldr	r3, [pc, #364]	@ (800b280 <HAL_RCC_OscConfig+0xccc>)
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b11a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b11e:	d102      	bne.n	800b126 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800b120:	2301      	movs	r3, #1
 800b122:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b126:	4b56      	ldr	r3, [pc, #344]	@ (800b280 <HAL_RCC_OscConfig+0xccc>)
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	4a55      	ldr	r2, [pc, #340]	@ (800b280 <HAL_RCC_OscConfig+0xccc>)
 800b12c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b130:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800b132:	4b52      	ldr	r3, [pc, #328]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b136:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b13a:	f023 0303 	bic.w	r3, r3, #3
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b146:	3a01      	subs	r2, #1
 800b148:	0212      	lsls	r2, r2, #8
 800b14a:	4311      	orrs	r1, r2
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b150:	430a      	orrs	r2, r1
 800b152:	494a      	ldr	r1, [pc, #296]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b154:	4313      	orrs	r3, r2
 800b156:	628b      	str	r3, [r1, #40]	@ 0x28
 800b158:	4b48      	ldr	r3, [pc, #288]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b15a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b15c:	4b49      	ldr	r3, [pc, #292]	@ (800b284 <HAL_RCC_OscConfig+0xcd0>)
 800b15e:	4013      	ands	r3, r2
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b164:	3a01      	subs	r2, #1
 800b166:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b16e:	3a01      	subs	r2, #1
 800b170:	0252      	lsls	r2, r2, #9
 800b172:	b292      	uxth	r2, r2
 800b174:	4311      	orrs	r1, r2
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b17a:	3a01      	subs	r2, #1
 800b17c:	0412      	lsls	r2, r2, #16
 800b17e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b182:	4311      	orrs	r1, r2
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800b188:	3a01      	subs	r2, #1
 800b18a:	0612      	lsls	r2, r2, #24
 800b18c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b190:	430a      	orrs	r2, r1
 800b192:	493a      	ldr	r1, [pc, #232]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b194:	4313      	orrs	r3, r2
 800b196:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800b198:	4b38      	ldr	r3, [pc, #224]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b19a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b19c:	4a37      	ldr	r2, [pc, #220]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b19e:	f023 0310 	bic.w	r3, r3, #16
 800b1a2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1a8:	4a34      	ldr	r2, [pc, #208]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800b1ae:	4b33      	ldr	r3, [pc, #204]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b2:	4a32      	ldr	r2, [pc, #200]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b1b4:	f043 0310 	orr.w	r3, r3, #16
 800b1b8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800b1ba:	4b30      	ldr	r3, [pc, #192]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1be:	f023 020c 	bic.w	r2, r3, #12
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1c6:	492d      	ldr	r1, [pc, #180]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800b1cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d105      	bne.n	800b1e0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b1d4:	4b2a      	ldr	r3, [pc, #168]	@ (800b280 <HAL_RCC_OscConfig+0xccc>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	4a29      	ldr	r2, [pc, #164]	@ (800b280 <HAL_RCC_OscConfig+0xccc>)
 800b1da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b1de:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800b1e0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d107      	bne.n	800b1f8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800b1e8:	4b24      	ldr	r3, [pc, #144]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b1ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1ee:	4a23      	ldr	r2, [pc, #140]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b1f0:	f023 0304 	bic.w	r3, r3, #4
 800b1f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800b1f8:	4b20      	ldr	r3, [pc, #128]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a1f      	ldr	r2, [pc, #124]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b1fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b202:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b204:	f7f8 fb32 	bl	800386c <HAL_GetTick>
 800b208:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b20a:	e008      	b.n	800b21e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b20c:	f7f8 fb2e 	bl	800386c <HAL_GetTick>
 800b210:	4602      	mov	r2, r0
 800b212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	2b02      	cmp	r3, #2
 800b218:	d901      	bls.n	800b21e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800b21a:	2303      	movs	r3, #3
 800b21c:	e09f      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b21e:	4b17      	ldr	r3, [pc, #92]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0f0      	beq.n	800b20c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b22a:	4b14      	ldr	r3, [pc, #80]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b22e:	4a13      	ldr	r2, [pc, #76]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b234:	6293      	str	r3, [r2, #40]	@ 0x28
 800b236:	e091      	b.n	800b35c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800b238:	4b10      	ldr	r3, [pc, #64]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a0f      	ldr	r2, [pc, #60]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b23e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b242:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b244:	f7f8 fb12 	bl	800386c <HAL_GetTick>
 800b248:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b24a:	e008      	b.n	800b25e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b24c:	f7f8 fb0e 	bl	800386c <HAL_GetTick>
 800b250:	4602      	mov	r2, r0
 800b252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	2b02      	cmp	r3, #2
 800b258:	d901      	bls.n	800b25e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800b25a:	2303      	movs	r3, #3
 800b25c:	e07f      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b25e:	4b07      	ldr	r3, [pc, #28]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1f0      	bne.n	800b24c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800b26a:	4b04      	ldr	r3, [pc, #16]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26e:	4a03      	ldr	r2, [pc, #12]	@ (800b27c <HAL_RCC_OscConfig+0xcc8>)
 800b270:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b274:	f023 0303 	bic.w	r3, r3, #3
 800b278:	6293      	str	r3, [r2, #40]	@ 0x28
 800b27a:	e06f      	b.n	800b35c <HAL_RCC_OscConfig+0xda8>
 800b27c:	46020c00 	.word	0x46020c00
 800b280:	46020800 	.word	0x46020800
 800b284:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800b288:	4b37      	ldr	r3, [pc, #220]	@ (800b368 <HAL_RCC_OscConfig+0xdb4>)
 800b28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b28c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b28e:	4b36      	ldr	r3, [pc, #216]	@ (800b368 <HAL_RCC_OscConfig+0xdb4>)
 800b290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b292:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d039      	beq.n	800b310 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	f003 0203 	and.w	r2, r3, #3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d132      	bne.n	800b310 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	0a1b      	lsrs	r3, r3, #8
 800b2ae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2b6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d129      	bne.n	800b310 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d122      	bne.n	800b310 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2d4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d11a      	bne.n	800b310 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	0a5b      	lsrs	r3, r3, #9
 800b2de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d111      	bne.n	800b310 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	0c1b      	lsrs	r3, r3, #16
 800b2f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d108      	bne.n	800b310 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	0e1b      	lsrs	r3, r3, #24
 800b302:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b30a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d001      	beq.n	800b314 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e024      	b.n	800b35e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800b314:	4b14      	ldr	r3, [pc, #80]	@ (800b368 <HAL_RCC_OscConfig+0xdb4>)
 800b316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b318:	08db      	lsrs	r3, r3, #3
 800b31a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800b322:	429a      	cmp	r2, r3
 800b324:	d01a      	beq.n	800b35c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800b326:	4b10      	ldr	r3, [pc, #64]	@ (800b368 <HAL_RCC_OscConfig+0xdb4>)
 800b328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32a:	4a0f      	ldr	r2, [pc, #60]	@ (800b368 <HAL_RCC_OscConfig+0xdb4>)
 800b32c:	f023 0310 	bic.w	r3, r3, #16
 800b330:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b332:	f7f8 fa9b 	bl	800386c <HAL_GetTick>
 800b336:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800b338:	bf00      	nop
 800b33a:	f7f8 fa97 	bl	800386c <HAL_GetTick>
 800b33e:	4602      	mov	r2, r0
 800b340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b342:	4293      	cmp	r3, r2
 800b344:	d0f9      	beq.n	800b33a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b34a:	4a07      	ldr	r2, [pc, #28]	@ (800b368 <HAL_RCC_OscConfig+0xdb4>)
 800b34c:	00db      	lsls	r3, r3, #3
 800b34e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800b350:	4b05      	ldr	r3, [pc, #20]	@ (800b368 <HAL_RCC_OscConfig+0xdb4>)
 800b352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b354:	4a04      	ldr	r2, [pc, #16]	@ (800b368 <HAL_RCC_OscConfig+0xdb4>)
 800b356:	f043 0310 	orr.w	r3, r3, #16
 800b35a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3738      	adds	r7, #56	@ 0x38
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	46020c00 	.word	0x46020c00

0800b36c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d101      	bne.n	800b380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e1d9      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b380:	4b9b      	ldr	r3, [pc, #620]	@ (800b5f0 <HAL_RCC_ClockConfig+0x284>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 030f 	and.w	r3, r3, #15
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d910      	bls.n	800b3b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b38e:	4b98      	ldr	r3, [pc, #608]	@ (800b5f0 <HAL_RCC_ClockConfig+0x284>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f023 020f 	bic.w	r2, r3, #15
 800b396:	4996      	ldr	r1, [pc, #600]	@ (800b5f0 <HAL_RCC_ClockConfig+0x284>)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b39e:	4b94      	ldr	r3, [pc, #592]	@ (800b5f0 <HAL_RCC_ClockConfig+0x284>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 030f 	and.w	r3, r3, #15
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d001      	beq.n	800b3b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e1c1      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0310 	and.w	r3, r3, #16
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d010      	beq.n	800b3de <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	695a      	ldr	r2, [r3, #20]
 800b3c0:	4b8c      	ldr	r3, [pc, #560]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b3c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d908      	bls.n	800b3de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800b3cc:	4b89      	ldr	r3, [pc, #548]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	695b      	ldr	r3, [r3, #20]
 800b3d8:	4986      	ldr	r1, [pc, #536]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 0308 	and.w	r3, r3, #8
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d012      	beq.n	800b410 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	691a      	ldr	r2, [r3, #16]
 800b3ee:	4b81      	ldr	r3, [pc, #516]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	091b      	lsrs	r3, r3, #4
 800b3f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d909      	bls.n	800b410 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b3fc:	4b7d      	ldr	r3, [pc, #500]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	011b      	lsls	r3, r3, #4
 800b40a:	497a      	ldr	r1, [pc, #488]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b40c:	4313      	orrs	r3, r2
 800b40e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0304 	and.w	r3, r3, #4
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d010      	beq.n	800b43e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68da      	ldr	r2, [r3, #12]
 800b420:	4b74      	ldr	r3, [pc, #464]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b428:	429a      	cmp	r2, r3
 800b42a:	d908      	bls.n	800b43e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b42c:	4b71      	ldr	r3, [pc, #452]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	496e      	ldr	r1, [pc, #440]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0302 	and.w	r3, r3, #2
 800b446:	2b00      	cmp	r3, #0
 800b448:	d010      	beq.n	800b46c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	689a      	ldr	r2, [r3, #8]
 800b44e:	4b69      	ldr	r3, [pc, #420]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	f003 030f 	and.w	r3, r3, #15
 800b456:	429a      	cmp	r2, r3
 800b458:	d908      	bls.n	800b46c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b45a:	4b66      	ldr	r3, [pc, #408]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	f023 020f 	bic.w	r2, r3, #15
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	4963      	ldr	r1, [pc, #396]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b468:	4313      	orrs	r3, r2
 800b46a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 80d2 	beq.w	800b61e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800b47a:	2300      	movs	r3, #0
 800b47c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	2b03      	cmp	r3, #3
 800b484:	d143      	bne.n	800b50e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b486:	4b5b      	ldr	r3, [pc, #364]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b00      	cmp	r3, #0
 800b492:	d110      	bne.n	800b4b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b494:	4b57      	ldr	r3, [pc, #348]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b49a:	4a56      	ldr	r2, [pc, #344]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b49c:	f043 0304 	orr.w	r3, r3, #4
 800b4a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b4a4:	4b53      	ldr	r3, [pc, #332]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b4a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4aa:	f003 0304 	and.w	r3, r3, #4
 800b4ae:	60bb      	str	r3, [r7, #8]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800b4b6:	f7f8 f9d9 	bl	800386c <HAL_GetTick>
 800b4ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800b4bc:	4b4e      	ldr	r3, [pc, #312]	@ (800b5f8 <HAL_RCC_ClockConfig+0x28c>)
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00f      	beq.n	800b4e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b4c8:	e008      	b.n	800b4dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800b4ca:	f7f8 f9cf 	bl	800386c <HAL_GetTick>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	1ad3      	subs	r3, r2, r3
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d901      	bls.n	800b4dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800b4d8:	2303      	movs	r3, #3
 800b4da:	e12b      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b4dc:	4b46      	ldr	r3, [pc, #280]	@ (800b5f8 <HAL_RCC_ClockConfig+0x28c>)
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d0f0      	beq.n	800b4ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d107      	bne.n	800b4fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b4ee:	4b41      	ldr	r3, [pc, #260]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b4f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4f4:	4a3f      	ldr	r2, [pc, #252]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b4f6:	f023 0304 	bic.w	r3, r3, #4
 800b4fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b4fe:	4b3d      	ldr	r3, [pc, #244]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d121      	bne.n	800b54e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e112      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	2b02      	cmp	r3, #2
 800b514:	d107      	bne.n	800b526 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b516:	4b37      	ldr	r3, [pc, #220]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d115      	bne.n	800b54e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e106      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d107      	bne.n	800b53e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800b52e:	4b31      	ldr	r3, [pc, #196]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 0304 	and.w	r3, r3, #4
 800b536:	2b00      	cmp	r3, #0
 800b538:	d109      	bne.n	800b54e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e0fa      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b53e:	4b2d      	ldr	r3, [pc, #180]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e0f2      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800b54e:	4b29      	ldr	r3, [pc, #164]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	f023 0203 	bic.w	r2, r3, #3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	4926      	ldr	r1, [pc, #152]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b55c:	4313      	orrs	r3, r2
 800b55e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800b560:	f7f8 f984 	bl	800386c <HAL_GetTick>
 800b564:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	d112      	bne.n	800b594 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b56e:	e00a      	b.n	800b586 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b570:	f7f8 f97c 	bl	800386c <HAL_GetTick>
 800b574:	4602      	mov	r2, r0
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b57e:	4293      	cmp	r3, r2
 800b580:	d901      	bls.n	800b586 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e0d6      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b586:	4b1b      	ldr	r3, [pc, #108]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	f003 030c 	and.w	r3, r3, #12
 800b58e:	2b0c      	cmp	r3, #12
 800b590:	d1ee      	bne.n	800b570 <HAL_RCC_ClockConfig+0x204>
 800b592:	e044      	b.n	800b61e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d112      	bne.n	800b5c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b59c:	e00a      	b.n	800b5b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b59e:	f7f8 f965 	bl	800386c <HAL_GetTick>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d901      	bls.n	800b5b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e0bf      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b5b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b5b6:	69db      	ldr	r3, [r3, #28]
 800b5b8:	f003 030c 	and.w	r3, r3, #12
 800b5bc:	2b08      	cmp	r3, #8
 800b5be:	d1ee      	bne.n	800b59e <HAL_RCC_ClockConfig+0x232>
 800b5c0:	e02d      	b.n	800b61e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d123      	bne.n	800b612 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b5ca:	e00a      	b.n	800b5e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5cc:	f7f8 f94e 	bl	800386c <HAL_GetTick>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d901      	bls.n	800b5e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	e0a8      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b5e2:	4b04      	ldr	r3, [pc, #16]	@ (800b5f4 <HAL_RCC_ClockConfig+0x288>)
 800b5e4:	69db      	ldr	r3, [r3, #28]
 800b5e6:	f003 030c 	and.w	r3, r3, #12
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1ee      	bne.n	800b5cc <HAL_RCC_ClockConfig+0x260>
 800b5ee:	e016      	b.n	800b61e <HAL_RCC_ClockConfig+0x2b2>
 800b5f0:	40022000 	.word	0x40022000
 800b5f4:	46020c00 	.word	0x46020c00
 800b5f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5fc:	f7f8 f936 	bl	800386c <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d901      	bls.n	800b612 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b60e:	2303      	movs	r3, #3
 800b610:	e090      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b612:	4b4a      	ldr	r3, [pc, #296]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	f003 030c 	and.w	r3, r3, #12
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	d1ee      	bne.n	800b5fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 0302 	and.w	r3, r3, #2
 800b626:	2b00      	cmp	r3, #0
 800b628:	d010      	beq.n	800b64c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	689a      	ldr	r2, [r3, #8]
 800b62e:	4b43      	ldr	r3, [pc, #268]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	f003 030f 	and.w	r3, r3, #15
 800b636:	429a      	cmp	r2, r3
 800b638:	d208      	bcs.n	800b64c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b63a:	4b40      	ldr	r3, [pc, #256]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	f023 020f 	bic.w	r2, r3, #15
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	493d      	ldr	r1, [pc, #244]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b648:	4313      	orrs	r3, r2
 800b64a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b64c:	4b3c      	ldr	r3, [pc, #240]	@ (800b740 <HAL_RCC_ClockConfig+0x3d4>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 030f 	and.w	r3, r3, #15
 800b654:	683a      	ldr	r2, [r7, #0]
 800b656:	429a      	cmp	r2, r3
 800b658:	d210      	bcs.n	800b67c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b65a:	4b39      	ldr	r3, [pc, #228]	@ (800b740 <HAL_RCC_ClockConfig+0x3d4>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f023 020f 	bic.w	r2, r3, #15
 800b662:	4937      	ldr	r1, [pc, #220]	@ (800b740 <HAL_RCC_ClockConfig+0x3d4>)
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	4313      	orrs	r3, r2
 800b668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b66a:	4b35      	ldr	r3, [pc, #212]	@ (800b740 <HAL_RCC_ClockConfig+0x3d4>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f003 030f 	and.w	r3, r3, #15
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	429a      	cmp	r2, r3
 800b676:	d001      	beq.n	800b67c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	e05b      	b.n	800b734 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 0304 	and.w	r3, r3, #4
 800b684:	2b00      	cmp	r3, #0
 800b686:	d010      	beq.n	800b6aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68da      	ldr	r2, [r3, #12]
 800b68c:	4b2b      	ldr	r3, [pc, #172]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b68e:	6a1b      	ldr	r3, [r3, #32]
 800b690:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b694:	429a      	cmp	r2, r3
 800b696:	d208      	bcs.n	800b6aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b698:	4b28      	ldr	r3, [pc, #160]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b69a:	6a1b      	ldr	r3, [r3, #32]
 800b69c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	4925      	ldr	r1, [pc, #148]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 0308 	and.w	r3, r3, #8
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d012      	beq.n	800b6dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	691a      	ldr	r2, [r3, #16]
 800b6ba:	4b20      	ldr	r3, [pc, #128]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	091b      	lsrs	r3, r3, #4
 800b6c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d209      	bcs.n	800b6dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b6c8:	4b1c      	ldr	r3, [pc, #112]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	011b      	lsls	r3, r3, #4
 800b6d6:	4919      	ldr	r1, [pc, #100]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 0310 	and.w	r3, r3, #16
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d010      	beq.n	800b70a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	695a      	ldr	r2, [r3, #20]
 800b6ec:	4b13      	ldr	r3, [pc, #76]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d208      	bcs.n	800b70a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800b6f8:	4b10      	ldr	r3, [pc, #64]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	490d      	ldr	r1, [pc, #52]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b706:	4313      	orrs	r3, r2
 800b708:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b70a:	f000 f821 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800b70e:	4602      	mov	r2, r0
 800b710:	4b0a      	ldr	r3, [pc, #40]	@ (800b73c <HAL_RCC_ClockConfig+0x3d0>)
 800b712:	6a1b      	ldr	r3, [r3, #32]
 800b714:	f003 030f 	and.w	r3, r3, #15
 800b718:	490a      	ldr	r1, [pc, #40]	@ (800b744 <HAL_RCC_ClockConfig+0x3d8>)
 800b71a:	5ccb      	ldrb	r3, [r1, r3]
 800b71c:	fa22 f303 	lsr.w	r3, r2, r3
 800b720:	4a09      	ldr	r2, [pc, #36]	@ (800b748 <HAL_RCC_ClockConfig+0x3dc>)
 800b722:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b724:	4b09      	ldr	r3, [pc, #36]	@ (800b74c <HAL_RCC_ClockConfig+0x3e0>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4618      	mov	r0, r3
 800b72a:	f7f8 f815 	bl	8003758 <HAL_InitTick>
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]

  return status;
 800b732:	7bfb      	ldrb	r3, [r7, #15]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	46020c00 	.word	0x46020c00
 800b740:	40022000 	.word	0x40022000
 800b744:	08012804 	.word	0x08012804
 800b748:	20000028 	.word	0x20000028
 800b74c:	2000002c 	.word	0x2000002c

0800b750 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b750:	b480      	push	{r7}
 800b752:	b08b      	sub	sp, #44	@ 0x2c
 800b754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b756:	2300      	movs	r3, #0
 800b758:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800b75a:	2300      	movs	r3, #0
 800b75c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b75e:	4b78      	ldr	r3, [pc, #480]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b760:	69db      	ldr	r3, [r3, #28]
 800b762:	f003 030c 	and.w	r3, r3, #12
 800b766:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b768:	4b75      	ldr	r3, [pc, #468]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76c:	f003 0303 	and.w	r3, r3, #3
 800b770:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d005      	beq.n	800b784 <HAL_RCC_GetSysClockFreq+0x34>
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	2b0c      	cmp	r3, #12
 800b77c:	d121      	bne.n	800b7c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d11e      	bne.n	800b7c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800b784:	4b6e      	ldr	r3, [pc, #440]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d107      	bne.n	800b7a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800b790:	4b6b      	ldr	r3, [pc, #428]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b792:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b796:	0b1b      	lsrs	r3, r3, #12
 800b798:	f003 030f 	and.w	r3, r3, #15
 800b79c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b79e:	e005      	b.n	800b7ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800b7a0:	4b67      	ldr	r3, [pc, #412]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	0f1b      	lsrs	r3, r3, #28
 800b7a6:	f003 030f 	and.w	r3, r3, #15
 800b7aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b7ac:	4a65      	ldr	r2, [pc, #404]	@ (800b944 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7b4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d110      	bne.n	800b7de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b7c0:	e00d      	b.n	800b7de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b7c2:	4b5f      	ldr	r3, [pc, #380]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b7c4:	69db      	ldr	r3, [r3, #28]
 800b7c6:	f003 030c 	and.w	r3, r3, #12
 800b7ca:	2b04      	cmp	r3, #4
 800b7cc:	d102      	bne.n	800b7d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b7ce:	4b5e      	ldr	r3, [pc, #376]	@ (800b948 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b7d0:	623b      	str	r3, [r7, #32]
 800b7d2:	e004      	b.n	800b7de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	2b08      	cmp	r3, #8
 800b7d8:	d101      	bne.n	800b7de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b7da:	4b5b      	ldr	r3, [pc, #364]	@ (800b948 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b7dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	2b0c      	cmp	r3, #12
 800b7e2:	f040 80a5 	bne.w	800b930 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b7e6:	4b56      	ldr	r3, [pc, #344]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ea:	f003 0303 	and.w	r3, r3, #3
 800b7ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b7f0:	4b53      	ldr	r3, [pc, #332]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b7f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7f4:	0a1b      	lsrs	r3, r3, #8
 800b7f6:	f003 030f 	and.w	r3, r3, #15
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b7fe:	4b50      	ldr	r3, [pc, #320]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b802:	091b      	lsrs	r3, r3, #4
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b80a:	4b4d      	ldr	r3, [pc, #308]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b80c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b80e:	08db      	lsrs	r3, r3, #3
 800b810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	fb02 f303 	mul.w	r3, r2, r3
 800b81a:	ee07 3a90 	vmov	s15, r3
 800b81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b822:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d003      	beq.n	800b834 <HAL_RCC_GetSysClockFreq+0xe4>
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d022      	beq.n	800b878 <HAL_RCC_GetSysClockFreq+0x128>
 800b832:	e043      	b.n	800b8bc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	ee07 3a90 	vmov	s15, r3
 800b83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800b94c <HAL_RCC_GetSysClockFreq+0x1fc>
 800b842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b846:	4b3e      	ldr	r3, [pc, #248]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b84e:	ee07 3a90 	vmov	s15, r3
 800b852:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b856:	ed97 6a01 	vldr	s12, [r7, #4]
 800b85a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800b950 <HAL_RCC_GetSysClockFreq+0x200>
 800b85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b862:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b876:	e046      	b.n	800b906 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	ee07 3a90 	vmov	s15, r3
 800b87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b882:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800b94c <HAL_RCC_GetSysClockFreq+0x1fc>
 800b886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b88a:	4b2d      	ldr	r3, [pc, #180]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b892:	ee07 3a90 	vmov	s15, r3
 800b896:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b89a:	ed97 6a01 	vldr	s12, [r7, #4]
 800b89e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800b950 <HAL_RCC_GetSysClockFreq+0x200>
 800b8a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b8a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b8aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ba:	e024      	b.n	800b906 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8be:	ee07 3a90 	vmov	s15, r3
 800b8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8d4:	4b1a      	ldr	r3, [pc, #104]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b8d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8dc:	ee07 3a90 	vmov	s15, r3
 800b8e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b8e4:	ed97 6a01 	vldr	s12, [r7, #4]
 800b8e8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800b950 <HAL_RCC_GetSysClockFreq+0x200>
 800b8ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b8f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b8f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b8fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b904:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800b906:	4b0e      	ldr	r3, [pc, #56]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b90a:	0e1b      	lsrs	r3, r3, #24
 800b90c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b910:	3301      	adds	r3, #1
 800b912:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	ee07 3a90 	vmov	s15, r3
 800b91a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b91e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b92a:	ee17 3a90 	vmov	r3, s15
 800b92e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800b930:	6a3b      	ldr	r3, [r7, #32]
}
 800b932:	4618      	mov	r0, r3
 800b934:	372c      	adds	r7, #44	@ 0x2c
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	46020c00 	.word	0x46020c00
 800b944:	0801281c 	.word	0x0801281c
 800b948:	00f42400 	.word	0x00f42400
 800b94c:	4b742400 	.word	0x4b742400
 800b950:	46000000 	.word	0x46000000

0800b954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b958:	f7ff fefa 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800b95c:	4602      	mov	r2, r0
 800b95e:	4b07      	ldr	r3, [pc, #28]	@ (800b97c <HAL_RCC_GetHCLKFreq+0x28>)
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	f003 030f 	and.w	r3, r3, #15
 800b966:	4906      	ldr	r1, [pc, #24]	@ (800b980 <HAL_RCC_GetHCLKFreq+0x2c>)
 800b968:	5ccb      	ldrb	r3, [r1, r3]
 800b96a:	fa22 f303 	lsr.w	r3, r2, r3
 800b96e:	4a05      	ldr	r2, [pc, #20]	@ (800b984 <HAL_RCC_GetHCLKFreq+0x30>)
 800b970:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b972:	4b04      	ldr	r3, [pc, #16]	@ (800b984 <HAL_RCC_GetHCLKFreq+0x30>)
 800b974:	681b      	ldr	r3, [r3, #0]
}
 800b976:	4618      	mov	r0, r3
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	46020c00 	.word	0x46020c00
 800b980:	08012804 	.word	0x08012804
 800b984:	20000028 	.word	0x20000028

0800b988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b98c:	f7ff ffe2 	bl	800b954 <HAL_RCC_GetHCLKFreq>
 800b990:	4602      	mov	r2, r0
 800b992:	4b05      	ldr	r3, [pc, #20]	@ (800b9a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	091b      	lsrs	r3, r3, #4
 800b998:	f003 0307 	and.w	r3, r3, #7
 800b99c:	4903      	ldr	r1, [pc, #12]	@ (800b9ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800b99e:	5ccb      	ldrb	r3, [r1, r3]
 800b9a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	46020c00 	.word	0x46020c00
 800b9ac:	08012814 	.word	0x08012814

0800b9b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800b9b4:	f7ff ffce 	bl	800b954 <HAL_RCC_GetHCLKFreq>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	4b05      	ldr	r3, [pc, #20]	@ (800b9d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	0a1b      	lsrs	r3, r3, #8
 800b9c0:	f003 0307 	and.w	r3, r3, #7
 800b9c4:	4903      	ldr	r1, [pc, #12]	@ (800b9d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b9c6:	5ccb      	ldrb	r3, [r1, r3]
 800b9c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	46020c00 	.word	0x46020c00
 800b9d4:	08012814 	.word	0x08012814

0800b9d8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800b9dc:	f7ff ffba 	bl	800b954 <HAL_RCC_GetHCLKFreq>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	4b05      	ldr	r3, [pc, #20]	@ (800b9f8 <HAL_RCC_GetPCLK3Freq+0x20>)
 800b9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e6:	091b      	lsrs	r3, r3, #4
 800b9e8:	f003 0307 	and.w	r3, r3, #7
 800b9ec:	4903      	ldr	r1, [pc, #12]	@ (800b9fc <HAL_RCC_GetPCLK3Freq+0x24>)
 800b9ee:	5ccb      	ldrb	r3, [r1, r3]
 800b9f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	46020c00 	.word	0x46020c00
 800b9fc:	08012814 	.word	0x08012814

0800ba00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ba08:	4b3e      	ldr	r3, [pc, #248]	@ (800bb04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba0e:	f003 0304 	and.w	r3, r3, #4
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ba16:	f7fe fd21 	bl	800a45c <HAL_PWREx_GetVoltageRange>
 800ba1a:	6178      	str	r0, [r7, #20]
 800ba1c:	e019      	b.n	800ba52 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ba1e:	4b39      	ldr	r3, [pc, #228]	@ (800bb04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba24:	4a37      	ldr	r2, [pc, #220]	@ (800bb04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba26:	f043 0304 	orr.w	r3, r3, #4
 800ba2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ba2e:	4b35      	ldr	r3, [pc, #212]	@ (800bb04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba34:	f003 0304 	and.w	r3, r3, #4
 800ba38:	60fb      	str	r3, [r7, #12]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ba3c:	f7fe fd0e 	bl	800a45c <HAL_PWREx_GetVoltageRange>
 800ba40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ba42:	4b30      	ldr	r3, [pc, #192]	@ (800bb04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba48:	4a2e      	ldr	r2, [pc, #184]	@ (800bb04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba4a:	f023 0304 	bic.w	r3, r3, #4
 800ba4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba58:	d003      	beq.n	800ba62 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba60:	d109      	bne.n	800ba76 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba68:	d202      	bcs.n	800ba70 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ba6e:	e033      	b.n	800bad8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800ba70:	2300      	movs	r3, #0
 800ba72:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ba74:	e030      	b.n	800bad8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba7c:	d208      	bcs.n	800ba90 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba84:	d102      	bne.n	800ba8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800ba86:	2303      	movs	r3, #3
 800ba88:	613b      	str	r3, [r7, #16]
 800ba8a:	e025      	b.n	800bad8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e035      	b.n	800bafc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba96:	d90f      	bls.n	800bab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d109      	bne.n	800bab2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800baa4:	d902      	bls.n	800baac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800baa6:	2300      	movs	r3, #0
 800baa8:	613b      	str	r3, [r7, #16]
 800baaa:	e015      	b.n	800bad8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800baac:	2301      	movs	r3, #1
 800baae:	613b      	str	r3, [r7, #16]
 800bab0:	e012      	b.n	800bad8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800bab2:	2300      	movs	r3, #0
 800bab4:	613b      	str	r3, [r7, #16]
 800bab6:	e00f      	b.n	800bad8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800babe:	d109      	bne.n	800bad4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bac6:	d102      	bne.n	800bace <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800bac8:	2301      	movs	r3, #1
 800baca:	613b      	str	r3, [r7, #16]
 800bacc:	e004      	b.n	800bad8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800bace:	2302      	movs	r3, #2
 800bad0:	613b      	str	r3, [r7, #16]
 800bad2:	e001      	b.n	800bad8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800bad4:	2301      	movs	r3, #1
 800bad6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bad8:	4b0b      	ldr	r3, [pc, #44]	@ (800bb08 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f023 020f 	bic.w	r2, r3, #15
 800bae0:	4909      	ldr	r1, [pc, #36]	@ (800bb08 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800bae8:	4b07      	ldr	r3, [pc, #28]	@ (800bb08 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 030f 	and.w	r3, r3, #15
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d001      	beq.n	800bafa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e000      	b.n	800bafc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3718      	adds	r7, #24
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	46020c00 	.word	0x46020c00
 800bb08:	40022000 	.word	0x40022000

0800bb0c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800bb0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb10:	b0c8      	sub	sp, #288	@ 0x120
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	f002 0401 	and.w	r4, r2, #1
 800bb30:	2500      	movs	r5, #0
 800bb32:	ea54 0305 	orrs.w	r3, r4, r5
 800bb36:	d00b      	beq.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800bb38:	4bd5      	ldr	r3, [pc, #852]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb3e:	f023 0103 	bic.w	r1, r3, #3
 800bb42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb48:	4ad1      	ldr	r2, [pc, #836]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb4a:	430b      	orrs	r3, r1
 800bb4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	f002 0802 	and.w	r8, r2, #2
 800bb5c:	f04f 0900 	mov.w	r9, #0
 800bb60:	ea58 0309 	orrs.w	r3, r8, r9
 800bb64:	d00b      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800bb66:	4bca      	ldr	r3, [pc, #808]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb6c:	f023 010c 	bic.w	r1, r3, #12
 800bb70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb76:	4ac6      	ldr	r2, [pc, #792]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb78:	430b      	orrs	r3, r1
 800bb7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bb7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	f002 0a04 	and.w	sl, r2, #4
 800bb8a:	f04f 0b00 	mov.w	fp, #0
 800bb8e:	ea5a 030b 	orrs.w	r3, sl, fp
 800bb92:	d00b      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800bb94:	4bbe      	ldr	r3, [pc, #760]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb9a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bb9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bba4:	4aba      	ldr	r2, [pc, #744]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bba6:	430b      	orrs	r3, r1
 800bba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bbac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	f002 0308 	and.w	r3, r2, #8
 800bbb8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bbc2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	d00b      	beq.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800bbcc:	4bb0      	ldr	r3, [pc, #704]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bbd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbdc:	4aac      	ldr	r2, [pc, #688]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbde:	430b      	orrs	r3, r1
 800bbe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bbe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbec:	f002 0310 	and.w	r3, r2, #16
 800bbf0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bbfa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bbfe:	460b      	mov	r3, r1
 800bc00:	4313      	orrs	r3, r2
 800bc02:	d00b      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800bc04:	4ba2      	ldr	r3, [pc, #648]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bc0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc14:	4a9e      	ldr	r2, [pc, #632]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc16:	430b      	orrs	r3, r1
 800bc18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bc1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc24:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800bc28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bc32:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bc36:	460b      	mov	r3, r1
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	d00b      	beq.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800bc3c:	4b94      	ldr	r3, [pc, #592]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bc46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc4c:	4a90      	ldr	r2, [pc, #576]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc4e:	430b      	orrs	r3, r1
 800bc50:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5c:	f002 0320 	and.w	r3, r2, #32
 800bc60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc64:	2300      	movs	r3, #0
 800bc66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc6a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4313      	orrs	r3, r2
 800bc72:	d00b      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800bc74:	4b86      	ldr	r3, [pc, #536]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc7a:	f023 0107 	bic.w	r1, r3, #7
 800bc7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc84:	4a82      	ldr	r2, [pc, #520]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc86:	430b      	orrs	r3, r1
 800bc88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc94:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800bc98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bca2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	d00b      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800bcac:	4b78      	ldr	r3, [pc, #480]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcb2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800bcb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcbc:	4a74      	ldr	r2, [pc, #464]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcbe:	430b      	orrs	r3, r1
 800bcc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bcc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800bcd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bcda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bcde:	460b      	mov	r3, r1
 800bce0:	4313      	orrs	r3, r2
 800bce2:	d00b      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800bce4:	4b6a      	ldr	r3, [pc, #424]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bcee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcf4:	4a66      	ldr	r2, [pc, #408]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcf6:	430b      	orrs	r3, r1
 800bcf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bcfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800bd08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	d00b      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800bd1c:	4b5c      	ldr	r3, [pc, #368]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bd26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd2c:	4a58      	ldr	r2, [pc, #352]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd2e:	430b      	orrs	r3, r1
 800bd30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bd40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd44:	2300      	movs	r3, #0
 800bd46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4313      	orrs	r3, r2
 800bd52:	d00b      	beq.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800bd54:	4b4e      	ldr	r3, [pc, #312]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd5a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800bd5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd64:	4a4a      	ldr	r2, [pc, #296]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd66:	430b      	orrs	r3, r1
 800bd68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800bd6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd74:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bd78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bd82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	d00b      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800bd8c:	4b40      	ldr	r3, [pc, #256]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd92:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800bd96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd9c:	4a3c      	ldr	r2, [pc, #240]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd9e:	430b      	orrs	r3, r1
 800bda0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800bda4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bdb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bdba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	d00c      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800bdc4:	4b32      	ldr	r3, [pc, #200]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bdc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bdca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800bdce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdd6:	4a2e      	ldr	r2, [pc, #184]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bdd8:	430b      	orrs	r3, r1
 800bdda:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bdde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800bdea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdf4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	d00c      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800bdfe:	4b24      	ldr	r3, [pc, #144]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be04:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800be08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be10:	4a1f      	ldr	r2, [pc, #124]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be12:	430b      	orrs	r3, r1
 800be14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800be18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800be24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be28:	2300      	movs	r3, #0
 800be2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800be2e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800be32:	460b      	mov	r3, r1
 800be34:	4313      	orrs	r3, r2
 800be36:	d00c      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800be38:	4b15      	ldr	r3, [pc, #84]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800be3e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800be42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be4a:	4a11      	ldr	r2, [pc, #68]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be4c:	430b      	orrs	r3, r1
 800be4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800be52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800be5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800be62:	2300      	movs	r3, #0
 800be64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800be68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800be6c:	460b      	mov	r3, r1
 800be6e:	4313      	orrs	r3, r2
 800be70:	d010      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800be72:	4b07      	ldr	r3, [pc, #28]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be78:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800be7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be84:	4a02      	ldr	r2, [pc, #8]	@ (800be90 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be86:	430b      	orrs	r3, r1
 800be88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800be8c:	e002      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800be8e:	bf00      	nop
 800be90:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800be94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bea4:	2300      	movs	r3, #0
 800bea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800beaa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800beae:	460b      	mov	r3, r1
 800beb0:	4313      	orrs	r3, r2
 800beb2:	d04c      	beq.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800beb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bebc:	2b80      	cmp	r3, #128	@ 0x80
 800bebe:	d02d      	beq.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bec0:	2b80      	cmp	r3, #128	@ 0x80
 800bec2:	d827      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bec4:	2b60      	cmp	r3, #96	@ 0x60
 800bec6:	d02b      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800bec8:	2b60      	cmp	r3, #96	@ 0x60
 800beca:	d823      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800becc:	2b40      	cmp	r3, #64	@ 0x40
 800bece:	d006      	beq.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800bed0:	2b40      	cmp	r3, #64	@ 0x40
 800bed2:	d81f      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d009      	beq.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bed8:	2b20      	cmp	r3, #32
 800beda:	d011      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800bedc:	e01a      	b.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bede:	4bc0      	ldr	r3, [pc, #768]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee2:	4abf      	ldr	r2, [pc, #764]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bee8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800beea:	e01a      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800beec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bef0:	3308      	adds	r3, #8
 800bef2:	4618      	mov	r0, r3
 800bef4:	f002 fcd6 	bl	800e8a4 <RCCEx_PLL2_Config>
 800bef8:	4603      	mov	r3, r0
 800befa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800befe:	e010      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bf00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf04:	332c      	adds	r3, #44	@ 0x2c
 800bf06:	4618      	mov	r0, r3
 800bf08:	f002 fd64 	bl	800e9d4 <RCCEx_PLL3_Config>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bf12:	e006      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bf1a:	e002      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800bf1c:	bf00      	nop
 800bf1e:	e000      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800bf20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf22:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10d      	bne.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800bf2a:	4bad      	ldr	r3, [pc, #692]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf30:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800bf34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bf3c:	4aa8      	ldr	r2, [pc, #672]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf3e:	430b      	orrs	r3, r1
 800bf40:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bf44:	e003      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf46:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf4a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bf4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bf5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bf5e:	2300      	movs	r3, #0
 800bf60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bf64:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	d053      	beq.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800bf6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bf76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf7a:	d033      	beq.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800bf7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf80:	d82c      	bhi.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bf82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf86:	d02f      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800bf88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf8c:	d826      	bhi.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bf8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf92:	d008      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800bf94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf98:	d820      	bhi.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00a      	beq.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800bf9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfa2:	d011      	beq.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800bfa4:	e01a      	b.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bfa6:	4b8e      	ldr	r3, [pc, #568]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bfa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfaa:	4a8d      	ldr	r2, [pc, #564]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bfac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfb0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800bfb2:	e01a      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bfb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfb8:	3308      	adds	r3, #8
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f002 fc72 	bl	800e8a4 <RCCEx_PLL2_Config>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800bfc6:	e010      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bfc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfcc:	332c      	adds	r3, #44	@ 0x2c
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f002 fd00 	bl	800e9d4 <RCCEx_PLL3_Config>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800bfda:	e006      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bfe2:	e002      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800bfe4:	bf00      	nop
 800bfe6:	e000      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800bfe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10d      	bne.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800bff2:	4b7b      	ldr	r3, [pc, #492]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bff8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800bffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c000:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c004:	4a76      	ldr	r2, [pc, #472]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c006:	430b      	orrs	r3, r1
 800c008:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c00c:	e003      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c00e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c012:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800c016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c022:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c026:	2300      	movs	r3, #0
 800c028:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c02c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c030:	460b      	mov	r3, r1
 800c032:	4313      	orrs	r3, r2
 800c034:	d046      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800c036:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c03a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c03e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c042:	d028      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c044:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c048:	d821      	bhi.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c04a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c04e:	d022      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c054:	d81b      	bhi.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c056:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c05a:	d01c      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c05c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c060:	d815      	bhi.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c066:	d008      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800c068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c06c:	d80f      	bhi.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d011      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c076:	d00e      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c078:	e009      	b.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c07a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c07e:	3308      	adds	r3, #8
 800c080:	4618      	mov	r0, r3
 800c082:	f002 fc0f 	bl	800e8a4 <RCCEx_PLL2_Config>
 800c086:	4603      	mov	r3, r0
 800c088:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c08c:	e004      	b.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c094:	e000      	b.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800c096:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c098:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10d      	bne.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800c0a0:	4b4f      	ldr	r3, [pc, #316]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c0a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c0a6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c0b2:	4a4b      	ldr	r2, [pc, #300]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c0b4:	430b      	orrs	r3, r1
 800c0b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800c0ba:	e003      	b.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c0c0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800c0c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c0d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c0da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c0de:	460b      	mov	r3, r1
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	d03f      	beq.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800c0e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c0ec:	2b04      	cmp	r3, #4
 800c0ee:	d81e      	bhi.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x622>
 800c0f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800c0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f6:	bf00      	nop
 800c0f8:	0800c137 	.word	0x0800c137
 800c0fc:	0800c10d 	.word	0x0800c10d
 800c100:	0800c11b 	.word	0x0800c11b
 800c104:	0800c137 	.word	0x0800c137
 800c108:	0800c137 	.word	0x0800c137
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c10c:	4b34      	ldr	r3, [pc, #208]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c110:	4a33      	ldr	r2, [pc, #204]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c116:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c118:	e00e      	b.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c11a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c11e:	332c      	adds	r3, #44	@ 0x2c
 800c120:	4618      	mov	r0, r3
 800c122:	f002 fc57 	bl	800e9d4 <RCCEx_PLL3_Config>
 800c126:	4603      	mov	r3, r0
 800c128:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c12c:	e004      	b.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c134:	e000      	b.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800c136:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c138:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10d      	bne.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800c140:	4b27      	ldr	r3, [pc, #156]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c142:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c146:	f023 0107 	bic.w	r1, r3, #7
 800c14a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c14e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c152:	4a23      	ldr	r2, [pc, #140]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c154:	430b      	orrs	r3, r1
 800c156:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c15a:	e003      	b.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c15c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c160:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800c164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c170:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c172:	2300      	movs	r3, #0
 800c174:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c176:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c17a:	460b      	mov	r3, r1
 800c17c:	4313      	orrs	r3, r2
 800c17e:	d04c      	beq.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800c180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c184:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c188:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c18c:	d02a      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800c18e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c192:	d821      	bhi.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c194:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c198:	d026      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800c19a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c19e:	d81b      	bhi.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c1a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1a4:	d00e      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800c1a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1aa:	d815      	bhi.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d01d      	beq.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800c1b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1b4:	d110      	bne.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c1b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ba:	4a09      	ldr	r2, [pc, #36]	@ (800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c1bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1c0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c1c2:	e014      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c1c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1c8:	332c      	adds	r3, #44	@ 0x2c
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f002 fc02 	bl	800e9d4 <RCCEx_PLL3_Config>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c1d6:	e00a      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c1de:	e006      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800c1e0:	46020c00 	.word	0x46020c00
        break;
 800c1e4:	bf00      	nop
 800c1e6:	e002      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800c1e8:	bf00      	nop
 800c1ea:	e000      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800c1ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c1ee:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10d      	bne.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800c1f6:	4baf      	ldr	r3, [pc, #700]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c1f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c1fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c208:	4aaa      	ldr	r2, [pc, #680]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c20a:	430b      	orrs	r3, r1
 800c20c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800c210:	e003      	b.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c212:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c216:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c21a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c226:	673b      	str	r3, [r7, #112]	@ 0x70
 800c228:	2300      	movs	r3, #0
 800c22a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c22c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c230:	460b      	mov	r3, r1
 800c232:	4313      	orrs	r3, r2
 800c234:	f000 80b5 	beq.w	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c238:	2300      	movs	r3, #0
 800c23a:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c23e:	4b9d      	ldr	r3, [pc, #628]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c244:	f003 0304 	and.w	r3, r3, #4
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d113      	bne.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c24c:	4b99      	ldr	r3, [pc, #612]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c24e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c252:	4a98      	ldr	r2, [pc, #608]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c254:	f043 0304 	orr.w	r3, r3, #4
 800c258:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c25c:	4b95      	ldr	r3, [pc, #596]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c25e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c262:	f003 0304 	and.w	r3, r3, #4
 800c266:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800c26a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800c26e:	2301      	movs	r3, #1
 800c270:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c274:	4b90      	ldr	r3, [pc, #576]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c278:	4a8f      	ldr	r2, [pc, #572]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c27a:	f043 0301 	orr.w	r3, r3, #1
 800c27e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c280:	f7f7 faf4 	bl	800386c <HAL_GetTick>
 800c284:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c288:	e00b      	b.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c28a:	f7f7 faef 	bl	800386c <HAL_GetTick>
 800c28e:	4602      	mov	r2, r0
 800c290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	2b02      	cmp	r3, #2
 800c298:	d903      	bls.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800c29a:	2303      	movs	r3, #3
 800c29c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c2a0:	e005      	b.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c2a2:	4b85      	ldr	r3, [pc, #532]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a6:	f003 0301 	and.w	r3, r3, #1
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d0ed      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800c2ae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d165      	bne.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c2b6:	4b7f      	ldr	r3, [pc, #508]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c2bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2c0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800c2c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d023      	beq.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800c2cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2d0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800c2d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d01b      	beq.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c2dc:	4b75      	ldr	r3, [pc, #468]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c2e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c2ea:	4b72      	ldr	r3, [pc, #456]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c2f0:	4a70      	ldr	r2, [pc, #448]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c2f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c2fa:	4b6e      	ldr	r3, [pc, #440]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c300:	4a6c      	ldr	r2, [pc, #432]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c306:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c30a:	4a6a      	ldr	r2, [pc, #424]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c30c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c310:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c318:	f003 0301 	and.w	r3, r3, #1
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d019      	beq.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c320:	f7f7 faa4 	bl	800386c <HAL_GetTick>
 800c324:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c328:	e00d      	b.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c32a:	f7f7 fa9f 	bl	800386c <HAL_GetTick>
 800c32e:	4602      	mov	r2, r0
 800c330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c334:	1ad2      	subs	r2, r2, r3
 800c336:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d903      	bls.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800c344:	e006      	b.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c346:	4b5b      	ldr	r3, [pc, #364]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c34c:	f003 0302 	and.w	r3, r3, #2
 800c350:	2b00      	cmp	r3, #0
 800c352:	d0ea      	beq.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800c354:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10d      	bne.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800c35c:	4b55      	ldr	r3, [pc, #340]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c35e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c362:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c36a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800c36e:	4a51      	ldr	r2, [pc, #324]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c370:	430b      	orrs	r3, r1
 800c372:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c376:	e008      	b.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c378:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c37c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800c380:	e003      	b.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c382:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c386:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c38a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d107      	bne.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c392:	4b48      	ldr	r3, [pc, #288]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c398:	4a46      	ldr	r2, [pc, #280]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c39a:	f023 0304 	bic.w	r3, r3, #4
 800c39e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800c3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c3ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c3b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	d042      	beq.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800c3be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c3c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c3ca:	d022      	beq.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800c3cc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c3d0:	d81b      	bhi.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c3d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3d6:	d011      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800c3d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3dc:	d815      	bhi.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d019      	beq.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800c3e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c3e6:	d110      	bne.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c3e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ec:	3308      	adds	r3, #8
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f002 fa58 	bl	800e8a4 <RCCEx_PLL2_Config>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c3fa:	e00d      	b.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3fc:	4b2d      	ldr	r3, [pc, #180]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c400:	4a2c      	ldr	r2, [pc, #176]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c406:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c408:	e006      	b.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c410:	e002      	b.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800c412:	bf00      	nop
 800c414:	e000      	b.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800c416:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c418:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10d      	bne.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800c420:	4b24      	ldr	r3, [pc, #144]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c426:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800c42a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c42e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c432:	4a20      	ldr	r2, [pc, #128]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c434:	430b      	orrs	r3, r1
 800c436:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c43a:	e003      	b.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c43c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c440:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c450:	663b      	str	r3, [r7, #96]	@ 0x60
 800c452:	2300      	movs	r3, #0
 800c454:	667b      	str	r3, [r7, #100]	@ 0x64
 800c456:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c45a:	460b      	mov	r3, r1
 800c45c:	4313      	orrs	r3, r2
 800c45e:	d031      	beq.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800c460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c464:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c46c:	d00b      	beq.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800c46e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c472:	d804      	bhi.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800c474:	2b00      	cmp	r3, #0
 800c476:	d008      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800c478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c47c:	d007      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c484:	e004      	b.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c486:	bf00      	nop
 800c488:	e002      	b.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c48a:	bf00      	nop
 800c48c:	e000      	b.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c48e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c490:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c494:	2b00      	cmp	r3, #0
 800c496:	d111      	bne.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800c498:	4b06      	ldr	r3, [pc, #24]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c49a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c49e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4aa:	4a02      	ldr	r2, [pc, #8]	@ (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c4ac:	430b      	orrs	r3, r1
 800c4ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c4b2:	e007      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800c4b4:	46020c00 	.word	0x46020c00
 800c4b8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c4c0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800c4c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4cc:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c4d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c4d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c4da:	460b      	mov	r3, r1
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	d00c      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800c4e0:	4bb2      	ldr	r3, [pc, #712]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c4e6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800c4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c4f2:	4aae      	ldr	r2, [pc, #696]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4f4:	430b      	orrs	r3, r1
 800c4f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800c4fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c502:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c506:	653b      	str	r3, [r7, #80]	@ 0x50
 800c508:	2300      	movs	r3, #0
 800c50a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c50c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c510:	460b      	mov	r3, r1
 800c512:	4313      	orrs	r3, r2
 800c514:	d019      	beq.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800c516:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c51a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c51e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c522:	d105      	bne.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c524:	4ba1      	ldr	r3, [pc, #644]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c528:	4aa0      	ldr	r2, [pc, #640]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c52a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c52e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800c530:	4b9e      	ldr	r3, [pc, #632]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c536:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800c53a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c53e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c542:	4a9a      	ldr	r2, [pc, #616]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c544:	430b      	orrs	r3, r1
 800c546:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800c54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c556:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c558:	2300      	movs	r3, #0
 800c55a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c55c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c560:	460b      	mov	r3, r1
 800c562:	4313      	orrs	r3, r2
 800c564:	d00c      	beq.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800c566:	4b91      	ldr	r3, [pc, #580]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c56c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c574:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c578:	4a8c      	ldr	r2, [pc, #560]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c57a:	430b      	orrs	r3, r1
 800c57c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800c580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c58c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c58e:	2300      	movs	r3, #0
 800c590:	647b      	str	r3, [r7, #68]	@ 0x44
 800c592:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c596:	460b      	mov	r3, r1
 800c598:	4313      	orrs	r3, r2
 800c59a:	d00c      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800c59c:	4b83      	ldr	r3, [pc, #524]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c59e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c5a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c5a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c5ae:	4a7f      	ldr	r2, [pc, #508]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800c5b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5be:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c5c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	d00c      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800c5d2:	4b76      	ldr	r3, [pc, #472]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c5d8:	f023 0118 	bic.w	r1, r3, #24
 800c5dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c5e4:	4a71      	ldr	r2, [pc, #452]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5e6:	430b      	orrs	r3, r1
 800c5e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c5ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800c5f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c602:	460b      	mov	r3, r1
 800c604:	4313      	orrs	r3, r2
 800c606:	d032      	beq.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800c608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c60c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c610:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c614:	d105      	bne.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c616:	4b65      	ldr	r3, [pc, #404]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c61a:	4a64      	ldr	r2, [pc, #400]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c61c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c620:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800c622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c626:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c62a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c62e:	d108      	bne.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c634:	3308      	adds	r3, #8
 800c636:	4618      	mov	r0, r3
 800c638:	f002 f934 	bl	800e8a4 <RCCEx_PLL2_Config>
 800c63c:	4603      	mov	r3, r0
 800c63e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800c642:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c646:	2b00      	cmp	r3, #0
 800c648:	d10d      	bne.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800c64a:	4b58      	ldr	r3, [pc, #352]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c64c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c650:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c658:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c65c:	4a53      	ldr	r2, [pc, #332]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c65e:	430b      	orrs	r3, r1
 800c660:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c664:	e003      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c666:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c66a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800c66e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	2100      	movs	r1, #0
 800c678:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c680:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c684:	460b      	mov	r3, r1
 800c686:	4313      	orrs	r3, r2
 800c688:	d04a      	beq.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800c68a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c68e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c692:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c696:	d01e      	beq.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800c698:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c69c:	d825      	bhi.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c69e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c6a2:	d00e      	beq.n	800c6c2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800c6a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c6a8:	d81f      	bhi.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d021      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800c6ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6b2:	d11a      	bne.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6b4:	4b3d      	ldr	r3, [pc, #244]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b8:	4a3c      	ldr	r2, [pc, #240]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c6ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6be:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c6c0:	e018      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c6c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6c6:	3308      	adds	r3, #8
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f002 f8eb 	bl	800e8a4 <RCCEx_PLL2_Config>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c6d4:	e00e      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6da:	332c      	adds	r3, #44	@ 0x2c
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f002 f979 	bl	800e9d4 <RCCEx_PLL3_Config>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c6e8:	e004      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c6f0:	e000      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800c6f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6f4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10d      	bne.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800c6fc:	4b2b      	ldr	r3, [pc, #172]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c6fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c702:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c70a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c70e:	4927      	ldr	r1, [pc, #156]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c710:	4313      	orrs	r3, r2
 800c712:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c716:	e003      	b.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c718:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c71c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800c720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c728:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800c72c:	623b      	str	r3, [r7, #32]
 800c72e:	2300      	movs	r3, #0
 800c730:	627b      	str	r3, [r7, #36]	@ 0x24
 800c732:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c736:	460b      	mov	r3, r1
 800c738:	4313      	orrs	r3, r2
 800c73a:	d03d      	beq.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800c73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c744:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c748:	d00e      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800c74a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c74e:	d815      	bhi.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c750:	2b00      	cmp	r3, #0
 800c752:	d017      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c758:	d110      	bne.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c75a:	4b14      	ldr	r3, [pc, #80]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c75e:	4a13      	ldr	r2, [pc, #76]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c764:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c766:	e00e      	b.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c76c:	3308      	adds	r3, #8
 800c76e:	4618      	mov	r0, r3
 800c770:	f002 f898 	bl	800e8a4 <RCCEx_PLL2_Config>
 800c774:	4603      	mov	r3, r0
 800c776:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c77a:	e004      	b.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c782:	e000      	b.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c784:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c786:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d110      	bne.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800c78e:	4b07      	ldr	r3, [pc, #28]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c794:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7a0:	4902      	ldr	r1, [pc, #8]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800c7a8:	e006      	b.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c7aa:	bf00      	nop
 800c7ac:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7b0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c7b4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800c7b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800c7c4:	61bb      	str	r3, [r7, #24]
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	61fb      	str	r3, [r7, #28]
 800c7ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	d00c      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800c7d4:	4b68      	ldr	r3, [pc, #416]	@ (800c978 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c7d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c7da:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c7de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c7e6:	4964      	ldr	r1, [pc, #400]	@ (800c978 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c7ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	6139      	str	r1, [r7, #16]
 800c7fa:	f003 0302 	and.w	r3, r3, #2
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c804:	460b      	mov	r3, r1
 800c806:	4313      	orrs	r3, r2
 800c808:	d036      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800c80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c80e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00c      	beq.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c816:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c81a:	d113      	bne.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c820:	3308      	adds	r3, #8
 800c822:	4618      	mov	r0, r3
 800c824:	f002 f83e 	bl	800e8a4 <RCCEx_PLL2_Config>
 800c828:	4603      	mov	r3, r0
 800c82a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c82e:	e00d      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c834:	332c      	adds	r3, #44	@ 0x2c
 800c836:	4618      	mov	r0, r3
 800c838:	f002 f8cc 	bl	800e9d4 <RCCEx_PLL3_Config>
 800c83c:	4603      	mov	r3, r0
 800c83e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c842:	e003      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c84a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c84c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10d      	bne.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800c854:	4b48      	ldr	r3, [pc, #288]	@ (800c978 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c856:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c85a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c85e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c862:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c866:	4944      	ldr	r1, [pc, #272]	@ (800c978 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c868:	4313      	orrs	r3, r2
 800c86a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c86e:	e003      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c870:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c874:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800c878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	2100      	movs	r1, #0
 800c882:	60b9      	str	r1, [r7, #8]
 800c884:	f003 0304 	and.w	r3, r3, #4
 800c888:	60fb      	str	r3, [r7, #12]
 800c88a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c88e:	460b      	mov	r3, r1
 800c890:	4313      	orrs	r3, r2
 800c892:	d024      	beq.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800c894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c898:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d108      	bne.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c8a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8a4:	332c      	adds	r3, #44	@ 0x2c
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f002 f894 	bl	800e9d4 <RCCEx_PLL3_Config>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800c8b2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10d      	bne.n	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800c8ba:	4b2f      	ldr	r3, [pc, #188]	@ (800c978 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c8bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c8c0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c8c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c8cc:	492a      	ldr	r1, [pc, #168]	@ (800c978 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c8d4:	e003      	b.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8d6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c8da:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800c8de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	6039      	str	r1, [r7, #0]
 800c8ea:	f003 0308 	and.w	r3, r3, #8
 800c8ee:	607b      	str	r3, [r7, #4]
 800c8f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	d036      	beq.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800c8fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c902:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c906:	d00d      	beq.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800c908:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c90c:	d811      	bhi.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c90e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c912:	d012      	beq.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c918:	d80b      	bhi.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00d      	beq.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c91e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c922:	d106      	bne.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c924:	4b14      	ldr	r3, [pc, #80]	@ (800c978 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c928:	4a13      	ldr	r2, [pc, #76]	@ (800c978 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c92a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c92e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800c930:	e004      	b.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c938:	e000      	b.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800c93a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c93c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10d      	bne.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800c944:	4b0c      	ldr	r3, [pc, #48]	@ (800c978 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c946:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c94a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c94e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c952:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c956:	4908      	ldr	r1, [pc, #32]	@ (800c978 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c958:	4313      	orrs	r3, r2
 800c95a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c95e:	e003      	b.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c960:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c964:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800c968:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c972:	46bd      	mov	sp, r7
 800c974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c978:	46020c00 	.word	0x46020c00

0800c97c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b089      	sub	sp, #36	@ 0x24
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800c984:	4ba6      	ldr	r3, [pc, #664]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c98e:	4ba4      	ldr	r3, [pc, #656]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c992:	f003 0303 	and.w	r3, r3, #3
 800c996:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800c998:	4ba1      	ldr	r3, [pc, #644]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c99a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c99c:	0a1b      	lsrs	r3, r3, #8
 800c99e:	f003 030f 	and.w	r3, r3, #15
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c9a6:	4b9e      	ldr	r3, [pc, #632]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9aa:	091b      	lsrs	r3, r3, #4
 800c9ac:	f003 0301 	and.w	r3, r3, #1
 800c9b0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800c9b2:	4b9b      	ldr	r3, [pc, #620]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9b6:	08db      	lsrs	r3, r3, #3
 800c9b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	fb02 f303 	mul.w	r3, r2, r3
 800c9c2:	ee07 3a90 	vmov	s15, r3
 800c9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	2b03      	cmp	r3, #3
 800c9d2:	d062      	beq.n	800ca9a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2b03      	cmp	r3, #3
 800c9d8:	f200 8081 	bhi.w	800cade <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d024      	beq.n	800ca2c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d17a      	bne.n	800cade <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	ee07 3a90 	vmov	s15, r3
 800c9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800cc24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9fa:	4b89      	ldr	r3, [pc, #548]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca0e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800cc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ca12:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ca16:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ca22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca2a:	e08f      	b.n	800cb4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ca2c:	4b7c      	ldr	r3, [pc, #496]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d005      	beq.n	800ca44 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800ca38:	4b79      	ldr	r3, [pc, #484]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	0f1b      	lsrs	r3, r3, #28
 800ca3e:	f003 030f 	and.w	r3, r3, #15
 800ca42:	e006      	b.n	800ca52 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800ca44:	4b76      	ldr	r3, [pc, #472]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca4a:	041b      	lsls	r3, r3, #16
 800ca4c:	0f1b      	lsrs	r3, r3, #28
 800ca4e:	f003 030f 	and.w	r3, r3, #15
 800ca52:	4a76      	ldr	r2, [pc, #472]	@ (800cc2c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800ca54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca58:	ee07 3a90 	vmov	s15, r3
 800ca5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	ee07 3a90 	vmov	s15, r3
 800ca66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	ee07 3a90 	vmov	s15, r3
 800ca74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca78:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca7c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800cc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ca80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ca90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca98:	e058      	b.n	800cb4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	ee07 3a90 	vmov	s15, r3
 800caa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cc24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800caa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caac:	4b5c      	ldr	r3, [pc, #368]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800caae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab4:	ee07 3a90 	vmov	s15, r3
 800cab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800cabc:	ed97 6a02 	vldr	s12, [r7, #8]
 800cac0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800cac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800cacc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cadc:	e036      	b.n	800cb4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800cade:	4b50      	ldr	r3, [pc, #320]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d005      	beq.n	800caf6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800caea:	4b4d      	ldr	r3, [pc, #308]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	0f1b      	lsrs	r3, r3, #28
 800caf0:	f003 030f 	and.w	r3, r3, #15
 800caf4:	e006      	b.n	800cb04 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800caf6:	4b4a      	ldr	r3, [pc, #296]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800caf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cafc:	041b      	lsls	r3, r3, #16
 800cafe:	0f1b      	lsrs	r3, r3, #28
 800cb00:	f003 030f 	and.w	r3, r3, #15
 800cb04:	4a49      	ldr	r2, [pc, #292]	@ (800cc2c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800cb06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb0a:	ee07 3a90 	vmov	s15, r3
 800cb0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	ee07 3a90 	vmov	s15, r3
 800cb18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb2a:	ed97 6a02 	vldr	s12, [r7, #8]
 800cb2e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800cc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800cb32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800cb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb4a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800cb4c:	4b34      	ldr	r3, [pc, #208]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cb4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d017      	beq.n	800cb88 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cb58:	4b31      	ldr	r3, [pc, #196]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cb5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb5c:	0a5b      	lsrs	r3, r3, #9
 800cb5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb62:	ee07 3a90 	vmov	s15, r3
 800cb66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800cb6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb6e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cb72:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb7e:	ee17 2a90 	vmov	r2, s15
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	e002      	b.n	800cb8e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800cb8e:	4b24      	ldr	r3, [pc, #144]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cb90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d017      	beq.n	800cbca <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cb9a:	4b21      	ldr	r3, [pc, #132]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cb9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb9e:	0c1b      	lsrs	r3, r3, #16
 800cba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cba4:	ee07 3a90 	vmov	s15, r3
 800cba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800cbac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbb0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cbb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbc0:	ee17 2a90 	vmov	r2, s15
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	605a      	str	r2, [r3, #4]
 800cbc8:	e002      	b.n	800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800cbd0:	4b13      	ldr	r3, [pc, #76]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cbd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d017      	beq.n	800cc0c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cbdc:	4b10      	ldr	r3, [pc, #64]	@ (800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cbde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbe0:	0e1b      	lsrs	r3, r3, #24
 800cbe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbe6:	ee07 3a90 	vmov	s15, r3
 800cbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800cbee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbf2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cbf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc02:	ee17 2a90 	vmov	r2, s15
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cc0a:	e002      	b.n	800cc12 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	609a      	str	r2, [r3, #8]
}
 800cc12:	bf00      	nop
 800cc14:	3724      	adds	r7, #36	@ 0x24
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	46020c00 	.word	0x46020c00
 800cc24:	4b742400 	.word	0x4b742400
 800cc28:	46000000 	.word	0x46000000
 800cc2c:	0801281c 	.word	0x0801281c

0800cc30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b089      	sub	sp, #36	@ 0x24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800cc38:	4ba6      	ldr	r3, [pc, #664]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc40:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800cc42:	4ba4      	ldr	r3, [pc, #656]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc46:	f003 0303 	and.w	r3, r3, #3
 800cc4a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800cc4c:	4ba1      	ldr	r3, [pc, #644]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc50:	0a1b      	lsrs	r3, r3, #8
 800cc52:	f003 030f 	and.w	r3, r3, #15
 800cc56:	3301      	adds	r3, #1
 800cc58:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800cc5a:	4b9e      	ldr	r3, [pc, #632]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc5e:	091b      	lsrs	r3, r3, #4
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800cc66:	4b9b      	ldr	r3, [pc, #620]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc6a:	08db      	lsrs	r3, r3, #3
 800cc6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	fb02 f303 	mul.w	r3, r2, r3
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc7e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	2b03      	cmp	r3, #3
 800cc86:	d062      	beq.n	800cd4e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	2b03      	cmp	r3, #3
 800cc8c:	f200 8081 	bhi.w	800cd92 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d024      	beq.n	800cce0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d17a      	bne.n	800cd92 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	ee07 3a90 	vmov	s15, r3
 800cca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800ccaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccae:	4b89      	ldr	r3, [pc, #548]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ccb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb6:	ee07 3a90 	vmov	s15, r3
 800ccba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ccbe:	ed97 6a02 	vldr	s12, [r7, #8]
 800ccc2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800cedc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ccc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ccca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ccce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ccd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ccd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ccde:	e08f      	b.n	800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800cce0:	4b7c      	ldr	r3, [pc, #496]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d005      	beq.n	800ccf8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800ccec:	4b79      	ldr	r3, [pc, #484]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	0f1b      	lsrs	r3, r3, #28
 800ccf2:	f003 030f 	and.w	r3, r3, #15
 800ccf6:	e006      	b.n	800cd06 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800ccf8:	4b76      	ldr	r3, [pc, #472]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ccfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ccfe:	041b      	lsls	r3, r3, #16
 800cd00:	0f1b      	lsrs	r3, r3, #28
 800cd02:	f003 030f 	and.w	r3, r3, #15
 800cd06:	4a76      	ldr	r2, [pc, #472]	@ (800cee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800cd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd0c:	ee07 3a90 	vmov	s15, r3
 800cd10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	ee07 3a90 	vmov	s15, r3
 800cd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	ee07 3a90 	vmov	s15, r3
 800cd28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd2c:	ed97 6a02 	vldr	s12, [r7, #8]
 800cd30:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800cedc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cd34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd40:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800cd44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd4c:	e058      	b.n	800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	ee07 3a90 	vmov	s15, r3
 800cd54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd58:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800cd5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd60:	4b5c      	ldr	r3, [pc, #368]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cd62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd68:	ee07 3a90 	vmov	s15, r3
 800cd6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd70:	ed97 6a02 	vldr	s12, [r7, #8]
 800cd74:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cedc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cd78:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cd7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd84:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cd88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd90:	e036      	b.n	800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800cd92:	4b50      	ldr	r3, [pc, #320]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d005      	beq.n	800cdaa <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800cd9e:	4b4d      	ldr	r3, [pc, #308]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	0f1b      	lsrs	r3, r3, #28
 800cda4:	f003 030f 	and.w	r3, r3, #15
 800cda8:	e006      	b.n	800cdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800cdaa:	4b4a      	ldr	r3, [pc, #296]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cdac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cdb0:	041b      	lsls	r3, r3, #16
 800cdb2:	0f1b      	lsrs	r3, r3, #28
 800cdb4:	f003 030f 	and.w	r3, r3, #15
 800cdb8:	4a49      	ldr	r2, [pc, #292]	@ (800cee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800cdba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdbe:	ee07 3a90 	vmov	s15, r3
 800cdc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	ee07 3a90 	vmov	s15, r3
 800cdcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	ee07 3a90 	vmov	s15, r3
 800cdda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdde:	ed97 6a02 	vldr	s12, [r7, #8]
 800cde2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800cedc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cde6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800cdf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cdfe:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ce00:	4b34      	ldr	r3, [pc, #208]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ce02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d017      	beq.n	800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ce0c:	4b31      	ldr	r3, [pc, #196]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ce0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce10:	0a5b      	lsrs	r3, r3, #9
 800ce12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce16:	ee07 3a90 	vmov	s15, r3
 800ce1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ce1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce22:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ce26:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce32:	ee17 2a90 	vmov	r2, s15
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	601a      	str	r2, [r3, #0]
 800ce3a:	e002      	b.n	800ce42 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ce42:	4b24      	ldr	r3, [pc, #144]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ce44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d017      	beq.n	800ce7e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ce4e:	4b21      	ldr	r3, [pc, #132]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ce50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce52:	0c1b      	lsrs	r3, r3, #16
 800ce54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce58:	ee07 3a90 	vmov	s15, r3
 800ce5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ce60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce64:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ce68:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce74:	ee17 2a90 	vmov	r2, s15
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	605a      	str	r2, [r3, #4]
 800ce7c:	e002      	b.n	800ce84 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ce84:	4b13      	ldr	r3, [pc, #76]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ce86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d017      	beq.n	800cec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ce90:	4b10      	ldr	r3, [pc, #64]	@ (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ce92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce94:	0e1b      	lsrs	r3, r3, #24
 800ce96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce9a:	ee07 3a90 	vmov	s15, r3
 800ce9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800cea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cea6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ceaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceb6:	ee17 2a90 	vmov	r2, s15
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cebe:	e002      	b.n	800cec6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	609a      	str	r2, [r3, #8]
}
 800cec6:	bf00      	nop
 800cec8:	3724      	adds	r7, #36	@ 0x24
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	46020c00 	.word	0x46020c00
 800ced8:	4b742400 	.word	0x4b742400
 800cedc:	46000000 	.word	0x46000000
 800cee0:	0801281c 	.word	0x0801281c

0800cee4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b089      	sub	sp, #36	@ 0x24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ceec:	4ba6      	ldr	r3, [pc, #664]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ceee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cef4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800cef6:	4ba4      	ldr	r3, [pc, #656]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cefa:	f003 0303 	and.w	r3, r3, #3
 800cefe:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800cf00:	4ba1      	ldr	r3, [pc, #644]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf04:	0a1b      	lsrs	r3, r3, #8
 800cf06:	f003 030f 	and.w	r3, r3, #15
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800cf0e:	4b9e      	ldr	r3, [pc, #632]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf12:	091b      	lsrs	r3, r3, #4
 800cf14:	f003 0301 	and.w	r3, r3, #1
 800cf18:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800cf1a:	4b9b      	ldr	r3, [pc, #620]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf1e:	08db      	lsrs	r3, r3, #3
 800cf20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	fb02 f303 	mul.w	r3, r2, r3
 800cf2a:	ee07 3a90 	vmov	s15, r3
 800cf2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf32:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	2b03      	cmp	r3, #3
 800cf3a:	d062      	beq.n	800d002 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2b03      	cmp	r3, #3
 800cf40:	f200 8081 	bhi.w	800d046 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d024      	beq.n	800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d17a      	bne.n	800d046 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	ee07 3a90 	vmov	s15, r3
 800cf56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf5a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800d18c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800cf5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf62:	4b89      	ldr	r3, [pc, #548]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf6a:	ee07 3a90 	vmov	s15, r3
 800cf6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf72:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf76:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cf7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cf7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf86:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cf8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf8e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800cf92:	e08f      	b.n	800d0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cf94:	4b7c      	ldr	r3, [pc, #496]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d005      	beq.n	800cfac <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800cfa0:	4b79      	ldr	r3, [pc, #484]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	0f1b      	lsrs	r3, r3, #28
 800cfa6:	f003 030f 	and.w	r3, r3, #15
 800cfaa:	e006      	b.n	800cfba <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800cfac:	4b76      	ldr	r3, [pc, #472]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cfae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfb2:	041b      	lsls	r3, r3, #16
 800cfb4:	0f1b      	lsrs	r3, r3, #28
 800cfb6:	f003 030f 	and.w	r3, r3, #15
 800cfba:	4a76      	ldr	r2, [pc, #472]	@ (800d194 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800cfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc0:	ee07 3a90 	vmov	s15, r3
 800cfc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	ee07 3a90 	vmov	s15, r3
 800cfce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	ee07 3a90 	vmov	s15, r3
 800cfdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe0:	ed97 6a02 	vldr	s12, [r7, #8]
 800cfe4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cfe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cffc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d000:	e058      	b.n	800d0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	ee07 3a90 	vmov	s15, r3
 800d008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d18c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800d010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d014:	4b5c      	ldr	r3, [pc, #368]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d01c:	ee07 3a90 	vmov	s15, r3
 800d020:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800d024:	ed97 6a02 	vldr	s12, [r7, #8]
 800d028:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800d02c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d030:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800d034:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d038:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d040:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d044:	e036      	b.n	800d0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d046:	4b50      	ldr	r3, [pc, #320]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d005      	beq.n	800d05e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800d052:	4b4d      	ldr	r3, [pc, #308]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	0f1b      	lsrs	r3, r3, #28
 800d058:	f003 030f 	and.w	r3, r3, #15
 800d05c:	e006      	b.n	800d06c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800d05e:	4b4a      	ldr	r3, [pc, #296]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d064:	041b      	lsls	r3, r3, #16
 800d066:	0f1b      	lsrs	r3, r3, #28
 800d068:	f003 030f 	and.w	r3, r3, #15
 800d06c:	4a49      	ldr	r2, [pc, #292]	@ (800d194 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800d06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d072:	ee07 3a90 	vmov	s15, r3
 800d076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	ee07 3a90 	vmov	s15, r3
 800d080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	ee07 3a90 	vmov	s15, r3
 800d08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d092:	ed97 6a02 	vldr	s12, [r7, #8]
 800d096:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800d09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0b2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800d0b4:	4b34      	ldr	r3, [pc, #208]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d0b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d017      	beq.n	800d0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d0c0:	4b31      	ldr	r3, [pc, #196]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d0c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0c4:	0a5b      	lsrs	r3, r3, #9
 800d0c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0ca:	ee07 3a90 	vmov	s15, r3
 800d0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800d0d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d0d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d0da:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0e6:	ee17 2a90 	vmov	r2, s15
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	601a      	str	r2, [r3, #0]
 800d0ee:	e002      	b.n	800d0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800d0f6:	4b24      	ldr	r3, [pc, #144]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d0f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d017      	beq.n	800d132 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d102:	4b21      	ldr	r3, [pc, #132]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d106:	0c1b      	lsrs	r3, r3, #16
 800d108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d10c:	ee07 3a90 	vmov	s15, r3
 800d110:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800d114:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d118:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d11c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d128:	ee17 2a90 	vmov	r2, s15
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	605a      	str	r2, [r3, #4]
 800d130:	e002      	b.n	800d138 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800d138:	4b13      	ldr	r3, [pc, #76]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d13a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d13c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d017      	beq.n	800d174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d144:	4b10      	ldr	r3, [pc, #64]	@ (800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d148:	0e1b      	lsrs	r3, r3, #24
 800d14a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d14e:	ee07 3a90 	vmov	s15, r3
 800d152:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800d156:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d15a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d16a:	ee17 2a90 	vmov	r2, s15
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d172:	e002      	b.n	800d17a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	609a      	str	r2, [r3, #8]
}
 800d17a:	bf00      	nop
 800d17c:	3724      	adds	r7, #36	@ 0x24
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	46020c00 	.word	0x46020c00
 800d18c:	4b742400 	.word	0x4b742400
 800d190:	46000000 	.word	0x46000000
 800d194:	0801281c 	.word	0x0801281c

0800d198 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08e      	sub	sp, #56	@ 0x38
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800d1a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1a6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800d1aa:	430b      	orrs	r3, r1
 800d1ac:	d145      	bne.n	800d23a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800d1ae:	4ba7      	ldr	r3, [pc, #668]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d1b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d1b8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800d1ba:	4ba4      	ldr	r3, [pc, #656]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d1bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1c0:	f003 0302 	and.w	r3, r3, #2
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d108      	bne.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800d1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1ce:	d104      	bne.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800d1d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1d6:	f001 bb5a 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800d1da:	4b9c      	ldr	r3, [pc, #624]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d1dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d1e8:	d114      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1f0:	d110      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d1f2:	4b96      	ldr	r3, [pc, #600]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d1f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d200:	d103      	bne.n	800d20a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800d202:	23fa      	movs	r3, #250	@ 0xfa
 800d204:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d206:	f001 bb42 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d20a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d20e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d210:	f001 bb3d 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800d214:	4b8d      	ldr	r3, [pc, #564]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d21c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d220:	d107      	bne.n	800d232 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800d222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d228:	d103      	bne.n	800d232 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800d22a:	4b89      	ldr	r3, [pc, #548]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800d22c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d22e:	f001 bb2e 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800d232:	2300      	movs	r3, #0
 800d234:	637b      	str	r3, [r7, #52]	@ 0x34
 800d236:	f001 bb2a 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d23a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d23e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d242:	430b      	orrs	r3, r1
 800d244:	d151      	bne.n	800d2ea <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d246:	4b81      	ldr	r3, [pc, #516]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d248:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d24c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800d250:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d254:	2b80      	cmp	r3, #128	@ 0x80
 800d256:	d035      	beq.n	800d2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800d258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25a:	2b80      	cmp	r3, #128	@ 0x80
 800d25c:	d841      	bhi.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d260:	2b60      	cmp	r3, #96	@ 0x60
 800d262:	d02a      	beq.n	800d2ba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800d264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d266:	2b60      	cmp	r3, #96	@ 0x60
 800d268:	d83b      	bhi.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26c:	2b40      	cmp	r3, #64	@ 0x40
 800d26e:	d009      	beq.n	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d272:	2b40      	cmp	r3, #64	@ 0x40
 800d274:	d835      	bhi.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00c      	beq.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800d27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27e:	2b20      	cmp	r3, #32
 800d280:	d012      	beq.n	800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d282:	e02e      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d288:	4618      	mov	r0, r3
 800d28a:	f7ff fb77 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d290:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d292:	f001 bafc 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d296:	f107 0318 	add.w	r3, r7, #24
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7ff fcc8 	bl	800cc30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2a4:	f001 baf3 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2a8:	f107 030c 	add.w	r3, r7, #12
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7ff fe19 	bl	800cee4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2b6:	f001 baea 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d2ba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d2be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2c0:	f001 bae5 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d2c4:	4b61      	ldr	r3, [pc, #388]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2d0:	d103      	bne.n	800d2da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800d2d2:	4b60      	ldr	r3, [pc, #384]	@ (800d454 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d2d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d2d6:	f001 bada 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2de:	f001 bad6 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2e6:	f001 bad2 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d2ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2ee:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d2f2:	430b      	orrs	r3, r1
 800d2f4:	d158      	bne.n	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d2f6:	4b55      	ldr	r3, [pc, #340]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d2f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d300:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d308:	d03b      	beq.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800d30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d310:	d846      	bhi.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d314:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d318:	d02e      	beq.n	800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800d31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d31c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d320:	d83e      	bhi.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d328:	d00b      	beq.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800d32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d330:	d836      	bhi.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00d      	beq.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800d338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d33e:	d012      	beq.n	800d366 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800d340:	e02e      	b.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d346:	4618      	mov	r0, r3
 800d348:	f7ff fb18 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d350:	f001 ba9d 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d354:	f107 0318 	add.w	r3, r7, #24
 800d358:	4618      	mov	r0, r3
 800d35a:	f7ff fc69 	bl	800cc30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d362:	f001 ba94 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d366:	f107 030c 	add.w	r3, r7, #12
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7ff fdba 	bl	800cee4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d374:	f001 ba8b 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d378:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d37c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d37e:	f001 ba86 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d382:	4b32      	ldr	r3, [pc, #200]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d38a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d38e:	d103      	bne.n	800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800d390:	4b30      	ldr	r3, [pc, #192]	@ (800d454 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d392:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d394:	f001 ba7b 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d398:	2300      	movs	r3, #0
 800d39a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d39c:	f001 ba77 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3a4:	f001 ba73 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800d3a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3ac:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d3b0:	430b      	orrs	r3, r1
 800d3b2:	d126      	bne.n	800d402 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800d3b4:	4b25      	ldr	r3, [pc, #148]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d3b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d3ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d3be:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800d3c0:	4b22      	ldr	r3, [pc, #136]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3cc:	d106      	bne.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d103      	bne.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800d3d4:	4b1f      	ldr	r3, [pc, #124]	@ (800d454 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d3d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3d8:	f001 ba59 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800d3dc:	4b1b      	ldr	r3, [pc, #108]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3e8:	d107      	bne.n	800d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d3f0:	d103      	bne.n	800d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800d3f2:	4b19      	ldr	r3, [pc, #100]	@ (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d3f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3f6:	f001 ba4a 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3fe:	f001 ba46 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800d402:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d406:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800d40a:	430b      	orrs	r3, r1
 800d40c:	d16e      	bne.n	800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d40e:	4b0f      	ldr	r3, [pc, #60]	@ (800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d414:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d418:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d420:	d03d      	beq.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800d422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d424:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d428:	d85c      	bhi.n	800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d42c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d430:	d014      	beq.n	800d45c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800d432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d434:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d438:	d854      	bhi.n	800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d01f      	beq.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800d440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d442:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d446:	d012      	beq.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800d448:	e04c      	b.n	800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d44a:	bf00      	nop
 800d44c:	46020c00 	.word	0x46020c00
 800d450:	0007a120 	.word	0x0007a120
 800d454:	00f42400 	.word	0x00f42400
 800d458:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d45c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d460:	4618      	mov	r0, r3
 800d462:	f7ff fa8b 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d46a:	f001 ba10 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d46e:	f107 0318 	add.w	r3, r7, #24
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff fbdc 	bl	800cc30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d47c:	f001 ba07 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d480:	4ba7      	ldr	r3, [pc, #668]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d488:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d48c:	d103      	bne.n	800d496 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800d48e:	4ba5      	ldr	r3, [pc, #660]	@ (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d490:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d492:	f001 b9fc 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d496:	2300      	movs	r3, #0
 800d498:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d49a:	f001 b9f8 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d49e:	4ba0      	ldr	r3, [pc, #640]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f003 0320 	and.w	r3, r3, #32
 800d4a6:	2b20      	cmp	r3, #32
 800d4a8:	d118      	bne.n	800d4dc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d4aa:	4b9d      	ldr	r3, [pc, #628]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d005      	beq.n	800d4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800d4b6:	4b9a      	ldr	r3, [pc, #616]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	0e1b      	lsrs	r3, r3, #24
 800d4bc:	f003 030f 	and.w	r3, r3, #15
 800d4c0:	e006      	b.n	800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800d4c2:	4b97      	ldr	r3, [pc, #604]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d4c8:	041b      	lsls	r3, r3, #16
 800d4ca:	0e1b      	lsrs	r3, r3, #24
 800d4cc:	f003 030f 	and.w	r3, r3, #15
 800d4d0:	4a95      	ldr	r2, [pc, #596]	@ (800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d4d8:	f001 b9d9 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4e0:	f001 b9d5 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4e8:	f001 b9d1 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d4ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4f0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800d4f4:	430b      	orrs	r3, r1
 800d4f6:	d17f      	bne.n	800d5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d4f8:	4b89      	ldr	r3, [pc, #548]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d4fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d502:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800d504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d506:	2b00      	cmp	r3, #0
 800d508:	d165      	bne.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d50a:	4b85      	ldr	r3, [pc, #532]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d50c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d510:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d514:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800d516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d518:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d51c:	d034      	beq.n	800d588 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800d51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d520:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d524:	d853      	bhi.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800d526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d528:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d52c:	d00b      	beq.n	800d546 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800d52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d530:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d534:	d84b      	bhi.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800d536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d016      	beq.n	800d56a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800d53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d53e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d542:	d009      	beq.n	800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800d544:	e043      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7ff fa16 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d552:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d554:	f001 b99b 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d558:	f107 0318 	add.w	r3, r7, #24
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7ff fb67 	bl	800cc30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d566:	f001 b992 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d56a:	4b6d      	ldr	r3, [pc, #436]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d576:	d103      	bne.n	800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800d578:	4b6a      	ldr	r3, [pc, #424]	@ (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d57a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d57c:	f001 b987 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d580:	2300      	movs	r3, #0
 800d582:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d584:	f001 b983 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d588:	4b65      	ldr	r3, [pc, #404]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f003 0320 	and.w	r3, r3, #32
 800d590:	2b20      	cmp	r3, #32
 800d592:	d118      	bne.n	800d5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d594:	4b62      	ldr	r3, [pc, #392]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d005      	beq.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800d5a0:	4b5f      	ldr	r3, [pc, #380]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d5a2:	689b      	ldr	r3, [r3, #8]
 800d5a4:	0e1b      	lsrs	r3, r3, #24
 800d5a6:	f003 030f 	and.w	r3, r3, #15
 800d5aa:	e006      	b.n	800d5ba <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800d5ac:	4b5c      	ldr	r3, [pc, #368]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d5ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d5b2:	041b      	lsls	r3, r3, #16
 800d5b4:	0e1b      	lsrs	r3, r3, #24
 800d5b6:	f003 030f 	and.w	r3, r3, #15
 800d5ba:	4a5b      	ldr	r2, [pc, #364]	@ (800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5c0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d5c2:	f001 b964 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d5ca:	f001 b960 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d5d2:	f001 b95c 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d5dc:	d108      	bne.n	800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff f9ca 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5ec:	f001 b94f 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5f4:	f001 b94b 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800d5f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5fc:	1e51      	subs	r1, r2, #1
 800d5fe:	430b      	orrs	r3, r1
 800d600:	d136      	bne.n	800d670 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800d602:	4b47      	ldr	r3, [pc, #284]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d608:	f003 0303 	and.w	r3, r3, #3
 800d60c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800d60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d610:	2b00      	cmp	r3, #0
 800d612:	d104      	bne.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800d614:	f7fe f9cc 	bl	800b9b0 <HAL_RCC_GetPCLK2Freq>
 800d618:	6378      	str	r0, [r7, #52]	@ 0x34
 800d61a:	f001 b938 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800d61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d620:	2b01      	cmp	r3, #1
 800d622:	d104      	bne.n	800d62e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d624:	f7fe f894 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800d628:	6378      	str	r0, [r7, #52]	@ 0x34
 800d62a:	f001 b930 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800d62e:	4b3c      	ldr	r3, [pc, #240]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d63a:	d106      	bne.n	800d64a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800d63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d103      	bne.n	800d64a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800d642:	4b3a      	ldr	r3, [pc, #232]	@ (800d72c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d644:	637b      	str	r3, [r7, #52]	@ 0x34
 800d646:	f001 b922 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800d64a:	4b35      	ldr	r3, [pc, #212]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d64c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d650:	f003 0302 	and.w	r3, r3, #2
 800d654:	2b02      	cmp	r3, #2
 800d656:	d107      	bne.n	800d668 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800d658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65a:	2b03      	cmp	r3, #3
 800d65c:	d104      	bne.n	800d668 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800d65e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d662:	637b      	str	r3, [r7, #52]	@ 0x34
 800d664:	f001 b913 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800d668:	2300      	movs	r3, #0
 800d66a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d66c:	f001 b90f 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800d670:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d674:	1e91      	subs	r1, r2, #2
 800d676:	430b      	orrs	r3, r1
 800d678:	d136      	bne.n	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800d67a:	4b29      	ldr	r3, [pc, #164]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d67c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d680:	f003 030c 	and.w	r3, r3, #12
 800d684:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800d686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d104      	bne.n	800d696 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d68c:	f7fe f97c 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800d690:	6378      	str	r0, [r7, #52]	@ 0x34
 800d692:	f001 b8fc 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800d696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d698:	2b04      	cmp	r3, #4
 800d69a:	d104      	bne.n	800d6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d69c:	f7fe f858 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800d6a0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6a2:	f001 b8f4 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800d6a6:	4b1e      	ldr	r3, [pc, #120]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6b2:	d106      	bne.n	800d6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800d6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b6:	2b08      	cmp	r3, #8
 800d6b8:	d103      	bne.n	800d6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800d6ba:	4b1c      	ldr	r3, [pc, #112]	@ (800d72c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d6bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6be:	f001 b8e6 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800d6c2:	4b17      	ldr	r3, [pc, #92]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d6c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6c8:	f003 0302 	and.w	r3, r3, #2
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	d107      	bne.n	800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d2:	2b0c      	cmp	r3, #12
 800d6d4:	d104      	bne.n	800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800d6d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d6da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6dc:	f001 b8d7 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6e4:	f001 b8d3 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800d6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6ec:	1f11      	subs	r1, r2, #4
 800d6ee:	430b      	orrs	r3, r1
 800d6f0:	d13f      	bne.n	800d772 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800d6f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d6f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d6fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d700:	2b00      	cmp	r3, #0
 800d702:	d104      	bne.n	800d70e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d704:	f7fe f940 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800d708:	6378      	str	r0, [r7, #52]	@ 0x34
 800d70a:	f001 b8c0 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800d70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d710:	2b10      	cmp	r3, #16
 800d712:	d10d      	bne.n	800d730 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d714:	f7fe f81c 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800d718:	6378      	str	r0, [r7, #52]	@ 0x34
 800d71a:	f001 b8b8 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d71e:	bf00      	nop
 800d720:	46020c00 	.word	0x46020c00
 800d724:	02dc6c00 	.word	0x02dc6c00
 800d728:	0801281c 	.word	0x0801281c
 800d72c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800d730:	4ba8      	ldr	r3, [pc, #672]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d73c:	d106      	bne.n	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800d73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d740:	2b20      	cmp	r3, #32
 800d742:	d103      	bne.n	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800d744:	4ba4      	ldr	r3, [pc, #656]	@ (800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d746:	637b      	str	r3, [r7, #52]	@ 0x34
 800d748:	f001 b8a1 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800d74c:	4ba1      	ldr	r3, [pc, #644]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d74e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d752:	f003 0302 	and.w	r3, r3, #2
 800d756:	2b02      	cmp	r3, #2
 800d758:	d107      	bne.n	800d76a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75c:	2b30      	cmp	r3, #48	@ 0x30
 800d75e:	d104      	bne.n	800d76a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800d760:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d764:	637b      	str	r3, [r7, #52]	@ 0x34
 800d766:	f001 b892 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800d76a:	2300      	movs	r3, #0
 800d76c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d76e:	f001 b88e 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800d772:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d776:	f1a2 0108 	sub.w	r1, r2, #8
 800d77a:	430b      	orrs	r3, r1
 800d77c:	d136      	bne.n	800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800d77e:	4b95      	ldr	r3, [pc, #596]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d784:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d788:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800d78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d104      	bne.n	800d79a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d790:	f7fe f8fa 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800d794:	6378      	str	r0, [r7, #52]	@ 0x34
 800d796:	f001 b87a 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800d79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79c:	2b40      	cmp	r3, #64	@ 0x40
 800d79e:	d104      	bne.n	800d7aa <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d7a0:	f7fd ffd6 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800d7a4:	6378      	str	r0, [r7, #52]	@ 0x34
 800d7a6:	f001 b872 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800d7aa:	4b8a      	ldr	r3, [pc, #552]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7b6:	d106      	bne.n	800d7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ba:	2b80      	cmp	r3, #128	@ 0x80
 800d7bc:	d103      	bne.n	800d7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800d7be:	4b86      	ldr	r3, [pc, #536]	@ (800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d7c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7c2:	f001 b864 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800d7c6:	4b83      	ldr	r3, [pc, #524]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d7cc:	f003 0302 	and.w	r3, r3, #2
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d107      	bne.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d7d8:	d104      	bne.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800d7da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7e0:	f001 b855 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7e8:	f001 b851 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800d7ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7f0:	f1a2 0110 	sub.w	r1, r2, #16
 800d7f4:	430b      	orrs	r3, r1
 800d7f6:	d139      	bne.n	800d86c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800d7f8:	4b76      	ldr	r3, [pc, #472]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d7fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d802:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800d804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d806:	2b00      	cmp	r3, #0
 800d808:	d104      	bne.n	800d814 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d80a:	f7fe f8bd 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800d80e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d810:	f001 b83d 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800d814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d81a:	d104      	bne.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d81c:	f7fd ff98 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800d820:	6378      	str	r0, [r7, #52]	@ 0x34
 800d822:	f001 b834 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800d826:	4b6b      	ldr	r3, [pc, #428]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d82e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d832:	d107      	bne.n	800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800d834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d83a:	d103      	bne.n	800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800d83c:	4b66      	ldr	r3, [pc, #408]	@ (800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d83e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d840:	f001 b825 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800d844:	4b63      	ldr	r3, [pc, #396]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d84a:	f003 0302 	and.w	r3, r3, #2
 800d84e:	2b02      	cmp	r3, #2
 800d850:	d108      	bne.n	800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800d852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d854:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d858:	d104      	bne.n	800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800d85a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d85e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d860:	f001 b815 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d864:	2300      	movs	r3, #0
 800d866:	637b      	str	r3, [r7, #52]	@ 0x34
 800d868:	f001 b811 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800d86c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d870:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800d874:	430b      	orrs	r3, r1
 800d876:	d139      	bne.n	800d8ec <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800d878:	4b56      	ldr	r3, [pc, #344]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d87a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d87e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d882:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800d884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d886:	2b00      	cmp	r3, #0
 800d888:	d104      	bne.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d88a:	f7fe f87d 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800d88e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d890:	f000 bffd 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800d894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d89a:	d104      	bne.n	800d8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d89c:	f7fd ff58 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800d8a0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d8a2:	f000 bff4 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800d8a6:	4b4b      	ldr	r3, [pc, #300]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8b2:	d107      	bne.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8ba:	d103      	bne.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800d8bc:	4b46      	ldr	r3, [pc, #280]	@ (800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d8be:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8c0:	f000 bfe5 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800d8c4:	4b43      	ldr	r3, [pc, #268]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d8c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8ca:	f003 0302 	and.w	r3, r3, #2
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	d108      	bne.n	800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800d8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d8d8:	d104      	bne.n	800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800d8da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8e0:	f000 bfd5 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8e8:	f000 bfd1 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800d8ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8f0:	f1a2 0120 	sub.w	r1, r2, #32
 800d8f4:	430b      	orrs	r3, r1
 800d8f6:	d158      	bne.n	800d9aa <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800d8f8:	4b36      	ldr	r3, [pc, #216]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d8fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d8fe:	f003 0307 	and.w	r3, r3, #7
 800d902:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800d904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d906:	2b00      	cmp	r3, #0
 800d908:	d104      	bne.n	800d914 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800d90a:	f7fe f865 	bl	800b9d8 <HAL_RCC_GetPCLK3Freq>
 800d90e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d910:	f000 bfbd 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800d914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d916:	2b01      	cmp	r3, #1
 800d918:	d104      	bne.n	800d924 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d91a:	f7fd ff19 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800d91e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d920:	f000 bfb5 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800d924:	4b2b      	ldr	r3, [pc, #172]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d92c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d930:	d106      	bne.n	800d940 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800d932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d934:	2b02      	cmp	r3, #2
 800d936:	d103      	bne.n	800d940 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800d938:	4b27      	ldr	r3, [pc, #156]	@ (800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d93a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d93c:	f000 bfa7 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800d940:	4b24      	ldr	r3, [pc, #144]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d946:	f003 0302 	and.w	r3, r3, #2
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d107      	bne.n	800d95e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	2b03      	cmp	r3, #3
 800d952:	d104      	bne.n	800d95e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800d954:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d958:	637b      	str	r3, [r7, #52]	@ 0x34
 800d95a:	f000 bf98 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800d95e:	4b1d      	ldr	r3, [pc, #116]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f003 0320 	and.w	r3, r3, #32
 800d966:	2b20      	cmp	r3, #32
 800d968:	d11b      	bne.n	800d9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800d96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96c:	2b04      	cmp	r3, #4
 800d96e:	d118      	bne.n	800d9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d970:	4b18      	ldr	r3, [pc, #96]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d005      	beq.n	800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800d97c:	4b15      	ldr	r3, [pc, #84]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	0e1b      	lsrs	r3, r3, #24
 800d982:	f003 030f 	and.w	r3, r3, #15
 800d986:	e006      	b.n	800d996 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800d988:	4b12      	ldr	r3, [pc, #72]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d98a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d98e:	041b      	lsls	r3, r3, #16
 800d990:	0e1b      	lsrs	r3, r3, #24
 800d992:	f003 030f 	and.w	r3, r3, #15
 800d996:	4a11      	ldr	r2, [pc, #68]	@ (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d99c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d99e:	f000 bf76 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9a6:	f000 bf72 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800d9aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9ae:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d9b2:	430b      	orrs	r3, r1
 800d9b4:	d172      	bne.n	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800d9b6:	4b07      	ldr	r3, [pc, #28]	@ (800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d9b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9bc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d9c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9c8:	d10a      	bne.n	800d9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d9ca:	f7fd fec1 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800d9ce:	6378      	str	r0, [r7, #52]	@ 0x34
 800d9d0:	f000 bf5d 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d9d4:	46020c00 	.word	0x46020c00
 800d9d8:	00f42400 	.word	0x00f42400
 800d9dc:	0801281c 	.word	0x0801281c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800d9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d9e6:	d108      	bne.n	800d9fa <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9e8:	f107 0318 	add.w	r3, r7, #24
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7ff f91f 	bl	800cc30 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f6:	f000 bf4a 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d104      	bne.n	800da0a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800da00:	f7fd ffa8 	bl	800b954 <HAL_RCC_GetHCLKFreq>
 800da04:	6378      	str	r0, [r7, #52]	@ 0x34
 800da06:	f000 bf42 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800da0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800da10:	d122      	bne.n	800da58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800da12:	4bb0      	ldr	r3, [pc, #704]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f003 0320 	and.w	r3, r3, #32
 800da1a:	2b20      	cmp	r3, #32
 800da1c:	d118      	bne.n	800da50 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800da1e:	4bad      	ldr	r3, [pc, #692]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da26:	2b00      	cmp	r3, #0
 800da28:	d005      	beq.n	800da36 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800da2a:	4baa      	ldr	r3, [pc, #680]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	0e1b      	lsrs	r3, r3, #24
 800da30:	f003 030f 	and.w	r3, r3, #15
 800da34:	e006      	b.n	800da44 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800da36:	4ba7      	ldr	r3, [pc, #668]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da3c:	041b      	lsls	r3, r3, #16
 800da3e:	0e1b      	lsrs	r3, r3, #24
 800da40:	f003 030f 	and.w	r3, r3, #15
 800da44:	4aa4      	ldr	r2, [pc, #656]	@ (800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800da46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800da4c:	f000 bf1f 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800da50:	2300      	movs	r3, #0
 800da52:	637b      	str	r3, [r7, #52]	@ 0x34
 800da54:	f000 bf1b 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800da58:	4b9e      	ldr	r3, [pc, #632]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da64:	d107      	bne.n	800da76 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800da66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800da6c:	d103      	bne.n	800da76 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800da6e:	4b9b      	ldr	r3, [pc, #620]	@ (800dcdc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800da70:	637b      	str	r3, [r7, #52]	@ 0x34
 800da72:	f000 bf0c 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800da76:	4b97      	ldr	r3, [pc, #604]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da82:	d107      	bne.n	800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800da84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da8a:	d103      	bne.n	800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800da8c:	4b93      	ldr	r3, [pc, #588]	@ (800dcdc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800da8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800da90:	f000 befd 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800da94:	2300      	movs	r3, #0
 800da96:	637b      	str	r3, [r7, #52]	@ 0x34
 800da98:	f000 bef9 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800da9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daa0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800daa4:	430b      	orrs	r3, r1
 800daa6:	d158      	bne.n	800db5a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800daa8:	4b8a      	ldr	r3, [pc, #552]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800daaa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800daae:	f003 0307 	and.w	r3, r3, #7
 800dab2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab6:	2b04      	cmp	r3, #4
 800dab8:	d84b      	bhi.n	800db52 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800daba:	a201      	add	r2, pc, #4	@ (adr r2, 800dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800dabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac0:	0800daf9 	.word	0x0800daf9
 800dac4:	0800dad5 	.word	0x0800dad5
 800dac8:	0800dae7 	.word	0x0800dae7
 800dacc:	0800db03 	.word	0x0800db03
 800dad0:	0800db0d 	.word	0x0800db0d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dad8:	4618      	mov	r0, r3
 800dada:	f7fe ff4f 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800dade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dae2:	f000 bed4 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dae6:	f107 030c 	add.w	r3, r7, #12
 800daea:	4618      	mov	r0, r3
 800daec:	f7ff f9fa 	bl	800cee4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800daf4:	f000 becb 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800daf8:	f7fd ff2c 	bl	800b954 <HAL_RCC_GetHCLKFreq>
 800dafc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dafe:	f000 bec6 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800db02:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800db06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db08:	f000 bec1 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800db0c:	4b71      	ldr	r3, [pc, #452]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f003 0320 	and.w	r3, r3, #32
 800db14:	2b20      	cmp	r3, #32
 800db16:	d118      	bne.n	800db4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800db18:	4b6e      	ldr	r3, [pc, #440]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db20:	2b00      	cmp	r3, #0
 800db22:	d005      	beq.n	800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800db24:	4b6b      	ldr	r3, [pc, #428]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	0e1b      	lsrs	r3, r3, #24
 800db2a:	f003 030f 	and.w	r3, r3, #15
 800db2e:	e006      	b.n	800db3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800db30:	4b68      	ldr	r3, [pc, #416]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800db36:	041b      	lsls	r3, r3, #16
 800db38:	0e1b      	lsrs	r3, r3, #24
 800db3a:	f003 030f 	and.w	r3, r3, #15
 800db3e:	4a66      	ldr	r2, [pc, #408]	@ (800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800db40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db44:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800db46:	f000 bea2 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800db4a:	2300      	movs	r3, #0
 800db4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db4e:	f000 be9e 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800db52:	2300      	movs	r3, #0
 800db54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db56:	f000 be9a 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800db5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db5e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800db62:	430b      	orrs	r3, r1
 800db64:	d167      	bne.n	800dc36 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800db66:	4b5b      	ldr	r3, [pc, #364]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800db6c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800db70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800db72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800db78:	d036      	beq.n	800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800db7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800db80:	d855      	bhi.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800db82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800db88:	d029      	beq.n	800dbde <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800db8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800db90:	d84d      	bhi.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800db92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db98:	d013      	beq.n	800dbc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800db9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dba0:	d845      	bhi.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800dba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d015      	beq.n	800dbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800dba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbae:	d13e      	bne.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7fe fee1 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800dbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbbe:	f000 be66 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbc2:	f107 030c 	add.w	r3, r7, #12
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7ff f98c 	bl	800cee4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbd0:	f000 be5d 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800dbd4:	f7fd febe 	bl	800b954 <HAL_RCC_GetHCLKFreq>
 800dbd8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dbda:	f000 be58 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800dbde:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800dbe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbe4:	f000 be53 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dbe8:	4b3a      	ldr	r3, [pc, #232]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f003 0320 	and.w	r3, r3, #32
 800dbf0:	2b20      	cmp	r3, #32
 800dbf2:	d118      	bne.n	800dc26 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dbf4:	4b37      	ldr	r3, [pc, #220]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d005      	beq.n	800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800dc00:	4b34      	ldr	r3, [pc, #208]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	0e1b      	lsrs	r3, r3, #24
 800dc06:	f003 030f 	and.w	r3, r3, #15
 800dc0a:	e006      	b.n	800dc1a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800dc0c:	4b31      	ldr	r3, [pc, #196]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dc0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dc12:	041b      	lsls	r3, r3, #16
 800dc14:	0e1b      	lsrs	r3, r3, #24
 800dc16:	f003 030f 	and.w	r3, r3, #15
 800dc1a:	4a2f      	ldr	r2, [pc, #188]	@ (800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800dc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc20:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dc22:	f000 be34 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dc26:	2300      	movs	r3, #0
 800dc28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc2a:	f000 be30 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc32:	f000 be2c 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800dc36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc3a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800dc3e:	430b      	orrs	r3, r1
 800dc40:	d152      	bne.n	800dce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800dc42:	4b24      	ldr	r3, [pc, #144]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dc44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dc48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800dc4c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800dc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d104      	bne.n	800dc5e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dc54:	f7fd fe98 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800dc58:	6378      	str	r0, [r7, #52]	@ 0x34
 800dc5a:	f000 be18 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800dc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc64:	d104      	bne.n	800dc70 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dc66:	f7fd fd73 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800dc6a:	6378      	str	r0, [r7, #52]	@ 0x34
 800dc6c:	f000 be0f 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800dc70:	4b18      	ldr	r3, [pc, #96]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc7c:	d107      	bne.n	800dc8e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dc84:	d103      	bne.n	800dc8e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800dc86:	4b15      	ldr	r3, [pc, #84]	@ (800dcdc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800dc88:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc8a:	f000 be00 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800dc8e:	4b11      	ldr	r3, [pc, #68]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f003 0320 	and.w	r3, r3, #32
 800dc96:	2b20      	cmp	r3, #32
 800dc98:	d122      	bne.n	800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dca0:	d11e      	bne.n	800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dca2:	4b0c      	ldr	r3, [pc, #48]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d005      	beq.n	800dcba <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800dcae:	4b09      	ldr	r3, [pc, #36]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	0e1b      	lsrs	r3, r3, #24
 800dcb4:	f003 030f 	and.w	r3, r3, #15
 800dcb8:	e006      	b.n	800dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800dcba:	4b06      	ldr	r3, [pc, #24]	@ (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dcbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dcc0:	041b      	lsls	r3, r3, #16
 800dcc2:	0e1b      	lsrs	r3, r3, #24
 800dcc4:	f003 030f 	and.w	r3, r3, #15
 800dcc8:	4a03      	ldr	r2, [pc, #12]	@ (800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800dcca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcce:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcd0:	f000 bddd 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800dcd4:	46020c00 	.word	0x46020c00
 800dcd8:	0801281c 	.word	0x0801281c
 800dcdc:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800dce0:	2300      	movs	r3, #0
 800dce2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dce4:	f000 bdd3 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800dce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcec:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800dcf0:	430b      	orrs	r3, r1
 800dcf2:	d14c      	bne.n	800dd8e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800dcf4:	4ba8      	ldr	r3, [pc, #672]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dcf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dcfa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800dcfe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800dd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d104      	bne.n	800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dd06:	f7fd fe3f 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800dd0a:	6378      	str	r0, [r7, #52]	@ 0x34
 800dd0c:	f000 bdbf 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800dd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd16:	d104      	bne.n	800dd22 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dd18:	f7fd fd1a 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800dd1c:	6378      	str	r0, [r7, #52]	@ 0x34
 800dd1e:	f000 bdb6 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800dd22:	4b9d      	ldr	r3, [pc, #628]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd2e:	d107      	bne.n	800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800dd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd36:	d103      	bne.n	800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800dd38:	4b98      	ldr	r3, [pc, #608]	@ (800df9c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800dd3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd3c:	f000 bda7 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800dd40:	4b95      	ldr	r3, [pc, #596]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 0320 	and.w	r3, r3, #32
 800dd48:	2b20      	cmp	r3, #32
 800dd4a:	d11c      	bne.n	800dd86 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800dd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dd52:	d118      	bne.n	800dd86 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dd54:	4b90      	ldr	r3, [pc, #576]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d005      	beq.n	800dd6c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800dd60:	4b8d      	ldr	r3, [pc, #564]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	0e1b      	lsrs	r3, r3, #24
 800dd66:	f003 030f 	and.w	r3, r3, #15
 800dd6a:	e006      	b.n	800dd7a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800dd6c:	4b8a      	ldr	r3, [pc, #552]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dd72:	041b      	lsls	r3, r3, #16
 800dd74:	0e1b      	lsrs	r3, r3, #24
 800dd76:	f003 030f 	and.w	r3, r3, #15
 800dd7a:	4a89      	ldr	r2, [pc, #548]	@ (800dfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dd7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd80:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd82:	f000 bd84 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800dd86:	2300      	movs	r3, #0
 800dd88:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd8a:	f000 bd80 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800dd8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd92:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800dd96:	430b      	orrs	r3, r1
 800dd98:	d158      	bne.n	800de4c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800dd9a:	4b7f      	ldr	r3, [pc, #508]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dda0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dda4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda8:	2bc0      	cmp	r3, #192	@ 0xc0
 800ddaa:	d028      	beq.n	800ddfe <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800ddac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddae:	2bc0      	cmp	r3, #192	@ 0xc0
 800ddb0:	d848      	bhi.n	800de44 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb4:	2b80      	cmp	r3, #128	@ 0x80
 800ddb6:	d00e      	beq.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800ddb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddba:	2b80      	cmp	r3, #128	@ 0x80
 800ddbc:	d842      	bhi.n	800de44 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ddbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d003      	beq.n	800ddcc <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc6:	2b40      	cmp	r3, #64	@ 0x40
 800ddc8:	d014      	beq.n	800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800ddca:	e03b      	b.n	800de44 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ddcc:	f7fd fe04 	bl	800b9d8 <HAL_RCC_GetPCLK3Freq>
 800ddd0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ddd2:	f000 bd5c 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ddd6:	4b70      	ldr	r3, [pc, #448]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ddde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dde2:	d103      	bne.n	800ddec <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800dde4:	4b6d      	ldr	r3, [pc, #436]	@ (800df9c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800dde6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dde8:	f000 bd51 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ddec:	2300      	movs	r3, #0
 800ddee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ddf0:	f000 bd4d 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ddf4:	f7fd fcac 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800ddf8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ddfa:	f000 bd48 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ddfe:	4b66      	ldr	r3, [pc, #408]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f003 0320 	and.w	r3, r3, #32
 800de06:	2b20      	cmp	r3, #32
 800de08:	d118      	bne.n	800de3c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800de0a:	4b63      	ldr	r3, [pc, #396]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de12:	2b00      	cmp	r3, #0
 800de14:	d005      	beq.n	800de22 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800de16:	4b60      	ldr	r3, [pc, #384]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	0e1b      	lsrs	r3, r3, #24
 800de1c:	f003 030f 	and.w	r3, r3, #15
 800de20:	e006      	b.n	800de30 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800de22:	4b5d      	ldr	r3, [pc, #372]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800de28:	041b      	lsls	r3, r3, #16
 800de2a:	0e1b      	lsrs	r3, r3, #24
 800de2c:	f003 030f 	and.w	r3, r3, #15
 800de30:	4a5b      	ldr	r2, [pc, #364]	@ (800dfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800de32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800de38:	f000 bd29 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800de3c:	2300      	movs	r3, #0
 800de3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de40:	f000 bd25 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800de44:	2300      	movs	r3, #0
 800de46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de48:	f000 bd21 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800de4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de50:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800de54:	430b      	orrs	r3, r1
 800de56:	d14c      	bne.n	800def2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800de58:	4b4f      	ldr	r3, [pc, #316]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800de5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800de62:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800de64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de66:	2b00      	cmp	r3, #0
 800de68:	d104      	bne.n	800de74 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800de6a:	f7fd fd8d 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800de6e:	6378      	str	r0, [r7, #52]	@ 0x34
 800de70:	f000 bd0d 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800de74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800de7a:	d104      	bne.n	800de86 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800de7c:	f7fd fc68 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800de80:	6378      	str	r0, [r7, #52]	@ 0x34
 800de82:	f000 bd04 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800de86:	4b44      	ldr	r3, [pc, #272]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de92:	d107      	bne.n	800dea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800de94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de9a:	d103      	bne.n	800dea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800de9c:	4b3f      	ldr	r3, [pc, #252]	@ (800df9c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800de9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dea0:	f000 bcf5 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800dea4:	4b3c      	ldr	r3, [pc, #240]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f003 0320 	and.w	r3, r3, #32
 800deac:	2b20      	cmp	r3, #32
 800deae:	d11c      	bne.n	800deea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800deb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800deb6:	d118      	bne.n	800deea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800deb8:	4b37      	ldr	r3, [pc, #220]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d005      	beq.n	800ded0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800dec4:	4b34      	ldr	r3, [pc, #208]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	0e1b      	lsrs	r3, r3, #24
 800deca:	f003 030f 	and.w	r3, r3, #15
 800dece:	e006      	b.n	800dede <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800ded0:	4b31      	ldr	r3, [pc, #196]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ded2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ded6:	041b      	lsls	r3, r3, #16
 800ded8:	0e1b      	lsrs	r3, r3, #24
 800deda:	f003 030f 	and.w	r3, r3, #15
 800dede:	4a30      	ldr	r2, [pc, #192]	@ (800dfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dee4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dee6:	f000 bcd2 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800deea:	2300      	movs	r3, #0
 800deec:	637b      	str	r3, [r7, #52]	@ 0x34
 800deee:	f000 bcce 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800def2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800def6:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800defa:	430b      	orrs	r3, r1
 800defc:	d152      	bne.n	800dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800defe:	4b26      	ldr	r3, [pc, #152]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800df04:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800df08:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800df0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d104      	bne.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800df10:	f7fd fd3a 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800df14:	6378      	str	r0, [r7, #52]	@ 0x34
 800df16:	f000 bcba 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800df1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df20:	d104      	bne.n	800df2c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800df22:	f7fd fc15 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800df26:	6378      	str	r0, [r7, #52]	@ 0x34
 800df28:	f000 bcb1 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800df2c:	4b1a      	ldr	r3, [pc, #104]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800df34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df38:	d107      	bne.n	800df4a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800df3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800df40:	d103      	bne.n	800df4a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800df42:	4b16      	ldr	r3, [pc, #88]	@ (800df9c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800df44:	637b      	str	r3, [r7, #52]	@ 0x34
 800df46:	f000 bca2 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800df4a:	4b13      	ldr	r3, [pc, #76]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f003 0320 	and.w	r3, r3, #32
 800df52:	2b20      	cmp	r3, #32
 800df54:	d11c      	bne.n	800df90 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800df56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800df5c:	d118      	bne.n	800df90 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800df5e:	4b0e      	ldr	r3, [pc, #56]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df66:	2b00      	cmp	r3, #0
 800df68:	d005      	beq.n	800df76 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800df6a:	4b0b      	ldr	r3, [pc, #44]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	0e1b      	lsrs	r3, r3, #24
 800df70:	f003 030f 	and.w	r3, r3, #15
 800df74:	e006      	b.n	800df84 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800df76:	4b08      	ldr	r3, [pc, #32]	@ (800df98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800df7c:	041b      	lsls	r3, r3, #16
 800df7e:	0e1b      	lsrs	r3, r3, #24
 800df80:	f003 030f 	and.w	r3, r3, #15
 800df84:	4a06      	ldr	r2, [pc, #24]	@ (800dfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800df86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800df8c:	f000 bc7f 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800df90:	2300      	movs	r3, #0
 800df92:	637b      	str	r3, [r7, #52]	@ 0x34
 800df94:	f000 bc7b 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800df98:	46020c00 	.word	0x46020c00
 800df9c:	00f42400 	.word	0x00f42400
 800dfa0:	0801281c 	.word	0x0801281c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800dfa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfa8:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800dfac:	430b      	orrs	r3, r1
 800dfae:	d14c      	bne.n	800e04a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800dfb0:	4ba6      	ldr	r3, [pc, #664]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dfb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dfb6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800dfba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d104      	bne.n	800dfcc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dfc2:	f7fd fce1 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800dfc6:	6378      	str	r0, [r7, #52]	@ 0x34
 800dfc8:	f000 bc61 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dfd2:	d104      	bne.n	800dfde <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dfd4:	f7fd fbbc 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800dfd8:	6378      	str	r0, [r7, #52]	@ 0x34
 800dfda:	f000 bc58 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800dfde:	4b9b      	ldr	r3, [pc, #620]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dfe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfea:	d107      	bne.n	800dffc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800dfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dff2:	d103      	bne.n	800dffc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800dff4:	4b96      	ldr	r3, [pc, #600]	@ (800e250 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800dff6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dff8:	f000 bc49 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800dffc:	4b93      	ldr	r3, [pc, #588]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f003 0320 	and.w	r3, r3, #32
 800e004:	2b20      	cmp	r3, #32
 800e006:	d11c      	bne.n	800e042 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800e008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e00e:	d118      	bne.n	800e042 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e010:	4b8e      	ldr	r3, [pc, #568]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e012:	689b      	ldr	r3, [r3, #8]
 800e014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d005      	beq.n	800e028 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800e01c:	4b8b      	ldr	r3, [pc, #556]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	0e1b      	lsrs	r3, r3, #24
 800e022:	f003 030f 	and.w	r3, r3, #15
 800e026:	e006      	b.n	800e036 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800e028:	4b88      	ldr	r3, [pc, #544]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e02a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e02e:	041b      	lsls	r3, r3, #16
 800e030:	0e1b      	lsrs	r3, r3, #24
 800e032:	f003 030f 	and.w	r3, r3, #15
 800e036:	4a87      	ldr	r2, [pc, #540]	@ (800e254 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800e038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e03c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e03e:	f000 bc26 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800e042:	2300      	movs	r3, #0
 800e044:	637b      	str	r3, [r7, #52]	@ 0x34
 800e046:	f000 bc22 	b.w	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800e04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e04e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800e052:	430b      	orrs	r3, r1
 800e054:	d164      	bne.n	800e120 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800e056:	4b7d      	ldr	r3, [pc, #500]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e05c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e060:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800e062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e064:	2b00      	cmp	r3, #0
 800e066:	d120      	bne.n	800e0aa <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e068:	4b78      	ldr	r3, [pc, #480]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f003 0320 	and.w	r3, r3, #32
 800e070:	2b20      	cmp	r3, #32
 800e072:	d117      	bne.n	800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e074:	4b75      	ldr	r3, [pc, #468]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d005      	beq.n	800e08c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800e080:	4b72      	ldr	r3, [pc, #456]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	0e1b      	lsrs	r3, r3, #24
 800e086:	f003 030f 	and.w	r3, r3, #15
 800e08a:	e006      	b.n	800e09a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800e08c:	4b6f      	ldr	r3, [pc, #444]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e08e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e092:	041b      	lsls	r3, r3, #16
 800e094:	0e1b      	lsrs	r3, r3, #24
 800e096:	f003 030f 	and.w	r3, r3, #15
 800e09a:	4a6e      	ldr	r2, [pc, #440]	@ (800e254 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800e09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0a2:	e3f4      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0a8:	e3f1      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800e0aa:	4b68      	ldr	r3, [pc, #416]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e0ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e0b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e0b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e0b8:	d112      	bne.n	800e0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800e0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0c0:	d10e      	bne.n	800e0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e0c2:	4b62      	ldr	r3, [pc, #392]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e0c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e0c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e0cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0d0:	d102      	bne.n	800e0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800e0d2:	23fa      	movs	r3, #250	@ 0xfa
 800e0d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e0d6:	e3da      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e0d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e0dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e0de:	e3d6      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800e0e0:	4b5a      	ldr	r3, [pc, #360]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e0e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0ec:	d106      	bne.n	800e0fc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0f4:	d102      	bne.n	800e0fc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800e0f6:	4b56      	ldr	r3, [pc, #344]	@ (800e250 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800e0f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0fa:	e3c8      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800e0fc:	4b53      	ldr	r3, [pc, #332]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e0fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e102:	f003 0302 	and.w	r3, r3, #2
 800e106:	2b02      	cmp	r3, #2
 800e108:	d107      	bne.n	800e11a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800e10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e10c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e110:	d103      	bne.n	800e11a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800e112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e116:	637b      	str	r3, [r7, #52]	@ 0x34
 800e118:	e3b9      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800e11a:	2300      	movs	r3, #0
 800e11c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e11e:	e3b6      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800e120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e124:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800e128:	430b      	orrs	r3, r1
 800e12a:	d164      	bne.n	800e1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e12c:	4b47      	ldr	r3, [pc, #284]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e12e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e132:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e136:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800e138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d120      	bne.n	800e180 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e13e:	4b43      	ldr	r3, [pc, #268]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f003 0320 	and.w	r3, r3, #32
 800e146:	2b20      	cmp	r3, #32
 800e148:	d117      	bne.n	800e17a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e14a:	4b40      	ldr	r3, [pc, #256]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e152:	2b00      	cmp	r3, #0
 800e154:	d005      	beq.n	800e162 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800e156:	4b3d      	ldr	r3, [pc, #244]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	0e1b      	lsrs	r3, r3, #24
 800e15c:	f003 030f 	and.w	r3, r3, #15
 800e160:	e006      	b.n	800e170 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800e162:	4b3a      	ldr	r3, [pc, #232]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e168:	041b      	lsls	r3, r3, #16
 800e16a:	0e1b      	lsrs	r3, r3, #24
 800e16c:	f003 030f 	and.w	r3, r3, #15
 800e170:	4a38      	ldr	r2, [pc, #224]	@ (800e254 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800e172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e176:	637b      	str	r3, [r7, #52]	@ 0x34
 800e178:	e389      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800e17a:	2300      	movs	r3, #0
 800e17c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e17e:	e386      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800e180:	4b32      	ldr	r3, [pc, #200]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e186:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e18a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e18e:	d112      	bne.n	800e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800e190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e196:	d10e      	bne.n	800e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e198:	4b2c      	ldr	r3, [pc, #176]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e19a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e19e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1a6:	d102      	bne.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800e1a8:	23fa      	movs	r3, #250	@ 0xfa
 800e1aa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e1ac:	e36f      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e1ae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e1b2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e1b4:	e36b      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800e1b6:	4b25      	ldr	r3, [pc, #148]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e1be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1c2:	d106      	bne.n	800e1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800e1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e1ca:	d102      	bne.n	800e1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800e1cc:	4b20      	ldr	r3, [pc, #128]	@ (800e250 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800e1ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1d0:	e35d      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800e1d2:	4b1e      	ldr	r3, [pc, #120]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e1d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	2b02      	cmp	r3, #2
 800e1de:	d107      	bne.n	800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e1e6:	d103      	bne.n	800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800e1e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e1ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1ee:	e34e      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1f4:	e34b      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800e1f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1fa:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800e1fe:	430b      	orrs	r3, r1
 800e200:	d14e      	bne.n	800e2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e202:	4b12      	ldr	r3, [pc, #72]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e208:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800e20c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800e20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e210:	2b00      	cmp	r3, #0
 800e212:	d103      	bne.n	800e21c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e214:	f7fd fbb8 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800e218:	6378      	str	r0, [r7, #52]	@ 0x34
 800e21a:	e338      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800e21c:	4b0b      	ldr	r3, [pc, #44]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e21e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e222:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e22a:	d119      	bne.n	800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800e22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e232:	d115      	bne.n	800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e234:	4b05      	ldr	r3, [pc, #20]	@ (800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e23a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e23e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e242:	d109      	bne.n	800e258 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800e244:	23fa      	movs	r3, #250	@ 0xfa
 800e246:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e248:	e321      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800e24a:	bf00      	nop
 800e24c:	46020c00 	.word	0x46020c00
 800e250:	00f42400 	.word	0x00f42400
 800e254:	0801281c 	.word	0x0801281c
      }
      else
      {
        frequency = LSI_VALUE;
 800e258:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e25c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e25e:	e316      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800e260:	4ba8      	ldr	r3, [pc, #672]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e26c:	d106      	bne.n	800e27c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800e26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e270:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e274:	d102      	bne.n	800e27c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800e276:	4ba4      	ldr	r3, [pc, #656]	@ (800e508 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e278:	637b      	str	r3, [r7, #52]	@ 0x34
 800e27a:	e308      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800e27c:	4ba1      	ldr	r3, [pc, #644]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e27e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e282:	f003 0302 	and.w	r3, r3, #2
 800e286:	2b02      	cmp	r3, #2
 800e288:	d107      	bne.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800e28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e28c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800e290:	d103      	bne.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800e292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e296:	637b      	str	r3, [r7, #52]	@ 0x34
 800e298:	e2f9      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800e29a:	2300      	movs	r3, #0
 800e29c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e29e:	e2f6      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800e2a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2a4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800e2a8:	430b      	orrs	r3, r1
 800e2aa:	d12d      	bne.n	800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800e2ac:	4b95      	ldr	r3, [pc, #596]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e2ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e2b2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800e2b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800e2b8:	4b92      	ldr	r3, [pc, #584]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e2c4:	d105      	bne.n	800e2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800e2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d102      	bne.n	800e2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800e2cc:	4b8e      	ldr	r3, [pc, #568]	@ (800e508 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e2ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2d0:	e2dd      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e2d8:	d107      	bne.n	800e2ea <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e2da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7fe fb4c 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800e2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2e8:	e2d1      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e2f0:	d107      	bne.n	800e302 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2f2:	f107 0318 	add.w	r3, r7, #24
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fe fc9a 	bl	800cc30 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800e300:	e2c5      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800e302:	2300      	movs	r3, #0
 800e304:	637b      	str	r3, [r7, #52]	@ 0x34
 800e306:	e2c2      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800e308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e30c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800e310:	430b      	orrs	r3, r1
 800e312:	d156      	bne.n	800e3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800e314:	4b7b      	ldr	r3, [pc, #492]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e31a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e31e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e322:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e326:	d028      	beq.n	800e37a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800e328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e32a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e32e:	d845      	bhi.n	800e3bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800e330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e332:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e336:	d013      	beq.n	800e360 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800e338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e33e:	d83d      	bhi.n	800e3bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800e340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e342:	2b00      	cmp	r3, #0
 800e344:	d004      	beq.n	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800e346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e348:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e34c:	d004      	beq.n	800e358 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800e34e:	e035      	b.n	800e3bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800e350:	f7fd fb2e 	bl	800b9b0 <HAL_RCC_GetPCLK2Freq>
 800e354:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e356:	e29a      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e358:	f7fd f9fa 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800e35c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e35e:	e296      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e360:	4b68      	ldr	r3, [pc, #416]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e36c:	d102      	bne.n	800e374 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800e36e:	4b66      	ldr	r3, [pc, #408]	@ (800e508 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e370:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e372:	e28c      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e374:	2300      	movs	r3, #0
 800e376:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e378:	e289      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e37a:	4b62      	ldr	r3, [pc, #392]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f003 0320 	and.w	r3, r3, #32
 800e382:	2b20      	cmp	r3, #32
 800e384:	d117      	bne.n	800e3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e386:	4b5f      	ldr	r3, [pc, #380]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d005      	beq.n	800e39e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800e392:	4b5c      	ldr	r3, [pc, #368]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	0e1b      	lsrs	r3, r3, #24
 800e398:	f003 030f 	and.w	r3, r3, #15
 800e39c:	e006      	b.n	800e3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800e39e:	4b59      	ldr	r3, [pc, #356]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e3a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e3a4:	041b      	lsls	r3, r3, #16
 800e3a6:	0e1b      	lsrs	r3, r3, #24
 800e3a8:	f003 030f 	and.w	r3, r3, #15
 800e3ac:	4a57      	ldr	r2, [pc, #348]	@ (800e50c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800e3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e3b4:	e26b      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3ba:	e268      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3c0:	e265      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800e3c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3c6:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800e3ca:	430b      	orrs	r3, r1
 800e3cc:	d156      	bne.n	800e47c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800e3ce:	4b4d      	ldr	r3, [pc, #308]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e3d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e3d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e3d8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e3e0:	d028      	beq.n	800e434 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800e3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e3e8:	d845      	bhi.n	800e476 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800e3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e3f0:	d013      	beq.n	800e41a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e3f8:	d83d      	bhi.n	800e476 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d004      	beq.n	800e40a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800e400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e406:	d004      	beq.n	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800e408:	e035      	b.n	800e476 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800e40a:	f7fd fabd 	bl	800b988 <HAL_RCC_GetPCLK1Freq>
 800e40e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e410:	e23d      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e412:	f7fd f99d 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800e416:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e418:	e239      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e41a:	4b3a      	ldr	r3, [pc, #232]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e426:	d102      	bne.n	800e42e <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800e428:	4b37      	ldr	r3, [pc, #220]	@ (800e508 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e42a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e42c:	e22f      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e42e:	2300      	movs	r3, #0
 800e430:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e432:	e22c      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e434:	4b33      	ldr	r3, [pc, #204]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f003 0320 	and.w	r3, r3, #32
 800e43c:	2b20      	cmp	r3, #32
 800e43e:	d117      	bne.n	800e470 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e440:	4b30      	ldr	r3, [pc, #192]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d005      	beq.n	800e458 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800e44c:	4b2d      	ldr	r3, [pc, #180]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	0e1b      	lsrs	r3, r3, #24
 800e452:	f003 030f 	and.w	r3, r3, #15
 800e456:	e006      	b.n	800e466 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800e458:	4b2a      	ldr	r3, [pc, #168]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e45a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e45e:	041b      	lsls	r3, r3, #16
 800e460:	0e1b      	lsrs	r3, r3, #24
 800e462:	f003 030f 	and.w	r3, r3, #15
 800e466:	4a29      	ldr	r2, [pc, #164]	@ (800e50c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800e468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e46c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e46e:	e20e      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e470:	2300      	movs	r3, #0
 800e472:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e474:	e20b      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e476:	2300      	movs	r3, #0
 800e478:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e47a:	e208      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800e47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e480:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800e484:	430b      	orrs	r3, r1
 800e486:	d17c      	bne.n	800e582 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800e488:	4b1e      	ldr	r3, [pc, #120]	@ (800e504 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e48a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e48e:	f003 0318 	and.w	r3, r3, #24
 800e492:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e496:	2b18      	cmp	r3, #24
 800e498:	d870      	bhi.n	800e57c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800e49a:	a201      	add	r2, pc, #4	@ (adr r2, 800e4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800e49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a0:	0800e511 	.word	0x0800e511
 800e4a4:	0800e57d 	.word	0x0800e57d
 800e4a8:	0800e57d 	.word	0x0800e57d
 800e4ac:	0800e57d 	.word	0x0800e57d
 800e4b0:	0800e57d 	.word	0x0800e57d
 800e4b4:	0800e57d 	.word	0x0800e57d
 800e4b8:	0800e57d 	.word	0x0800e57d
 800e4bc:	0800e57d 	.word	0x0800e57d
 800e4c0:	0800e519 	.word	0x0800e519
 800e4c4:	0800e57d 	.word	0x0800e57d
 800e4c8:	0800e57d 	.word	0x0800e57d
 800e4cc:	0800e57d 	.word	0x0800e57d
 800e4d0:	0800e57d 	.word	0x0800e57d
 800e4d4:	0800e57d 	.word	0x0800e57d
 800e4d8:	0800e57d 	.word	0x0800e57d
 800e4dc:	0800e57d 	.word	0x0800e57d
 800e4e0:	0800e521 	.word	0x0800e521
 800e4e4:	0800e57d 	.word	0x0800e57d
 800e4e8:	0800e57d 	.word	0x0800e57d
 800e4ec:	0800e57d 	.word	0x0800e57d
 800e4f0:	0800e57d 	.word	0x0800e57d
 800e4f4:	0800e57d 	.word	0x0800e57d
 800e4f8:	0800e57d 	.word	0x0800e57d
 800e4fc:	0800e57d 	.word	0x0800e57d
 800e500:	0800e53b 	.word	0x0800e53b
 800e504:	46020c00 	.word	0x46020c00
 800e508:	00f42400 	.word	0x00f42400
 800e50c:	0801281c 	.word	0x0801281c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800e510:	f7fd fa62 	bl	800b9d8 <HAL_RCC_GetPCLK3Freq>
 800e514:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e516:	e1ba      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e518:	f7fd f91a 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800e51c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e51e:	e1b6      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e520:	4b9f      	ldr	r3, [pc, #636]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e52c:	d102      	bne.n	800e534 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800e52e:	4b9d      	ldr	r3, [pc, #628]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e530:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e532:	e1ac      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e534:	2300      	movs	r3, #0
 800e536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e538:	e1a9      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e53a:	4b99      	ldr	r3, [pc, #612]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f003 0320 	and.w	r3, r3, #32
 800e542:	2b20      	cmp	r3, #32
 800e544:	d117      	bne.n	800e576 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e546:	4b96      	ldr	r3, [pc, #600]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d005      	beq.n	800e55e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800e552:	4b93      	ldr	r3, [pc, #588]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	0e1b      	lsrs	r3, r3, #24
 800e558:	f003 030f 	and.w	r3, r3, #15
 800e55c:	e006      	b.n	800e56c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800e55e:	4b90      	ldr	r3, [pc, #576]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e564:	041b      	lsls	r3, r3, #16
 800e566:	0e1b      	lsrs	r3, r3, #24
 800e568:	f003 030f 	and.w	r3, r3, #15
 800e56c:	4a8e      	ldr	r2, [pc, #568]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e572:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e574:	e18b      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e576:	2300      	movs	r3, #0
 800e578:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e57a:	e188      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e57c:	2300      	movs	r3, #0
 800e57e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e580:	e185      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800e582:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e586:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800e58a:	430b      	orrs	r3, r1
 800e58c:	d155      	bne.n	800e63a <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800e58e:	4b84      	ldr	r3, [pc, #528]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e590:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e594:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e598:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e5a0:	d013      	beq.n	800e5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800e5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e5a8:	d844      	bhi.n	800e634 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e5b0:	d013      	beq.n	800e5da <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e5b8:	d83c      	bhi.n	800e634 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d014      	beq.n	800e5ea <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800e5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e5c6:	d014      	beq.n	800e5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800e5c8:	e034      	b.n	800e634 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5ca:	f107 0318 	add.w	r3, r7, #24
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7fe fb2e 	bl	800cc30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e5d8:	e159      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e5da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fe f9cc 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e5e8:	e151      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e5ea:	f7fd f8b1 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800e5ee:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e5f0:	e14d      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e5f2:	4b6b      	ldr	r3, [pc, #428]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f003 0320 	and.w	r3, r3, #32
 800e5fa:	2b20      	cmp	r3, #32
 800e5fc:	d117      	bne.n	800e62e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e5fe:	4b68      	ldr	r3, [pc, #416]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e600:	689b      	ldr	r3, [r3, #8]
 800e602:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e606:	2b00      	cmp	r3, #0
 800e608:	d005      	beq.n	800e616 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800e60a:	4b65      	ldr	r3, [pc, #404]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	0e1b      	lsrs	r3, r3, #24
 800e610:	f003 030f 	and.w	r3, r3, #15
 800e614:	e006      	b.n	800e624 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800e616:	4b62      	ldr	r3, [pc, #392]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e61c:	041b      	lsls	r3, r3, #16
 800e61e:	0e1b      	lsrs	r3, r3, #24
 800e620:	f003 030f 	and.w	r3, r3, #15
 800e624:	4a60      	ldr	r2, [pc, #384]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e62a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e62c:	e12f      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e62e:	2300      	movs	r3, #0
 800e630:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e632:	e12c      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e634:	2300      	movs	r3, #0
 800e636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e638:	e129      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800e63a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e63e:	1e59      	subs	r1, r3, #1
 800e640:	ea52 0301 	orrs.w	r3, r2, r1
 800e644:	d13c      	bne.n	800e6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800e646:	4b56      	ldr	r3, [pc, #344]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e648:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e64c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800e650:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e654:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e658:	d027      	beq.n	800e6aa <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800e65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e65c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e660:	d82b      	bhi.n	800e6ba <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e664:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e668:	d017      	beq.n	800e69a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800e66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e66c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e670:	d823      	bhi.n	800e6ba <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e674:	2b00      	cmp	r3, #0
 800e676:	d004      	beq.n	800e682 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800e678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e67e:	d004      	beq.n	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800e680:	e01b      	b.n	800e6ba <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e682:	f7fd f865 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800e686:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e688:	e101      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e68a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fe f974 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e696:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e698:	e0f9      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e69a:	f107 0318 	add.w	r3, r7, #24
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe fac6 	bl	800cc30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6a8:	e0f1      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6aa:	f107 030c 	add.w	r3, r7, #12
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fe fc18 	bl	800cee4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6b8:	e0e9      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6be:	e0e6      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800e6c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6c4:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800e6c8:	430b      	orrs	r3, r1
 800e6ca:	d131      	bne.n	800e730 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800e6cc:	4b34      	ldr	r3, [pc, #208]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e6ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e6d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e6d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800e6d8:	4b31      	ldr	r3, [pc, #196]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e6da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e6de:	f003 0302 	and.w	r3, r3, #2
 800e6e2:	2b02      	cmp	r3, #2
 800e6e4:	d106      	bne.n	800e6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d103      	bne.n	800e6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800e6ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e6f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6f2:	e0cc      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800e6f4:	4b2a      	ldr	r3, [pc, #168]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e6f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e6fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e6fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e702:	d112      	bne.n	800e72a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800e704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e70a:	d10e      	bne.n	800e72a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e70c:	4b24      	ldr	r3, [pc, #144]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e70e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e71a:	d102      	bne.n	800e722 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800e71c:	23fa      	movs	r3, #250	@ 0xfa
 800e71e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e720:	e0b5      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e722:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e726:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e728:	e0b1      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800e72a:	2300      	movs	r3, #0
 800e72c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e72e:	e0ae      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800e730:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e734:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e738:	430b      	orrs	r3, r1
 800e73a:	d13b      	bne.n	800e7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800e73c:	4b18      	ldr	r3, [pc, #96]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e73e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e742:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e746:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800e748:	4b15      	ldr	r3, [pc, #84]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e754:	d105      	bne.n	800e762 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800e756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d102      	bne.n	800e762 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800e75c:	4b13      	ldr	r3, [pc, #76]	@ (800e7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800e75e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e760:	e095      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800e762:	4b0f      	ldr	r3, [pc, #60]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e76a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e76e:	d106      	bne.n	800e77e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800e770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e776:	d102      	bne.n	800e77e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800e778:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800e77a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e77c:	e087      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800e77e:	4b08      	ldr	r3, [pc, #32]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e78a:	d106      	bne.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800e78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e78e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e792:	d102      	bne.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800e794:	4b03      	ldr	r3, [pc, #12]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e796:	637b      	str	r3, [r7, #52]	@ 0x34
 800e798:	e079      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800e79a:	2300      	movs	r3, #0
 800e79c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e79e:	e076      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800e7a0:	46020c00 	.word	0x46020c00
 800e7a4:	00f42400 	.word	0x00f42400
 800e7a8:	0801281c 	.word	0x0801281c
 800e7ac:	02dc6c00 	.word	0x02dc6c00
 800e7b0:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800e7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7b8:	1e99      	subs	r1, r3, #2
 800e7ba:	ea52 0301 	orrs.w	r3, r2, r1
 800e7be:	d120      	bne.n	800e802 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800e7c0:	4b35      	ldr	r3, [pc, #212]	@ (800e898 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e7c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e7c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e7ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d004      	beq.n	800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e7d8:	d008      	beq.n	800e7ec <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800e7da:	e00f      	b.n	800e7fc <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7dc:	f107 030c 	add.w	r3, r7, #12
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fe fb7f 	bl	800cee4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e7ea:	e050      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7ec:	f107 0318 	add.w	r3, r7, #24
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7fe fa1d 	bl	800cc30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800e7f6:	6a3b      	ldr	r3, [r7, #32]
 800e7f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e7fa:	e048      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e800:	e045      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800e802:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e806:	f1a3 0108 	sub.w	r1, r3, #8
 800e80a:	ea52 0301 	orrs.w	r3, r2, r1
 800e80e:	d13c      	bne.n	800e88a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800e810:	4b21      	ldr	r3, [pc, #132]	@ (800e898 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e812:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e816:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e81a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800e81c:	4b1e      	ldr	r3, [pc, #120]	@ (800e898 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e828:	d105      	bne.n	800e836 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800e82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d102      	bne.n	800e836 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800e830:	4b1a      	ldr	r3, [pc, #104]	@ (800e89c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800e832:	637b      	str	r3, [r7, #52]	@ 0x34
 800e834:	e02b      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800e836:	4b18      	ldr	r3, [pc, #96]	@ (800e898 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e83e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e842:	d106      	bne.n	800e852 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800e844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e846:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e84a:	d102      	bne.n	800e852 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800e84c:	4b14      	ldr	r3, [pc, #80]	@ (800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800e84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e850:	e01d      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800e852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e858:	d107      	bne.n	800e86a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e85a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fe f88c 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800e864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e866:	637b      	str	r3, [r7, #52]	@ 0x34
 800e868:	e011      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800e86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e86c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800e870:	d108      	bne.n	800e884 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e876:	4618      	mov	r0, r3
 800e878:	f7fe f880 	bl	800c97c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800e87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e87e:	085b      	lsrs	r3, r3, #1
 800e880:	637b      	str	r3, [r7, #52]	@ 0x34
 800e882:	e004      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800e884:	2300      	movs	r3, #0
 800e886:	637b      	str	r3, [r7, #52]	@ 0x34
 800e888:	e001      	b.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800e88a:	2300      	movs	r3, #0
 800e88c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800e88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e890:	4618      	mov	r0, r3
 800e892:	3738      	adds	r7, #56	@ 0x38
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}
 800e898:	46020c00 	.word	0x46020c00
 800e89c:	00f42400 	.word	0x00f42400
 800e8a0:	007a1200 	.word	0x007a1200

0800e8a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800e8ac:	4b47      	ldr	r3, [pc, #284]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a46      	ldr	r2, [pc, #280]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e8b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e8b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e8b8:	f7f4 ffd8 	bl	800386c <HAL_GetTick>
 800e8bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e8be:	e008      	b.n	800e8d2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e8c0:	f7f4 ffd4 	bl	800386c <HAL_GetTick>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	1ad3      	subs	r3, r2, r3
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d901      	bls.n	800e8d2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e8ce:	2303      	movs	r3, #3
 800e8d0:	e077      	b.n	800e9c2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e8d2:	4b3e      	ldr	r3, [pc, #248]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1f0      	bne.n	800e8c0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800e8de:	4b3b      	ldr	r3, [pc, #236]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e8e6:	f023 0303 	bic.w	r3, r3, #3
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	6811      	ldr	r1, [r2, #0]
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	6852      	ldr	r2, [r2, #4]
 800e8f2:	3a01      	subs	r2, #1
 800e8f4:	0212      	lsls	r2, r2, #8
 800e8f6:	430a      	orrs	r2, r1
 800e8f8:	4934      	ldr	r1, [pc, #208]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e8fa:	4313      	orrs	r3, r2
 800e8fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800e8fe:	4b33      	ldr	r3, [pc, #204]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e900:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e902:	4b33      	ldr	r3, [pc, #204]	@ (800e9d0 <RCCEx_PLL2_Config+0x12c>)
 800e904:	4013      	ands	r3, r2
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	6892      	ldr	r2, [r2, #8]
 800e90a:	3a01      	subs	r2, #1
 800e90c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	68d2      	ldr	r2, [r2, #12]
 800e914:	3a01      	subs	r2, #1
 800e916:	0252      	lsls	r2, r2, #9
 800e918:	b292      	uxth	r2, r2
 800e91a:	4311      	orrs	r1, r2
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	6912      	ldr	r2, [r2, #16]
 800e920:	3a01      	subs	r2, #1
 800e922:	0412      	lsls	r2, r2, #16
 800e924:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e928:	4311      	orrs	r1, r2
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	6952      	ldr	r2, [r2, #20]
 800e92e:	3a01      	subs	r2, #1
 800e930:	0612      	lsls	r2, r2, #24
 800e932:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e936:	430a      	orrs	r2, r1
 800e938:	4924      	ldr	r1, [pc, #144]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e93a:	4313      	orrs	r3, r2
 800e93c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800e93e:	4b23      	ldr	r3, [pc, #140]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e942:	f023 020c 	bic.w	r2, r3, #12
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	699b      	ldr	r3, [r3, #24]
 800e94a:	4920      	ldr	r1, [pc, #128]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e94c:	4313      	orrs	r3, r2
 800e94e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800e950:	4b1e      	ldr	r3, [pc, #120]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a1b      	ldr	r3, [r3, #32]
 800e958:	491c      	ldr	r1, [pc, #112]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e95a:	4313      	orrs	r3, r2
 800e95c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800e95e:	4b1b      	ldr	r3, [pc, #108]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e962:	4a1a      	ldr	r2, [pc, #104]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e964:	f023 0310 	bic.w	r3, r3, #16
 800e968:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e96a:	4b18      	ldr	r3, [pc, #96]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e96e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e972:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	69d2      	ldr	r2, [r2, #28]
 800e97a:	00d2      	lsls	r2, r2, #3
 800e97c:	4913      	ldr	r1, [pc, #76]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e97e:	4313      	orrs	r3, r2
 800e980:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800e982:	4b12      	ldr	r3, [pc, #72]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e986:	4a11      	ldr	r2, [pc, #68]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e988:	f043 0310 	orr.w	r3, r3, #16
 800e98c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800e98e:	4b0f      	ldr	r3, [pc, #60]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a0e      	ldr	r2, [pc, #56]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e994:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e998:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e99a:	f7f4 ff67 	bl	800386c <HAL_GetTick>
 800e99e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e9a0:	e008      	b.n	800e9b4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e9a2:	f7f4 ff63 	bl	800386c <HAL_GetTick>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d901      	bls.n	800e9b4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e9b0:	2303      	movs	r3, #3
 800e9b2:	e006      	b.n	800e9c2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e9b4:	4b05      	ldr	r3, [pc, #20]	@ (800e9cc <RCCEx_PLL2_Config+0x128>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d0f0      	beq.n	800e9a2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800e9c0:	2300      	movs	r3, #0

}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	46020c00 	.word	0x46020c00
 800e9d0:	80800000 	.word	0x80800000

0800e9d4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800e9dc:	4b47      	ldr	r3, [pc, #284]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a46      	ldr	r2, [pc, #280]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800e9e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e9e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e9e8:	f7f4 ff40 	bl	800386c <HAL_GetTick>
 800e9ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e9ee:	e008      	b.n	800ea02 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e9f0:	f7f4 ff3c 	bl	800386c <HAL_GetTick>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	2b02      	cmp	r3, #2
 800e9fc:	d901      	bls.n	800ea02 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e9fe:	2303      	movs	r3, #3
 800ea00:	e077      	b.n	800eaf2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ea02:	4b3e      	ldr	r3, [pc, #248]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1f0      	bne.n	800e9f0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ea0e:	4b3b      	ldr	r3, [pc, #236]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ea16:	f023 0303 	bic.w	r3, r3, #3
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	6811      	ldr	r1, [r2, #0]
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	6852      	ldr	r2, [r2, #4]
 800ea22:	3a01      	subs	r2, #1
 800ea24:	0212      	lsls	r2, r2, #8
 800ea26:	430a      	orrs	r2, r1
 800ea28:	4934      	ldr	r1, [pc, #208]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	630b      	str	r3, [r1, #48]	@ 0x30
 800ea2e:	4b33      	ldr	r3, [pc, #204]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea32:	4b33      	ldr	r3, [pc, #204]	@ (800eb00 <RCCEx_PLL3_Config+0x12c>)
 800ea34:	4013      	ands	r3, r2
 800ea36:	687a      	ldr	r2, [r7, #4]
 800ea38:	6892      	ldr	r2, [r2, #8]
 800ea3a:	3a01      	subs	r2, #1
 800ea3c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	68d2      	ldr	r2, [r2, #12]
 800ea44:	3a01      	subs	r2, #1
 800ea46:	0252      	lsls	r2, r2, #9
 800ea48:	b292      	uxth	r2, r2
 800ea4a:	4311      	orrs	r1, r2
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	6912      	ldr	r2, [r2, #16]
 800ea50:	3a01      	subs	r2, #1
 800ea52:	0412      	lsls	r2, r2, #16
 800ea54:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ea58:	4311      	orrs	r1, r2
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	6952      	ldr	r2, [r2, #20]
 800ea5e:	3a01      	subs	r2, #1
 800ea60:	0612      	lsls	r2, r2, #24
 800ea62:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ea66:	430a      	orrs	r2, r1
 800ea68:	4924      	ldr	r1, [pc, #144]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800ea6e:	4b23      	ldr	r3, [pc, #140]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea72:	f023 020c 	bic.w	r2, r3, #12
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	699b      	ldr	r3, [r3, #24]
 800ea7a:	4920      	ldr	r1, [pc, #128]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ea80:	4b1e      	ldr	r3, [pc, #120]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6a1b      	ldr	r3, [r3, #32]
 800ea88:	491c      	ldr	r1, [pc, #112]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ea8e:	4b1b      	ldr	r3, [pc, #108]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea92:	4a1a      	ldr	r2, [pc, #104]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea94:	f023 0310 	bic.w	r3, r3, #16
 800ea98:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ea9a:	4b18      	ldr	r3, [pc, #96]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800ea9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eaa2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	69d2      	ldr	r2, [r2, #28]
 800eaaa:	00d2      	lsls	r2, r2, #3
 800eaac:	4913      	ldr	r1, [pc, #76]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800eaae:	4313      	orrs	r3, r2
 800eab0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800eab2:	4b12      	ldr	r3, [pc, #72]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800eab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eab6:	4a11      	ldr	r2, [pc, #68]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800eab8:	f043 0310 	orr.w	r3, r3, #16
 800eabc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800eabe:	4b0f      	ldr	r3, [pc, #60]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a0e      	ldr	r2, [pc, #56]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800eac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eac8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eaca:	f7f4 fecf 	bl	800386c <HAL_GetTick>
 800eace:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ead0:	e008      	b.n	800eae4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ead2:	f7f4 fecb 	bl	800386c <HAL_GetTick>
 800ead6:	4602      	mov	r2, r0
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	1ad3      	subs	r3, r2, r3
 800eadc:	2b02      	cmp	r3, #2
 800eade:	d901      	bls.n	800eae4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800eae0:	2303      	movs	r3, #3
 800eae2:	e006      	b.n	800eaf2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eae4:	4b05      	ldr	r3, [pc, #20]	@ (800eafc <RCCEx_PLL3_Config+0x128>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d0f0      	beq.n	800ead2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	46020c00 	.word	0x46020c00
 800eb00:	80800000 	.word	0x80800000

0800eb04 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d071      	beq.n	800ebfa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d106      	bne.n	800eb30 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7f4 f944 	bl	8002db8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2202      	movs	r2, #2
 800eb34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800eb38:	4b32      	ldr	r3, [pc, #200]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	f003 0310 	and.w	r3, r3, #16
 800eb40:	2b10      	cmp	r3, #16
 800eb42:	d051      	beq.n	800ebe8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800eb44:	4b2f      	ldr	r3, [pc, #188]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800eb46:	22ca      	movs	r2, #202	@ 0xca
 800eb48:	625a      	str	r2, [r3, #36]	@ 0x24
 800eb4a:	4b2e      	ldr	r3, [pc, #184]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800eb4c:	2253      	movs	r2, #83	@ 0x53
 800eb4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 f88b 	bl	800ec6c <RTC_EnterInitMode>
 800eb56:	4603      	mov	r3, r0
 800eb58:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800eb5a:	7bfb      	ldrb	r3, [r7, #15]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d13f      	bne.n	800ebe0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800eb60:	4b28      	ldr	r3, [pc, #160]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800eb62:	699b      	ldr	r3, [r3, #24]
 800eb64:	4a27      	ldr	r2, [pc, #156]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800eb66:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800eb6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb6e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800eb70:	4b24      	ldr	r3, [pc, #144]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800eb72:	699a      	ldr	r2, [r3, #24]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6859      	ldr	r1, [r3, #4]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	4319      	orrs	r1, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	699b      	ldr	r3, [r3, #24]
 800eb82:	430b      	orrs	r3, r1
 800eb84:	491f      	ldr	r1, [pc, #124]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800eb86:	4313      	orrs	r3, r2
 800eb88:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	68da      	ldr	r2, [r3, #12]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	041b      	lsls	r3, r3, #16
 800eb94:	491b      	ldr	r1, [pc, #108]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800eb96:	4313      	orrs	r3, r2
 800eb98:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800eb9a:	4b1a      	ldr	r3, [pc, #104]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebaa:	430b      	orrs	r3, r1
 800ebac:	4915      	ldr	r1, [pc, #84]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 f896 	bl	800ece4 <RTC_ExitInitMode>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d10e      	bne.n	800ebe0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800ebc2:	4b10      	ldr	r3, [pc, #64]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800ebc4:	699b      	ldr	r3, [r3, #24]
 800ebc6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a19      	ldr	r1, [r3, #32]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	69db      	ldr	r3, [r3, #28]
 800ebd2:	4319      	orrs	r1, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	695b      	ldr	r3, [r3, #20]
 800ebd8:	430b      	orrs	r3, r1
 800ebda:	490a      	ldr	r1, [pc, #40]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ebe0:	4b08      	ldr	r3, [pc, #32]	@ (800ec04 <HAL_RTC_Init+0x100>)
 800ebe2:	22ff      	movs	r2, #255	@ 0xff
 800ebe4:	625a      	str	r2, [r3, #36]	@ 0x24
 800ebe6:	e001      	b.n	800ebec <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ebec:	7bfb      	ldrb	r3, [r7, #15]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d103      	bne.n	800ebfa <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800ebfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	46007800 	.word	0x46007800

0800ec08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800ec10:	4b15      	ldr	r3, [pc, #84]	@ (800ec68 <HAL_RTC_WaitForSynchro+0x60>)
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	4a14      	ldr	r2, [pc, #80]	@ (800ec68 <HAL_RTC_WaitForSynchro+0x60>)
 800ec16:	f023 0320 	bic.w	r3, r3, #32
 800ec1a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800ec1c:	f7f4 fe26 	bl	800386c <HAL_GetTick>
 800ec20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ec22:	e013      	b.n	800ec4c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ec24:	f7f4 fe22 	bl	800386c <HAL_GetTick>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	1ad3      	subs	r3, r2, r3
 800ec2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ec32:	d90b      	bls.n	800ec4c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ec34:	4b0c      	ldr	r3, [pc, #48]	@ (800ec68 <HAL_RTC_WaitForSynchro+0x60>)
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	f003 0320 	and.w	r3, r3, #32
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d10c      	bne.n	800ec5a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2203      	movs	r2, #3
 800ec44:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800ec48:	2303      	movs	r3, #3
 800ec4a:	e008      	b.n	800ec5e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ec4c:	4b06      	ldr	r3, [pc, #24]	@ (800ec68 <HAL_RTC_WaitForSynchro+0x60>)
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	f003 0320 	and.w	r3, r3, #32
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d0e5      	beq.n	800ec24 <HAL_RTC_WaitForSynchro+0x1c>
 800ec58:	e000      	b.n	800ec5c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800ec5a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	46007800 	.word	0x46007800

0800ec6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec74:	2300      	movs	r3, #0
 800ec76:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ec78:	4b19      	ldr	r3, [pc, #100]	@ (800ece0 <RTC_EnterInitMode+0x74>)
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d128      	bne.n	800ecd6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ec84:	4b16      	ldr	r3, [pc, #88]	@ (800ece0 <RTC_EnterInitMode+0x74>)
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	4a15      	ldr	r2, [pc, #84]	@ (800ece0 <RTC_EnterInitMode+0x74>)
 800ec8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec8e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800ec90:	f7f4 fdec 	bl	800386c <HAL_GetTick>
 800ec94:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ec96:	e013      	b.n	800ecc0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ec98:	f7f4 fde8 	bl	800386c <HAL_GetTick>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eca6:	d90b      	bls.n	800ecc0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800eca8:	4b0d      	ldr	r3, [pc, #52]	@ (800ece0 <RTC_EnterInitMode+0x74>)
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d10f      	bne.n	800ecd4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800ecb4:	2303      	movs	r3, #3
 800ecb6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2203      	movs	r2, #3
 800ecbc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ecc0:	4b07      	ldr	r3, [pc, #28]	@ (800ece0 <RTC_EnterInitMode+0x74>)
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d104      	bne.n	800ecd6 <RTC_EnterInitMode+0x6a>
 800eccc:	7bfb      	ldrb	r3, [r7, #15]
 800ecce:	2b03      	cmp	r3, #3
 800ecd0:	d1e2      	bne.n	800ec98 <RTC_EnterInitMode+0x2c>
 800ecd2:	e000      	b.n	800ecd6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800ecd4:	bf00      	nop
        }
      }
    }
  }

  return status;
 800ecd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	46007800 	.word	0x46007800

0800ece4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ecec:	2300      	movs	r3, #0
 800ecee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ecf0:	4b1a      	ldr	r3, [pc, #104]	@ (800ed5c <RTC_ExitInitMode+0x78>)
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	4a19      	ldr	r2, [pc, #100]	@ (800ed5c <RTC_ExitInitMode+0x78>)
 800ecf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ecfa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ecfc:	4b17      	ldr	r3, [pc, #92]	@ (800ed5c <RTC_ExitInitMode+0x78>)
 800ecfe:	699b      	ldr	r3, [r3, #24]
 800ed00:	f003 0320 	and.w	r3, r3, #32
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d10c      	bne.n	800ed22 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f7ff ff7d 	bl	800ec08 <HAL_RTC_WaitForSynchro>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d01e      	beq.n	800ed52 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2203      	movs	r2, #3
 800ed18:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ed1c:	2303      	movs	r3, #3
 800ed1e:	73fb      	strb	r3, [r7, #15]
 800ed20:	e017      	b.n	800ed52 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ed22:	4b0e      	ldr	r3, [pc, #56]	@ (800ed5c <RTC_ExitInitMode+0x78>)
 800ed24:	699b      	ldr	r3, [r3, #24]
 800ed26:	4a0d      	ldr	r2, [pc, #52]	@ (800ed5c <RTC_ExitInitMode+0x78>)
 800ed28:	f023 0320 	bic.w	r3, r3, #32
 800ed2c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f7ff ff6a 	bl	800ec08 <HAL_RTC_WaitForSynchro>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d005      	beq.n	800ed46 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2203      	movs	r2, #3
 800ed3e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ed42:	2303      	movs	r3, #3
 800ed44:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ed46:	4b05      	ldr	r3, [pc, #20]	@ (800ed5c <RTC_ExitInitMode+0x78>)
 800ed48:	699b      	ldr	r3, [r3, #24]
 800ed4a:	4a04      	ldr	r2, [pc, #16]	@ (800ed5c <RTC_ExitInitMode+0x78>)
 800ed4c:	f043 0320 	orr.w	r3, r3, #32
 800ed50:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ed52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3710      	adds	r7, #16
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	46007800 	.word	0x46007800

0800ed60 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	4910      	ldr	r1, [pc, #64]	@ (800edb4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ed74:	4313      	orrs	r3, r2
 800ed76:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	689a      	ldr	r2, [r3, #8]
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	431a      	orrs	r2, r3
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	699b      	ldr	r3, [r3, #24]
 800ed86:	490c      	ldr	r1, [pc, #48]	@ (800edb8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800ed8c:	4b0a      	ldr	r3, [pc, #40]	@ (800edb8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ed8e:	6a1b      	ldr	r3, [r3, #32]
 800ed90:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	6919      	ldr	r1, [r3, #16]
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	695b      	ldr	r3, [r3, #20]
 800ed9c:	041b      	lsls	r3, r3, #16
 800ed9e:	430b      	orrs	r3, r1
 800eda0:	4905      	ldr	r1, [pc, #20]	@ (800edb8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800eda2:	4313      	orrs	r3, r2
 800eda4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800eda6:	2300      	movs	r3, #0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	370c      	adds	r7, #12
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr
 800edb4:	46007800 	.word	0x46007800
 800edb8:	46007c00 	.word	0x46007c00

0800edbc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b086      	sub	sp, #24
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	607a      	str	r2, [r7, #4]
 800edc8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	2b02      	cmp	r3, #2
 800edce:	d904      	bls.n	800edda <HAL_SAI_InitProtocol+0x1e>
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	3b03      	subs	r3, #3
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d812      	bhi.n	800edfe <HAL_SAI_InitProtocol+0x42>
 800edd8:	e008      	b.n	800edec <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	68b9      	ldr	r1, [r7, #8]
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f000 fbed 	bl	800f5c0 <SAI_InitI2S>
 800ede6:	4603      	mov	r3, r0
 800ede8:	75fb      	strb	r3, [r7, #23]
      break;
 800edea:	e00b      	b.n	800ee04 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	68b9      	ldr	r1, [r7, #8]
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f000 fc96 	bl	800f724 <SAI_InitPCM>
 800edf8:	4603      	mov	r3, r0
 800edfa:	75fb      	strb	r3, [r7, #23]
      break;
 800edfc:	e002      	b.n	800ee04 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800edfe:	2301      	movs	r3, #1
 800ee00:	75fb      	strb	r3, [r7, #23]
      break;
 800ee02:	bf00      	nop
  }

  if (status == HAL_OK)
 800ee04:	7dfb      	ldrb	r3, [r7, #23]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d104      	bne.n	800ee14 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ee0a:	68f8      	ldr	r0, [r7, #12]
 800ee0c:	f000 f808 	bl	800ee20 <HAL_SAI_Init>
 800ee10:	4603      	mov	r3, r0
 800ee12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ee14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
	...

0800ee20 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b08a      	sub	sp, #40	@ 0x28
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d101      	bne.n	800ee32 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e1ce      	b.n	800f1d0 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d10e      	bne.n	800ee5a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a83      	ldr	r2, [pc, #524]	@ (800f050 <HAL_SAI_Init+0x230>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d107      	bne.n	800ee56 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	d103      	bne.n	800ee56 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d001      	beq.n	800ee5a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800ee56:	2301      	movs	r3, #1
 800ee58:	e1ba      	b.n	800f1d0 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d106      	bne.n	800ee74 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f7f4 f974 	bl	800315c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 fd0f 	bl	800f898 <SAI_Disable>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d001      	beq.n	800ee84 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800ee80:	2301      	movs	r3, #1
 800ee82:	e1a5      	b.n	800f1d0 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2202      	movs	r2, #2
 800ee88:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	2b02      	cmp	r3, #2
 800ee92:	d00c      	beq.n	800eeae <HAL_SAI_Init+0x8e>
 800ee94:	2b02      	cmp	r3, #2
 800ee96:	d80d      	bhi.n	800eeb4 <HAL_SAI_Init+0x94>
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d002      	beq.n	800eea2 <HAL_SAI_Init+0x82>
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d003      	beq.n	800eea8 <HAL_SAI_Init+0x88>
 800eea0:	e008      	b.n	800eeb4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800eea2:	2300      	movs	r3, #0
 800eea4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eea6:	e008      	b.n	800eeba <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800eea8:	2310      	movs	r3, #16
 800eeaa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eeac:	e005      	b.n	800eeba <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800eeae:	2320      	movs	r3, #32
 800eeb0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eeb2:	e002      	b.n	800eeba <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eeb8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	689b      	ldr	r3, [r3, #8]
 800eebe:	2b03      	cmp	r3, #3
 800eec0:	d81d      	bhi.n	800eefe <HAL_SAI_Init+0xde>
 800eec2:	a201      	add	r2, pc, #4	@ (adr r2, 800eec8 <HAL_SAI_Init+0xa8>)
 800eec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec8:	0800eed9 	.word	0x0800eed9
 800eecc:	0800eedf 	.word	0x0800eedf
 800eed0:	0800eee7 	.word	0x0800eee7
 800eed4:	0800eeef 	.word	0x0800eeef
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800eed8:	2300      	movs	r3, #0
 800eeda:	61fb      	str	r3, [r7, #28]
      break;
 800eedc:	e012      	b.n	800ef04 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800eede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eee2:	61fb      	str	r3, [r7, #28]
      break;
 800eee4:	e00e      	b.n	800ef04 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800eee6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eeea:	61fb      	str	r3, [r7, #28]
      break;
 800eeec:	e00a      	b.n	800ef04 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800eeee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eef2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800eef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef6:	f043 0301 	orr.w	r3, r3, #1
 800eefa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eefc:	e002      	b.n	800ef04 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800eefe:	2300      	movs	r3, #0
 800ef00:	61fb      	str	r3, [r7, #28]
      break;
 800ef02:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	4a51      	ldr	r2, [pc, #324]	@ (800f050 <HAL_SAI_Init+0x230>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d004      	beq.n	800ef18 <HAL_SAI_Init+0xf8>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	4a50      	ldr	r2, [pc, #320]	@ (800f054 <HAL_SAI_Init+0x234>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d103      	bne.n	800ef20 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800ef18:	4a4f      	ldr	r2, [pc, #316]	@ (800f058 <HAL_SAI_Init+0x238>)
 800ef1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef1c:	6013      	str	r3, [r2, #0]
 800ef1e:	e002      	b.n	800ef26 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ef20:	4a4e      	ldr	r2, [pc, #312]	@ (800f05c <HAL_SAI_Init+0x23c>)
 800ef22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef24:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6a1b      	ldr	r3, [r3, #32]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d077      	beq.n	800f01e <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4a47      	ldr	r2, [pc, #284]	@ (800f050 <HAL_SAI_Init+0x230>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d004      	beq.n	800ef42 <HAL_SAI_Init+0x122>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a45      	ldr	r2, [pc, #276]	@ (800f054 <HAL_SAI_Init+0x234>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d107      	bne.n	800ef52 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ef42:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ef46:	f04f 0100 	mov.w	r1, #0
 800ef4a:	f7fe f925 	bl	800d198 <HAL_RCCEx_GetPeriphCLKFreq>
 800ef4e:	61b8      	str	r0, [r7, #24]
 800ef50:	e006      	b.n	800ef60 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ef52:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ef56:	f04f 0100 	mov.w	r1, #0
 800ef5a:	f7fe f91d 	bl	800d198 <HAL_RCCEx_GetPeriphCLKFreq>
 800ef5e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	699b      	ldr	r3, [r3, #24]
 800ef64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ef68:	d120      	bne.n	800efac <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef6e:	2b04      	cmp	r3, #4
 800ef70:	d102      	bne.n	800ef78 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800ef72:	2340      	movs	r3, #64	@ 0x40
 800ef74:	613b      	str	r3, [r7, #16]
 800ef76:	e00a      	b.n	800ef8e <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef7c:	2b08      	cmp	r3, #8
 800ef7e:	d103      	bne.n	800ef88 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800ef80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef84:	613b      	str	r3, [r7, #16]
 800ef86:	e002      	b.n	800ef8e <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef8c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800ef8e:	69ba      	ldr	r2, [r7, #24]
 800ef90:	4613      	mov	r3, r2
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	005b      	lsls	r3, r3, #1
 800ef98:	4619      	mov	r1, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a1b      	ldr	r3, [r3, #32]
 800ef9e:	693a      	ldr	r2, [r7, #16]
 800efa0:	fb02 f303 	mul.w	r3, r2, r3
 800efa4:	fbb1 f3f3 	udiv	r3, r1, r3
 800efa8:	617b      	str	r3, [r7, #20]
 800efaa:	e017      	b.n	800efdc <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800efb4:	d101      	bne.n	800efba <HAL_SAI_Init+0x19a>
 800efb6:	2302      	movs	r3, #2
 800efb8:	e000      	b.n	800efbc <HAL_SAI_Init+0x19c>
 800efba:	2301      	movs	r3, #1
 800efbc:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800efbe:	69ba      	ldr	r2, [r7, #24]
 800efc0:	4613      	mov	r3, r2
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	4413      	add	r3, r2
 800efc6:	005b      	lsls	r3, r3, #1
 800efc8:	4619      	mov	r1, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	fb02 f303 	mul.w	r3, r2, r3
 800efd4:	021b      	lsls	r3, r3, #8
 800efd6:	fbb1 f3f3 	udiv	r3, r1, r3
 800efda:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	4a20      	ldr	r2, [pc, #128]	@ (800f060 <HAL_SAI_Init+0x240>)
 800efe0:	fba2 2303 	umull	r2, r3, r2, r3
 800efe4:	08da      	lsrs	r2, r3, #3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800efea:	6979      	ldr	r1, [r7, #20]
 800efec:	4b1c      	ldr	r3, [pc, #112]	@ (800f060 <HAL_SAI_Init+0x240>)
 800efee:	fba3 2301 	umull	r2, r3, r3, r1
 800eff2:	08da      	lsrs	r2, r3, #3
 800eff4:	4613      	mov	r3, r2
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	4413      	add	r3, r2
 800effa:	005b      	lsls	r3, r3, #1
 800effc:	1aca      	subs	r2, r1, r3
 800effe:	2a08      	cmp	r2, #8
 800f000:	d904      	bls.n	800f00c <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f006:	1c5a      	adds	r2, r3, #1
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f010:	2b04      	cmp	r3, #4
 800f012:	d104      	bne.n	800f01e <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f018:	085a      	lsrs	r2, r3, #1
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d003      	beq.n	800f02e <HAL_SAI_Init+0x20e>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	d109      	bne.n	800f042 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f032:	2b01      	cmp	r3, #1
 800f034:	d101      	bne.n	800f03a <HAL_SAI_Init+0x21a>
 800f036:	2300      	movs	r3, #0
 800f038:	e001      	b.n	800f03e <HAL_SAI_Init+0x21e>
 800f03a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f03e:	623b      	str	r3, [r7, #32]
 800f040:	e012      	b.n	800f068 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f046:	2b01      	cmp	r3, #1
 800f048:	d10c      	bne.n	800f064 <HAL_SAI_Init+0x244>
 800f04a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f04e:	e00a      	b.n	800f066 <HAL_SAI_Init+0x246>
 800f050:	40015404 	.word	0x40015404
 800f054:	40015424 	.word	0x40015424
 800f058:	40015400 	.word	0x40015400
 800f05c:	40015800 	.word	0x40015800
 800f060:	cccccccd 	.word	0xcccccccd
 800f064:	2300      	movs	r3, #0
 800f066:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	6819      	ldr	r1, [r3, #0]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	4b59      	ldr	r3, [pc, #356]	@ (800f1d8 <HAL_SAI_Init+0x3b8>)
 800f074:	400b      	ands	r3, r1
 800f076:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	6819      	ldr	r1, [r3, #0]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	685a      	ldr	r2, [r3, #4]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f086:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f08c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f092:	431a      	orrs	r2, r3
 800f094:	6a3b      	ldr	r3, [r7, #32]
 800f096:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800f0a0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f0ac:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0b2:	051b      	lsls	r3, r3, #20
 800f0b4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f0ba:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	691b      	ldr	r3, [r3, #16]
 800f0c0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	430a      	orrs	r2, r1
 800f0c8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	6812      	ldr	r2, [r2, #0]
 800f0d4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800f0d8:	f023 030f 	bic.w	r3, r3, #15
 800f0dc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	6859      	ldr	r1, [r3, #4]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	69da      	ldr	r2, [r3, #28]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0ec:	431a      	orrs	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0f2:	431a      	orrs	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	430a      	orrs	r2, r1
 800f0fa:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	6899      	ldr	r1, [r3, #8]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	4b35      	ldr	r3, [pc, #212]	@ (800f1dc <HAL_SAI_Init+0x3bc>)
 800f108:	400b      	ands	r3, r1
 800f10a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	6899      	ldr	r1, [r3, #8]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f116:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f11c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800f122:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800f128:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f12e:	3b01      	subs	r3, #1
 800f130:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f132:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	430a      	orrs	r2, r1
 800f13a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	68d9      	ldr	r1, [r3, #12]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800f14a:	400b      	ands	r3, r1
 800f14c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	68d9      	ldr	r1, [r3, #12]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f15c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f162:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f164:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f16a:	3b01      	subs	r3, #1
 800f16c:	021b      	lsls	r3, r3, #8
 800f16e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	430a      	orrs	r2, r1
 800f176:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a18      	ldr	r2, [pc, #96]	@ (800f1e0 <HAL_SAI_Init+0x3c0>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d119      	bne.n	800f1b6 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800f182:	4b18      	ldr	r3, [pc, #96]	@ (800f1e4 <HAL_SAI_Init+0x3c4>)
 800f184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f186:	4a17      	ldr	r2, [pc, #92]	@ (800f1e4 <HAL_SAI_Init+0x3c4>)
 800f188:	f023 0301 	bic.w	r3, r3, #1
 800f18c:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f194:	2b01      	cmp	r3, #1
 800f196:	d10e      	bne.n	800f1b6 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f1a4:	490f      	ldr	r1, [pc, #60]	@ (800f1e4 <HAL_SAI_Init+0x3c4>)
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800f1aa:	4b0e      	ldr	r3, [pc, #56]	@ (800f1e4 <HAL_SAI_Init+0x3c4>)
 800f1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1ae:	4a0d      	ldr	r2, [pc, #52]	@ (800f1e4 <HAL_SAI_Init+0x3c4>)
 800f1b0:	f043 0301 	orr.w	r3, r3, #1
 800f1b4:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3728      	adds	r7, #40	@ 0x28
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	f005c010 	.word	0xf005c010
 800f1dc:	fff88000 	.word	0xfff88000
 800f1e0:	40015404 	.word	0x40015404
 800f1e4:	40015400 	.word	0x40015400

0800f1e8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b088      	sub	sp, #32
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	60b9      	str	r1, [r7, #8]
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f1f6:	f7f4 fb39 	bl	800386c <HAL_GetTick>
 800f1fa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d002      	beq.n	800f208 <HAL_SAI_Transmit_DMA+0x20>
 800f202:	88fb      	ldrh	r3, [r7, #6]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d101      	bne.n	800f20c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f208:	2301      	movs	r3, #1
 800f20a:	e0e4      	b.n	800f3d6 <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f212:	b2db      	uxtb	r3, r3
 800f214:	2b01      	cmp	r3, #1
 800f216:	f040 80dd 	bne.w	800f3d4 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800f220:	2b01      	cmp	r3, #1
 800f222:	d101      	bne.n	800f228 <HAL_SAI_Transmit_DMA+0x40>
 800f224:	2302      	movs	r3, #2
 800f226:	e0d6      	b.n	800f3d6 <HAL_SAI_Transmit_DMA+0x1ee>
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2201      	movs	r2, #1
 800f22c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	68ba      	ldr	r2, [r7, #8]
 800f234:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	88fa      	ldrh	r2, [r7, #6]
 800f23a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	88fa      	ldrh	r2, [r7, #6]
 800f242:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2200      	movs	r2, #0
 800f24a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2212      	movs	r2, #18
 800f252:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f25c:	4a60      	ldr	r2, [pc, #384]	@ (800f3e0 <HAL_SAI_Transmit_DMA+0x1f8>)
 800f25e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f266:	4a5f      	ldr	r2, [pc, #380]	@ (800f3e4 <HAL_SAI_Transmit_DMA+0x1fc>)
 800f268:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f270:	4a5d      	ldr	r2, [pc, #372]	@ (800f3e8 <HAL_SAI_Transmit_DMA+0x200>)
 800f272:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f27a:	2200      	movs	r2, #0
 800f27c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f282:	2b40      	cmp	r3, #64	@ 0x40
 800f284:	d106      	bne.n	800f294 <HAL_SAI_Transmit_DMA+0xac>
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d102      	bne.n	800f294 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800f28e:	88fb      	ldrh	r3, [r7, #6]
 800f290:	61bb      	str	r3, [r7, #24]
 800f292:	e00a      	b.n	800f2aa <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f298:	2b80      	cmp	r3, #128	@ 0x80
 800f29a:	d803      	bhi.n	800f2a4 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800f29c:	88fb      	ldrh	r3, [r7, #6]
 800f29e:	005b      	lsls	r3, r3, #1
 800f2a0:	61bb      	str	r3, [r7, #24]
 800f2a2:	e002      	b.n	800f2aa <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800f2a4:	88fb      	ldrh	r3, [r7, #6]
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d02d      	beq.n	800f316 <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d021      	beq.n	800f30a <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	69ba      	ldr	r2, [r7, #24]
 800f2d2:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f103 021c 	add.w	r2, r3, #28
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7f7 ff52 	bl	80071a8 <HAL_DMAEx_List_Start_IT>
 800f304:	4603      	mov	r3, r0
 800f306:	77fb      	strb	r3, [r7, #31]
 800f308:	e014      	b.n	800f334 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2200      	movs	r2, #0
 800f30e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800f312:	2301      	movs	r3, #1
 800f314:	e05f      	b.n	800f3d6 <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f320:	4619      	mov	r1, r3
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	331c      	adds	r3, #28
 800f328:	461a      	mov	r2, r3
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	f7f6 ffaa 	bl	8006284 <HAL_DMA_Start_IT>
 800f330:	4603      	mov	r3, r0
 800f332:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800f334:	7ffb      	ldrb	r3, [r7, #31]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d005      	beq.n	800f346 <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2200      	movs	r2, #0
 800f33e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800f342:	2301      	movs	r3, #1
 800f344:	e047      	b.n	800f3d6 <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f346:	2100      	movs	r1, #0
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f000 fa6d 	bl	800f828 <SAI_InterruptFlag>
 800f34e:	4601      	mov	r1, r0
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	691a      	ldr	r2, [r3, #16]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	430a      	orrs	r2, r1
 800f35c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f36c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f36e:	e015      	b.n	800f39c <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f370:	f7f4 fa7c 	bl	800386c <HAL_GetTick>
 800f374:	4602      	mov	r2, r0
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f37e:	d90d      	bls.n	800f39c <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f386:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	2200      	movs	r2, #0
 800f394:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800f398:	2303      	movs	r3, #3
 800f39a:	e01c      	b.n	800f3d6 <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	695b      	ldr	r3, [r3, #20]
 800f3a2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d0e2      	beq.n	800f370 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d107      	bne.n	800f3c8 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f3c6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	e000      	b.n	800f3d6 <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800f3d4:	2302      	movs	r3, #2
  }
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3720      	adds	r7, #32
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	0800f96b 	.word	0x0800f96b
 800f3e4:	0800f90d 	.word	0x0800f90d
 800f3e8:	0800fa01 	.word	0x0800fa01

0800f3ec <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b086      	sub	sp, #24
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d002      	beq.n	800f406 <HAL_SAI_Receive_DMA+0x1a>
 800f400:	88fb      	ldrh	r3, [r7, #6]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d101      	bne.n	800f40a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800f406:	2301      	movs	r3, #1
 800f408:	e0c6      	b.n	800f598 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f410:	b2db      	uxtb	r3, r3
 800f412:	2b01      	cmp	r3, #1
 800f414:	f040 80bf 	bne.w	800f596 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d101      	bne.n	800f426 <HAL_SAI_Receive_DMA+0x3a>
 800f422:	2302      	movs	r3, #2
 800f424:	e0b8      	b.n	800f598 <HAL_SAI_Receive_DMA+0x1ac>
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2201      	movs	r2, #1
 800f42a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	68ba      	ldr	r2, [r7, #8]
 800f432:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	88fa      	ldrh	r2, [r7, #6]
 800f438:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	88fa      	ldrh	r2, [r7, #6]
 800f440:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2200      	movs	r2, #0
 800f448:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2222      	movs	r2, #34	@ 0x22
 800f450:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f45a:	4a51      	ldr	r2, [pc, #324]	@ (800f5a0 <HAL_SAI_Receive_DMA+0x1b4>)
 800f45c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f464:	4a4f      	ldr	r2, [pc, #316]	@ (800f5a4 <HAL_SAI_Receive_DMA+0x1b8>)
 800f466:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f46e:	4a4e      	ldr	r2, [pc, #312]	@ (800f5a8 <HAL_SAI_Receive_DMA+0x1bc>)
 800f470:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f478:	2200      	movs	r2, #0
 800f47a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f480:	2b40      	cmp	r3, #64	@ 0x40
 800f482:	d106      	bne.n	800f492 <HAL_SAI_Receive_DMA+0xa6>
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d102      	bne.n	800f492 <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800f48c:	88fb      	ldrh	r3, [r7, #6]
 800f48e:	613b      	str	r3, [r7, #16]
 800f490:	e00a      	b.n	800f4a8 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f496:	2b80      	cmp	r3, #128	@ 0x80
 800f498:	d803      	bhi.n	800f4a2 <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800f49a:	88fb      	ldrh	r3, [r7, #6]
 800f49c:	005b      	lsls	r3, r3, #1
 800f49e:	613b      	str	r3, [r7, #16]
 800f4a0:	e002      	b.n	800f4a8 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800f4a2:	88fb      	ldrh	r3, [r7, #6]
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d02d      	beq.n	800f514 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d021      	beq.n	800f508 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	693a      	ldr	r2, [r7, #16]
 800f4d0:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f103 021c 	add.w	r2, r3, #28
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7f7 fe53 	bl	80071a8 <HAL_DMAEx_List_Start_IT>
 800f502:	4603      	mov	r3, r0
 800f504:	75fb      	strb	r3, [r7, #23]
 800f506:	e014      	b.n	800f532 <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2200      	movs	r2, #0
 800f50c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800f510:	2301      	movs	r3, #1
 800f512:	e041      	b.n	800f598 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	331c      	adds	r3, #28
 800f520:	4619      	mov	r1, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f526:	461a      	mov	r2, r3
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	f7f6 feab 	bl	8006284 <HAL_DMA_Start_IT>
 800f52e:	4603      	mov	r3, r0
 800f530:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800f532:	7dfb      	ldrb	r3, [r7, #23]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d005      	beq.n	800f544 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2200      	movs	r2, #0
 800f53c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800f540:	2301      	movs	r3, #1
 800f542:	e029      	b.n	800f598 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f544:	2100      	movs	r1, #0
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f000 f96e 	bl	800f828 <SAI_InterruptFlag>
 800f54c:	4601      	mov	r1, r0
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	691a      	ldr	r2, [r3, #16]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	430a      	orrs	r2, r1
 800f55a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f56a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f576:	2b00      	cmp	r3, #0
 800f578:	d107      	bne.n	800f58a <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f588:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2200      	movs	r2, #0
 800f58e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800f592:	2300      	movs	r3, #0
 800f594:	e000      	b.n	800f598 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800f596:	2302      	movs	r3, #2
  }
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3718      	adds	r7, #24
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	0800f9e5 	.word	0x0800f9e5
 800f5a4:	0800f987 	.word	0x0800f987
 800f5a8:	0800fa01 	.word	0x0800fa01

0800f5ac <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800f5b4:	bf00      	nop
 800f5b6:	370c      	adds	r7, #12
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b087      	sub	sp, #28
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
 800f5cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d003      	beq.n	800f5ee <SAI_InitI2S+0x2e>
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	d103      	bne.n	800f5f6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	651a      	str	r2, [r3, #80]	@ 0x50
 800f5f4:	e002      	b.n	800f5fc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f602:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f60a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	2200      	movs	r2, #0
 800f610:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	683a      	ldr	r2, [r7, #0]
 800f616:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	f003 0301 	and.w	r3, r3, #1
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800f622:	2301      	movs	r3, #1
 800f624:	e077      	b.n	800f716 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d107      	bne.n	800f63c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2200      	movs	r2, #0
 800f630:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f638:	665a      	str	r2, [r3, #100]	@ 0x64
 800f63a:	e006      	b.n	800f64a <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f642:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2200      	movs	r2, #0
 800f648:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2b03      	cmp	r3, #3
 800f64e:	d84f      	bhi.n	800f6f0 <SAI_InitI2S+0x130>
 800f650:	a201      	add	r2, pc, #4	@ (adr r2, 800f658 <SAI_InitI2S+0x98>)
 800f652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f656:	bf00      	nop
 800f658:	0800f669 	.word	0x0800f669
 800f65c:	0800f68b 	.word	0x0800f68b
 800f660:	0800f6ad 	.word	0x0800f6ad
 800f664:	0800f6cf 	.word	0x0800f6cf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2280      	movs	r2, #128	@ 0x80
 800f66c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	085b      	lsrs	r3, r3, #1
 800f672:	015a      	lsls	r2, r3, #5
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	085b      	lsrs	r3, r3, #1
 800f67c:	011a      	lsls	r2, r3, #4
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2240      	movs	r2, #64	@ 0x40
 800f686:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f688:	e035      	b.n	800f6f6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2280      	movs	r2, #128	@ 0x80
 800f68e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	085b      	lsrs	r3, r3, #1
 800f694:	019a      	lsls	r2, r3, #6
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	085b      	lsrs	r3, r3, #1
 800f69e:	015a      	lsls	r2, r3, #5
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2280      	movs	r2, #128	@ 0x80
 800f6a8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f6aa:	e024      	b.n	800f6f6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	22c0      	movs	r2, #192	@ 0xc0
 800f6b0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	085b      	lsrs	r3, r3, #1
 800f6b6:	019a      	lsls	r2, r3, #6
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	085b      	lsrs	r3, r3, #1
 800f6c0:	015a      	lsls	r2, r3, #5
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2280      	movs	r2, #128	@ 0x80
 800f6ca:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f6cc:	e013      	b.n	800f6f6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	22e0      	movs	r2, #224	@ 0xe0
 800f6d2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	085b      	lsrs	r3, r3, #1
 800f6d8:	019a      	lsls	r2, r3, #6
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	085b      	lsrs	r3, r3, #1
 800f6e2:	015a      	lsls	r2, r3, #5
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2280      	movs	r2, #128	@ 0x80
 800f6ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f6ee:	e002      	b.n	800f6f6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	75fb      	strb	r3, [r7, #23]
      break;
 800f6f4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	2b02      	cmp	r3, #2
 800f6fa:	d10b      	bne.n	800f714 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d102      	bne.n	800f708 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2210      	movs	r2, #16
 800f706:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2b02      	cmp	r3, #2
 800f70c:	d102      	bne.n	800f714 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2208      	movs	r2, #8
 800f712:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800f714:	7dfb      	ldrb	r3, [r7, #23]
}
 800f716:	4618      	mov	r0, r3
 800f718:	371c      	adds	r7, #28
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop

0800f724 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f724:	b480      	push	{r7}
 800f726:	b087      	sub	sp, #28
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
 800f730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f732:	2300      	movs	r3, #0
 800f734:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2200      	movs	r2, #0
 800f740:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d003      	beq.n	800f752 <SAI_InitPCM+0x2e>
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	2b02      	cmp	r3, #2
 800f750:	d103      	bne.n	800f75a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2201      	movs	r2, #1
 800f756:	651a      	str	r2, [r3, #80]	@ 0x50
 800f758:	e002      	b.n	800f760 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2200      	movs	r2, #0
 800f75e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2200      	movs	r2, #0
 800f764:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f76c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f774:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2200      	movs	r2, #0
 800f77a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	683a      	ldr	r2, [r7, #0]
 800f780:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f788:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	2b04      	cmp	r3, #4
 800f78e:	d103      	bne.n	800f798 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2201      	movs	r2, #1
 800f794:	659a      	str	r2, [r3, #88]	@ 0x58
 800f796:	e002      	b.n	800f79e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	220d      	movs	r2, #13
 800f79c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2b03      	cmp	r3, #3
 800f7a2:	d837      	bhi.n	800f814 <SAI_InitPCM+0xf0>
 800f7a4:	a201      	add	r2, pc, #4	@ (adr r2, 800f7ac <SAI_InitPCM+0x88>)
 800f7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7aa:	bf00      	nop
 800f7ac:	0800f7bd 	.word	0x0800f7bd
 800f7b0:	0800f7d3 	.word	0x0800f7d3
 800f7b4:	0800f7e9 	.word	0x0800f7e9
 800f7b8:	0800f7ff 	.word	0x0800f7ff
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2280      	movs	r2, #128	@ 0x80
 800f7c0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	011a      	lsls	r2, r3, #4
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2240      	movs	r2, #64	@ 0x40
 800f7ce:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f7d0:	e023      	b.n	800f81a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2280      	movs	r2, #128	@ 0x80
 800f7d6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	015a      	lsls	r2, r3, #5
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2280      	movs	r2, #128	@ 0x80
 800f7e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f7e6:	e018      	b.n	800f81a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	22c0      	movs	r2, #192	@ 0xc0
 800f7ec:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	015a      	lsls	r2, r3, #5
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2280      	movs	r2, #128	@ 0x80
 800f7fa:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f7fc:	e00d      	b.n	800f81a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	22e0      	movs	r2, #224	@ 0xe0
 800f802:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	015a      	lsls	r2, r3, #5
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2280      	movs	r2, #128	@ 0x80
 800f810:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f812:	e002      	b.n	800f81a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800f814:	2301      	movs	r3, #1
 800f816:	75fb      	strb	r3, [r7, #23]
      break;
 800f818:	bf00      	nop
  }

  return status;
 800f81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	371c      	adds	r7, #28
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	460b      	mov	r3, r1
 800f832:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f834:	2301      	movs	r3, #1
 800f836:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f838:	78fb      	ldrb	r3, [r7, #3]
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d103      	bne.n	800f846 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f043 0308 	orr.w	r3, r3, #8
 800f844:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f84a:	2b08      	cmp	r3, #8
 800f84c:	d10b      	bne.n	800f866 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f852:	2b03      	cmp	r3, #3
 800f854:	d003      	beq.n	800f85e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	d103      	bne.n	800f866 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f043 0310 	orr.w	r3, r3, #16
 800f864:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	2b03      	cmp	r3, #3
 800f86c:	d003      	beq.n	800f876 <SAI_InterruptFlag+0x4e>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	2b02      	cmp	r3, #2
 800f874:	d104      	bne.n	800f880 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f87c:	60fb      	str	r3, [r7, #12]
 800f87e:	e003      	b.n	800f888 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f043 0304 	orr.w	r3, r3, #4
 800f886:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f888:	68fb      	ldr	r3, [r7, #12]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3714      	adds	r7, #20
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
	...

0800f898 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f8a0:	4b18      	ldr	r3, [pc, #96]	@ (800f904 <SAI_Disable+0x6c>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	4a18      	ldr	r2, [pc, #96]	@ (800f908 <SAI_Disable+0x70>)
 800f8a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8aa:	0b1b      	lsrs	r3, r3, #12
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f8c2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10a      	bne.n	800f8e0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f8d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800f8da:	2303      	movs	r3, #3
 800f8dc:	72fb      	strb	r3, [r7, #11]
      break;
 800f8de:	e009      	b.n	800f8f4 <SAI_Disable+0x5c>
    }
    count--;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d1e7      	bne.n	800f8c4 <SAI_Disable+0x2c>

  return status;
 800f8f4:	7afb      	ldrb	r3, [r7, #11]
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3714      	adds	r7, #20
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr
 800f902:	bf00      	nop
 800f904:	20000028 	.word	0x20000028
 800f908:	95cbec1b 	.word	0x95cbec1b

0800f90c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f918:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f91e:	2b81      	cmp	r3, #129	@ 0x81
 800f920:	d01c      	beq.n	800f95c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2200      	movs	r2, #0
 800f926:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f938:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f93a:	2100      	movs	r1, #0
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f7ff ff73 	bl	800f828 <SAI_InterruptFlag>
 800f942:	4603      	mov	r3, r0
 800f944:	43d9      	mvns	r1, r3
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	691a      	ldr	r2, [r3, #16]
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	400a      	ands	r2, r1
 800f952:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2201      	movs	r2, #1
 800f958:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f7f2 fce3 	bl	8002328 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f962:	bf00      	nop
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}

0800f96a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f96a:	b580      	push	{r7, lr}
 800f96c:	b084      	sub	sp, #16
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f976:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7f2 fcbf 	bl	80022fc <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f97e:	bf00      	nop
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b084      	sub	sp, #16
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f992:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f998:	2b81      	cmp	r3, #129	@ 0x81
 800f99a:	d01c      	beq.n	800f9d6 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f9aa:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f7ff ff36 	bl	800f828 <SAI_InterruptFlag>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	43d9      	mvns	r1, r3
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	691a      	ldr	r2, [r3, #16]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	400a      	ands	r2, r1
 800f9cc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f9d6:	68f8      	ldr	r0, [r7, #12]
 800f9d8:	f7f2 fc7a 	bl	80022d0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f9dc:	bf00      	nop
 800f9de:	3710      	adds	r7, #16
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f9f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f7f2 fc56 	bl	80022a4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f9f8:	bf00      	nop
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa0c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800fa2c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f7ff ff32 	bl	800f898 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2201      	movs	r2, #1
 800fa38:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f7ff fdb1 	bl	800f5ac <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fa4a:	bf00      	nop
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b082      	sub	sp, #8
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d101      	bne.n	800fa64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa60:	2301      	movs	r3, #1
 800fa62:	e049      	b.n	800faf8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d106      	bne.n	800fa7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2200      	movs	r2, #0
 800fa74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7f3 fa0b 	bl	8002e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2202      	movs	r2, #2
 800fa82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	3304      	adds	r3, #4
 800fa8e:	4619      	mov	r1, r3
 800fa90:	4610      	mov	r0, r2
 800fa92:	f000 fb3b 	bl	801010c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2201      	movs	r2, #1
 800fab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2201      	movs	r2, #1
 800faba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2201      	movs	r2, #1
 800fac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2201      	movs	r2, #1
 800faca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2201      	movs	r2, #1
 800fad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2201      	movs	r2, #1
 800fada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2201      	movs	r2, #1
 800fae2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2201      	movs	r2, #1
 800faea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b085      	sub	sp, #20
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d001      	beq.n	800fb18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800fb14:	2301      	movs	r3, #1
 800fb16:	e06a      	b.n	800fbee <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2202      	movs	r2, #2
 800fb1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4a35      	ldr	r2, [pc, #212]	@ (800fbfc <HAL_TIM_Base_Start+0xfc>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d040      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4a34      	ldr	r2, [pc, #208]	@ (800fc00 <HAL_TIM_Base_Start+0x100>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d03b      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb3c:	d036      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fb46:	d031      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a2d      	ldr	r2, [pc, #180]	@ (800fc04 <HAL_TIM_Base_Start+0x104>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d02c      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a2c      	ldr	r2, [pc, #176]	@ (800fc08 <HAL_TIM_Base_Start+0x108>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d027      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a2a      	ldr	r2, [pc, #168]	@ (800fc0c <HAL_TIM_Base_Start+0x10c>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d022      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a29      	ldr	r2, [pc, #164]	@ (800fc10 <HAL_TIM_Base_Start+0x110>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d01d      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a27      	ldr	r2, [pc, #156]	@ (800fc14 <HAL_TIM_Base_Start+0x114>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d018      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a26      	ldr	r2, [pc, #152]	@ (800fc18 <HAL_TIM_Base_Start+0x118>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d013      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a24      	ldr	r2, [pc, #144]	@ (800fc1c <HAL_TIM_Base_Start+0x11c>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d00e      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4a23      	ldr	r2, [pc, #140]	@ (800fc20 <HAL_TIM_Base_Start+0x120>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d009      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a21      	ldr	r2, [pc, #132]	@ (800fc24 <HAL_TIM_Base_Start+0x124>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d004      	beq.n	800fbac <HAL_TIM_Base_Start+0xac>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a20      	ldr	r2, [pc, #128]	@ (800fc28 <HAL_TIM_Base_Start+0x128>)
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	d115      	bne.n	800fbd8 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	689a      	ldr	r2, [r3, #8]
 800fbb2:	4b1e      	ldr	r3, [pc, #120]	@ (800fc2c <HAL_TIM_Base_Start+0x12c>)
 800fbb4:	4013      	ands	r3, r2
 800fbb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2b06      	cmp	r3, #6
 800fbbc:	d015      	beq.n	800fbea <HAL_TIM_Base_Start+0xea>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbc4:	d011      	beq.n	800fbea <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f042 0201 	orr.w	r2, r2, #1
 800fbd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbd6:	e008      	b.n	800fbea <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f042 0201 	orr.w	r2, r2, #1
 800fbe6:	601a      	str	r2, [r3, #0]
 800fbe8:	e000      	b.n	800fbec <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3714      	adds	r7, #20
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	40012c00 	.word	0x40012c00
 800fc00:	50012c00 	.word	0x50012c00
 800fc04:	40000400 	.word	0x40000400
 800fc08:	50000400 	.word	0x50000400
 800fc0c:	40000800 	.word	0x40000800
 800fc10:	50000800 	.word	0x50000800
 800fc14:	40000c00 	.word	0x40000c00
 800fc18:	50000c00 	.word	0x50000c00
 800fc1c:	40013400 	.word	0x40013400
 800fc20:	50013400 	.word	0x50013400
 800fc24:	40014000 	.word	0x40014000
 800fc28:	50014000 	.word	0x50014000
 800fc2c:	00010007 	.word	0x00010007

0800fc30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d101      	bne.n	800fc42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	e049      	b.n	800fcd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d106      	bne.n	800fc5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2200      	movs	r2, #0
 800fc52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f7f3 f8fa 	bl	8002e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2202      	movs	r2, #2
 800fc60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681a      	ldr	r2, [r3, #0]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	3304      	adds	r3, #4
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	4610      	mov	r0, r2
 800fc70:	f000 fa4c 	bl	801010c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2201      	movs	r2, #1
 800fc78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2201      	movs	r2, #1
 800fc88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2201      	movs	r2, #1
 800fc90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2201      	movs	r2, #1
 800fc98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2201      	movs	r2, #1
 800fca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2201      	movs	r2, #1
 800fcb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2201      	movs	r2, #1
 800fcd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fcd4:	2300      	movs	r3, #0
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3708      	adds	r7, #8
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
	...

0800fce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b086      	sub	sp, #24
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fcec:	2300      	movs	r3, #0
 800fcee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fcf6:	2b01      	cmp	r3, #1
 800fcf8:	d101      	bne.n	800fcfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fcfa:	2302      	movs	r3, #2
 800fcfc:	e0ff      	b.n	800fefe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2201      	movs	r2, #1
 800fd02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2b14      	cmp	r3, #20
 800fd0a:	f200 80f0 	bhi.w	800feee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fd0e:	a201      	add	r2, pc, #4	@ (adr r2, 800fd14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd14:	0800fd69 	.word	0x0800fd69
 800fd18:	0800feef 	.word	0x0800feef
 800fd1c:	0800feef 	.word	0x0800feef
 800fd20:	0800feef 	.word	0x0800feef
 800fd24:	0800fda9 	.word	0x0800fda9
 800fd28:	0800feef 	.word	0x0800feef
 800fd2c:	0800feef 	.word	0x0800feef
 800fd30:	0800feef 	.word	0x0800feef
 800fd34:	0800fdeb 	.word	0x0800fdeb
 800fd38:	0800feef 	.word	0x0800feef
 800fd3c:	0800feef 	.word	0x0800feef
 800fd40:	0800feef 	.word	0x0800feef
 800fd44:	0800fe2b 	.word	0x0800fe2b
 800fd48:	0800feef 	.word	0x0800feef
 800fd4c:	0800feef 	.word	0x0800feef
 800fd50:	0800feef 	.word	0x0800feef
 800fd54:	0800fe6d 	.word	0x0800fe6d
 800fd58:	0800feef 	.word	0x0800feef
 800fd5c:	0800feef 	.word	0x0800feef
 800fd60:	0800feef 	.word	0x0800feef
 800fd64:	0800fead 	.word	0x0800fead
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	68b9      	ldr	r1, [r7, #8]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f000 fad2 	bl	8010318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	699a      	ldr	r2, [r3, #24]
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f042 0208 	orr.w	r2, r2, #8
 800fd82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	699a      	ldr	r2, [r3, #24]
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f022 0204 	bic.w	r2, r2, #4
 800fd92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	6999      	ldr	r1, [r3, #24]
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	691a      	ldr	r2, [r3, #16]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	430a      	orrs	r2, r1
 800fda4:	619a      	str	r2, [r3, #24]
      break;
 800fda6:	e0a5      	b.n	800fef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	68b9      	ldr	r1, [r7, #8]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f000 fb74 	bl	801049c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	699a      	ldr	r2, [r3, #24]
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fdc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	699a      	ldr	r2, [r3, #24]
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fdd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	6999      	ldr	r1, [r3, #24]
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	691b      	ldr	r3, [r3, #16]
 800fdde:	021a      	lsls	r2, r3, #8
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	430a      	orrs	r2, r1
 800fde6:	619a      	str	r2, [r3, #24]
      break;
 800fde8:	e084      	b.n	800fef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	68b9      	ldr	r1, [r7, #8]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f000 fc03 	bl	80105fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	69da      	ldr	r2, [r3, #28]
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f042 0208 	orr.w	r2, r2, #8
 800fe04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	69da      	ldr	r2, [r3, #28]
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f022 0204 	bic.w	r2, r2, #4
 800fe14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	69d9      	ldr	r1, [r3, #28]
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	691a      	ldr	r2, [r3, #16]
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	430a      	orrs	r2, r1
 800fe26:	61da      	str	r2, [r3, #28]
      break;
 800fe28:	e064      	b.n	800fef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	68b9      	ldr	r1, [r7, #8]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f000 fc91 	bl	8010758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	69da      	ldr	r2, [r3, #28]
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fe44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	69da      	ldr	r2, [r3, #28]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fe54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	69d9      	ldr	r1, [r3, #28]
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	691b      	ldr	r3, [r3, #16]
 800fe60:	021a      	lsls	r2, r3, #8
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	430a      	orrs	r2, r1
 800fe68:	61da      	str	r2, [r3, #28]
      break;
 800fe6a:	e043      	b.n	800fef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	68b9      	ldr	r1, [r7, #8]
 800fe72:	4618      	mov	r0, r3
 800fe74:	f000 fd20 	bl	80108b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f042 0208 	orr.w	r2, r2, #8
 800fe86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f022 0204 	bic.w	r2, r2, #4
 800fe96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	691a      	ldr	r2, [r3, #16]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	430a      	orrs	r2, r1
 800fea8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800feaa:	e023      	b.n	800fef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	68b9      	ldr	r1, [r7, #8]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f000 fd82 	bl	80109bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fec6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fed6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	691b      	ldr	r3, [r3, #16]
 800fee2:	021a      	lsls	r2, r3, #8
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	430a      	orrs	r2, r1
 800feea:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800feec:	e002      	b.n	800fef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800feee:	2301      	movs	r3, #1
 800fef0:	75fb      	strb	r3, [r7, #23]
      break;
 800fef2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2200      	movs	r2, #0
 800fef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fefc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3718      	adds	r7, #24
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop

0800ff08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ff12:	2300      	movs	r3, #0
 800ff14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d101      	bne.n	800ff24 <HAL_TIM_ConfigClockSource+0x1c>
 800ff20:	2302      	movs	r3, #2
 800ff22:	e0e6      	b.n	80100f2 <HAL_TIM_ConfigClockSource+0x1ea>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2201      	movs	r2, #1
 800ff28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2202      	movs	r2, #2
 800ff30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	689b      	ldr	r3, [r3, #8]
 800ff3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ff42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ff46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ff4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	68ba      	ldr	r2, [r7, #8]
 800ff56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4a67      	ldr	r2, [pc, #412]	@ (80100fc <HAL_TIM_ConfigClockSource+0x1f4>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	f000 80b1 	beq.w	80100c6 <HAL_TIM_ConfigClockSource+0x1be>
 800ff64:	4a65      	ldr	r2, [pc, #404]	@ (80100fc <HAL_TIM_ConfigClockSource+0x1f4>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	f200 80b6 	bhi.w	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ff6c:	4a64      	ldr	r2, [pc, #400]	@ (8010100 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	f000 80a9 	beq.w	80100c6 <HAL_TIM_ConfigClockSource+0x1be>
 800ff74:	4a62      	ldr	r2, [pc, #392]	@ (8010100 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	f200 80ae 	bhi.w	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ff7c:	4a61      	ldr	r2, [pc, #388]	@ (8010104 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	f000 80a1 	beq.w	80100c6 <HAL_TIM_ConfigClockSource+0x1be>
 800ff84:	4a5f      	ldr	r2, [pc, #380]	@ (8010104 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	f200 80a6 	bhi.w	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ff8c:	4a5e      	ldr	r2, [pc, #376]	@ (8010108 <HAL_TIM_ConfigClockSource+0x200>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	f000 8099 	beq.w	80100c6 <HAL_TIM_ConfigClockSource+0x1be>
 800ff94:	4a5c      	ldr	r2, [pc, #368]	@ (8010108 <HAL_TIM_ConfigClockSource+0x200>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	f200 809e 	bhi.w	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ff9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ffa0:	f000 8091 	beq.w	80100c6 <HAL_TIM_ConfigClockSource+0x1be>
 800ffa4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ffa8:	f200 8096 	bhi.w	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ffb0:	f000 8089 	beq.w	80100c6 <HAL_TIM_ConfigClockSource+0x1be>
 800ffb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ffb8:	f200 808e 	bhi.w	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ffc0:	d03e      	beq.n	8010040 <HAL_TIM_ConfigClockSource+0x138>
 800ffc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ffc6:	f200 8087 	bhi.w	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ffce:	f000 8086 	beq.w	80100de <HAL_TIM_ConfigClockSource+0x1d6>
 800ffd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ffd6:	d87f      	bhi.n	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffd8:	2b70      	cmp	r3, #112	@ 0x70
 800ffda:	d01a      	beq.n	8010012 <HAL_TIM_ConfigClockSource+0x10a>
 800ffdc:	2b70      	cmp	r3, #112	@ 0x70
 800ffde:	d87b      	bhi.n	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffe0:	2b60      	cmp	r3, #96	@ 0x60
 800ffe2:	d050      	beq.n	8010086 <HAL_TIM_ConfigClockSource+0x17e>
 800ffe4:	2b60      	cmp	r3, #96	@ 0x60
 800ffe6:	d877      	bhi.n	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffe8:	2b50      	cmp	r3, #80	@ 0x50
 800ffea:	d03c      	beq.n	8010066 <HAL_TIM_ConfigClockSource+0x15e>
 800ffec:	2b50      	cmp	r3, #80	@ 0x50
 800ffee:	d873      	bhi.n	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800fff0:	2b40      	cmp	r3, #64	@ 0x40
 800fff2:	d058      	beq.n	80100a6 <HAL_TIM_ConfigClockSource+0x19e>
 800fff4:	2b40      	cmp	r3, #64	@ 0x40
 800fff6:	d86f      	bhi.n	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800fff8:	2b30      	cmp	r3, #48	@ 0x30
 800fffa:	d064      	beq.n	80100c6 <HAL_TIM_ConfigClockSource+0x1be>
 800fffc:	2b30      	cmp	r3, #48	@ 0x30
 800fffe:	d86b      	bhi.n	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010000:	2b20      	cmp	r3, #32
 8010002:	d060      	beq.n	80100c6 <HAL_TIM_ConfigClockSource+0x1be>
 8010004:	2b20      	cmp	r3, #32
 8010006:	d867      	bhi.n	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
 8010008:	2b00      	cmp	r3, #0
 801000a:	d05c      	beq.n	80100c6 <HAL_TIM_ConfigClockSource+0x1be>
 801000c:	2b10      	cmp	r3, #16
 801000e:	d05a      	beq.n	80100c6 <HAL_TIM_ConfigClockSource+0x1be>
 8010010:	e062      	b.n	80100d8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010022:	f000 fdcb 	bl	8010bbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	689b      	ldr	r3, [r3, #8]
 801002c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	68ba      	ldr	r2, [r7, #8]
 801003c:	609a      	str	r2, [r3, #8]
      break;
 801003e:	e04f      	b.n	80100e0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010050:	f000 fdb4 	bl	8010bbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	689a      	ldr	r2, [r3, #8]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010062:	609a      	str	r2, [r3, #8]
      break;
 8010064:	e03c      	b.n	80100e0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010072:	461a      	mov	r2, r3
 8010074:	f000 fd26 	bl	8010ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2150      	movs	r1, #80	@ 0x50
 801007e:	4618      	mov	r0, r3
 8010080:	f000 fd7f 	bl	8010b82 <TIM_ITRx_SetConfig>
      break;
 8010084:	e02c      	b.n	80100e0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010092:	461a      	mov	r2, r3
 8010094:	f000 fd45 	bl	8010b22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2160      	movs	r1, #96	@ 0x60
 801009e:	4618      	mov	r0, r3
 80100a0:	f000 fd6f 	bl	8010b82 <TIM_ITRx_SetConfig>
      break;
 80100a4:	e01c      	b.n	80100e0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80100b2:	461a      	mov	r2, r3
 80100b4:	f000 fd06 	bl	8010ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2140      	movs	r1, #64	@ 0x40
 80100be:	4618      	mov	r0, r3
 80100c0:	f000 fd5f 	bl	8010b82 <TIM_ITRx_SetConfig>
      break;
 80100c4:	e00c      	b.n	80100e0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	4619      	mov	r1, r3
 80100d0:	4610      	mov	r0, r2
 80100d2:	f000 fd56 	bl	8010b82 <TIM_ITRx_SetConfig>
      break;
 80100d6:	e003      	b.n	80100e0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80100d8:	2301      	movs	r3, #1
 80100da:	73fb      	strb	r3, [r7, #15]
      break;
 80100dc:	e000      	b.n	80100e0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80100de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2201      	movs	r2, #1
 80100e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2200      	movs	r2, #0
 80100ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80100f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3710      	adds	r7, #16
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	00100070 	.word	0x00100070
 8010100:	00100040 	.word	0x00100040
 8010104:	00100030 	.word	0x00100030
 8010108:	00100020 	.word	0x00100020

0801010c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801010c:	b480      	push	{r7}
 801010e:	b085      	sub	sp, #20
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	4a6e      	ldr	r2, [pc, #440]	@ (80102d8 <TIM_Base_SetConfig+0x1cc>)
 8010120:	4293      	cmp	r3, r2
 8010122:	d02b      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	4a6d      	ldr	r2, [pc, #436]	@ (80102dc <TIM_Base_SetConfig+0x1d0>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d027      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010132:	d023      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801013a:	d01f      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4a68      	ldr	r2, [pc, #416]	@ (80102e0 <TIM_Base_SetConfig+0x1d4>)
 8010140:	4293      	cmp	r3, r2
 8010142:	d01b      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4a67      	ldr	r2, [pc, #412]	@ (80102e4 <TIM_Base_SetConfig+0x1d8>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d017      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4a66      	ldr	r2, [pc, #408]	@ (80102e8 <TIM_Base_SetConfig+0x1dc>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d013      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a65      	ldr	r2, [pc, #404]	@ (80102ec <TIM_Base_SetConfig+0x1e0>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d00f      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a64      	ldr	r2, [pc, #400]	@ (80102f0 <TIM_Base_SetConfig+0x1e4>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d00b      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4a63      	ldr	r2, [pc, #396]	@ (80102f4 <TIM_Base_SetConfig+0x1e8>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d007      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4a62      	ldr	r2, [pc, #392]	@ (80102f8 <TIM_Base_SetConfig+0x1ec>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d003      	beq.n	801017c <TIM_Base_SetConfig+0x70>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	4a61      	ldr	r2, [pc, #388]	@ (80102fc <TIM_Base_SetConfig+0x1f0>)
 8010178:	4293      	cmp	r3, r2
 801017a:	d108      	bne.n	801018e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	68fa      	ldr	r2, [r7, #12]
 801018a:	4313      	orrs	r3, r2
 801018c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4a51      	ldr	r2, [pc, #324]	@ (80102d8 <TIM_Base_SetConfig+0x1cc>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d043      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4a50      	ldr	r2, [pc, #320]	@ (80102dc <TIM_Base_SetConfig+0x1d0>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d03f      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101a4:	d03b      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80101ac:	d037      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4a4b      	ldr	r2, [pc, #300]	@ (80102e0 <TIM_Base_SetConfig+0x1d4>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d033      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	4a4a      	ldr	r2, [pc, #296]	@ (80102e4 <TIM_Base_SetConfig+0x1d8>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d02f      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4a49      	ldr	r2, [pc, #292]	@ (80102e8 <TIM_Base_SetConfig+0x1dc>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d02b      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4a48      	ldr	r2, [pc, #288]	@ (80102ec <TIM_Base_SetConfig+0x1e0>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d027      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4a47      	ldr	r2, [pc, #284]	@ (80102f0 <TIM_Base_SetConfig+0x1e4>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d023      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4a46      	ldr	r2, [pc, #280]	@ (80102f4 <TIM_Base_SetConfig+0x1e8>)
 80101da:	4293      	cmp	r3, r2
 80101dc:	d01f      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	4a45      	ldr	r2, [pc, #276]	@ (80102f8 <TIM_Base_SetConfig+0x1ec>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d01b      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4a44      	ldr	r2, [pc, #272]	@ (80102fc <TIM_Base_SetConfig+0x1f0>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d017      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4a43      	ldr	r2, [pc, #268]	@ (8010300 <TIM_Base_SetConfig+0x1f4>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d013      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4a42      	ldr	r2, [pc, #264]	@ (8010304 <TIM_Base_SetConfig+0x1f8>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d00f      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4a41      	ldr	r2, [pc, #260]	@ (8010308 <TIM_Base_SetConfig+0x1fc>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d00b      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4a40      	ldr	r2, [pc, #256]	@ (801030c <TIM_Base_SetConfig+0x200>)
 801020a:	4293      	cmp	r3, r2
 801020c:	d007      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4a3f      	ldr	r2, [pc, #252]	@ (8010310 <TIM_Base_SetConfig+0x204>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d003      	beq.n	801021e <TIM_Base_SetConfig+0x112>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4a3e      	ldr	r2, [pc, #248]	@ (8010314 <TIM_Base_SetConfig+0x208>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d108      	bne.n	8010230 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	68db      	ldr	r3, [r3, #12]
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	4313      	orrs	r3, r2
 801022e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	695b      	ldr	r3, [r3, #20]
 801023a:	4313      	orrs	r3, r2
 801023c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	68fa      	ldr	r2, [r7, #12]
 8010242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	689a      	ldr	r2, [r3, #8]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	4a20      	ldr	r2, [pc, #128]	@ (80102d8 <TIM_Base_SetConfig+0x1cc>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d023      	beq.n	80102a4 <TIM_Base_SetConfig+0x198>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4a1f      	ldr	r2, [pc, #124]	@ (80102dc <TIM_Base_SetConfig+0x1d0>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d01f      	beq.n	80102a4 <TIM_Base_SetConfig+0x198>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	4a24      	ldr	r2, [pc, #144]	@ (80102f8 <TIM_Base_SetConfig+0x1ec>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d01b      	beq.n	80102a4 <TIM_Base_SetConfig+0x198>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	4a23      	ldr	r2, [pc, #140]	@ (80102fc <TIM_Base_SetConfig+0x1f0>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d017      	beq.n	80102a4 <TIM_Base_SetConfig+0x198>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	4a22      	ldr	r2, [pc, #136]	@ (8010300 <TIM_Base_SetConfig+0x1f4>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d013      	beq.n	80102a4 <TIM_Base_SetConfig+0x198>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	4a21      	ldr	r2, [pc, #132]	@ (8010304 <TIM_Base_SetConfig+0x1f8>)
 8010280:	4293      	cmp	r3, r2
 8010282:	d00f      	beq.n	80102a4 <TIM_Base_SetConfig+0x198>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	4a20      	ldr	r2, [pc, #128]	@ (8010308 <TIM_Base_SetConfig+0x1fc>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d00b      	beq.n	80102a4 <TIM_Base_SetConfig+0x198>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4a1f      	ldr	r2, [pc, #124]	@ (801030c <TIM_Base_SetConfig+0x200>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d007      	beq.n	80102a4 <TIM_Base_SetConfig+0x198>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4a1e      	ldr	r2, [pc, #120]	@ (8010310 <TIM_Base_SetConfig+0x204>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d003      	beq.n	80102a4 <TIM_Base_SetConfig+0x198>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4a1d      	ldr	r2, [pc, #116]	@ (8010314 <TIM_Base_SetConfig+0x208>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d103      	bne.n	80102ac <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	691a      	ldr	r2, [r3, #16]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2201      	movs	r2, #1
 80102b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	691b      	ldr	r3, [r3, #16]
 80102b6:	f003 0301 	and.w	r3, r3, #1
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d105      	bne.n	80102ca <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	691b      	ldr	r3, [r3, #16]
 80102c2:	f023 0201 	bic.w	r2, r3, #1
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	611a      	str	r2, [r3, #16]
  }
}
 80102ca:	bf00      	nop
 80102cc:	3714      	adds	r7, #20
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	40012c00 	.word	0x40012c00
 80102dc:	50012c00 	.word	0x50012c00
 80102e0:	40000400 	.word	0x40000400
 80102e4:	50000400 	.word	0x50000400
 80102e8:	40000800 	.word	0x40000800
 80102ec:	50000800 	.word	0x50000800
 80102f0:	40000c00 	.word	0x40000c00
 80102f4:	50000c00 	.word	0x50000c00
 80102f8:	40013400 	.word	0x40013400
 80102fc:	50013400 	.word	0x50013400
 8010300:	40014000 	.word	0x40014000
 8010304:	50014000 	.word	0x50014000
 8010308:	40014400 	.word	0x40014400
 801030c:	50014400 	.word	0x50014400
 8010310:	40014800 	.word	0x40014800
 8010314:	50014800 	.word	0x50014800

08010318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010318:	b480      	push	{r7}
 801031a:	b087      	sub	sp, #28
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6a1b      	ldr	r3, [r3, #32]
 8010326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6a1b      	ldr	r3, [r3, #32]
 801032c:	f023 0201 	bic.w	r2, r3, #1
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	699b      	ldr	r3, [r3, #24]
 801033e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801034a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f023 0303 	bic.w	r3, r3, #3
 8010352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	68fa      	ldr	r2, [r7, #12]
 801035a:	4313      	orrs	r3, r2
 801035c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	f023 0302 	bic.w	r3, r3, #2
 8010364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	689b      	ldr	r3, [r3, #8]
 801036a:	697a      	ldr	r2, [r7, #20]
 801036c:	4313      	orrs	r3, r2
 801036e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4a40      	ldr	r2, [pc, #256]	@ (8010474 <TIM_OC1_SetConfig+0x15c>)
 8010374:	4293      	cmp	r3, r2
 8010376:	d023      	beq.n	80103c0 <TIM_OC1_SetConfig+0xa8>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	4a3f      	ldr	r2, [pc, #252]	@ (8010478 <TIM_OC1_SetConfig+0x160>)
 801037c:	4293      	cmp	r3, r2
 801037e:	d01f      	beq.n	80103c0 <TIM_OC1_SetConfig+0xa8>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4a3e      	ldr	r2, [pc, #248]	@ (801047c <TIM_OC1_SetConfig+0x164>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d01b      	beq.n	80103c0 <TIM_OC1_SetConfig+0xa8>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4a3d      	ldr	r2, [pc, #244]	@ (8010480 <TIM_OC1_SetConfig+0x168>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d017      	beq.n	80103c0 <TIM_OC1_SetConfig+0xa8>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4a3c      	ldr	r2, [pc, #240]	@ (8010484 <TIM_OC1_SetConfig+0x16c>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d013      	beq.n	80103c0 <TIM_OC1_SetConfig+0xa8>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4a3b      	ldr	r2, [pc, #236]	@ (8010488 <TIM_OC1_SetConfig+0x170>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d00f      	beq.n	80103c0 <TIM_OC1_SetConfig+0xa8>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a3a      	ldr	r2, [pc, #232]	@ (801048c <TIM_OC1_SetConfig+0x174>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d00b      	beq.n	80103c0 <TIM_OC1_SetConfig+0xa8>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4a39      	ldr	r2, [pc, #228]	@ (8010490 <TIM_OC1_SetConfig+0x178>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d007      	beq.n	80103c0 <TIM_OC1_SetConfig+0xa8>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4a38      	ldr	r2, [pc, #224]	@ (8010494 <TIM_OC1_SetConfig+0x17c>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d003      	beq.n	80103c0 <TIM_OC1_SetConfig+0xa8>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a37      	ldr	r2, [pc, #220]	@ (8010498 <TIM_OC1_SetConfig+0x180>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d10c      	bne.n	80103da <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	f023 0308 	bic.w	r3, r3, #8
 80103c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	68db      	ldr	r3, [r3, #12]
 80103cc:	697a      	ldr	r2, [r7, #20]
 80103ce:	4313      	orrs	r3, r2
 80103d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	f023 0304 	bic.w	r3, r3, #4
 80103d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4a25      	ldr	r2, [pc, #148]	@ (8010474 <TIM_OC1_SetConfig+0x15c>)
 80103de:	4293      	cmp	r3, r2
 80103e0:	d023      	beq.n	801042a <TIM_OC1_SetConfig+0x112>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4a24      	ldr	r2, [pc, #144]	@ (8010478 <TIM_OC1_SetConfig+0x160>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d01f      	beq.n	801042a <TIM_OC1_SetConfig+0x112>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4a23      	ldr	r2, [pc, #140]	@ (801047c <TIM_OC1_SetConfig+0x164>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d01b      	beq.n	801042a <TIM_OC1_SetConfig+0x112>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	4a22      	ldr	r2, [pc, #136]	@ (8010480 <TIM_OC1_SetConfig+0x168>)
 80103f6:	4293      	cmp	r3, r2
 80103f8:	d017      	beq.n	801042a <TIM_OC1_SetConfig+0x112>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4a21      	ldr	r2, [pc, #132]	@ (8010484 <TIM_OC1_SetConfig+0x16c>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d013      	beq.n	801042a <TIM_OC1_SetConfig+0x112>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4a20      	ldr	r2, [pc, #128]	@ (8010488 <TIM_OC1_SetConfig+0x170>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d00f      	beq.n	801042a <TIM_OC1_SetConfig+0x112>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4a1f      	ldr	r2, [pc, #124]	@ (801048c <TIM_OC1_SetConfig+0x174>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d00b      	beq.n	801042a <TIM_OC1_SetConfig+0x112>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4a1e      	ldr	r2, [pc, #120]	@ (8010490 <TIM_OC1_SetConfig+0x178>)
 8010416:	4293      	cmp	r3, r2
 8010418:	d007      	beq.n	801042a <TIM_OC1_SetConfig+0x112>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4a1d      	ldr	r2, [pc, #116]	@ (8010494 <TIM_OC1_SetConfig+0x17c>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d003      	beq.n	801042a <TIM_OC1_SetConfig+0x112>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	4a1c      	ldr	r2, [pc, #112]	@ (8010498 <TIM_OC1_SetConfig+0x180>)
 8010426:	4293      	cmp	r3, r2
 8010428:	d111      	bne.n	801044e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	695b      	ldr	r3, [r3, #20]
 801043e:	693a      	ldr	r2, [r7, #16]
 8010440:	4313      	orrs	r3, r2
 8010442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	699b      	ldr	r3, [r3, #24]
 8010448:	693a      	ldr	r2, [r7, #16]
 801044a:	4313      	orrs	r3, r2
 801044c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	693a      	ldr	r2, [r7, #16]
 8010452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	68fa      	ldr	r2, [r7, #12]
 8010458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	685a      	ldr	r2, [r3, #4]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	697a      	ldr	r2, [r7, #20]
 8010466:	621a      	str	r2, [r3, #32]
}
 8010468:	bf00      	nop
 801046a:	371c      	adds	r7, #28
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr
 8010474:	40012c00 	.word	0x40012c00
 8010478:	50012c00 	.word	0x50012c00
 801047c:	40013400 	.word	0x40013400
 8010480:	50013400 	.word	0x50013400
 8010484:	40014000 	.word	0x40014000
 8010488:	50014000 	.word	0x50014000
 801048c:	40014400 	.word	0x40014400
 8010490:	50014400 	.word	0x50014400
 8010494:	40014800 	.word	0x40014800
 8010498:	50014800 	.word	0x50014800

0801049c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801049c:	b480      	push	{r7}
 801049e:	b087      	sub	sp, #28
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6a1b      	ldr	r3, [r3, #32]
 80104aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6a1b      	ldr	r3, [r3, #32]
 80104b0:	f023 0210 	bic.w	r2, r3, #16
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	699b      	ldr	r3, [r3, #24]
 80104c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80104ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80104d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	021b      	lsls	r3, r3, #8
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	4313      	orrs	r3, r2
 80104e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	f023 0320 	bic.w	r3, r3, #32
 80104ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	689b      	ldr	r3, [r3, #8]
 80104f0:	011b      	lsls	r3, r3, #4
 80104f2:	697a      	ldr	r2, [r7, #20]
 80104f4:	4313      	orrs	r3, r2
 80104f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4a36      	ldr	r2, [pc, #216]	@ (80105d4 <TIM_OC2_SetConfig+0x138>)
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d00b      	beq.n	8010518 <TIM_OC2_SetConfig+0x7c>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	4a35      	ldr	r2, [pc, #212]	@ (80105d8 <TIM_OC2_SetConfig+0x13c>)
 8010504:	4293      	cmp	r3, r2
 8010506:	d007      	beq.n	8010518 <TIM_OC2_SetConfig+0x7c>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	4a34      	ldr	r2, [pc, #208]	@ (80105dc <TIM_OC2_SetConfig+0x140>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d003      	beq.n	8010518 <TIM_OC2_SetConfig+0x7c>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	4a33      	ldr	r2, [pc, #204]	@ (80105e0 <TIM_OC2_SetConfig+0x144>)
 8010514:	4293      	cmp	r3, r2
 8010516:	d10d      	bne.n	8010534 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801051e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	68db      	ldr	r3, [r3, #12]
 8010524:	011b      	lsls	r3, r3, #4
 8010526:	697a      	ldr	r2, [r7, #20]
 8010528:	4313      	orrs	r3, r2
 801052a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4a27      	ldr	r2, [pc, #156]	@ (80105d4 <TIM_OC2_SetConfig+0x138>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d023      	beq.n	8010584 <TIM_OC2_SetConfig+0xe8>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	4a26      	ldr	r2, [pc, #152]	@ (80105d8 <TIM_OC2_SetConfig+0x13c>)
 8010540:	4293      	cmp	r3, r2
 8010542:	d01f      	beq.n	8010584 <TIM_OC2_SetConfig+0xe8>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	4a25      	ldr	r2, [pc, #148]	@ (80105dc <TIM_OC2_SetConfig+0x140>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d01b      	beq.n	8010584 <TIM_OC2_SetConfig+0xe8>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4a24      	ldr	r2, [pc, #144]	@ (80105e0 <TIM_OC2_SetConfig+0x144>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d017      	beq.n	8010584 <TIM_OC2_SetConfig+0xe8>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4a23      	ldr	r2, [pc, #140]	@ (80105e4 <TIM_OC2_SetConfig+0x148>)
 8010558:	4293      	cmp	r3, r2
 801055a:	d013      	beq.n	8010584 <TIM_OC2_SetConfig+0xe8>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	4a22      	ldr	r2, [pc, #136]	@ (80105e8 <TIM_OC2_SetConfig+0x14c>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d00f      	beq.n	8010584 <TIM_OC2_SetConfig+0xe8>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	4a21      	ldr	r2, [pc, #132]	@ (80105ec <TIM_OC2_SetConfig+0x150>)
 8010568:	4293      	cmp	r3, r2
 801056a:	d00b      	beq.n	8010584 <TIM_OC2_SetConfig+0xe8>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	4a20      	ldr	r2, [pc, #128]	@ (80105f0 <TIM_OC2_SetConfig+0x154>)
 8010570:	4293      	cmp	r3, r2
 8010572:	d007      	beq.n	8010584 <TIM_OC2_SetConfig+0xe8>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	4a1f      	ldr	r2, [pc, #124]	@ (80105f4 <TIM_OC2_SetConfig+0x158>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d003      	beq.n	8010584 <TIM_OC2_SetConfig+0xe8>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4a1e      	ldr	r2, [pc, #120]	@ (80105f8 <TIM_OC2_SetConfig+0x15c>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d113      	bne.n	80105ac <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801058a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	695b      	ldr	r3, [r3, #20]
 8010598:	009b      	lsls	r3, r3, #2
 801059a:	693a      	ldr	r2, [r7, #16]
 801059c:	4313      	orrs	r3, r2
 801059e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	699b      	ldr	r3, [r3, #24]
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	693a      	ldr	r2, [r7, #16]
 80105a8:	4313      	orrs	r3, r2
 80105aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	693a      	ldr	r2, [r7, #16]
 80105b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	685a      	ldr	r2, [r3, #4]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	621a      	str	r2, [r3, #32]
}
 80105c6:	bf00      	nop
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop
 80105d4:	40012c00 	.word	0x40012c00
 80105d8:	50012c00 	.word	0x50012c00
 80105dc:	40013400 	.word	0x40013400
 80105e0:	50013400 	.word	0x50013400
 80105e4:	40014000 	.word	0x40014000
 80105e8:	50014000 	.word	0x50014000
 80105ec:	40014400 	.word	0x40014400
 80105f0:	50014400 	.word	0x50014400
 80105f4:	40014800 	.word	0x40014800
 80105f8:	50014800 	.word	0x50014800

080105fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80105fc:	b480      	push	{r7}
 80105fe:	b087      	sub	sp, #28
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6a1b      	ldr	r3, [r3, #32]
 801060a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6a1b      	ldr	r3, [r3, #32]
 8010610:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	69db      	ldr	r3, [r3, #28]
 8010622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801062a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801062e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f023 0303 	bic.w	r3, r3, #3
 8010636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	68fa      	ldr	r2, [r7, #12]
 801063e:	4313      	orrs	r3, r2
 8010640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	689b      	ldr	r3, [r3, #8]
 801064e:	021b      	lsls	r3, r3, #8
 8010650:	697a      	ldr	r2, [r7, #20]
 8010652:	4313      	orrs	r3, r2
 8010654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4a35      	ldr	r2, [pc, #212]	@ (8010730 <TIM_OC3_SetConfig+0x134>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d00b      	beq.n	8010676 <TIM_OC3_SetConfig+0x7a>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	4a34      	ldr	r2, [pc, #208]	@ (8010734 <TIM_OC3_SetConfig+0x138>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d007      	beq.n	8010676 <TIM_OC3_SetConfig+0x7a>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4a33      	ldr	r2, [pc, #204]	@ (8010738 <TIM_OC3_SetConfig+0x13c>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d003      	beq.n	8010676 <TIM_OC3_SetConfig+0x7a>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4a32      	ldr	r2, [pc, #200]	@ (801073c <TIM_OC3_SetConfig+0x140>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d10d      	bne.n	8010692 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801067c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	68db      	ldr	r3, [r3, #12]
 8010682:	021b      	lsls	r3, r3, #8
 8010684:	697a      	ldr	r2, [r7, #20]
 8010686:	4313      	orrs	r3, r2
 8010688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4a26      	ldr	r2, [pc, #152]	@ (8010730 <TIM_OC3_SetConfig+0x134>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d023      	beq.n	80106e2 <TIM_OC3_SetConfig+0xe6>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4a25      	ldr	r2, [pc, #148]	@ (8010734 <TIM_OC3_SetConfig+0x138>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d01f      	beq.n	80106e2 <TIM_OC3_SetConfig+0xe6>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	4a24      	ldr	r2, [pc, #144]	@ (8010738 <TIM_OC3_SetConfig+0x13c>)
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d01b      	beq.n	80106e2 <TIM_OC3_SetConfig+0xe6>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4a23      	ldr	r2, [pc, #140]	@ (801073c <TIM_OC3_SetConfig+0x140>)
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d017      	beq.n	80106e2 <TIM_OC3_SetConfig+0xe6>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	4a22      	ldr	r2, [pc, #136]	@ (8010740 <TIM_OC3_SetConfig+0x144>)
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d013      	beq.n	80106e2 <TIM_OC3_SetConfig+0xe6>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4a21      	ldr	r2, [pc, #132]	@ (8010744 <TIM_OC3_SetConfig+0x148>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d00f      	beq.n	80106e2 <TIM_OC3_SetConfig+0xe6>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4a20      	ldr	r2, [pc, #128]	@ (8010748 <TIM_OC3_SetConfig+0x14c>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d00b      	beq.n	80106e2 <TIM_OC3_SetConfig+0xe6>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4a1f      	ldr	r2, [pc, #124]	@ (801074c <TIM_OC3_SetConfig+0x150>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d007      	beq.n	80106e2 <TIM_OC3_SetConfig+0xe6>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a1e      	ldr	r2, [pc, #120]	@ (8010750 <TIM_OC3_SetConfig+0x154>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d003      	beq.n	80106e2 <TIM_OC3_SetConfig+0xe6>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a1d      	ldr	r2, [pc, #116]	@ (8010754 <TIM_OC3_SetConfig+0x158>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d113      	bne.n	801070a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80106e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80106f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	011b      	lsls	r3, r3, #4
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	4313      	orrs	r3, r2
 80106fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	699b      	ldr	r3, [r3, #24]
 8010702:	011b      	lsls	r3, r3, #4
 8010704:	693a      	ldr	r2, [r7, #16]
 8010706:	4313      	orrs	r3, r2
 8010708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	693a      	ldr	r2, [r7, #16]
 801070e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	68fa      	ldr	r2, [r7, #12]
 8010714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	685a      	ldr	r2, [r3, #4]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	697a      	ldr	r2, [r7, #20]
 8010722:	621a      	str	r2, [r3, #32]
}
 8010724:	bf00      	nop
 8010726:	371c      	adds	r7, #28
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr
 8010730:	40012c00 	.word	0x40012c00
 8010734:	50012c00 	.word	0x50012c00
 8010738:	40013400 	.word	0x40013400
 801073c:	50013400 	.word	0x50013400
 8010740:	40014000 	.word	0x40014000
 8010744:	50014000 	.word	0x50014000
 8010748:	40014400 	.word	0x40014400
 801074c:	50014400 	.word	0x50014400
 8010750:	40014800 	.word	0x40014800
 8010754:	50014800 	.word	0x50014800

08010758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010758:	b480      	push	{r7}
 801075a:	b087      	sub	sp, #28
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6a1b      	ldr	r3, [r3, #32]
 8010766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6a1b      	ldr	r3, [r3, #32]
 801076c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	69db      	ldr	r3, [r3, #28]
 801077e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801078a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	021b      	lsls	r3, r3, #8
 801079a:	68fa      	ldr	r2, [r7, #12]
 801079c:	4313      	orrs	r3, r2
 801079e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80107a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	689b      	ldr	r3, [r3, #8]
 80107ac:	031b      	lsls	r3, r3, #12
 80107ae:	697a      	ldr	r2, [r7, #20]
 80107b0:	4313      	orrs	r3, r2
 80107b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	4a36      	ldr	r2, [pc, #216]	@ (8010890 <TIM_OC4_SetConfig+0x138>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d00b      	beq.n	80107d4 <TIM_OC4_SetConfig+0x7c>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	4a35      	ldr	r2, [pc, #212]	@ (8010894 <TIM_OC4_SetConfig+0x13c>)
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d007      	beq.n	80107d4 <TIM_OC4_SetConfig+0x7c>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	4a34      	ldr	r2, [pc, #208]	@ (8010898 <TIM_OC4_SetConfig+0x140>)
 80107c8:	4293      	cmp	r3, r2
 80107ca:	d003      	beq.n	80107d4 <TIM_OC4_SetConfig+0x7c>
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	4a33      	ldr	r2, [pc, #204]	@ (801089c <TIM_OC4_SetConfig+0x144>)
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d10d      	bne.n	80107f0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80107da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	031b      	lsls	r3, r3, #12
 80107e2:	697a      	ldr	r2, [r7, #20]
 80107e4:	4313      	orrs	r3, r2
 80107e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80107ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	4a27      	ldr	r2, [pc, #156]	@ (8010890 <TIM_OC4_SetConfig+0x138>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d023      	beq.n	8010840 <TIM_OC4_SetConfig+0xe8>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	4a26      	ldr	r2, [pc, #152]	@ (8010894 <TIM_OC4_SetConfig+0x13c>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d01f      	beq.n	8010840 <TIM_OC4_SetConfig+0xe8>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4a25      	ldr	r2, [pc, #148]	@ (8010898 <TIM_OC4_SetConfig+0x140>)
 8010804:	4293      	cmp	r3, r2
 8010806:	d01b      	beq.n	8010840 <TIM_OC4_SetConfig+0xe8>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	4a24      	ldr	r2, [pc, #144]	@ (801089c <TIM_OC4_SetConfig+0x144>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d017      	beq.n	8010840 <TIM_OC4_SetConfig+0xe8>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4a23      	ldr	r2, [pc, #140]	@ (80108a0 <TIM_OC4_SetConfig+0x148>)
 8010814:	4293      	cmp	r3, r2
 8010816:	d013      	beq.n	8010840 <TIM_OC4_SetConfig+0xe8>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4a22      	ldr	r2, [pc, #136]	@ (80108a4 <TIM_OC4_SetConfig+0x14c>)
 801081c:	4293      	cmp	r3, r2
 801081e:	d00f      	beq.n	8010840 <TIM_OC4_SetConfig+0xe8>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4a21      	ldr	r2, [pc, #132]	@ (80108a8 <TIM_OC4_SetConfig+0x150>)
 8010824:	4293      	cmp	r3, r2
 8010826:	d00b      	beq.n	8010840 <TIM_OC4_SetConfig+0xe8>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	4a20      	ldr	r2, [pc, #128]	@ (80108ac <TIM_OC4_SetConfig+0x154>)
 801082c:	4293      	cmp	r3, r2
 801082e:	d007      	beq.n	8010840 <TIM_OC4_SetConfig+0xe8>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	4a1f      	ldr	r2, [pc, #124]	@ (80108b0 <TIM_OC4_SetConfig+0x158>)
 8010834:	4293      	cmp	r3, r2
 8010836:	d003      	beq.n	8010840 <TIM_OC4_SetConfig+0xe8>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	4a1e      	ldr	r2, [pc, #120]	@ (80108b4 <TIM_OC4_SetConfig+0x15c>)
 801083c:	4293      	cmp	r3, r2
 801083e:	d113      	bne.n	8010868 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010846:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801084e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	695b      	ldr	r3, [r3, #20]
 8010854:	019b      	lsls	r3, r3, #6
 8010856:	693a      	ldr	r2, [r7, #16]
 8010858:	4313      	orrs	r3, r2
 801085a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	699b      	ldr	r3, [r3, #24]
 8010860:	019b      	lsls	r3, r3, #6
 8010862:	693a      	ldr	r2, [r7, #16]
 8010864:	4313      	orrs	r3, r2
 8010866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	693a      	ldr	r2, [r7, #16]
 801086c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	68fa      	ldr	r2, [r7, #12]
 8010872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	685a      	ldr	r2, [r3, #4]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	697a      	ldr	r2, [r7, #20]
 8010880:	621a      	str	r2, [r3, #32]
}
 8010882:	bf00      	nop
 8010884:	371c      	adds	r7, #28
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr
 801088e:	bf00      	nop
 8010890:	40012c00 	.word	0x40012c00
 8010894:	50012c00 	.word	0x50012c00
 8010898:	40013400 	.word	0x40013400
 801089c:	50013400 	.word	0x50013400
 80108a0:	40014000 	.word	0x40014000
 80108a4:	50014000 	.word	0x50014000
 80108a8:	40014400 	.word	0x40014400
 80108ac:	50014400 	.word	0x50014400
 80108b0:	40014800 	.word	0x40014800
 80108b4:	50014800 	.word	0x50014800

080108b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b087      	sub	sp, #28
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
 80108c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6a1b      	ldr	r3, [r3, #32]
 80108c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6a1b      	ldr	r3, [r3, #32]
 80108cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80108e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80108ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	68fa      	ldr	r2, [r7, #12]
 80108f2:	4313      	orrs	r3, r2
 80108f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80108fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	689b      	ldr	r3, [r3, #8]
 8010902:	041b      	lsls	r3, r3, #16
 8010904:	693a      	ldr	r2, [r7, #16]
 8010906:	4313      	orrs	r3, r2
 8010908:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	4a21      	ldr	r2, [pc, #132]	@ (8010994 <TIM_OC5_SetConfig+0xdc>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d023      	beq.n	801095a <TIM_OC5_SetConfig+0xa2>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	4a20      	ldr	r2, [pc, #128]	@ (8010998 <TIM_OC5_SetConfig+0xe0>)
 8010916:	4293      	cmp	r3, r2
 8010918:	d01f      	beq.n	801095a <TIM_OC5_SetConfig+0xa2>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4a1f      	ldr	r2, [pc, #124]	@ (801099c <TIM_OC5_SetConfig+0xe4>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d01b      	beq.n	801095a <TIM_OC5_SetConfig+0xa2>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4a1e      	ldr	r2, [pc, #120]	@ (80109a0 <TIM_OC5_SetConfig+0xe8>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d017      	beq.n	801095a <TIM_OC5_SetConfig+0xa2>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4a1d      	ldr	r2, [pc, #116]	@ (80109a4 <TIM_OC5_SetConfig+0xec>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d013      	beq.n	801095a <TIM_OC5_SetConfig+0xa2>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	4a1c      	ldr	r2, [pc, #112]	@ (80109a8 <TIM_OC5_SetConfig+0xf0>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d00f      	beq.n	801095a <TIM_OC5_SetConfig+0xa2>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4a1b      	ldr	r2, [pc, #108]	@ (80109ac <TIM_OC5_SetConfig+0xf4>)
 801093e:	4293      	cmp	r3, r2
 8010940:	d00b      	beq.n	801095a <TIM_OC5_SetConfig+0xa2>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4a1a      	ldr	r2, [pc, #104]	@ (80109b0 <TIM_OC5_SetConfig+0xf8>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d007      	beq.n	801095a <TIM_OC5_SetConfig+0xa2>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	4a19      	ldr	r2, [pc, #100]	@ (80109b4 <TIM_OC5_SetConfig+0xfc>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d003      	beq.n	801095a <TIM_OC5_SetConfig+0xa2>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	4a18      	ldr	r2, [pc, #96]	@ (80109b8 <TIM_OC5_SetConfig+0x100>)
 8010956:	4293      	cmp	r3, r2
 8010958:	d109      	bne.n	801096e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	695b      	ldr	r3, [r3, #20]
 8010966:	021b      	lsls	r3, r3, #8
 8010968:	697a      	ldr	r2, [r7, #20]
 801096a:	4313      	orrs	r3, r2
 801096c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	697a      	ldr	r2, [r7, #20]
 8010972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	68fa      	ldr	r2, [r7, #12]
 8010978:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	685a      	ldr	r2, [r3, #4]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	693a      	ldr	r2, [r7, #16]
 8010986:	621a      	str	r2, [r3, #32]
}
 8010988:	bf00      	nop
 801098a:	371c      	adds	r7, #28
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr
 8010994:	40012c00 	.word	0x40012c00
 8010998:	50012c00 	.word	0x50012c00
 801099c:	40013400 	.word	0x40013400
 80109a0:	50013400 	.word	0x50013400
 80109a4:	40014000 	.word	0x40014000
 80109a8:	50014000 	.word	0x50014000
 80109ac:	40014400 	.word	0x40014400
 80109b0:	50014400 	.word	0x50014400
 80109b4:	40014800 	.word	0x40014800
 80109b8:	50014800 	.word	0x50014800

080109bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80109bc:	b480      	push	{r7}
 80109be:	b087      	sub	sp, #28
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6a1b      	ldr	r3, [r3, #32]
 80109ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6a1b      	ldr	r3, [r3, #32]
 80109d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80109ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80109ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	021b      	lsls	r3, r3, #8
 80109f6:	68fa      	ldr	r2, [r7, #12]
 80109f8:	4313      	orrs	r3, r2
 80109fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	689b      	ldr	r3, [r3, #8]
 8010a08:	051b      	lsls	r3, r3, #20
 8010a0a:	693a      	ldr	r2, [r7, #16]
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	4a22      	ldr	r2, [pc, #136]	@ (8010a9c <TIM_OC6_SetConfig+0xe0>)
 8010a14:	4293      	cmp	r3, r2
 8010a16:	d023      	beq.n	8010a60 <TIM_OC6_SetConfig+0xa4>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	4a21      	ldr	r2, [pc, #132]	@ (8010aa0 <TIM_OC6_SetConfig+0xe4>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d01f      	beq.n	8010a60 <TIM_OC6_SetConfig+0xa4>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	4a20      	ldr	r2, [pc, #128]	@ (8010aa4 <TIM_OC6_SetConfig+0xe8>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d01b      	beq.n	8010a60 <TIM_OC6_SetConfig+0xa4>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8010aa8 <TIM_OC6_SetConfig+0xec>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d017      	beq.n	8010a60 <TIM_OC6_SetConfig+0xa4>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	4a1e      	ldr	r2, [pc, #120]	@ (8010aac <TIM_OC6_SetConfig+0xf0>)
 8010a34:	4293      	cmp	r3, r2
 8010a36:	d013      	beq.n	8010a60 <TIM_OC6_SetConfig+0xa4>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8010ab0 <TIM_OC6_SetConfig+0xf4>)
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d00f      	beq.n	8010a60 <TIM_OC6_SetConfig+0xa4>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	4a1c      	ldr	r2, [pc, #112]	@ (8010ab4 <TIM_OC6_SetConfig+0xf8>)
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d00b      	beq.n	8010a60 <TIM_OC6_SetConfig+0xa4>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8010ab8 <TIM_OC6_SetConfig+0xfc>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d007      	beq.n	8010a60 <TIM_OC6_SetConfig+0xa4>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4a1a      	ldr	r2, [pc, #104]	@ (8010abc <TIM_OC6_SetConfig+0x100>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d003      	beq.n	8010a60 <TIM_OC6_SetConfig+0xa4>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	4a19      	ldr	r2, [pc, #100]	@ (8010ac0 <TIM_OC6_SetConfig+0x104>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d109      	bne.n	8010a74 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010a66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	695b      	ldr	r3, [r3, #20]
 8010a6c:	029b      	lsls	r3, r3, #10
 8010a6e:	697a      	ldr	r2, [r7, #20]
 8010a70:	4313      	orrs	r3, r2
 8010a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	697a      	ldr	r2, [r7, #20]
 8010a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	685a      	ldr	r2, [r3, #4]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	693a      	ldr	r2, [r7, #16]
 8010a8c:	621a      	str	r2, [r3, #32]
}
 8010a8e:	bf00      	nop
 8010a90:	371c      	adds	r7, #28
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	40012c00 	.word	0x40012c00
 8010aa0:	50012c00 	.word	0x50012c00
 8010aa4:	40013400 	.word	0x40013400
 8010aa8:	50013400 	.word	0x50013400
 8010aac:	40014000 	.word	0x40014000
 8010ab0:	50014000 	.word	0x50014000
 8010ab4:	40014400 	.word	0x40014400
 8010ab8:	50014400 	.word	0x50014400
 8010abc:	40014800 	.word	0x40014800
 8010ac0:	50014800 	.word	0x50014800

08010ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b087      	sub	sp, #28
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	6a1b      	ldr	r3, [r3, #32]
 8010ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	6a1b      	ldr	r3, [r3, #32]
 8010ada:	f023 0201 	bic.w	r2, r3, #1
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	699b      	ldr	r3, [r3, #24]
 8010ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	011b      	lsls	r3, r3, #4
 8010af4:	693a      	ldr	r2, [r7, #16]
 8010af6:	4313      	orrs	r3, r2
 8010af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	f023 030a 	bic.w	r3, r3, #10
 8010b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010b02:	697a      	ldr	r2, [r7, #20]
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	4313      	orrs	r3, r2
 8010b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	693a      	ldr	r2, [r7, #16]
 8010b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	697a      	ldr	r2, [r7, #20]
 8010b14:	621a      	str	r2, [r3, #32]
}
 8010b16:	bf00      	nop
 8010b18:	371c      	adds	r7, #28
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr

08010b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010b22:	b480      	push	{r7}
 8010b24:	b087      	sub	sp, #28
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	60f8      	str	r0, [r7, #12]
 8010b2a:	60b9      	str	r1, [r7, #8]
 8010b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	6a1b      	ldr	r3, [r3, #32]
 8010b32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	6a1b      	ldr	r3, [r3, #32]
 8010b38:	f023 0210 	bic.w	r2, r3, #16
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	699b      	ldr	r3, [r3, #24]
 8010b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	031b      	lsls	r3, r3, #12
 8010b52:	693a      	ldr	r2, [r7, #16]
 8010b54:	4313      	orrs	r3, r2
 8010b56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010b5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	011b      	lsls	r3, r3, #4
 8010b64:	697a      	ldr	r2, [r7, #20]
 8010b66:	4313      	orrs	r3, r2
 8010b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	693a      	ldr	r2, [r7, #16]
 8010b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	697a      	ldr	r2, [r7, #20]
 8010b74:	621a      	str	r2, [r3, #32]
}
 8010b76:	bf00      	nop
 8010b78:	371c      	adds	r7, #28
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010b82:	b480      	push	{r7}
 8010b84:	b085      	sub	sp, #20
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
 8010b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	689b      	ldr	r3, [r3, #8]
 8010b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010b9e:	683a      	ldr	r2, [r7, #0]
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	f043 0307 	orr.w	r3, r3, #7
 8010ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	68fa      	ldr	r2, [r7, #12]
 8010bae:	609a      	str	r2, [r3, #8]
}
 8010bb0:	bf00      	nop
 8010bb2:	3714      	adds	r7, #20
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr

08010bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b087      	sub	sp, #28
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	607a      	str	r2, [r7, #4]
 8010bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	689b      	ldr	r3, [r3, #8]
 8010bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	021a      	lsls	r2, r3, #8
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	431a      	orrs	r2, r3
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	4313      	orrs	r3, r2
 8010be4:	697a      	ldr	r2, [r7, #20]
 8010be6:	4313      	orrs	r3, r2
 8010be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	697a      	ldr	r2, [r7, #20]
 8010bee:	609a      	str	r2, [r3, #8]
}
 8010bf0:	bf00      	nop
 8010bf2:	371c      	adds	r7, #28
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfa:	4770      	bx	lr

08010bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b085      	sub	sp, #20
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d101      	bne.n	8010c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010c10:	2302      	movs	r3, #2
 8010c12:	e097      	b.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2201      	movs	r2, #1
 8010c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2202      	movs	r2, #2
 8010c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	689b      	ldr	r3, [r3, #8]
 8010c32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4a45      	ldr	r2, [pc, #276]	@ (8010d50 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d00e      	beq.n	8010c5c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	4a44      	ldr	r2, [pc, #272]	@ (8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d009      	beq.n	8010c5c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	4a42      	ldr	r2, [pc, #264]	@ (8010d58 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d004      	beq.n	8010c5c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	4a41      	ldr	r2, [pc, #260]	@ (8010d5c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d108      	bne.n	8010c6e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	68fa      	ldr	r2, [r7, #12]
 8010c80:	4313      	orrs	r3, r2
 8010c82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	68fa      	ldr	r2, [r7, #12]
 8010c8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a2f      	ldr	r2, [pc, #188]	@ (8010d50 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d040      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d03b      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ca8:	d036      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010cb2:	d031      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4a29      	ldr	r2, [pc, #164]	@ (8010d60 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d02c      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4a28      	ldr	r2, [pc, #160]	@ (8010d64 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d027      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4a26      	ldr	r2, [pc, #152]	@ (8010d68 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d022      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4a25      	ldr	r2, [pc, #148]	@ (8010d6c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d01d      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a23      	ldr	r2, [pc, #140]	@ (8010d70 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d018      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4a22      	ldr	r2, [pc, #136]	@ (8010d74 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d013      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	4a18      	ldr	r2, [pc, #96]	@ (8010d58 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d00e      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	4a17      	ldr	r2, [pc, #92]	@ (8010d5c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d009      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	4a1b      	ldr	r2, [pc, #108]	@ (8010d78 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d004      	beq.n	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	4a1a      	ldr	r2, [pc, #104]	@ (8010d7c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d10c      	bne.n	8010d32 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010d1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	689b      	ldr	r3, [r3, #8]
 8010d24:	68ba      	ldr	r2, [r7, #8]
 8010d26:	4313      	orrs	r3, r2
 8010d28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2201      	movs	r2, #1
 8010d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010d42:	2300      	movs	r3, #0
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3714      	adds	r7, #20
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr
 8010d50:	40012c00 	.word	0x40012c00
 8010d54:	50012c00 	.word	0x50012c00
 8010d58:	40013400 	.word	0x40013400
 8010d5c:	50013400 	.word	0x50013400
 8010d60:	40000400 	.word	0x40000400
 8010d64:	50000400 	.word	0x50000400
 8010d68:	40000800 	.word	0x40000800
 8010d6c:	50000800 	.word	0x50000800
 8010d70:	40000c00 	.word	0x40000c00
 8010d74:	50000c00 	.word	0x50000c00
 8010d78:	40014000 	.word	0x40014000
 8010d7c:	50014000 	.word	0x50014000

08010d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d101      	bne.n	8010d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	e042      	b.n	8010e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d106      	bne.n	8010daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7f2 f8d1 	bl	8002f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2224      	movs	r2, #36	@ 0x24
 8010dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	681a      	ldr	r2, [r3, #0]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f022 0201 	bic.w	r2, r2, #1
 8010dc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d002      	beq.n	8010dd0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f000 fd02 	bl	80117d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f000 fb51 	bl	8011478 <UART_SetConfig>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b01      	cmp	r3, #1
 8010dda:	d101      	bne.n	8010de0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e01b      	b.n	8010e18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	685a      	ldr	r2, [r3, #4]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	689a      	ldr	r2, [r3, #8]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f042 0201 	orr.w	r2, r2, #1
 8010e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 fd81 	bl	8011918 <UART_CheckIdleState>
 8010e16:	4603      	mov	r3, r0
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b0ba      	sub	sp, #232	@ 0xe8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	69db      	ldr	r3, [r3, #28]
 8010e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	689b      	ldr	r3, [r3, #8]
 8010e42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010e46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010e4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010e4e:	4013      	ands	r3, r2
 8010e50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d11b      	bne.n	8010e94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e60:	f003 0320 	and.w	r3, r3, #32
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d015      	beq.n	8010e94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e6c:	f003 0320 	and.w	r3, r3, #32
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d105      	bne.n	8010e80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d009      	beq.n	8010e94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	f000 82cb 	beq.w	8011420 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	4798      	blx	r3
      }
      return;
 8010e92:	e2c5      	b.n	8011420 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	f000 8123 	beq.w	80110e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010e9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010ea2:	4b8d      	ldr	r3, [pc, #564]	@ (80110d8 <HAL_UART_IRQHandler+0x2b8>)
 8010ea4:	4013      	ands	r3, r2
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d106      	bne.n	8010eb8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010eaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010eae:	4b8b      	ldr	r3, [pc, #556]	@ (80110dc <HAL_UART_IRQHandler+0x2bc>)
 8010eb0:	4013      	ands	r3, r2
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	f000 8116 	beq.w	80110e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ebc:	f003 0301 	and.w	r3, r3, #1
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d011      	beq.n	8010ee8 <HAL_UART_IRQHandler+0xc8>
 8010ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d00b      	beq.n	8010ee8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2201      	movs	r2, #1
 8010ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ede:	f043 0201 	orr.w	r2, r3, #1
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010eec:	f003 0302 	and.w	r3, r3, #2
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d011      	beq.n	8010f18 <HAL_UART_IRQHandler+0xf8>
 8010ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010ef8:	f003 0301 	and.w	r3, r3, #1
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d00b      	beq.n	8010f18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	2202      	movs	r2, #2
 8010f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f0e:	f043 0204 	orr.w	r2, r3, #4
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f1c:	f003 0304 	and.w	r3, r3, #4
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d011      	beq.n	8010f48 <HAL_UART_IRQHandler+0x128>
 8010f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f28:	f003 0301 	and.w	r3, r3, #1
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00b      	beq.n	8010f48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2204      	movs	r2, #4
 8010f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f3e:	f043 0202 	orr.w	r2, r3, #2
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f4c:	f003 0308 	and.w	r3, r3, #8
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d017      	beq.n	8010f84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f58:	f003 0320 	and.w	r3, r3, #32
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d105      	bne.n	8010f6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010f60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010f64:	4b5c      	ldr	r3, [pc, #368]	@ (80110d8 <HAL_UART_IRQHandler+0x2b8>)
 8010f66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d00b      	beq.n	8010f84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2208      	movs	r2, #8
 8010f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f7a:	f043 0208 	orr.w	r2, r3, #8
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d012      	beq.n	8010fb6 <HAL_UART_IRQHandler+0x196>
 8010f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d00c      	beq.n	8010fb6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fac:	f043 0220 	orr.w	r2, r3, #32
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	f000 8231 	beq.w	8011424 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010fc6:	f003 0320 	and.w	r3, r3, #32
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d013      	beq.n	8010ff6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010fd2:	f003 0320 	and.w	r3, r3, #32
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d105      	bne.n	8010fe6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d007      	beq.n	8010ff6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d003      	beq.n	8010ff6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	689b      	ldr	r3, [r3, #8]
 8011006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801100a:	2b40      	cmp	r3, #64	@ 0x40
 801100c:	d005      	beq.n	801101a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801100e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011012:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011016:	2b00      	cmp	r3, #0
 8011018:	d054      	beq.n	80110c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 fd93 	bl	8011b46 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	689b      	ldr	r3, [r3, #8]
 8011026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801102a:	2b40      	cmp	r3, #64	@ 0x40
 801102c:	d146      	bne.n	80110bc <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	3308      	adds	r3, #8
 8011034:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011038:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801103c:	e853 3f00 	ldrex	r3, [r3]
 8011040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801104c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	3308      	adds	r3, #8
 8011056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801105a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801105e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8011066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801106a:	e841 2300 	strex	r3, r2, [r1]
 801106e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8011072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d1d9      	bne.n	801102e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011080:	2b00      	cmp	r3, #0
 8011082:	d017      	beq.n	80110b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801108a:	4a15      	ldr	r2, [pc, #84]	@ (80110e0 <HAL_UART_IRQHandler+0x2c0>)
 801108c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011094:	4618      	mov	r0, r3
 8011096:	f7f5 f9d1 	bl	800643c <HAL_DMA_Abort_IT>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d019      	beq.n	80110d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80110ae:	4610      	mov	r0, r2
 80110b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110b2:	e00f      	b.n	80110d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f000 f9c9 	bl	801144c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110ba:	e00b      	b.n	80110d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 f9c5 	bl	801144c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110c2:	e007      	b.n	80110d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 f9c1 	bl	801144c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80110d2:	e1a7      	b.n	8011424 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110d4:	bf00      	nop
    return;
 80110d6:	e1a5      	b.n	8011424 <HAL_UART_IRQHandler+0x604>
 80110d8:	10000001 	.word	0x10000001
 80110dc:	04000120 	.word	0x04000120
 80110e0:	08011c13 	.word	0x08011c13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	f040 8150 	bne.w	801138e <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80110ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110f2:	f003 0310 	and.w	r3, r3, #16
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	f000 8149 	beq.w	801138e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80110fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011100:	f003 0310 	and.w	r3, r3, #16
 8011104:	2b00      	cmp	r3, #0
 8011106:	f000 8142 	beq.w	801138e <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2210      	movs	r2, #16
 8011110:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	689b      	ldr	r3, [r3, #8]
 8011118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801111c:	2b40      	cmp	r3, #64	@ 0x40
 801111e:	f040 80b8 	bne.w	8011292 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801112c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011130:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011134:	2b00      	cmp	r3, #0
 8011136:	f000 8177 	beq.w	8011428 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011140:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011144:	429a      	cmp	r2, r3
 8011146:	f080 816f 	bcs.w	8011428 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011150:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801115a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801115c:	2b81      	cmp	r3, #129	@ 0x81
 801115e:	f000 8087 	beq.w	8011270 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801116a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801116e:	e853 3f00 	ldrex	r3, [r3]
 8011172:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011176:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801117a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801117e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	461a      	mov	r2, r3
 8011188:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801118c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011190:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011194:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8011198:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801119c:	e841 2300 	strex	r3, r2, [r1]
 80111a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80111a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d1da      	bne.n	8011162 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	3308      	adds	r3, #8
 80111b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80111b6:	e853 3f00 	ldrex	r3, [r3]
 80111ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80111bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80111be:	f023 0301 	bic.w	r3, r3, #1
 80111c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	3308      	adds	r3, #8
 80111cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80111d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80111d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80111d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80111dc:	e841 2300 	strex	r3, r2, [r1]
 80111e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80111e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1e1      	bne.n	80111ac <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	3308      	adds	r3, #8
 80111ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111f2:	e853 3f00 	ldrex	r3, [r3]
 80111f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80111f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80111fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	3308      	adds	r3, #8
 8011208:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801120c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801120e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011210:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011212:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011214:	e841 2300 	strex	r3, r2, [r1]
 8011218:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801121a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801121c:	2b00      	cmp	r3, #0
 801121e:	d1e3      	bne.n	80111e8 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2220      	movs	r2, #32
 8011224:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011236:	e853 3f00 	ldrex	r3, [r3]
 801123a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801123c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801123e:	f023 0310 	bic.w	r3, r3, #16
 8011242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	461a      	mov	r2, r3
 801124c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011250:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011252:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011254:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011256:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011258:	e841 2300 	strex	r3, r2, [r1]
 801125c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801125e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011260:	2b00      	cmp	r3, #0
 8011262:	d1e4      	bne.n	801122e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801126a:	4618      	mov	r0, r3
 801126c:	f7f5 f86a 	bl	8006344 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2202      	movs	r2, #2
 8011274:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011282:	b29b      	uxth	r3, r3
 8011284:	1ad3      	subs	r3, r2, r3
 8011286:	b29b      	uxth	r3, r3
 8011288:	4619      	mov	r1, r3
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f000 f8e8 	bl	8011460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011290:	e0ca      	b.n	8011428 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801129e:	b29b      	uxth	r3, r3
 80112a0:	1ad3      	subs	r3, r2, r3
 80112a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f000 80bc 	beq.w	801142c <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80112b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	f000 80b7 	beq.w	801142c <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112c6:	e853 3f00 	ldrex	r3, [r3]
 80112ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80112cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80112d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	461a      	mov	r2, r3
 80112dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80112e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80112e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80112e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80112e8:	e841 2300 	strex	r3, r2, [r1]
 80112ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80112ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d1e4      	bne.n	80112be <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	3308      	adds	r3, #8
 80112fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fe:	e853 3f00 	ldrex	r3, [r3]
 8011302:	623b      	str	r3, [r7, #32]
   return(result);
 8011304:	6a3b      	ldr	r3, [r7, #32]
 8011306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801130a:	f023 0301 	bic.w	r3, r3, #1
 801130e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	3308      	adds	r3, #8
 8011318:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801131c:	633a      	str	r2, [r7, #48]	@ 0x30
 801131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011320:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011324:	e841 2300 	strex	r3, r2, [r1]
 8011328:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801132c:	2b00      	cmp	r3, #0
 801132e:	d1e1      	bne.n	80112f4 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2220      	movs	r2, #32
 8011334:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2200      	movs	r2, #0
 801133c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	e853 3f00 	ldrex	r3, [r3]
 8011350:	60fb      	str	r3, [r7, #12]
   return(result);
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f023 0310 	bic.w	r3, r3, #16
 8011358:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	461a      	mov	r2, r3
 8011362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011366:	61fb      	str	r3, [r7, #28]
 8011368:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801136a:	69b9      	ldr	r1, [r7, #24]
 801136c:	69fa      	ldr	r2, [r7, #28]
 801136e:	e841 2300 	strex	r3, r2, [r1]
 8011372:	617b      	str	r3, [r7, #20]
   return(result);
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d1e4      	bne.n	8011344 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2202      	movs	r2, #2
 801137e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011384:	4619      	mov	r1, r3
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f000 f86a 	bl	8011460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801138c:	e04e      	b.n	801142c <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801138e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011396:	2b00      	cmp	r3, #0
 8011398:	d014      	beq.n	80113c4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801139a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801139e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d105      	bne.n	80113b2 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80113a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80113aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d008      	beq.n	80113c4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d03a      	beq.n	8011430 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	4798      	blx	r3
    }
    return;
 80113c2:	e035      	b.n	8011430 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80113c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80113c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d009      	beq.n	80113e4 <HAL_UART_IRQHandler+0x5c4>
 80113d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80113d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d003      	beq.n	80113e4 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f000 fc2e 	bl	8011c3e <UART_EndTransmit_IT>
    return;
 80113e2:	e026      	b.n	8011432 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80113e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80113e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d009      	beq.n	8011404 <HAL_UART_IRQHandler+0x5e4>
 80113f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80113f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d003      	beq.n	8011404 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f000 fc53 	bl	8011ca8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011402:	e016      	b.n	8011432 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011408:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801140c:	2b00      	cmp	r3, #0
 801140e:	d010      	beq.n	8011432 <HAL_UART_IRQHandler+0x612>
 8011410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011414:	2b00      	cmp	r3, #0
 8011416:	da0c      	bge.n	8011432 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 fc3b 	bl	8011c94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801141e:	e008      	b.n	8011432 <HAL_UART_IRQHandler+0x612>
      return;
 8011420:	bf00      	nop
 8011422:	e006      	b.n	8011432 <HAL_UART_IRQHandler+0x612>
    return;
 8011424:	bf00      	nop
 8011426:	e004      	b.n	8011432 <HAL_UART_IRQHandler+0x612>
      return;
 8011428:	bf00      	nop
 801142a:	e002      	b.n	8011432 <HAL_UART_IRQHandler+0x612>
      return;
 801142c:	bf00      	nop
 801142e:	e000      	b.n	8011432 <HAL_UART_IRQHandler+0x612>
    return;
 8011430:	bf00      	nop
  }
}
 8011432:	37e8      	adds	r7, #232	@ 0xe8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011440:	bf00      	nop
 8011442:	370c      	adds	r7, #12
 8011444:	46bd      	mov	sp, r7
 8011446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144a:	4770      	bx	lr

0801144c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011454:	bf00      	nop
 8011456:	370c      	adds	r7, #12
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr

08011460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011460:	b480      	push	{r7}
 8011462:	b083      	sub	sp, #12
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	460b      	mov	r3, r1
 801146a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801146c:	bf00      	nop
 801146e:	370c      	adds	r7, #12
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr

08011478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801147c:	b094      	sub	sp, #80	@ 0x50
 801147e:	af00      	add	r7, sp, #0
 8011480:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011482:	2300      	movs	r3, #0
 8011484:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8011488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	4b83      	ldr	r3, [pc, #524]	@ (801169c <UART_SetConfig+0x224>)
 801148e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011492:	689a      	ldr	r2, [r3, #8]
 8011494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011496:	691b      	ldr	r3, [r3, #16]
 8011498:	431a      	orrs	r2, r3
 801149a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801149c:	695b      	ldr	r3, [r3, #20]
 801149e:	431a      	orrs	r2, r3
 80114a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a2:	69db      	ldr	r3, [r3, #28]
 80114a4:	4313      	orrs	r3, r2
 80114a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80114a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	497c      	ldr	r1, [pc, #496]	@ (80116a0 <UART_SetConfig+0x228>)
 80114b0:	4019      	ands	r1, r3
 80114b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b4:	681a      	ldr	r2, [r3, #0]
 80114b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114b8:	430b      	orrs	r3, r1
 80114ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80114bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80114c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c8:	68d9      	ldr	r1, [r3, #12]
 80114ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	ea40 0301 	orr.w	r3, r0, r1
 80114d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80114d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114d6:	699b      	ldr	r3, [r3, #24]
 80114d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80114da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	4b6f      	ldr	r3, [pc, #444]	@ (801169c <UART_SetConfig+0x224>)
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d009      	beq.n	80114f8 <UART_SetConfig+0x80>
 80114e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	4b6e      	ldr	r3, [pc, #440]	@ (80116a4 <UART_SetConfig+0x22c>)
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d004      	beq.n	80114f8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80114ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f0:	6a1a      	ldr	r2, [r3, #32]
 80114f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114f4:	4313      	orrs	r3, r2
 80114f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80114f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	689b      	ldr	r3, [r3, #8]
 80114fe:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8011502:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8011506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801150c:	430b      	orrs	r3, r1
 801150e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011516:	f023 000f 	bic.w	r0, r3, #15
 801151a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801151c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801151e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	ea40 0301 	orr.w	r3, r0, r1
 8011526:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	4b5e      	ldr	r3, [pc, #376]	@ (80116a8 <UART_SetConfig+0x230>)
 801152e:	429a      	cmp	r2, r3
 8011530:	d102      	bne.n	8011538 <UART_SetConfig+0xc0>
 8011532:	2301      	movs	r3, #1
 8011534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011536:	e032      	b.n	801159e <UART_SetConfig+0x126>
 8011538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	4b5b      	ldr	r3, [pc, #364]	@ (80116ac <UART_SetConfig+0x234>)
 801153e:	429a      	cmp	r2, r3
 8011540:	d102      	bne.n	8011548 <UART_SetConfig+0xd0>
 8011542:	2302      	movs	r3, #2
 8011544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011546:	e02a      	b.n	801159e <UART_SetConfig+0x126>
 8011548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801154a:	681a      	ldr	r2, [r3, #0]
 801154c:	4b58      	ldr	r3, [pc, #352]	@ (80116b0 <UART_SetConfig+0x238>)
 801154e:	429a      	cmp	r2, r3
 8011550:	d102      	bne.n	8011558 <UART_SetConfig+0xe0>
 8011552:	2304      	movs	r3, #4
 8011554:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011556:	e022      	b.n	801159e <UART_SetConfig+0x126>
 8011558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	4b55      	ldr	r3, [pc, #340]	@ (80116b4 <UART_SetConfig+0x23c>)
 801155e:	429a      	cmp	r2, r3
 8011560:	d102      	bne.n	8011568 <UART_SetConfig+0xf0>
 8011562:	2308      	movs	r3, #8
 8011564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011566:	e01a      	b.n	801159e <UART_SetConfig+0x126>
 8011568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	4b52      	ldr	r3, [pc, #328]	@ (80116b8 <UART_SetConfig+0x240>)
 801156e:	429a      	cmp	r2, r3
 8011570:	d102      	bne.n	8011578 <UART_SetConfig+0x100>
 8011572:	2310      	movs	r3, #16
 8011574:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011576:	e012      	b.n	801159e <UART_SetConfig+0x126>
 8011578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157a:	681a      	ldr	r2, [r3, #0]
 801157c:	4b4f      	ldr	r3, [pc, #316]	@ (80116bc <UART_SetConfig+0x244>)
 801157e:	429a      	cmp	r2, r3
 8011580:	d103      	bne.n	801158a <UART_SetConfig+0x112>
 8011582:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8011586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011588:	e009      	b.n	801159e <UART_SetConfig+0x126>
 801158a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801158c:	681a      	ldr	r2, [r3, #0]
 801158e:	4b43      	ldr	r3, [pc, #268]	@ (801169c <UART_SetConfig+0x224>)
 8011590:	429a      	cmp	r2, r3
 8011592:	d102      	bne.n	801159a <UART_SetConfig+0x122>
 8011594:	2320      	movs	r3, #32
 8011596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011598:	e001      	b.n	801159e <UART_SetConfig+0x126>
 801159a:	2300      	movs	r3, #0
 801159c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801159e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	4b3e      	ldr	r3, [pc, #248]	@ (801169c <UART_SetConfig+0x224>)
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d005      	beq.n	80115b4 <UART_SetConfig+0x13c>
 80115a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	4b3d      	ldr	r3, [pc, #244]	@ (80116a4 <UART_SetConfig+0x22c>)
 80115ae:	429a      	cmp	r2, r3
 80115b0:	f040 8088 	bne.w	80116c4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80115b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115b6:	2200      	movs	r2, #0
 80115b8:	623b      	str	r3, [r7, #32]
 80115ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80115bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80115c0:	f7fb fdea 	bl	800d198 <HAL_RCCEx_GetPeriphCLKFreq>
 80115c4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80115c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	f000 80eb 	beq.w	80117a4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80115ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d2:	4a3b      	ldr	r2, [pc, #236]	@ (80116c0 <UART_SetConfig+0x248>)
 80115d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115d8:	461a      	mov	r2, r3
 80115da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80115e0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e4:	685a      	ldr	r2, [r3, #4]
 80115e6:	4613      	mov	r3, r2
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	4413      	add	r3, r2
 80115ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d305      	bcc.n	80115fe <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80115f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d903      	bls.n	8011606 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80115fe:	2301      	movs	r3, #1
 8011600:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011604:	e048      	b.n	8011698 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011608:	2200      	movs	r2, #0
 801160a:	61bb      	str	r3, [r7, #24]
 801160c:	61fa      	str	r2, [r7, #28]
 801160e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011612:	4a2b      	ldr	r2, [pc, #172]	@ (80116c0 <UART_SetConfig+0x248>)
 8011614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011618:	b29b      	uxth	r3, r3
 801161a:	2200      	movs	r2, #0
 801161c:	613b      	str	r3, [r7, #16]
 801161e:	617a      	str	r2, [r7, #20]
 8011620:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011624:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011628:	f7ee fe44 	bl	80002b4 <__aeabi_uldivmod>
 801162c:	4602      	mov	r2, r0
 801162e:	460b      	mov	r3, r1
 8011630:	4610      	mov	r0, r2
 8011632:	4619      	mov	r1, r3
 8011634:	f04f 0200 	mov.w	r2, #0
 8011638:	f04f 0300 	mov.w	r3, #0
 801163c:	020b      	lsls	r3, r1, #8
 801163e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011642:	0202      	lsls	r2, r0, #8
 8011644:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011646:	6849      	ldr	r1, [r1, #4]
 8011648:	0849      	lsrs	r1, r1, #1
 801164a:	2000      	movs	r0, #0
 801164c:	460c      	mov	r4, r1
 801164e:	4605      	mov	r5, r0
 8011650:	eb12 0804 	adds.w	r8, r2, r4
 8011654:	eb43 0905 	adc.w	r9, r3, r5
 8011658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801165a:	685b      	ldr	r3, [r3, #4]
 801165c:	2200      	movs	r2, #0
 801165e:	60bb      	str	r3, [r7, #8]
 8011660:	60fa      	str	r2, [r7, #12]
 8011662:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011666:	4640      	mov	r0, r8
 8011668:	4649      	mov	r1, r9
 801166a:	f7ee fe23 	bl	80002b4 <__aeabi_uldivmod>
 801166e:	4602      	mov	r2, r0
 8011670:	460b      	mov	r3, r1
 8011672:	4613      	mov	r3, r2
 8011674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011678:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801167c:	d308      	bcc.n	8011690 <UART_SetConfig+0x218>
 801167e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011684:	d204      	bcs.n	8011690 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8011686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801168c:	60da      	str	r2, [r3, #12]
 801168e:	e003      	b.n	8011698 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8011690:	2301      	movs	r3, #1
 8011692:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8011696:	e085      	b.n	80117a4 <UART_SetConfig+0x32c>
 8011698:	e084      	b.n	80117a4 <UART_SetConfig+0x32c>
 801169a:	bf00      	nop
 801169c:	46002400 	.word	0x46002400
 80116a0:	cfff69f3 	.word	0xcfff69f3
 80116a4:	56002400 	.word	0x56002400
 80116a8:	40013800 	.word	0x40013800
 80116ac:	40004400 	.word	0x40004400
 80116b0:	40004800 	.word	0x40004800
 80116b4:	40004c00 	.word	0x40004c00
 80116b8:	40005000 	.word	0x40005000
 80116bc:	40006400 	.word	0x40006400
 80116c0:	080128dc 	.word	0x080128dc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116c6:	69db      	ldr	r3, [r3, #28]
 80116c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80116cc:	d13c      	bne.n	8011748 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80116ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116d0:	2200      	movs	r2, #0
 80116d2:	603b      	str	r3, [r7, #0]
 80116d4:	607a      	str	r2, [r7, #4]
 80116d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116da:	f7fb fd5d 	bl	800d198 <HAL_RCCEx_GetPeriphCLKFreq>
 80116de:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80116e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d05e      	beq.n	80117a4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116ea:	4a39      	ldr	r2, [pc, #228]	@ (80117d0 <UART_SetConfig+0x358>)
 80116ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116f0:	461a      	mov	r2, r3
 80116f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80116f8:	005a      	lsls	r2, r3, #1
 80116fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	085b      	lsrs	r3, r3, #1
 8011700:	441a      	add	r2, r3
 8011702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	fbb2 f3f3 	udiv	r3, r2, r3
 801170a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801170c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801170e:	2b0f      	cmp	r3, #15
 8011710:	d916      	bls.n	8011740 <UART_SetConfig+0x2c8>
 8011712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011718:	d212      	bcs.n	8011740 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801171a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801171c:	b29b      	uxth	r3, r3
 801171e:	f023 030f 	bic.w	r3, r3, #15
 8011722:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011726:	085b      	lsrs	r3, r3, #1
 8011728:	b29b      	uxth	r3, r3
 801172a:	f003 0307 	and.w	r3, r3, #7
 801172e:	b29a      	uxth	r2, r3
 8011730:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011732:	4313      	orrs	r3, r2
 8011734:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8011736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801173c:	60da      	str	r2, [r3, #12]
 801173e:	e031      	b.n	80117a4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8011740:	2301      	movs	r3, #1
 8011742:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011746:	e02d      	b.n	80117a4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801174a:	2200      	movs	r2, #0
 801174c:	469a      	mov	sl, r3
 801174e:	4693      	mov	fp, r2
 8011750:	4650      	mov	r0, sl
 8011752:	4659      	mov	r1, fp
 8011754:	f7fb fd20 	bl	800d198 <HAL_RCCEx_GetPeriphCLKFreq>
 8011758:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801175a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801175c:	2b00      	cmp	r3, #0
 801175e:	d021      	beq.n	80117a4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011764:	4a1a      	ldr	r2, [pc, #104]	@ (80117d0 <UART_SetConfig+0x358>)
 8011766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801176a:	461a      	mov	r2, r3
 801176c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801176e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	085b      	lsrs	r3, r3, #1
 8011778:	441a      	add	r2, r3
 801177a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011782:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011786:	2b0f      	cmp	r3, #15
 8011788:	d909      	bls.n	801179e <UART_SetConfig+0x326>
 801178a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801178c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011790:	d205      	bcs.n	801179e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011794:	b29a      	uxth	r2, r3
 8011796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	60da      	str	r2, [r3, #12]
 801179c:	e002      	b.n	80117a4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 801179e:	2301      	movs	r3, #1
 80117a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80117a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117a6:	2201      	movs	r2, #1
 80117a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80117ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ae:	2201      	movs	r2, #1
 80117b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80117b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b6:	2200      	movs	r2, #0
 80117b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80117ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117bc:	2200      	movs	r2, #0
 80117be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80117c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3750      	adds	r7, #80	@ 0x50
 80117c8:	46bd      	mov	sp, r7
 80117ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80117ce:	bf00      	nop
 80117d0:	080128dc 	.word	0x080128dc

080117d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117e0:	f003 0308 	and.w	r3, r3, #8
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00a      	beq.n	80117fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	430a      	orrs	r2, r1
 80117fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011802:	f003 0301 	and.w	r3, r3, #1
 8011806:	2b00      	cmp	r3, #0
 8011808:	d00a      	beq.n	8011820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	430a      	orrs	r2, r1
 801181e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011824:	f003 0302 	and.w	r3, r3, #2
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00a      	beq.n	8011842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	430a      	orrs	r2, r1
 8011840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011846:	f003 0304 	and.w	r3, r3, #4
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00a      	beq.n	8011864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	430a      	orrs	r2, r1
 8011862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011868:	f003 0310 	and.w	r3, r3, #16
 801186c:	2b00      	cmp	r3, #0
 801186e:	d00a      	beq.n	8011886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	689b      	ldr	r3, [r3, #8]
 8011876:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	430a      	orrs	r2, r1
 8011884:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801188a:	f003 0320 	and.w	r3, r3, #32
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00a      	beq.n	80118a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	689b      	ldr	r3, [r3, #8]
 8011898:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	430a      	orrs	r2, r1
 80118a6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d01a      	beq.n	80118ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	430a      	orrs	r2, r1
 80118c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80118d2:	d10a      	bne.n	80118ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	430a      	orrs	r2, r1
 80118e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d00a      	beq.n	801190c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	430a      	orrs	r2, r1
 801190a:	605a      	str	r2, [r3, #4]
  }
}
 801190c:	bf00      	nop
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr

08011918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b098      	sub	sp, #96	@ 0x60
 801191c:	af02      	add	r7, sp, #8
 801191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2200      	movs	r2, #0
 8011924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011928:	f7f1 ffa0 	bl	800386c <HAL_GetTick>
 801192c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f003 0308 	and.w	r3, r3, #8
 8011938:	2b08      	cmp	r3, #8
 801193a:	d12f      	bne.n	801199c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801193c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011940:	9300      	str	r3, [sp, #0]
 8011942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011944:	2200      	movs	r2, #0
 8011946:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f000 f88e 	bl	8011a6c <UART_WaitOnFlagUntilTimeout>
 8011950:	4603      	mov	r3, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	d022      	beq.n	801199c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801195c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801195e:	e853 3f00 	ldrex	r3, [r3]
 8011962:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801196a:	653b      	str	r3, [r7, #80]	@ 0x50
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	461a      	mov	r2, r3
 8011972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011974:	647b      	str	r3, [r7, #68]	@ 0x44
 8011976:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011978:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801197a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801197c:	e841 2300 	strex	r3, r2, [r1]
 8011980:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011984:	2b00      	cmp	r3, #0
 8011986:	d1e6      	bne.n	8011956 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2220      	movs	r2, #32
 801198c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2200      	movs	r2, #0
 8011994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011998:	2303      	movs	r3, #3
 801199a:	e063      	b.n	8011a64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f003 0304 	and.w	r3, r3, #4
 80119a6:	2b04      	cmp	r3, #4
 80119a8:	d149      	bne.n	8011a3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80119aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80119ae:	9300      	str	r3, [sp, #0]
 80119b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119b2:	2200      	movs	r2, #0
 80119b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f000 f857 	bl	8011a6c <UART_WaitOnFlagUntilTimeout>
 80119be:	4603      	mov	r3, r0
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d03c      	beq.n	8011a3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119cc:	e853 3f00 	ldrex	r3, [r3]
 80119d0:	623b      	str	r3, [r7, #32]
   return(result);
 80119d2:	6a3b      	ldr	r3, [r7, #32]
 80119d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80119d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	461a      	mov	r2, r3
 80119e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80119e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80119e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119ea:	e841 2300 	strex	r3, r2, [r1]
 80119ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80119f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d1e6      	bne.n	80119c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	3308      	adds	r3, #8
 80119fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	e853 3f00 	ldrex	r3, [r3]
 8011a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f023 0301 	bic.w	r3, r3, #1
 8011a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	3308      	adds	r3, #8
 8011a14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a16:	61fa      	str	r2, [r7, #28]
 8011a18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a1a:	69b9      	ldr	r1, [r7, #24]
 8011a1c:	69fa      	ldr	r2, [r7, #28]
 8011a1e:	e841 2300 	strex	r3, r2, [r1]
 8011a22:	617b      	str	r3, [r7, #20]
   return(result);
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d1e5      	bne.n	80119f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2220      	movs	r2, #32
 8011a2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2200      	movs	r2, #0
 8011a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a3a:	2303      	movs	r3, #3
 8011a3c:	e012      	b.n	8011a64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2220      	movs	r2, #32
 8011a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2220      	movs	r2, #32
 8011a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2200      	movs	r2, #0
 8011a52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2200      	movs	r2, #0
 8011a58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a62:	2300      	movs	r3, #0
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3758      	adds	r7, #88	@ 0x58
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	603b      	str	r3, [r7, #0]
 8011a78:	4613      	mov	r3, r2
 8011a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a7c:	e04f      	b.n	8011b1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a84:	d04b      	beq.n	8011b1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a86:	f7f1 fef1 	bl	800386c <HAL_GetTick>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	69ba      	ldr	r2, [r7, #24]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d302      	bcc.n	8011a9c <UART_WaitOnFlagUntilTimeout+0x30>
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d101      	bne.n	8011aa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011a9c:	2303      	movs	r3, #3
 8011a9e:	e04e      	b.n	8011b3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f003 0304 	and.w	r3, r3, #4
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d037      	beq.n	8011b1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	2b80      	cmp	r3, #128	@ 0x80
 8011ab2:	d034      	beq.n	8011b1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	2b40      	cmp	r3, #64	@ 0x40
 8011ab8:	d031      	beq.n	8011b1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	69db      	ldr	r3, [r3, #28]
 8011ac0:	f003 0308 	and.w	r3, r3, #8
 8011ac4:	2b08      	cmp	r3, #8
 8011ac6:	d110      	bne.n	8011aea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2208      	movs	r2, #8
 8011ace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ad0:	68f8      	ldr	r0, [r7, #12]
 8011ad2:	f000 f838 	bl	8011b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2208      	movs	r2, #8
 8011ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	e029      	b.n	8011b3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	69db      	ldr	r3, [r3, #28]
 8011af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011af8:	d111      	bne.n	8011b1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b04:	68f8      	ldr	r0, [r7, #12]
 8011b06:	f000 f81e 	bl	8011b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2220      	movs	r2, #32
 8011b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	2200      	movs	r2, #0
 8011b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011b1a:	2303      	movs	r3, #3
 8011b1c:	e00f      	b.n	8011b3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	69da      	ldr	r2, [r3, #28]
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	4013      	ands	r3, r2
 8011b28:	68ba      	ldr	r2, [r7, #8]
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	bf0c      	ite	eq
 8011b2e:	2301      	moveq	r3, #1
 8011b30:	2300      	movne	r3, #0
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	461a      	mov	r2, r3
 8011b36:	79fb      	ldrb	r3, [r7, #7]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d0a0      	beq.n	8011a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b3c:	2300      	movs	r3, #0
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}

08011b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011b46:	b480      	push	{r7}
 8011b48:	b095      	sub	sp, #84	@ 0x54
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b56:	e853 3f00 	ldrex	r3, [r3]
 8011b5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	461a      	mov	r2, r3
 8011b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8011b6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011b72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011b74:	e841 2300 	strex	r3, r2, [r1]
 8011b78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d1e6      	bne.n	8011b4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	3308      	adds	r3, #8
 8011b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b88:	6a3b      	ldr	r3, [r7, #32]
 8011b8a:	e853 3f00 	ldrex	r3, [r3]
 8011b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b90:	69fb      	ldr	r3, [r7, #28]
 8011b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011b96:	f023 0301 	bic.w	r3, r3, #1
 8011b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	3308      	adds	r3, #8
 8011ba2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ba4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bac:	e841 2300 	strex	r3, r2, [r1]
 8011bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d1e3      	bne.n	8011b80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d118      	bne.n	8011bf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	e853 3f00 	ldrex	r3, [r3]
 8011bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	f023 0310 	bic.w	r3, r3, #16
 8011bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	461a      	mov	r2, r3
 8011bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bde:	61bb      	str	r3, [r7, #24]
 8011be0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011be2:	6979      	ldr	r1, [r7, #20]
 8011be4:	69ba      	ldr	r2, [r7, #24]
 8011be6:	e841 2300 	strex	r3, r2, [r1]
 8011bea:	613b      	str	r3, [r7, #16]
   return(result);
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d1e6      	bne.n	8011bc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2220      	movs	r2, #32
 8011bf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2200      	movs	r2, #0
 8011c04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011c06:	bf00      	nop
 8011c08:	3754      	adds	r7, #84	@ 0x54
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr

08011c12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011c12:	b580      	push	{r7, lr}
 8011c14:	b084      	sub	sp, #16
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011c1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2200      	movs	r2, #0
 8011c24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	f7ff fc0b 	bl	801144c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c36:	bf00      	nop
 8011c38:	3710      	adds	r7, #16
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b088      	sub	sp, #32
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	e853 3f00 	ldrex	r3, [r3]
 8011c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c5a:	61fb      	str	r3, [r7, #28]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	461a      	mov	r2, r3
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	61bb      	str	r3, [r7, #24]
 8011c66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c68:	6979      	ldr	r1, [r7, #20]
 8011c6a:	69ba      	ldr	r2, [r7, #24]
 8011c6c:	e841 2300 	strex	r3, r2, [r1]
 8011c70:	613b      	str	r3, [r7, #16]
   return(result);
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d1e6      	bne.n	8011c46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2220      	movs	r2, #32
 8011c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2200      	movs	r2, #0
 8011c84:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f7ff fbd6 	bl	8011438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c8c:	bf00      	nop
 8011c8e:	3720      	adds	r7, #32
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}

08011c94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011c9c:	bf00      	nop
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011cb0:	bf00      	nop
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr

08011cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d101      	bne.n	8011cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8011cce:	2302      	movs	r3, #2
 8011cd0:	e027      	b.n	8011d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2224      	movs	r2, #36	@ 0x24
 8011cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f022 0201 	bic.w	r2, r2, #1
 8011cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	68fa      	ldr	r2, [r7, #12]
 8011d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2220      	movs	r2, #32
 8011d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011d20:	2300      	movs	r3, #0
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3714      	adds	r7, #20
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr

08011d2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b084      	sub	sp, #16
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
 8011d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d101      	bne.n	8011d46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011d42:	2302      	movs	r3, #2
 8011d44:	e02d      	b.n	8011da2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2201      	movs	r2, #1
 8011d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2224      	movs	r2, #36	@ 0x24
 8011d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	681a      	ldr	r2, [r3, #0]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f022 0201 	bic.w	r2, r2, #1
 8011d6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	683a      	ldr	r2, [r7, #0]
 8011d7e:	430a      	orrs	r2, r1
 8011d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f000 f850 	bl	8011e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	68fa      	ldr	r2, [r7, #12]
 8011d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2220      	movs	r2, #32
 8011d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011da0:	2300      	movs	r3, #0
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3710      	adds	r7, #16
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b084      	sub	sp, #16
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
 8011db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011dba:	2b01      	cmp	r3, #1
 8011dbc:	d101      	bne.n	8011dc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011dbe:	2302      	movs	r3, #2
 8011dc0:	e02d      	b.n	8011e1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2224      	movs	r2, #36	@ 0x24
 8011dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f022 0201 	bic.w	r2, r2, #1
 8011de8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	689b      	ldr	r3, [r3, #8]
 8011df0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	683a      	ldr	r2, [r7, #0]
 8011dfa:	430a      	orrs	r2, r1
 8011dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f000 f812 	bl	8011e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	68fa      	ldr	r2, [r7, #12]
 8011e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2220      	movs	r2, #32
 8011e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2200      	movs	r2, #0
 8011e18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011e1c:	2300      	movs	r3, #0
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3710      	adds	r7, #16
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
	...

08011e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b085      	sub	sp, #20
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d108      	bne.n	8011e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2201      	movs	r2, #1
 8011e44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e48:	e031      	b.n	8011eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e4a:	2308      	movs	r3, #8
 8011e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011e4e:	2308      	movs	r3, #8
 8011e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	689b      	ldr	r3, [r3, #8]
 8011e58:	0e5b      	lsrs	r3, r3, #25
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	f003 0307 	and.w	r3, r3, #7
 8011e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	689b      	ldr	r3, [r3, #8]
 8011e68:	0f5b      	lsrs	r3, r3, #29
 8011e6a:	b2db      	uxtb	r3, r3
 8011e6c:	f003 0307 	and.w	r3, r3, #7
 8011e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e72:	7bbb      	ldrb	r3, [r7, #14]
 8011e74:	7b3a      	ldrb	r2, [r7, #12]
 8011e76:	4911      	ldr	r1, [pc, #68]	@ (8011ebc <UARTEx_SetNbDataToProcess+0x94>)
 8011e78:	5c8a      	ldrb	r2, [r1, r2]
 8011e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011e7e:	7b3a      	ldrb	r2, [r7, #12]
 8011e80:	490f      	ldr	r1, [pc, #60]	@ (8011ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8011e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e88:	b29a      	uxth	r2, r3
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e90:	7bfb      	ldrb	r3, [r7, #15]
 8011e92:	7b7a      	ldrb	r2, [r7, #13]
 8011e94:	4909      	ldr	r1, [pc, #36]	@ (8011ebc <UARTEx_SetNbDataToProcess+0x94>)
 8011e96:	5c8a      	ldrb	r2, [r1, r2]
 8011e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011e9c:	7b7a      	ldrb	r2, [r7, #13]
 8011e9e:	4908      	ldr	r1, [pc, #32]	@ (8011ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8011ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011eae:	bf00      	nop
 8011eb0:	3714      	adds	r7, #20
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr
 8011eba:	bf00      	nop
 8011ebc:	080128f4 	.word	0x080128f4
 8011ec0:	080128fc 	.word	0x080128fc

08011ec4 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b086      	sub	sp, #24
 8011ec8:	af02      	add	r7, sp, #8
 8011eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011ed0:	f7f1 fccc 	bl	800386c <HAL_GetTick>
 8011ed4:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d102      	bne.n	8011ee2 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011edc:	2301      	movs	r3, #1
 8011ede:	73fb      	strb	r3, [r7, #15]
 8011ee0:	e137      	b.n	8012152 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	4a76      	ldr	r2, [pc, #472]	@ (80120c0 <HAL_XSPI_Init+0x1fc>)
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d008      	beq.n	8011efe <HAL_XSPI_Init+0x3a>
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	4a74      	ldr	r2, [pc, #464]	@ (80120c4 <HAL_XSPI_Init+0x200>)
 8011ef2:	4293      	cmp	r3, r2
 8011ef4:	d003      	beq.n	8011efe <HAL_XSPI_Init+0x3a>
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4a73      	ldr	r2, [pc, #460]	@ (80120c8 <HAL_XSPI_Init+0x204>)
 8011efc:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	4a72      	ldr	r2, [pc, #456]	@ (80120cc <HAL_XSPI_Init+0x208>)
 8011f04:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	4a6d      	ldr	r2, [pc, #436]	@ (80120c0 <HAL_XSPI_Init+0x1fc>)
 8011f0c:	4293      	cmp	r3, r2
 8011f0e:	d008      	beq.n	8011f22 <HAL_XSPI_Init+0x5e>
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4a6b      	ldr	r2, [pc, #428]	@ (80120c4 <HAL_XSPI_Init+0x200>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d003      	beq.n	8011f22 <HAL_XSPI_Init+0x5e>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	4a6a      	ldr	r2, [pc, #424]	@ (80120c8 <HAL_XSPI_Init+0x204>)
 8011f20:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	4a66      	ldr	r2, [pc, #408]	@ (80120c0 <HAL_XSPI_Init+0x1fc>)
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	d008      	beq.n	8011f3e <HAL_XSPI_Init+0x7a>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4a64      	ldr	r2, [pc, #400]	@ (80120c4 <HAL_XSPI_Init+0x200>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d003      	beq.n	8011f3e <HAL_XSPI_Init+0x7a>
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	4a63      	ldr	r2, [pc, #396]	@ (80120c8 <HAL_XSPI_Init+0x204>)
 8011f3c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2200      	movs	r2, #0
 8011f42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f040 8102 	bne.w	8012152 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7f0 fc8a 	bl	8002868 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011f54:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f000 f8ff 	bl	801215c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	689a      	ldr	r2, [r3, #8]
 8011f64:	4b5a      	ldr	r3, [pc, #360]	@ (80120d0 <HAL_XSPI_Init+0x20c>)
 8011f66:	4013      	ands	r3, r2
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	68d1      	ldr	r1, [r2, #12]
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	6912      	ldr	r2, [r2, #16]
 8011f70:	0412      	lsls	r2, r2, #16
 8011f72:	4311      	orrs	r1, r2
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	6952      	ldr	r2, [r2, #20]
 8011f78:	3a01      	subs	r2, #1
 8011f7a:	0212      	lsls	r2, r2, #8
 8011f7c:	4311      	orrs	r1, r2
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	69d2      	ldr	r2, [r2, #28]
 8011f82:	4311      	orrs	r1, r2
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	6812      	ldr	r2, [r2, #0]
 8011f88:	430b      	orrs	r3, r1
 8011f8a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	4a4b      	ldr	r2, [pc, #300]	@ (80120c0 <HAL_XSPI_Init+0x1fc>)
 8011f92:	4293      	cmp	r3, r2
 8011f94:	d00e      	beq.n	8011fb4 <HAL_XSPI_Init+0xf0>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80120c4 <HAL_XSPI_Init+0x200>)
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	d009      	beq.n	8011fb4 <HAL_XSPI_Init+0xf0>
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	4a48      	ldr	r2, [pc, #288]	@ (80120c8 <HAL_XSPI_Init+0x204>)
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d004      	beq.n	8011fb4 <HAL_XSPI_Init+0xf0>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4a49      	ldr	r2, [pc, #292]	@ (80120d4 <HAL_XSPI_Init+0x210>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d10a      	bne.n	8011fca <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	f023 0108 	bic.w	r1, r3, #8
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	430a      	orrs	r2, r1
 8011fc8:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6a1a      	ldr	r2, [r3, #32]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	430a      	orrs	r2, r1
 8011fde:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	691b      	ldr	r3, [r3, #16]
 8011fe6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fee:	041a      	lsls	r2, r3, #16
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	430a      	orrs	r2, r1
 8011ff6:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	4a30      	ldr	r2, [pc, #192]	@ (80120c0 <HAL_XSPI_Init+0x1fc>)
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d00e      	beq.n	8012020 <HAL_XSPI_Init+0x15c>
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	4a2f      	ldr	r2, [pc, #188]	@ (80120c4 <HAL_XSPI_Init+0x200>)
 8012008:	4293      	cmp	r3, r2
 801200a:	d009      	beq.n	8012020 <HAL_XSPI_Init+0x15c>
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4a2d      	ldr	r2, [pc, #180]	@ (80120c8 <HAL_XSPI_Init+0x204>)
 8012012:	4293      	cmp	r3, r2
 8012014:	d004      	beq.n	8012020 <HAL_XSPI_Init+0x15c>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	4a2e      	ldr	r2, [pc, #184]	@ (80120d4 <HAL_XSPI_Init+0x210>)
 801201c:	4293      	cmp	r3, r2
 801201e:	d10a      	bne.n	8012036 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	691b      	ldr	r3, [r3, #16]
 8012026:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	430a      	orrs	r2, r1
 8012034:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	687a      	ldr	r2, [r7, #4]
 801203c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801203e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	3b01      	subs	r3, #1
 8012050:	021a      	lsls	r2, r3, #8
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	430a      	orrs	r2, r1
 8012058:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	2200      	movs	r2, #0
 8012064:	2120      	movs	r1, #32
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 f887 	bl	801217a <XSPI_WaitFlagStateUntilTimeout>
 801206c:	4603      	mov	r3, r0
 801206e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8012070:	7bfb      	ldrb	r3, [r7, #15]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d16d      	bne.n	8012152 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	68db      	ldr	r3, [r3, #12]
 801207c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	430a      	orrs	r2, r1
 801208a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	4a0e      	ldr	r2, [pc, #56]	@ (80120cc <HAL_XSPI_Init+0x208>)
 8012092:	4293      	cmp	r3, r2
 8012094:	d004      	beq.n	80120a0 <HAL_XSPI_Init+0x1dc>
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	4a0f      	ldr	r2, [pc, #60]	@ (80120d8 <HAL_XSPI_Init+0x214>)
 801209c:	4293      	cmp	r3, r2
 801209e:	d11d      	bne.n	80120dc <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	2200      	movs	r2, #0
 80120aa:	2120      	movs	r1, #32
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 f864 	bl	801217a <XSPI_WaitFlagStateUntilTimeout>
 80120b2:	4603      	mov	r3, r0
 80120b4:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80120b6:	7bfb      	ldrb	r3, [r7, #15]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d00f      	beq.n	80120dc <HAL_XSPI_Init+0x218>
          {
            return status;
 80120bc:	7bfb      	ldrb	r3, [r7, #15]
 80120be:	e049      	b.n	8012154 <HAL_XSPI_Init+0x290>
 80120c0:	420d1400 	.word	0x420d1400
 80120c4:	520d1400 	.word	0x520d1400
 80120c8:	420d2400 	.word	0x420d2400
 80120cc:	420d3400 	.word	0x420d3400
 80120d0:	f8e0c0fc 	.word	0xf8e0c0fc
 80120d4:	520d2400 	.word	0x520d2400
 80120d8:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	689a      	ldr	r2, [r3, #8]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	430a      	orrs	r2, r1
 80120f0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80120fa:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012106:	431a      	orrs	r2, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	430a      	orrs	r2, r1
 801210e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f042 0201 	orr.w	r2, r2, #1
 8012120:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	699b      	ldr	r3, [r3, #24]
 8012126:	2b02      	cmp	r3, #2
 8012128:	d107      	bne.n	801213a <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	689a      	ldr	r2, [r3, #8]
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	f042 0202 	orr.w	r2, r2, #2
 8012138:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	68db      	ldr	r3, [r3, #12]
 801213e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012142:	d103      	bne.n	801214c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2201      	movs	r2, #1
 8012148:	655a      	str	r2, [r3, #84]	@ 0x54
 801214a:	e002      	b.n	8012152 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2202      	movs	r2, #2
 8012150:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8012152:	7bfb      	ldrb	r3, [r7, #15]
}
 8012154:	4618      	mov	r0, r3
 8012156:	3710      	adds	r7, #16
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 801215c:	b480      	push	{r7}
 801215e:	b083      	sub	sp, #12
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	683a      	ldr	r2, [r7, #0]
 801216a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 801216c:	2300      	movs	r3, #0
}
 801216e:	4618      	mov	r0, r3
 8012170:	370c      	adds	r7, #12
 8012172:	46bd      	mov	sp, r7
 8012174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012178:	4770      	bx	lr

0801217a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801217a:	b580      	push	{r7, lr}
 801217c:	b084      	sub	sp, #16
 801217e:	af00      	add	r7, sp, #0
 8012180:	60f8      	str	r0, [r7, #12]
 8012182:	60b9      	str	r1, [r7, #8]
 8012184:	603b      	str	r3, [r7, #0]
 8012186:	4613      	mov	r3, r2
 8012188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 801218a:	e01a      	b.n	80121c2 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801218c:	69bb      	ldr	r3, [r7, #24]
 801218e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012192:	d016      	beq.n	80121c2 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012194:	f7f1 fb6a 	bl	800386c <HAL_GetTick>
 8012198:	4602      	mov	r2, r0
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	1ad3      	subs	r3, r2, r3
 801219e:	69ba      	ldr	r2, [r7, #24]
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d302      	bcc.n	80121aa <XSPI_WaitFlagStateUntilTimeout+0x30>
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10b      	bne.n	80121c2 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121b0:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121b6:	f043 0201 	orr.w	r2, r3, #1
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80121be:	2303      	movs	r3, #3
 80121c0:	e00e      	b.n	80121e0 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	6a1a      	ldr	r2, [r3, #32]
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	4013      	ands	r3, r2
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	bf14      	ite	ne
 80121d0:	2301      	movne	r3, #1
 80121d2:	2300      	moveq	r3, #0
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	461a      	mov	r2, r3
 80121d8:	79fb      	ldrb	r3, [r7, #7]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d1d6      	bne.n	801218c <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80121de:	2300      	movs	r3, #0
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3710      	adds	r7, #16
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}

080121e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80121e8:	b084      	sub	sp, #16
 80121ea:	b580      	push	{r7, lr}
 80121ec:	b084      	sub	sp, #16
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
 80121f2:	f107 001c 	add.w	r0, r7, #28
 80121f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80121fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80121fe:	2b03      	cmp	r3, #3
 8012200:	d105      	bne.n	801220e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	68db      	ldr	r3, [r3, #12]
 8012206:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f000 fa8e 	bl	8012730 <USB_CoreReset>
 8012214:	4603      	mov	r3, r0
 8012216:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8012218:	7fbb      	ldrb	r3, [r7, #30]
 801221a:	2b01      	cmp	r3, #1
 801221c:	d10b      	bne.n	8012236 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	689b      	ldr	r3, [r3, #8]
 8012222:	f043 0208 	orr.w	r2, r3, #8
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	689b      	ldr	r3, [r3, #8]
 801222e:	f043 0220 	orr.w	r2, r3, #32
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8012236:	7bfb      	ldrb	r3, [r7, #15]
}
 8012238:	4618      	mov	r0, r3
 801223a:	3710      	adds	r7, #16
 801223c:	46bd      	mov	sp, r7
 801223e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012242:	b004      	add	sp, #16
 8012244:	4770      	bx	lr

08012246 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012246:	b480      	push	{r7}
 8012248:	b083      	sub	sp, #12
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	689b      	ldr	r3, [r3, #8]
 8012252:	f023 0201 	bic.w	r2, r3, #1
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801225a:	2300      	movs	r3, #0
}
 801225c:	4618      	mov	r0, r3
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b084      	sub	sp, #16
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	460b      	mov	r3, r1
 8012272:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012274:	2300      	movs	r3, #0
 8012276:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012284:	78fb      	ldrb	r3, [r7, #3]
 8012286:	2b01      	cmp	r3, #1
 8012288:	d115      	bne.n	80122b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	68db      	ldr	r3, [r3, #12]
 801228e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012296:	200a      	movs	r0, #10
 8012298:	f7f1 faf4 	bl	8003884 <HAL_Delay>
      ms += 10U;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	330a      	adds	r3, #10
 80122a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 fa36 	bl	8012714 <USB_GetMode>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b01      	cmp	r3, #1
 80122ac:	d01e      	beq.n	80122ec <USB_SetCurrentMode+0x84>
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80122b2:	d9f0      	bls.n	8012296 <USB_SetCurrentMode+0x2e>
 80122b4:	e01a      	b.n	80122ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80122b6:	78fb      	ldrb	r3, [r7, #3]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d115      	bne.n	80122e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	68db      	ldr	r3, [r3, #12]
 80122c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80122c8:	200a      	movs	r0, #10
 80122ca:	f7f1 fadb 	bl	8003884 <HAL_Delay>
      ms += 10U;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	330a      	adds	r3, #10
 80122d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f000 fa1d 	bl	8012714 <USB_GetMode>
 80122da:	4603      	mov	r3, r0
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d005      	beq.n	80122ec <USB_SetCurrentMode+0x84>
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80122e4:	d9f0      	bls.n	80122c8 <USB_SetCurrentMode+0x60>
 80122e6:	e001      	b.n	80122ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80122e8:	2301      	movs	r3, #1
 80122ea:	e005      	b.n	80122f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80122f0:	d101      	bne.n	80122f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80122f2:	2301      	movs	r3, #1
 80122f4:	e000      	b.n	80122f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012300:	b084      	sub	sp, #16
 8012302:	b580      	push	{r7, lr}
 8012304:	b086      	sub	sp, #24
 8012306:	af00      	add	r7, sp, #0
 8012308:	6078      	str	r0, [r7, #4]
 801230a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801230e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012312:	2300      	movs	r3, #0
 8012314:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801231a:	2300      	movs	r3, #0
 801231c:	613b      	str	r3, [r7, #16]
 801231e:	e009      	b.n	8012334 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012320:	687a      	ldr	r2, [r7, #4]
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	3340      	adds	r3, #64	@ 0x40
 8012326:	009b      	lsls	r3, r3, #2
 8012328:	4413      	add	r3, r2
 801232a:	2200      	movs	r2, #0
 801232c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	3301      	adds	r3, #1
 8012332:	613b      	str	r3, [r7, #16]
 8012334:	693b      	ldr	r3, [r7, #16]
 8012336:	2b0e      	cmp	r3, #14
 8012338:	d9f2      	bls.n	8012320 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801233e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012346:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801234a:	2b00      	cmp	r3, #0
 801234c:	d11c      	bne.n	8012388 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	68fa      	ldr	r2, [r7, #12]
 8012358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801235c:	f043 0302 	orr.w	r3, r3, #2
 8012360:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012366:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012372:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801237e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	639a      	str	r2, [r3, #56]	@ 0x38
 8012386:	e011      	b.n	80123ac <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801238c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012398:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80123b2:	461a      	mov	r2, r3
 80123b4:	2300      	movs	r3, #0
 80123b6:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80123b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80123bc:	2b03      	cmp	r3, #3
 80123be:	d10d      	bne.n	80123dc <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80123c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d104      	bne.n	80123d2 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80123c8:	2100      	movs	r1, #0
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 f968 	bl	80126a0 <USB_SetDevSpeed>
 80123d0:	e008      	b.n	80123e4 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80123d2:	2101      	movs	r1, #1
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 f963 	bl	80126a0 <USB_SetDevSpeed>
 80123da:	e003      	b.n	80123e4 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80123dc:	2103      	movs	r1, #3
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f000 f95e 	bl	80126a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80123e4:	2110      	movs	r1, #16
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f000 f8fa 	bl	80125e0 <USB_FlushTxFifo>
 80123ec:	4603      	mov	r3, r0
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d001      	beq.n	80123f6 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80123f2:	2301      	movs	r3, #1
 80123f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f000 f924 	bl	8012644 <USB_FlushRxFifo>
 80123fc:	4603      	mov	r3, r0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d001      	beq.n	8012406 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8012402:	2301      	movs	r3, #1
 8012404:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801240c:	461a      	mov	r2, r3
 801240e:	2300      	movs	r3, #0
 8012410:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012418:	461a      	mov	r2, r3
 801241a:	2300      	movs	r3, #0
 801241c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012424:	461a      	mov	r2, r3
 8012426:	2300      	movs	r3, #0
 8012428:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801242a:	2300      	movs	r3, #0
 801242c:	613b      	str	r3, [r7, #16]
 801242e:	e043      	b.n	80124b8 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	015a      	lsls	r2, r3, #5
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	4413      	add	r3, r2
 8012438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012442:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012446:	d118      	bne.n	801247a <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d10a      	bne.n	8012464 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	015a      	lsls	r2, r3, #5
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	4413      	add	r3, r2
 8012456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801245a:	461a      	mov	r2, r3
 801245c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012460:	6013      	str	r3, [r2, #0]
 8012462:	e013      	b.n	801248c <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	015a      	lsls	r2, r3, #5
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	4413      	add	r3, r2
 801246c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012470:	461a      	mov	r2, r3
 8012472:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012476:	6013      	str	r3, [r2, #0]
 8012478:	e008      	b.n	801248c <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	015a      	lsls	r2, r3, #5
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	4413      	add	r3, r2
 8012482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012486:	461a      	mov	r2, r3
 8012488:	2300      	movs	r3, #0
 801248a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	015a      	lsls	r2, r3, #5
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	4413      	add	r3, r2
 8012494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012498:	461a      	mov	r2, r3
 801249a:	2300      	movs	r3, #0
 801249c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	015a      	lsls	r2, r3, #5
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	4413      	add	r3, r2
 80124a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124aa:	461a      	mov	r2, r3
 80124ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80124b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	3301      	adds	r3, #1
 80124b6:	613b      	str	r3, [r7, #16]
 80124b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80124bc:	461a      	mov	r2, r3
 80124be:	693b      	ldr	r3, [r7, #16]
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d3b5      	bcc.n	8012430 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80124c4:	2300      	movs	r3, #0
 80124c6:	613b      	str	r3, [r7, #16]
 80124c8:	e043      	b.n	8012552 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	015a      	lsls	r2, r3, #5
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	4413      	add	r3, r2
 80124d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80124dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80124e0:	d118      	bne.n	8012514 <USB_DevInit+0x214>
    {
      if (i == 0U)
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d10a      	bne.n	80124fe <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	015a      	lsls	r2, r3, #5
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	4413      	add	r3, r2
 80124f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124f4:	461a      	mov	r2, r3
 80124f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80124fa:	6013      	str	r3, [r2, #0]
 80124fc:	e013      	b.n	8012526 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	015a      	lsls	r2, r3, #5
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	4413      	add	r3, r2
 8012506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801250a:	461a      	mov	r2, r3
 801250c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012510:	6013      	str	r3, [r2, #0]
 8012512:	e008      	b.n	8012526 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	015a      	lsls	r2, r3, #5
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	4413      	add	r3, r2
 801251c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012520:	461a      	mov	r2, r3
 8012522:	2300      	movs	r3, #0
 8012524:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	015a      	lsls	r2, r3, #5
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	4413      	add	r3, r2
 801252e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012532:	461a      	mov	r2, r3
 8012534:	2300      	movs	r3, #0
 8012536:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012538:	693b      	ldr	r3, [r7, #16]
 801253a:	015a      	lsls	r2, r3, #5
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	4413      	add	r3, r2
 8012540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012544:	461a      	mov	r2, r3
 8012546:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801254a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	3301      	adds	r3, #1
 8012550:	613b      	str	r3, [r7, #16]
 8012552:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012556:	461a      	mov	r2, r3
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	4293      	cmp	r3, r2
 801255c:	d3b5      	bcc.n	80124ca <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012564:	691b      	ldr	r3, [r3, #16]
 8012566:	68fa      	ldr	r2, [r7, #12]
 8012568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801256c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012570:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2200      	movs	r2, #0
 8012576:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801257e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012580:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012584:	2b00      	cmp	r3, #0
 8012586:	d105      	bne.n	8012594 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	699b      	ldr	r3, [r3, #24]
 801258c:	f043 0210 	orr.w	r2, r3, #16
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	699a      	ldr	r2, [r3, #24]
 8012598:	4b10      	ldr	r3, [pc, #64]	@ (80125dc <USB_DevInit+0x2dc>)
 801259a:	4313      	orrs	r3, r2
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80125a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d005      	beq.n	80125b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	699b      	ldr	r3, [r3, #24]
 80125ac:	f043 0208 	orr.w	r2, r3, #8
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80125b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80125b8:	2b01      	cmp	r3, #1
 80125ba:	d107      	bne.n	80125cc <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	699b      	ldr	r3, [r3, #24]
 80125c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80125c4:	f043 0304 	orr.w	r3, r3, #4
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80125cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3718      	adds	r7, #24
 80125d2:	46bd      	mov	sp, r7
 80125d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80125d8:	b004      	add	sp, #16
 80125da:	4770      	bx	lr
 80125dc:	803c3800 	.word	0x803c3800

080125e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80125e0:	b480      	push	{r7}
 80125e2:	b085      	sub	sp, #20
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80125ea:	2300      	movs	r3, #0
 80125ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	3301      	adds	r3, #1
 80125f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80125fa:	d901      	bls.n	8012600 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80125fc:	2303      	movs	r3, #3
 80125fe:	e01b      	b.n	8012638 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	691b      	ldr	r3, [r3, #16]
 8012604:	2b00      	cmp	r3, #0
 8012606:	daf2      	bge.n	80125ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012608:	2300      	movs	r3, #0
 801260a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	019b      	lsls	r3, r3, #6
 8012610:	f043 0220 	orr.w	r2, r3, #32
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	3301      	adds	r3, #1
 801261c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012624:	d901      	bls.n	801262a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012626:	2303      	movs	r3, #3
 8012628:	e006      	b.n	8012638 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	691b      	ldr	r3, [r3, #16]
 801262e:	f003 0320 	and.w	r3, r3, #32
 8012632:	2b20      	cmp	r3, #32
 8012634:	d0f0      	beq.n	8012618 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012636:	2300      	movs	r3, #0
}
 8012638:	4618      	mov	r0, r3
 801263a:	3714      	adds	r7, #20
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr

08012644 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012644:	b480      	push	{r7}
 8012646:	b085      	sub	sp, #20
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801264c:	2300      	movs	r3, #0
 801264e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	3301      	adds	r3, #1
 8012654:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801265c:	d901      	bls.n	8012662 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801265e:	2303      	movs	r3, #3
 8012660:	e018      	b.n	8012694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	691b      	ldr	r3, [r3, #16]
 8012666:	2b00      	cmp	r3, #0
 8012668:	daf2      	bge.n	8012650 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801266a:	2300      	movs	r3, #0
 801266c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2210      	movs	r2, #16
 8012672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	3301      	adds	r3, #1
 8012678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012680:	d901      	bls.n	8012686 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012682:	2303      	movs	r3, #3
 8012684:	e006      	b.n	8012694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	691b      	ldr	r3, [r3, #16]
 801268a:	f003 0310 	and.w	r3, r3, #16
 801268e:	2b10      	cmp	r3, #16
 8012690:	d0f0      	beq.n	8012674 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012692:	2300      	movs	r3, #0
}
 8012694:	4618      	mov	r0, r3
 8012696:	3714      	adds	r7, #20
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b085      	sub	sp, #20
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	460b      	mov	r3, r1
 80126aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	78fb      	ldrb	r3, [r7, #3]
 80126ba:	68f9      	ldr	r1, [r7, #12]
 80126bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80126c0:	4313      	orrs	r3, r2
 80126c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3714      	adds	r7, #20
 80126ca:	46bd      	mov	sp, r7
 80126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d0:	4770      	bx	lr

080126d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80126d2:	b480      	push	{r7}
 80126d4:	b085      	sub	sp, #20
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	68fa      	ldr	r2, [r7, #12]
 80126e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80126ec:	f023 0303 	bic.w	r3, r3, #3
 80126f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	68fa      	ldr	r2, [r7, #12]
 80126fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012700:	f043 0302 	orr.w	r3, r3, #2
 8012704:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012706:	2300      	movs	r3, #0
}
 8012708:	4618      	mov	r0, r3
 801270a:	3714      	adds	r7, #20
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr

08012714 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012714:	b480      	push	{r7}
 8012716:	b083      	sub	sp, #12
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	695b      	ldr	r3, [r3, #20]
 8012720:	f003 0301 	and.w	r3, r3, #1
}
 8012724:	4618      	mov	r0, r3
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272e:	4770      	bx	lr

08012730 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012730:	b480      	push	{r7}
 8012732:	b085      	sub	sp, #20
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012738:	2300      	movs	r3, #0
 801273a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	3301      	adds	r3, #1
 8012740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012748:	d901      	bls.n	801274e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801274a:	2303      	movs	r3, #3
 801274c:	e01b      	b.n	8012786 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	691b      	ldr	r3, [r3, #16]
 8012752:	2b00      	cmp	r3, #0
 8012754:	daf2      	bge.n	801273c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012756:	2300      	movs	r3, #0
 8012758:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	691b      	ldr	r3, [r3, #16]
 801275e:	f043 0201 	orr.w	r2, r3, #1
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	3301      	adds	r3, #1
 801276a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012772:	d901      	bls.n	8012778 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012774:	2303      	movs	r3, #3
 8012776:	e006      	b.n	8012786 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	691b      	ldr	r3, [r3, #16]
 801277c:	f003 0301 	and.w	r3, r3, #1
 8012780:	2b01      	cmp	r3, #1
 8012782:	d0f0      	beq.n	8012766 <USB_CoreReset+0x36>

  return HAL_OK;
 8012784:	2300      	movs	r3, #0
}
 8012786:	4618      	mov	r0, r3
 8012788:	3714      	adds	r7, #20
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr

08012792 <memset>:
 8012792:	4402      	add	r2, r0
 8012794:	4603      	mov	r3, r0
 8012796:	4293      	cmp	r3, r2
 8012798:	d100      	bne.n	801279c <memset+0xa>
 801279a:	4770      	bx	lr
 801279c:	f803 1b01 	strb.w	r1, [r3], #1
 80127a0:	e7f9      	b.n	8012796 <memset+0x4>
	...

080127a4 <__libc_init_array>:
 80127a4:	b570      	push	{r4, r5, r6, lr}
 80127a6:	4d0d      	ldr	r5, [pc, #52]	@ (80127dc <__libc_init_array+0x38>)
 80127a8:	2600      	movs	r6, #0
 80127aa:	4c0d      	ldr	r4, [pc, #52]	@ (80127e0 <__libc_init_array+0x3c>)
 80127ac:	1b64      	subs	r4, r4, r5
 80127ae:	10a4      	asrs	r4, r4, #2
 80127b0:	42a6      	cmp	r6, r4
 80127b2:	d109      	bne.n	80127c8 <__libc_init_array+0x24>
 80127b4:	4d0b      	ldr	r5, [pc, #44]	@ (80127e4 <__libc_init_array+0x40>)
 80127b6:	2600      	movs	r6, #0
 80127b8:	4c0b      	ldr	r4, [pc, #44]	@ (80127e8 <__libc_init_array+0x44>)
 80127ba:	f000 f817 	bl	80127ec <_init>
 80127be:	1b64      	subs	r4, r4, r5
 80127c0:	10a4      	asrs	r4, r4, #2
 80127c2:	42a6      	cmp	r6, r4
 80127c4:	d105      	bne.n	80127d2 <__libc_init_array+0x2e>
 80127c6:	bd70      	pop	{r4, r5, r6, pc}
 80127c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80127cc:	3601      	adds	r6, #1
 80127ce:	4798      	blx	r3
 80127d0:	e7ee      	b.n	80127b0 <__libc_init_array+0xc>
 80127d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80127d6:	3601      	adds	r6, #1
 80127d8:	4798      	blx	r3
 80127da:	e7f2      	b.n	80127c2 <__libc_init_array+0x1e>
 80127dc:	0801290c 	.word	0x0801290c
 80127e0:	0801290c 	.word	0x0801290c
 80127e4:	0801290c 	.word	0x0801290c
 80127e8:	08012910 	.word	0x08012910

080127ec <_init>:
 80127ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ee:	bf00      	nop
 80127f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127f2:	bc08      	pop	{r3}
 80127f4:	469e      	mov	lr, r3
 80127f6:	4770      	bx	lr

080127f8 <_fini>:
 80127f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127fa:	bf00      	nop
 80127fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127fe:	bc08      	pop	{r3}
 8012800:	469e      	mov	lr, r3
 8012802:	4770      	bx	lr
